
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dfb0  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0800dfb0  0c00dfb0  0001dfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  3 .ram_code     00000000  10000800  10000800  00020ebc  2**0
                  CONTENTS
  4 PSRAM_DATA    00000000  10000800  10000800  00020ebc  2**0
                  CONTENTS
  5 PSRAM_BSS     00000000  10000800  10000800  00020ebc  2**0
                  CONTENTS
  6 .data         00000e9c  20000000  0c00dfb8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .got          00000014  20000e9c  0c00ee54  00020e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .got.plt      0000000c  20000eb0  0c00ee68  00020eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  20000ebc  0c00ee74  00020ebc  2**2
                  ALLOC
 10 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
 11 DSRAM2_DATA   00000000  30000000  30000000  00020ebc  2**0
                  CONTENTS
 12 DSRAM2_BSS    00000e00  30000000  0c00ee74  00030000  2**2
                  ALLOC
 13 .stab         000000e4  00000000  00000000  00020ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .stabstr      000001ed  00000000  00000000  00020fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001920  00000000  00000000  00021190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0006ea3f  00000000  00000000  00022ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00010cd9  00000000  00000000  000914ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021087  00000000  00000000  000a21c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00003950  00000000  00000000  000c3250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009541e  00000000  00000000  000c6ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001cd09  00000000  00000000  0015bfbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00003990  00000000  00000000  00178cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .build_attributes 00001455  00000000  00000000  0017c657  2**0
                  CONTENTS, READONLY
 24 .debug_macro  00024b84  00000000  00000000  0017daac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 ed 03 00 08     ................
 8000010:	c9 0a 00 08 ef 03 00 08 f1 03 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	f5 03 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00dfb8 	.word	0x0c00dfb8
 800024c:	20000000 	.word	0x20000000
 8000250:	00000e9c 	.word	0x00000e9c
 8000254:	0c00ee74 	.word	0x0c00ee74
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00dfb8 	.word	0x0c00dfb8
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00dfb8 	.word	0x0c00dfb8
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000ebc 	.word	0x20000ebc
 800027c:	00000764 	.word	0x00000764
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	0800469d 	.word	0x0800469d
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	0800a3ad 	.word	0x0800a3ad
    ldr  r0, =main
 80002ac:	080002b5 	.word	0x080002b5

080002b0 <CAN0_0_IRQHandler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <CAN0_0_IRQHandler>
	...

080002b4 <main>:
#include "packetizer.h"
//#include "crypto.h"
#include "randombytes_salsa20XMC_random.h"
#include "sodium.h"

int main(void) {
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	b08a      	sub	sp, #40	; 0x28
 80002b8:	4b25      	ldr	r3, [pc, #148]	; (8000350 <main+0x9c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	9309      	str	r3, [sp, #36]	; 0x24
 80002be:	f04f 0300 	mov.w	r3, #0
  uint8_t key[8] = {0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42};
 80002c2:	4a24      	ldr	r2, [pc, #144]	; (8000354 <main+0xa0>)
 80002c4:	ab07      	add	r3, sp, #28
 80002c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002ca:	e883 0003 	stmia.w	r3, {r0, r1}
  pt_s plaintext = { 0 };
 80002ce:	2300      	movs	r3, #0
 80002d0:	9304      	str	r3, [sp, #16]
 80002d2:	9305      	str	r3, [sp, #20]
 80002d4:	9306      	str	r3, [sp, #24]
  ct_s ciphertext = { 0 };
 80002d6:	9302      	str	r3, [sp, #8]
 80002d8:	9303      	str	r3, [sp, #12]

  USB_Init();
 80002da:	f000 f893 	bl	8000404 <USB_Init>

  randombytes_set_implementation(&randombytes_salsa20XMC_implementation);
 80002de:	481e      	ldr	r0, [pc, #120]	; (8000358 <main+0xa4>)
 80002e0:	f004 fc74 	bl	8004bcc <randombytes_set_implementation>
  sodium_init();
 80002e4:	f004 fd2c 	bl	8004d40 <sodium_init>
    /* Consumes incoming data and parses it until we received a valid packet.
       If so, it will fill the plaintextJob struct with the appropriate information. */
    if(packetizerReceive(&plaintext) == 0) {
      /* If the sender did not sent a nonce, generate one */
      if(plaintext.nonce == NULL) {
        plaintext.nonce = malloc(CRYPTO_NONCE_BYTES);
 80002e8:	2618      	movs	r6, #24
        for(size_t i = 0; i < CRYPTO_NONCE_BYTES; i++) {
          plaintext.nonce[i] = rand() & UINT8_MAX;
        }
      }
      /* Now encrypt the plaintext */
      if(crypto_secretbox_easy(ciphertext.text, plaintext.text, plaintext.textLen, plaintext.nonce,
 80002ea:	2500      	movs	r5, #0
 80002ec:	e014      	b.n	8000318 <main+0x64>
        plaintext.nonce = malloc(CRYPTO_NONCE_BYTES);
 80002ee:	4630      	mov	r0, r6
 80002f0:	f00a f880 	bl	800a3f4 <malloc>
 80002f4:	9006      	str	r0, [sp, #24]
        for(size_t i = 0; i < CRYPTO_NONCE_BYTES; i++) {
 80002f6:	2400      	movs	r4, #0
          plaintext.nonce[i] = rand() & UINT8_MAX;
 80002f8:	f00a fc9c 	bl	800ac34 <rand>
 80002fc:	9b06      	ldr	r3, [sp, #24]
 80002fe:	5518      	strb	r0, [r3, r4]
        for(size_t i = 0; i < CRYPTO_NONCE_BYTES; i++) {
 8000300:	3401      	adds	r4, #1
 8000302:	2c18      	cmp	r4, #24
 8000304:	d1f8      	bne.n	80002f8 <main+0x44>
 8000306:	e00f      	b.n	8000328 <main+0x74>
        ciphertext.textLen = getCiphertextLength(plaintext.textLen);
        /* Finally, if encryption was successful, send ciphertext back in a packet */
        packetizerSend(&ciphertext);
      }
      /* Free all buffers that were allocated in the meantime */
      free(plaintext.text);
 8000308:	9804      	ldr	r0, [sp, #16]
 800030a:	f00a f87b 	bl	800a404 <free>
      plaintext.text = NULL;
 800030e:	9504      	str	r5, [sp, #16]
      free(ciphertext.text);
 8000310:	9802      	ldr	r0, [sp, #8]
 8000312:	f00a f877 	bl	800a404 <free>
      ciphertext.text = NULL;
 8000316:	9502      	str	r5, [sp, #8]
    if(packetizerReceive(&plaintext) == 0) {
 8000318:	a804      	add	r0, sp, #16
 800031a:	f000 f9f2 	bl	8000702 <packetizerReceive>
 800031e:	2800      	cmp	r0, #0
 8000320:	d1fa      	bne.n	8000318 <main+0x64>
      if(plaintext.nonce == NULL) {
 8000322:	9b06      	ldr	r3, [sp, #24]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0e2      	beq.n	80002ee <main+0x3a>
      if(crypto_secretbox_easy(ciphertext.text, plaintext.text, plaintext.textLen, plaintext.nonce,
 8000328:	ab07      	add	r3, sp, #28
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	9b06      	ldr	r3, [sp, #24]
 800032e:	9300      	str	r3, [sp, #0]
 8000330:	9a05      	ldr	r2, [sp, #20]
 8000332:	462b      	mov	r3, r5
 8000334:	9904      	ldr	r1, [sp, #16]
 8000336:	9802      	ldr	r0, [sp, #8]
 8000338:	f004 fb39 	bl	80049ae <crypto_secretbox_easy>
 800033c:	2800      	cmp	r0, #0
 800033e:	d1e3      	bne.n	8000308 <main+0x54>
        ciphertext.textLen = getCiphertextLength(plaintext.textLen);
 8000340:	9805      	ldr	r0, [sp, #20]
 8000342:	f000 fa47 	bl	80007d4 <getCiphertextLength>
 8000346:	9003      	str	r0, [sp, #12]
        packetizerSend(&ciphertext);
 8000348:	a802      	add	r0, sp, #8
 800034a:	f000 f9e9 	bl	8000720 <packetizerSend>
 800034e:	e7db      	b.n	8000308 <main+0x54>
 8000350:	0800d8b0 	.word	0x0800d8b0
 8000354:	0800d8a4 	.word	0x0800d8a4
 8000358:	20000468 	.word	0x20000468

0800035c <SystemCoreClockSetup>:
#include "VirtualSerial.h"
#include "MPUeasy.h"

/* This function is only weakly declared in system_XMC4500.c so one can simply reimplement it if
   necessary. The values to use are copied from Infineon's VirtualSerial example. */
void SystemCoreClockSetup(void) {
 800035c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800035e:	b089      	sub	sp, #36	; 0x24
  XMC_SCU_CLOCK_CONFIG_t clock_config = {
 8000360:	2500      	movs	r5, #0
 8000362:	9504      	str	r5, [sp, #16]
 8000364:	9505      	str	r5, [sp, #20]
 8000366:	2350      	movs	r3, #80	; 0x50
 8000368:	f88d 300c 	strb.w	r3, [sp, #12]
 800036c:	2702      	movs	r7, #2
 800036e:	f88d 700d 	strb.w	r7, [sp, #13]
 8000372:	2604      	movs	r6, #4
 8000374:	f88d 600e 	strb.w	r6, [sp, #14]
 8000378:	2401      	movs	r4, #1
 800037a:	f88d 400f 	strb.w	r4, [sp, #15]
 800037e:	f88d 4012 	strb.w	r4, [sp, #18]
 8000382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000386:	9306      	str	r3, [sp, #24]
 8000388:	f88d 401c 	strb.w	r4, [sp, #28]
 800038c:	f88d 401d 	strb.w	r4, [sp, #29]
 8000390:	f88d 401e 	strb.w	r4, [sp, #30]
 8000394:	f88d 401f 	strb.w	r4, [sp, #31]
    .fccu_clkdiv = 1,
    .fperipheral_clkdiv = 1
    };

  /* General setup of clock tree with recommended default values, see above */
  XMC_SCU_CLOCK_Init(&clock_config);
 8000398:	a803      	add	r0, sp, #12
 800039a:	f003 fb2d 	bl	80039f8 <XMC_SCU_CLOCK_Init>

  /* Enable clock to USB peripheral */
  XMC_SCU_CLOCK_EnableUsbPll();
 800039e:	f003 f823 	bl	80033e8 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(2, 64);
 80003a2:	2140      	movs	r1, #64	; 0x40
 80003a4:	4638      	mov	r0, r7
 80003a6:	f003 f833 	bl	8003410 <XMC_SCU_CLOCK_StartUsbPll>
  XMC_SCU_CLOCK_SetUsbClockDivider(4);
 80003aa:	4630      	mov	r0, r6
 80003ac:	f002 ffb4 	bl	8003318 <XMC_SCU_CLOCK_SetUsbClockDivider>
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80003b0:	4628      	mov	r0, r5
 80003b2:	f002 ff33 	bl	800321c <XMC_SCU_CLOCK_SetUsbClockSource>
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 80003b6:	4620      	mov	r0, r4
 80003b8:	f002 ffda 	bl	8003370 <XMC_SCU_CLOCK_EnableClock>

  /* Update clock status information */
  SystemCoreClockUpdate();
 80003bc:	f004 f858 	bl	8004470 <SystemCoreClockUpdate>

  /* Secretly activate MPU without calling any function with telltale name */
  MPUconfig_t Stack = \
 80003c0:	4a08      	ldr	r2, [pc, #32]	; (80003e4 <SystemCoreClockSetup+0x88>)
 80003c2:	466b      	mov	r3, sp
 80003c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80003c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    {.baseAddress=(void *) 0x10000000, .size=16, .priority=1, \
     .permissions=MPUeasyENABLEREGION | MPUeasyXN | MPUeasy_RW_RW};
  configMPU(Stack);
 80003ca:	f000 fb38 	bl	8000a3e <configMPU>
  enableMPU(1);
 80003ce:	4620      	mov	r0, r4
 80003d0:	f000 fb11 	bl	80009f6 <enableMPU>

  /* Pull P2.10 low to allow the ESS control board to recognize if a system reset was initiated. */
  *((uint32_t *) (0x48028200+0x18)) |= 0x18<<19; /* set P2.10 as open-drain output */
 80003d4:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <SystemCoreClockSetup+0x8c>)
 80003d6:	6813      	ldr	r3, [r2, #0]
 80003d8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80003dc:	6013      	str	r3, [r2, #0]
}
 80003de:	b009      	add	sp, #36	; 0x24
 80003e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e2:	bf00      	nop
 80003e4:	0800d8b4 	.word	0x0800d8b4
 80003e8:	48028218 	.word	0x48028218

080003ec <HardFault_Handler>:

/* Add individual handlers so students can recognize in which exception they are trapped */
void HardFault_Handler(void) {
  while(1);
 80003ec:	e7fe      	b.n	80003ec <HardFault_Handler>

080003ee <BusFault_Handler>:
}

void BusFault_Handler(void) {
  while(1);
 80003ee:	e7fe      	b.n	80003ee <BusFault_Handler>

080003f0 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
  while(1);
 80003f0:	e7fe      	b.n	80003f0 <UsageFault_Handler>
	...

080003f4 <USB0_0_IRQHandler>:
/*******************************************************************************
**                     Public Function Definitions                            **
*******************************************************************************/

void USB0_0_IRQHandler(void)
{
 80003f4:	b508      	push	{r3, lr}
  XMC_USBD_IRQHandler(&USB_runtime);
 80003f6:	4802      	ldr	r0, [pc, #8]	; (8000400 <USB0_0_IRQHandler+0xc>)
 80003f8:	f001 fe02 	bl	8002000 <XMC_USBD_IRQHandler>
}
 80003fc:	bd08      	pop	{r3, pc}
 80003fe:	bf00      	nop
 8000400:	20000000 	.word	0x20000000

08000404 <USB_Init>:

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void)
{
 8000404:	b508      	push	{r3, lr}
  USBD_Initialize(&USB_runtime);
 8000406:	4816      	ldr	r0, [pc, #88]	; (8000460 <USB_Init+0x5c>)
 8000408:	f000 ffee 	bl	80013e8 <USBD_Initialize>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <USB_Init+0x60>)
 800040e:	68da      	ldr	r2, [r3, #12]
 8000410:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000414:	f1c2 0107 	rsb	r1, r2, #7
 8000418:	2906      	cmp	r1, #6
 800041a:	bf28      	it	cs
 800041c:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800041e:	1d93      	adds	r3, r2, #6
 8000420:	2b06      	cmp	r3, #6
 8000422:	bf8c      	ite	hi
 8000424:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8000428:	2200      	movls	r2, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800042a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800042e:	408b      	lsls	r3, r1
 8000430:	43db      	mvns	r3, r3
 8000432:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	b2db      	uxtb	r3, r3
 8000438:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <USB_Init+0x64>)
 800043a:	f882 336b 	strb.w	r3, [r2, #875]	; 0x36b
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800043e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000442:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000446:	60d3      	str	r3, [r2, #12]
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0));
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
  NVIC_EnableIRQ(USB0_0_IRQn);

  /* LUFA Class Line Encoding*/
  VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <USB_Init+0x5c>)
 800044a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  VirtualSerial_CDC_Interface.State.LineEncoding.DataBits = 8;
 8000450:	2208      	movs	r2, #8
 8000452:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <USB_Init+0x68>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4798      	blx	r3

  /* USB Connection*/
  USB_Attach();
	
}
 800045e:	bd08      	pop	{r3, pc}
 8000460:	20000000 	.word	0x20000000
 8000464:	e000ed00 	.word	0xe000ed00
 8000468:	e000e100 	.word	0xe000e100
 800046c:	20001244 	.word	0x20001244

08000470 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
}
 8000470:	4770      	bx	lr

08000472 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
}
 8000472:	4770      	bx	lr

08000474 <EVENT_USB_Device_Reset>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void)
{
 8000474:	b508      	push	{r3, lr}
  if(device.IsConfigured)
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <EVENT_USB_Device_Reset+0x24>)
 8000478:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800047c:	f013 0f01 	tst.w	r3, #1
 8000480:	d100      	bne.n	8000484 <EVENT_USB_Device_Reset+0x10>
  {
    USB_Init();
    device.IsConfigured=0;
  }
}
 8000482:	bd08      	pop	{r3, pc}
    USB_Init();
 8000484:	f7ff ffbe 	bl	8000404 <USB_Init>
    device.IsConfigured=0;
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <EVENT_USB_Device_Reset+0x24>)
 800048a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 800048e:	f36f 0200 	bfc	r2, #0, #1
 8000492:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
}
 8000496:	e7f4      	b.n	8000482 <EVENT_USB_Device_Reset+0xe>
 8000498:	20001244 	.word	0x20001244

0800049c <EVENT_USB_Device_ConfigurationChanged>:

/* Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 800049c:	b508      	push	{r3, lr}
  USBD_SetEndpointBuffer(CDC_NOTIFICATION_EPADDR, ep2_buf, 64);
 800049e:	2240      	movs	r2, #64	; 0x40
 80004a0:	490c      	ldr	r1, [pc, #48]	; (80004d4 <EVENT_USB_Device_ConfigurationChanged+0x38>)
 80004a2:	2081      	movs	r0, #129	; 0x81
 80004a4:	f000 ffea 	bl	800147c <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_TX_EPADDR, ep3_buf, 64);
 80004a8:	2240      	movs	r2, #64	; 0x40
 80004aa:	490b      	ldr	r1, [pc, #44]	; (80004d8 <EVENT_USB_Device_ConfigurationChanged+0x3c>)
 80004ac:	2082      	movs	r0, #130	; 0x82
 80004ae:	f000 ffe5 	bl	800147c <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_RX_EPADDR, ep4_buf, 64);
 80004b2:	2240      	movs	r2, #64	; 0x40
 80004b4:	4909      	ldr	r1, [pc, #36]	; (80004dc <EVENT_USB_Device_ConfigurationChanged+0x40>)
 80004b6:	2003      	movs	r0, #3
 80004b8:	f000 ffe0 	bl	800147c <USBD_SetEndpointBuffer>
  CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 80004bc:	4808      	ldr	r0, [pc, #32]	; (80004e0 <EVENT_USB_Device_ConfigurationChanged+0x44>)
 80004be:	f002 f82d 	bl	800251c <CDC_Device_ConfigureEndpoints>

  device.IsConfigured = 1;
 80004c2:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <EVENT_USB_Device_ConfigurationChanged+0x48>)
 80004c4:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 80004d0:	bd08      	pop	{r3, pc}
 80004d2:	bf00      	nop
 80004d4:	20000fc4 	.word	0x20000fc4
 80004d8:	20001004 	.word	0x20001004
 80004dc:	20000f84 	.word	0x20000f84
 80004e0:	20000010 	.word	0x20000010
 80004e4:	20001244 	.word	0x20001244

080004e8 <EVENT_USB_Device_ControlRequest>:

/* Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest()
{
 80004e8:	b508      	push	{r3, lr}
  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 80004ea:	4802      	ldr	r0, [pc, #8]	; (80004f4 <EVENT_USB_Device_ControlRequest+0xc>)
 80004ec:	f002 f9dc 	bl	80028a8 <CDC_Device_ProcessControlRequest>
}
 80004f0:	bd08      	pop	{r3, pc}
 80004f2:	bf00      	nop
 80004f4:	20000010 	.word	0x20000010

080004f8 <EVENT_USB_Device_StartOfFrame>:

void EVENT_USB_Device_StartOfFrame(void)
{
}
 80004f8:	4770      	bx	lr

080004fa <EVENT_USB_Device_WakeUp>:

void EVENT_USB_Device_WakeUp(void)
{
}
 80004fa:	4770      	bx	lr

080004fc <EVENT_USB_Device_Suspend>:

void EVENT_USB_Device_Suspend(void)
{
}
 80004fc:	4770      	bx	lr
	...

08000500 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 8000500:	0a03      	lsrs	r3, r0, #8
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 8000502:	2b02      	cmp	r3, #2
 8000504:	d016      	beq.n	8000534 <CALLBACK_USB_GetDescriptor+0x34>
 8000506:	2b03      	cmp	r3, #3
 8000508:	d008      	beq.n	800051c <CALLBACK_USB_GetDescriptor+0x1c>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d003      	beq.n	8000516 <CALLBACK_USB_GetDescriptor+0x16>
	uint16_t    Size    = NO_DESCRIPTOR;
 800050e:	2000      	movs	r0, #0
	const void* Address = NULL;
 8000510:	4603      	mov	r3, r0
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
 8000512:	6013      	str	r3, [r2, #0]
	return Size;
}
 8000514:	4770      	bx	lr
	switch (DescriptorType)
 8000516:	2012      	movs	r0, #18
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <CALLBACK_USB_GetDescriptor+0x48>)
 800051a:	e7fa      	b.n	8000512 <CALLBACK_USB_GetDescriptor+0x12>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 800051c:	b2c0      	uxtb	r0, r0
 800051e:	2801      	cmp	r0, #1
 8000520:	d00b      	beq.n	800053a <CALLBACK_USB_GetDescriptor+0x3a>
 8000522:	2802      	cmp	r0, #2
 8000524:	d00c      	beq.n	8000540 <CALLBACK_USB_GetDescriptor+0x40>
 8000526:	b110      	cbz	r0, 800052e <CALLBACK_USB_GetDescriptor+0x2e>
	uint16_t    Size    = NO_DESCRIPTOR;
 8000528:	2000      	movs	r0, #0
	const void* Address = NULL;
 800052a:	4603      	mov	r3, r0
 800052c:	e7f1      	b.n	8000512 <CALLBACK_USB_GetDescriptor+0x12>
 800052e:	2004      	movs	r0, #4
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <CALLBACK_USB_GetDescriptor+0x4c>)
 8000532:	e7ee      	b.n	8000512 <CALLBACK_USB_GetDescriptor+0x12>
			Size    = sizeof(USB_Descriptor_Configuration_t);
 8000534:	203e      	movs	r0, #62	; 0x3e
			Address = &ConfigurationDescriptor;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <CALLBACK_USB_GetDescriptor+0x50>)
 8000538:	e7eb      	b.n	8000512 <CALLBACK_USB_GetDescriptor+0x12>
					Size    = ManufacturerString.Header.Size;
 800053a:	2058      	movs	r0, #88	; 0x58
					Address = &ManufacturerString;
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <CALLBACK_USB_GetDescriptor+0x54>)
 800053e:	e7e8      	b.n	8000512 <CALLBACK_USB_GetDescriptor+0x12>
					Size    = ProductString.Header.Size;
 8000540:	2020      	movs	r0, #32
					Address = &ProductString;
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <CALLBACK_USB_GetDescriptor+0x58>)
 8000544:	e7e5      	b.n	8000512 <CALLBACK_USB_GetDescriptor+0x12>
 8000546:	bf00      	nop
 8000548:	0800d8c0 	.word	0x0800d8c0
 800054c:	0800d994 	.word	0x0800d994
 8000550:	0800d8d4 	.word	0x0800d8d4
 8000554:	0800d938 	.word	0x0800d938
 8000558:	0800d914 	.word	0x0800d914

0800055c <packetizerReceiveByteBlocking>:

#include "VirtualSerial.h"
#include "base64url.h"
#include "packetizer.h"

int16_t packetizerReceiveByteBlocking(void) {
 800055c:	b510      	push	{r4, lr}
  /* Wait until at least one byte is received and if so return it */
  while(CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface) <= 0) {
 800055e:	4c06      	ldr	r4, [pc, #24]	; (8000578 <packetizerReceiveByteBlocking+0x1c>)
 8000560:	4620      	mov	r0, r4
 8000562:	f002 f8d3 	bl	800270c <CDC_Device_BytesReceived>
 8000566:	b918      	cbnz	r0, 8000570 <packetizerReceiveByteBlocking+0x14>
    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 8000568:	4620      	mov	r0, r4
 800056a:	f002 f8a7 	bl	80026bc <CDC_Device_USBTask>
 800056e:	e7f7      	b.n	8000560 <packetizerReceiveByteBlocking+0x4>
  }
  return CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 8000570:	4801      	ldr	r0, [pc, #4]	; (8000578 <packetizerReceiveByteBlocking+0x1c>)
 8000572:	f002 f905 	bl	8002780 <CDC_Device_ReceiveByte>
}
 8000576:	bd10      	pop	{r4, pc}
 8000578:	20000010 	.word	0x20000010

0800057c <packetizerReadHeader>:

enum packetizerErrors packetizerReadHeader(pt_s *job) {
 800057c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000580:	b092      	sub	sp, #72	; 0x48
 8000582:	4607      	mov	r7, r0
 8000584:	4b37      	ldr	r3, [pc, #220]	; (8000664 <packetizerReadHeader+0xe8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	9311      	str	r3, [sp, #68]	; 0x44
 800058a:	f04f 0300 	mov.w	r3, #0
  /* We received a start of header (SoH, 0x01) and now gather all the bytes that belong to the
     header up to and including the start of text (SoT, 0x02) to see if the header is too long */
  char headerB64[PACKETIZER_HEADER_B64_LEN] = { 0 };
 800058e:	2400      	movs	r4, #0
 8000590:	9408      	str	r4, [sp, #32]
 8000592:	2220      	movs	r2, #32
 8000594:	4621      	mov	r1, r4
 8000596:	a809      	add	r0, sp, #36	; 0x24
 8000598:	f00a faf0 	bl	800ab7c <memset>
  char header[PACKETIZER_HEADER_LEN] = { 0 };
 800059c:	9401      	str	r4, [sp, #4]
 800059e:	9402      	str	r4, [sp, #8]
 80005a0:	9403      	str	r4, [sp, #12]
 80005a2:	9404      	str	r4, [sp, #16]
 80005a4:	9405      	str	r4, [sp, #20]
 80005a6:	9406      	str	r4, [sp, #24]
 80005a8:	f8cd 401b 	str.w	r4, [sp, #27]
  size_t header_len = sizeof(header);
 80005ac:	231b      	movs	r3, #27
 80005ae:	9300      	str	r3, [sp, #0]
  int16_t rbuf = 0;
 
  for(size_t headerB64idx = 0; headerB64idx < PACKETIZER_HEADER_B64_LEN; ) {
 80005b0:	ad08      	add	r5, sp, #32
 80005b2:	ae11      	add	r6, sp, #68	; 0x44
 80005b4:	42b5      	cmp	r5, r6
 80005b6:	d011      	beq.n	80005dc <packetizerReadHeader+0x60>
    rbuf = packetizerReceiveByteBlocking();
 80005b8:	f7ff ffd0 	bl	800055c <packetizerReceiveByteBlocking>
 80005bc:	4604      	mov	r4, r0

    if(rbuf > 0xFF) {
 80005be:	28ff      	cmp	r0, #255	; 0xff
 80005c0:	dcf8      	bgt.n	80005b4 <packetizerReadHeader+0x38>
      /* Error in CDC_Device_ReceiveByte(), ignore it */
    } else if(rbuf == 0x02) {
 80005c2:	2802      	cmp	r0, #2
 80005c4:	d044      	beq.n	8000650 <packetizerReadHeader+0xd4>
      /* A premature SoT means the header is too short */
      return packetizer_HeaderIncorrectSize;
    } else if(isbase64(rbuf) || rbuf == '=') {
 80005c6:	fa5f f880 	uxtb.w	r8, r0
 80005ca:	4640      	mov	r0, r8
 80005cc:	f000 f988 	bl	80008e0 <isbase64>
 80005d0:	b908      	cbnz	r0, 80005d6 <packetizerReadHeader+0x5a>
 80005d2:	2c3d      	cmp	r4, #61	; 0x3d
 80005d4:	d13e      	bne.n	8000654 <packetizerReadHeader+0xd8>
      headerB64[headerB64idx++] = rbuf;
 80005d6:	f805 8b01 	strb.w	r8, [r5], #1
 80005da:	e7eb      	b.n	80005b4 <packetizerReadHeader+0x38>
         Because isbase64() considers padding to be not part of the alphabet, allow it also. */
      return packetizer_IllegalCharacter;
    }
  }
  /* Here we wait for the SoT to check that the header is not too long */
  if(packetizerReceiveByteBlocking() != 0x02) {
 80005dc:	f7ff ffbe 	bl	800055c <packetizerReceiveByteBlocking>
 80005e0:	2802      	cmp	r0, #2
 80005e2:	d008      	beq.n	80005f6 <packetizerReadHeader+0x7a>
    return packetizer_HeaderIncorrectSize;
 80005e4:	2002      	movs	r0, #2
  } else {
    /* Decoding failed, e.g. because padding was incorrect */
    return packetizer_HeaderDecodingFailed;
  }
  return packetizer_Successful;
}
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <packetizerReadHeader+0xe8>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80005ec:	405a      	eors	r2, r3
 80005ee:	d137      	bne.n	8000660 <packetizerReadHeader+0xe4>
 80005f0:	b012      	add	sp, #72	; 0x48
 80005f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(base64_decode(headerB64, PACKETIZER_HEADER_B64_LEN, header, &header_len)) {
 80005f6:	466b      	mov	r3, sp
 80005f8:	aa01      	add	r2, sp, #4
 80005fa:	2124      	movs	r1, #36	; 0x24
 80005fc:	a808      	add	r0, sp, #32
 80005fe:	f000 f979 	bl	80008f4 <base64_decode>
 8000602:	b348      	cbz	r0, 8000658 <packetizerReadHeader+0xdc>
    if(header_len == sizeof(header)) {
 8000604:	9b00      	ldr	r3, [sp, #0]
 8000606:	2b1b      	cmp	r3, #27
 8000608:	d001      	beq.n	800060e <packetizerReadHeader+0x92>
      return packetizer_HeaderIncorrectSize;
 800060a:	2002      	movs	r0, #2
 800060c:	e7eb      	b.n	80005e6 <packetizerReadHeader+0x6a>
      job->textLen = header[2] << 16 | header[1] << 8 | header[0];
 800060e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000612:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800061c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000620:	4313      	orrs	r3, r2
 8000622:	607b      	str	r3, [r7, #4]
      job->nonce = malloc(CRYPTO_NONCE_BYTES);
 8000624:	2018      	movs	r0, #24
 8000626:	f009 fee5 	bl	800a3f4 <malloc>
 800062a:	4604      	mov	r4, r0
 800062c:	60b8      	str	r0, [r7, #8]
      if(job->nonce != NULL) {
 800062e:	b1a8      	cbz	r0, 800065c <packetizerReadHeader+0xe0>
        memcpy(job->nonce, header + 3, CRYPTO_NONCE_BYTES);
 8000630:	f8dd 0007 	ldr.w	r0, [sp, #7]
 8000634:	f8dd 100b 	ldr.w	r1, [sp, #11]
 8000638:	f8dd 200f 	ldr.w	r2, [sp, #15]
 800063c:	f8dd 3013 	ldr.w	r3, [sp, #19]
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	f8dd 0017 	ldr.w	r0, [sp, #23]
 8000646:	f8dd 101b 	ldr.w	r1, [sp, #27]
 800064a:	c403      	stmia	r4!, {r0, r1}
  return packetizer_Successful;
 800064c:	2000      	movs	r0, #0
 800064e:	e7ca      	b.n	80005e6 <packetizerReadHeader+0x6a>
      return packetizer_HeaderIncorrectSize;
 8000650:	2002      	movs	r0, #2
 8000652:	e7c8      	b.n	80005e6 <packetizerReadHeader+0x6a>
      return packetizer_IllegalCharacter;
 8000654:	2001      	movs	r0, #1
 8000656:	e7c6      	b.n	80005e6 <packetizerReadHeader+0x6a>
    return packetizer_HeaderDecodingFailed;
 8000658:	2003      	movs	r0, #3
 800065a:	e7c4      	b.n	80005e6 <packetizerReadHeader+0x6a>
        return packetizer_NonceAllocationFailed;
 800065c:	2004      	movs	r0, #4
 800065e:	e7c2      	b.n	80005e6 <packetizerReadHeader+0x6a>
}
 8000660:	f000 fa3e 	bl	8000ae0 <__stack_chk_fail>
 8000664:	0800d99c 	.word	0x0800d99c

08000668 <packetizerReadText>:

enum packetizerErrors packetizerReadText(pt_s *job) {
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	4605      	mov	r5, r0
  /* We received a correct header, now allocate space for the text and receive it up to and
     including the end of text (EoT, 0x03) to see if the text is too long. Then remove base64url
     encoding */
  enum packetizerErrors ret = packetizer_Successful;
  int16_t rbuf = 0;
  size_t textB64_len = job->textLen * sizeof(char), text_len = 0;
 8000670:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8000674:	2400      	movs	r4, #0
 8000676:	9400      	str	r4, [sp, #0]
  char *textB64 = calloc(job->textLen, sizeof(char)), *text = NULL;
 8000678:	2101      	movs	r1, #1
 800067a:	4640      	mov	r0, r8
 800067c:	f009 fe34 	bl	800a2e8 <calloc>
 8000680:	9401      	str	r4, [sp, #4]
  if(textB64 == NULL) {
 8000682:	b310      	cbz	r0, 80006ca <packetizerReadText+0x62>
 8000684:	4607      	mov	r7, r0
 8000686:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
    return packetizer_TextAllocationFailed;
  }
 
  /* Allocate memory for text (in base64 yet) and receive it */
  for(size_t textB64idx = 0; textB64idx < job->textLen; ) {
 800068a:	4626      	mov	r6, r4
 800068c:	686b      	ldr	r3, [r5, #4]
 800068e:	42b3      	cmp	r3, r6
 8000690:	d927      	bls.n	80006e2 <packetizerReadText+0x7a>
    rbuf = packetizerReceiveByteBlocking();
 8000692:	f7ff ff63 	bl	800055c <packetizerReceiveByteBlocking>
 8000696:	4604      	mov	r4, r0

    if(rbuf > 0xFF) {
 8000698:	28ff      	cmp	r0, #255	; 0xff
 800069a:	dcf7      	bgt.n	800068c <packetizerReadText+0x24>
      /* Error in CDC_Device_ReceiveByte(), ignore it */
    } else if(rbuf == 0x03) {
 800069c:	2803      	cmp	r0, #3
 800069e:	d02c      	beq.n	80006fa <packetizerReadText+0x92>
      /* A premature EoT means the text is too short */
      ret = packetizer_TextIncorrectSize;
      break;
    } else if(isbase64(rbuf) || rbuf == '=') {
 80006a0:	fa5f fa80 	uxtb.w	sl, r0
 80006a4:	4650      	mov	r0, sl
 80006a6:	f000 f91b 	bl	80008e0 <isbase64>
 80006aa:	b908      	cbnz	r0, 80006b0 <packetizerReadText+0x48>
 80006ac:	2c3d      	cmp	r4, #61	; 0x3d
 80006ae:	d126      	bne.n	80006fe <packetizerReadText+0x96>
      textB64[textB64idx++] = rbuf;
 80006b0:	3601      	adds	r6, #1
 80006b2:	f809 af01 	strb.w	sl, [r9, #1]!
 80006b6:	e7e9      	b.n	800068c <packetizerReadText+0x24>
    }
  }
  if(ret == packetizer_Successful) {
    /* We received a text of correct size, so remove base64url encoding and put link into job */
    if(base64_decode_alloc(textB64, textB64_len, &text, &text_len)) {
      job->textLen = text_len;
 80006b8:	9b00      	ldr	r3, [sp, #0]
 80006ba:	606b      	str	r3, [r5, #4]
      if(text != NULL) {
 80006bc:	9b01      	ldr	r3, [sp, #4]
 80006be:	b113      	cbz	r3, 80006c6 <packetizerReadText+0x5e>
        job->text = (uint8_t *) text;
 80006c0:	602b      	str	r3, [r5, #0]
 80006c2:	2400      	movs	r4, #0
 80006c4:	e012      	b.n	80006ec <packetizerReadText+0x84>
      } else {
        /* If text pointer is NULL, malloc failed */
        ret = packetizer_TextAllocationFailed;
 80006c6:	2405      	movs	r4, #5
 80006c8:	e010      	b.n	80006ec <packetizerReadText+0x84>
    return packetizer_TextAllocationFailed;
 80006ca:	2405      	movs	r4, #5
 80006cc:	e011      	b.n	80006f2 <packetizerReadText+0x8a>
    if(base64_decode_alloc(textB64, textB64_len, &text, &text_len)) {
 80006ce:	466b      	mov	r3, sp
 80006d0:	aa01      	add	r2, sp, #4
 80006d2:	4641      	mov	r1, r8
 80006d4:	4638      	mov	r0, r7
 80006d6:	f000 f967 	bl	80009a8 <base64_decode_alloc>
 80006da:	2800      	cmp	r0, #0
 80006dc:	d1ec      	bne.n	80006b8 <packetizerReadText+0x50>
      }
    } else {
      /* Decoding failed, e.g. because padding was incorrect */
      ret = packetizer_TextDecodingFailed;
 80006de:	2407      	movs	r4, #7
 80006e0:	e004      	b.n	80006ec <packetizerReadText+0x84>
    if(packetizerReceiveByteBlocking() != 0x03) {
 80006e2:	f7ff ff3b 	bl	800055c <packetizerReceiveByteBlocking>
 80006e6:	2803      	cmp	r0, #3
 80006e8:	d0f1      	beq.n	80006ce <packetizerReadText+0x66>
      ret = packetizer_TextIncorrectSize;
 80006ea:	2406      	movs	r4, #6
    }
  }

  /* Regardless of our outcome, we have to free the textB64, because we loose the pointer to it on
     return */
  free(textB64);
 80006ec:	4638      	mov	r0, r7
 80006ee:	f009 fe89 	bl	800a404 <free>
  return ret;
}
 80006f2:	4620      	mov	r0, r4
 80006f4:	b002      	add	sp, #8
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = packetizer_TextIncorrectSize;
 80006fa:	2406      	movs	r4, #6
 80006fc:	e7f6      	b.n	80006ec <packetizerReadText+0x84>
      ret = packetizer_IllegalCharacter;
 80006fe:	2401      	movs	r4, #1
  if(ret == packetizer_Successful) {
 8000700:	e7f4      	b.n	80006ec <packetizerReadText+0x84>

08000702 <packetizerReceive>:
  
enum packetizerErrors packetizerReceive(pt_s *job) {
 8000702:	b510      	push	{r4, lr}
 8000704:	4604      	mov	r4, r0
  enum packetizerErrors ret;

  /* Discard bytes until we find a start of header (SoH, 0x01) */
  while(packetizerReceiveByteBlocking() != 0x01);
 8000706:	f7ff ff29 	bl	800055c <packetizerReceiveByteBlocking>
 800070a:	2801      	cmp	r0, #1
 800070c:	d1fb      	bne.n	8000706 <packetizerReceive+0x4>
  /* Read header and fill in job or forward error */
  ret = packetizerReadHeader(job);
 800070e:	4620      	mov	r0, r4
 8000710:	f7ff ff34 	bl	800057c <packetizerReadHeader>
  if(ret != packetizer_Successful) {
 8000714:	b100      	cbz	r0, 8000718 <packetizerReceive+0x16>
  ret = packetizerReadText(job);
  if(ret != packetizer_Successful) {
    return ret;
  }
  return packetizer_Successful;
}
 8000716:	bd10      	pop	{r4, pc}
  ret = packetizerReadText(job);
 8000718:	4620      	mov	r0, r4
 800071a:	f7ff ffa5 	bl	8000668 <packetizerReadText>
  if(ret != packetizer_Successful) {
 800071e:	e7fa      	b.n	8000716 <packetizerReceive+0x14>

08000720 <packetizerSend>:

enum packetizerErrors packetizerSend(ct_s *output) {
 8000720:	b530      	push	{r4, r5, lr}
 8000722:	b083      	sub	sp, #12
 8000724:	4604      	mov	r4, r0
  enum packetizerErrors ret = packetizer_Successful;
  char *textB64 = NULL;
 8000726:	2300      	movs	r3, #0
 8000728:	9301      	str	r3, [sp, #4]
  size_t textB64_len = 0;

  /* Encode ciphertext into base64url, return fail if not successful */
  textB64_len = base64_encode_alloc((char *) output->text, output->textLen, &textB64);
 800072a:	aa01      	add	r2, sp, #4
 800072c:	6841      	ldr	r1, [r0, #4]
 800072e:	6800      	ldr	r0, [r0, #0]
 8000730:	f000 f8b2 	bl	8000898 <base64_encode_alloc>
 8000734:	4605      	mov	r5, r0
  if(textB64 == NULL) {
 8000736:	9b01      	ldr	r3, [sp, #4]
 8000738:	b183      	cbz	r3, 800075c <packetizerSend+0x3c>
      ret = packetizer_CiphertextTooLarge;
    } else {
      ret = packetizer_CiphertextAllocationFailed;
    }
  } else {
    CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 0x02);
 800073a:	4c0d      	ldr	r4, [pc, #52]	; (8000770 <packetizerSend+0x50>)
 800073c:	2102      	movs	r1, #2
 800073e:	4620      	mov	r0, r4
 8000740:	f001 ff54 	bl	80025ec <CDC_Device_SendByte>
    CDC_Device_SendData(&VirtualSerial_CDC_Interface, textB64, textB64_len);
 8000744:	b2aa      	uxth	r2, r5
 8000746:	9901      	ldr	r1, [sp, #4]
 8000748:	4620      	mov	r0, r4
 800074a:	f001 ff2d 	bl	80025a8 <CDC_Device_SendData>
    CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 0x03);
 800074e:	2103      	movs	r1, #3
 8000750:	4620      	mov	r0, r4
 8000752:	f001 ff4b 	bl	80025ec <CDC_Device_SendByte>
  enum packetizerErrors ret = packetizer_Successful;
 8000756:	2000      	movs	r0, #0
  }

  return ret;
}
 8000758:	b003      	add	sp, #12
 800075a:	bd30      	pop	{r4, r5, pc}
    if(output->textLen > 0 && textB64_len <= 0) {
 800075c:	6863      	ldr	r3, [r4, #4]
 800075e:	b123      	cbz	r3, 800076a <packetizerSend+0x4a>
      ret = packetizer_CiphertextTooLarge;
 8000760:	2800      	cmp	r0, #0
 8000762:	bf14      	ite	ne
 8000764:	2008      	movne	r0, #8
 8000766:	2009      	moveq	r0, #9
 8000768:	e7f6      	b.n	8000758 <packetizerSend+0x38>
      ret = packetizer_CiphertextAllocationFailed;
 800076a:	2008      	movs	r0, #8
 800076c:	e7f4      	b.n	8000758 <packetizerSend+0x38>
 800076e:	bf00      	nop
 8000770:	20000010 	.word	0x20000010

08000774 <encrypt>:
#include <malloc.h>
#include "crypto.h"

uint8_t encrypt(uint8_t *ciphertext[],
                const uint8_t *plaintext, const size_t plaintext_len,
                const uint8_t *nonce, const uint8_t *key ) {
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	b0a3      	sub	sp, #140	; 0x8c
 8000778:	4607      	mov	r7, r0
 800077a:	4616      	mov	r6, r2
 800077c:	461c      	mov	r4, r3
 800077e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <encrypt+0x5c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	9321      	str	r3, [sp, #132]	; 0x84
 8000786:	f04f 0300 	mov.w	r3, #0
  /* Encrypt like the most popular app with over 30 million users worldwide did
     cf. https://www.ssl.com/article/nq-vault-app-not-as-secure-as-advertised/  */
  uint8_t buf[128];
  memcpy(buf, plaintext, plaintext_len);
 800078a:	a801      	add	r0, sp, #4
 800078c:	f00a f8f4 	bl	800a978 <memcpy>
  for(uint8_t i=0; i<128; i++) buf[i] ^= key[nonce[0] % 8];
 8000790:	7823      	ldrb	r3, [r4, #0]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	5ced      	ldrb	r5, [r5, r3]
 8000798:	f10d 0303 	add.w	r3, sp, #3
 800079c:	f10d 0483 	add.w	r4, sp, #131	; 0x83
 80007a0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80007a4:	4069      	eors	r1, r5
 80007a6:	7019      	strb	r1, [r3, #0]
 80007a8:	42a3      	cmp	r3, r4
 80007aa:	d1f9      	bne.n	80007a0 <encrypt+0x2c>
  *ciphertext = malloc(plaintext_len);
 80007ac:	4630      	mov	r0, r6
 80007ae:	f009 fe21 	bl	800a3f4 <malloc>
 80007b2:	6038      	str	r0, [r7, #0]
  memcpy(*ciphertext, buf, plaintext_len);
 80007b4:	4632      	mov	r2, r6
 80007b6:	a901      	add	r1, sp, #4
 80007b8:	f00a f8de 	bl	800a978 <memcpy>
  return 0;
}
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <encrypt+0x5c>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80007c2:	405a      	eors	r2, r3
 80007c4:	d102      	bne.n	80007cc <encrypt+0x58>
 80007c6:	2000      	movs	r0, #0
 80007c8:	b023      	add	sp, #140	; 0x8c
 80007ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007cc:	f000 f988 	bl	8000ae0 <__stack_chk_fail>
 80007d0:	0800d9a0 	.word	0x0800d9a0

080007d4 <getCiphertextLength>:

size_t getCiphertextLength(const size_t plaintext_len) {
  return plaintext_len;
}
 80007d4:	4770      	bx	lr
	...

080007d8 <base64_encode>:
	       char *restrict out, size_t outlen)
{
  static const char b64str[64] =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

  while (inlen && outlen)
 80007d8:	2900      	cmp	r1, #0
 80007da:	d044      	beq.n	8000866 <base64_encode+0x8e>
{
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	460f      	mov	r7, r1
  while (inlen && outlen)
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d04c      	beq.n	800087e <base64_encode+0xa6>
    {
      *out++ = b64str[(to_uchar (in[0]) >> 2) & 0x3f];
 80007e4:	7801      	ldrb	r1, [r0, #0]
 80007e6:	088c      	lsrs	r4, r1, #2
 80007e8:	4d2a      	ldr	r5, [pc, #168]	; (8000894 <base64_encode+0xbc>)
 80007ea:	5d2c      	ldrb	r4, [r5, r4]
 80007ec:	7014      	strb	r4, [r2, #0]
      if (!--outlen)
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d045      	beq.n	800087e <base64_encode+0xa6>
	break;
      *out++ = b64str[((to_uchar (in[0]) << 4)
 80007f2:	462c      	mov	r4, r5
		       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
		      & 0x3f];
      if (!--outlen)
	break;
      *out++ =
 80007f4:	263d      	movs	r6, #61	; 0x3d
		       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
 80007f6:	2500      	movs	r5, #0
 80007f8:	e00a      	b.n	8000810 <base64_encode+0x38>
      *out++ = b64str[(to_uchar (in[0]) >> 2) & 0x3f];
 80007fa:	f810 1f03 	ldrb.w	r1, [r0, #3]!
 80007fe:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 8000802:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8000806:	f882 c000 	strb.w	ip, [r2]
      if (!--outlen)
 800080a:	2b05      	cmp	r3, #5
 800080c:	d037      	beq.n	800087e <base64_encode+0xa6>
		  & 0x3f]
	 : '=');
      if (!--outlen)
	break;
      *out++ = inlen ? b64str[to_uchar (in[2]) & 0x3f] : '=';
      if (!--outlen)
 800080e:	4673      	mov	r3, lr
      *out++ = b64str[((to_uchar (in[0]) << 4)
 8000810:	0109      	lsls	r1, r1, #4
		       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
 8000812:	2f01      	cmp	r7, #1
 8000814:	d034      	beq.n	8000880 <base64_encode+0xa8>
 8000816:	f890 c001 	ldrb.w	ip, [r0, #1]
 800081a:	eb01 111c 	add.w	r1, r1, ip, lsr #4
		      & 0x3f];
 800081e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      *out++ = b64str[((to_uchar (in[0]) << 4)
 8000822:	5c61      	ldrb	r1, [r4, r1]
 8000824:	7051      	strb	r1, [r2, #1]
      if (!--outlen)
 8000826:	2b02      	cmp	r3, #2
 8000828:	d029      	beq.n	800087e <base64_encode+0xa6>
	 ? b64str[((to_uchar (in[1]) << 2)
 800082a:	4661      	mov	r1, ip
 800082c:	0089      	lsls	r1, r1, #2
		   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
 800082e:	3f02      	subs	r7, #2
 8000830:	bf1a      	itte	ne
 8000832:	f890 c002 	ldrbne.w	ip, [r0, #2]
 8000836:	ea4f 1c9c 	movne.w	ip, ip, lsr #6
 800083a:	46ac      	moveq	ip, r5
 800083c:	4461      	add	r1, ip
		  & 0x3f]
 800083e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      *out++ =
 8000842:	5c61      	ldrb	r1, [r4, r1]
 8000844:	7091      	strb	r1, [r2, #2]
      if (!--outlen)
 8000846:	2b03      	cmp	r3, #3
 8000848:	d019      	beq.n	800087e <base64_encode+0xa6>
      *out++ = inlen ? b64str[to_uchar (in[2]) & 0x3f] : '=';
 800084a:	b187      	cbz	r7, 800086e <base64_encode+0x96>
  return ch;
 800084c:	3204      	adds	r2, #4
      *out++ = inlen ? b64str[to_uchar (in[2]) & 0x3f] : '=';
 800084e:	7881      	ldrb	r1, [r0, #2]
 8000850:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8000854:	5c61      	ldrb	r1, [r4, r1]
 8000856:	f802 1c01 	strb.w	r1, [r2, #-1]
      if (!--outlen)
 800085a:	f1b3 0e04 	subs.w	lr, r3, #4
 800085e:	d00e      	beq.n	800087e <base64_encode+0xa6>
	break;
      if (inlen)
	inlen--;
      if (inlen)
 8000860:	3f01      	subs	r7, #1
 8000862:	d1ca      	bne.n	80007fa <base64_encode+0x22>
 8000864:	e009      	b.n	800087a <base64_encode+0xa2>
	in += 3;
    }

  if (outlen)
 8000866:	b10b      	cbz	r3, 800086c <base64_encode+0x94>
    *out = '\0';
 8000868:	2300      	movs	r3, #0
 800086a:	7013      	strb	r3, [r2, #0]
 800086c:	4770      	bx	lr
 800086e:	3204      	adds	r2, #4
      *out++ = inlen ? b64str[to_uchar (in[2]) & 0x3f] : '=';
 8000870:	213d      	movs	r1, #61	; 0x3d
 8000872:	f802 1c01 	strb.w	r1, [r2, #-1]
      if (!--outlen)
 8000876:	2b04      	cmp	r3, #4
 8000878:	d001      	beq.n	800087e <base64_encode+0xa6>
    *out = '\0';
 800087a:	2300      	movs	r3, #0
 800087c:	7013      	strb	r3, [r2, #0]
}
 800087e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		      & 0x3f];
 8000880:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      *out++ = b64str[((to_uchar (in[0]) << 4)
 8000884:	5c61      	ldrb	r1, [r4, r1]
 8000886:	7051      	strb	r1, [r2, #1]
      if (!--outlen)
 8000888:	2b02      	cmp	r3, #2
 800088a:	d0f8      	beq.n	800087e <base64_encode+0xa6>
      *out++ =
 800088c:	4631      	mov	r1, r6
		       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
 800088e:	462f      	mov	r7, r5
 8000890:	e7d8      	b.n	8000844 <base64_encode+0x6c>
 8000892:	bf00      	nop
 8000894:	0800d9a4 	.word	0x0800d9a4

08000898 <base64_encode_alloc>:
   memory allocation failed, OUT is set to NULL, and the return value
   indicates length of the requested memory block, i.e.,
   BASE64_LENGTH(inlen) + 1. */
size_t
base64_encode_alloc (const char *in, size_t inlen, char **out)
{
 8000898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800089c:	4616      	mov	r6, r2
  size_t outlen = 1 + BASE64_LENGTH (inlen);
 800089e:	1c8c      	adds	r4, r1, #2
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <base64_encode_alloc+0x44>)
 80008a2:	fba3 3404 	umull	r3, r4, r3, r4
 80008a6:	0864      	lsrs	r4, r4, #1
 80008a8:	00a4      	lsls	r4, r4, #2
 80008aa:	f104 0801 	add.w	r8, r4, #1
   * If the multiplication overflows, we lose at least half of the
   * correct value, so the result is < ((inlen + 2) / 3) * 2, which is
   * less than (inlen + 2) * 0.66667, which is less than inlen as soon as
   * (inlen > 4).
   */
  if (inlen > outlen)
 80008ae:	4541      	cmp	r1, r8
 80008b0:	d904      	bls.n	80008bc <base64_encode_alloc+0x24>
    {
      *out = NULL;
 80008b2:	2400      	movs	r4, #0
 80008b4:	6014      	str	r4, [r2, #0]
    return outlen;

  base64_encode (in, inlen, *out, outlen);

  return outlen - 1;
}
 80008b6:	4620      	mov	r0, r4
 80008b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008bc:	4607      	mov	r7, r0
 80008be:	460d      	mov	r5, r1
  *out = malloc (outlen);
 80008c0:	4640      	mov	r0, r8
 80008c2:	f009 fd97 	bl	800a3f4 <malloc>
 80008c6:	4602      	mov	r2, r0
 80008c8:	6030      	str	r0, [r6, #0]
  if (!*out)
 80008ca:	b128      	cbz	r0, 80008d8 <base64_encode_alloc+0x40>
  base64_encode (in, inlen, *out, outlen);
 80008cc:	4643      	mov	r3, r8
 80008ce:	4629      	mov	r1, r5
 80008d0:	4638      	mov	r0, r7
 80008d2:	f7ff ff81 	bl	80007d8 <base64_encode>
  return outlen - 1;
 80008d6:	e7ee      	b.n	80008b6 <base64_encode_alloc+0x1e>
    return outlen;
 80008d8:	4644      	mov	r4, r8
 80008da:	e7ec      	b.n	80008b6 <base64_encode_alloc+0x1e>
 80008dc:	aaaaaaab 	.word	0xaaaaaaab

080008e0 <isbase64>:
   false otherwise.  Note that '=' is padding and not considered to be
   part of the alphabet.  */
bool
isbase64 (char ch)
{
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <isbase64+0x10>)
 80008e2:	4403      	add	r3, r0
 80008e4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80008e8:	43c0      	mvns	r0, r0
}
 80008ea:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80008ee:	4770      	bx	lr
 80008f0:	0800d9a4 	.word	0x0800d9a4

080008f4 <base64_decode>:
   that, when applicable, you must remove any line terminators that is
   part of the data stream before calling this function.  */
bool
base64_decode (const char *restrict in, size_t inlen,
	       char *restrict out, size_t *outlen)
{
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  size_t outleft = *outlen;
 80008f6:	f8d3 c000 	ldr.w	ip, [r3]

  while (inlen >= 2)
 80008fa:	2901      	cmp	r1, #1
 80008fc:	d94f      	bls.n	800099e <base64_decode+0xaa>
  size_t outleft = *outlen;
 80008fe:	4664      	mov	r4, ip
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 8000900:	4e28      	ldr	r6, [pc, #160]	; (80009a4 <base64_decode+0xb0>)
 8000902:	e013      	b.n	800092c <base64_decode+0x38>
      if (inlen == 2)
	break;

      if (in[2] == '=')
	{
	  if (inlen != 4)
 8000904:	2904      	cmp	r1, #4
 8000906:	d103      	bne.n	8000910 <base64_decode+0x1c>
	    break;

	  if (in[3] != '=')
 8000908:	78c2      	ldrb	r2, [r0, #3]
 800090a:	2a3d      	cmp	r2, #61	; 0x3d
 800090c:	d100      	bne.n	8000910 <base64_decode+0x1c>
		}
	    }
	}

      in += 4;
      inlen -= 4;
 800090e:	3904      	subs	r1, #4
    }

  *outlen -= outleft;
 8000910:	ebac 0404 	sub.w	r4, ip, r4
 8000914:	601c      	str	r4, [r3, #0]

  if (inlen != 0)
 8000916:	fab1 f081 	clz	r0, r1
 800091a:	0940      	lsrs	r0, r0, #5
    return false;

  return true;
}
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	      if (inlen != 4)
 800091e:	2904      	cmp	r1, #4
 8000920:	d0f5      	beq.n	800090e <base64_decode+0x1a>
 8000922:	e7f5      	b.n	8000910 <base64_decode+0x1c>
      in += 4;
 8000924:	3004      	adds	r0, #4
      inlen -= 4;
 8000926:	3904      	subs	r1, #4
  while (inlen >= 2)
 8000928:	2901      	cmp	r1, #1
 800092a:	d9f1      	bls.n	8000910 <base64_decode+0x1c>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 800092c:	7805      	ldrb	r5, [r0, #0]
 800092e:	4435      	add	r5, r6
 8000930:	f995 e040 	ldrsb.w	lr, [r5, #64]	; 0x40
      if (!isbase64 (in[0]) || !isbase64 (in[1]))
 8000934:	f1be 0f00 	cmp.w	lr, #0
 8000938:	dbea      	blt.n	8000910 <base64_decode+0x1c>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 800093a:	7845      	ldrb	r5, [r0, #1]
 800093c:	4435      	add	r5, r6
 800093e:	f995 7040 	ldrsb.w	r7, [r5, #64]	; 0x40
      if (!isbase64 (in[0]) || !isbase64 (in[1]))
 8000942:	2f00      	cmp	r7, #0
 8000944:	dbe4      	blt.n	8000910 <base64_decode+0x1c>
      if (outleft)
 8000946:	b12c      	cbz	r4, 8000954 <base64_decode+0x60>
		    | (b64[to_uchar (in[1])] >> 4));
 8000948:	113d      	asrs	r5, r7, #4
 800094a:	ea45 0e8e 	orr.w	lr, r5, lr, lsl #2
	  *out++ = ((b64[to_uchar (in[0])] << 2)
 800094e:	f802 eb01 	strb.w	lr, [r2], #1
	  outleft--;
 8000952:	3c01      	subs	r4, #1
      if (inlen == 2)
 8000954:	2902      	cmp	r1, #2
 8000956:	d0db      	beq.n	8000910 <base64_decode+0x1c>
      if (in[2] == '=')
 8000958:	7885      	ldrb	r5, [r0, #2]
 800095a:	2d3d      	cmp	r5, #61	; 0x3d
 800095c:	d0d2      	beq.n	8000904 <base64_decode+0x10>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 800095e:	4435      	add	r5, r6
 8000960:	f995 e040 	ldrsb.w	lr, [r5, #64]	; 0x40
	  if (!isbase64 (in[2]))
 8000964:	f1be 0f00 	cmp.w	lr, #0
 8000968:	dbd2      	blt.n	8000910 <base64_decode+0x1c>
	  if (outleft)
 800096a:	b134      	cbz	r4, 800097a <base64_decode+0x86>
			| (b64[to_uchar (in[2])] >> 2));
 800096c:	ea4f 05ae 	mov.w	r5, lr, asr #2
 8000970:	ea45 1707 	orr.w	r7, r5, r7, lsl #4
	      *out++ = (((b64[to_uchar (in[1])] << 4) & 0xf0)
 8000974:	f802 7b01 	strb.w	r7, [r2], #1
	      outleft--;
 8000978:	3c01      	subs	r4, #1
	  if (inlen == 3)
 800097a:	2903      	cmp	r1, #3
 800097c:	d0c8      	beq.n	8000910 <base64_decode+0x1c>
	  if (in[3] == '=')
 800097e:	78c5      	ldrb	r5, [r0, #3]
 8000980:	2d3d      	cmp	r5, #61	; 0x3d
 8000982:	d0cc      	beq.n	800091e <base64_decode+0x2a>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 8000984:	4435      	add	r5, r6
 8000986:	f995 5040 	ldrsb.w	r5, [r5, #64]	; 0x40
	      if (!isbase64 (in[3]))
 800098a:	2d00      	cmp	r5, #0
 800098c:	dbc0      	blt.n	8000910 <base64_decode+0x1c>
	      if (outleft)
 800098e:	2c00      	cmp	r4, #0
 8000990:	d0c8      	beq.n	8000924 <base64_decode+0x30>
			    | b64[to_uchar (in[3])]);
 8000992:	ea45 1e8e 	orr.w	lr, r5, lr, lsl #6
		  *out++ = (((b64[to_uchar (in[2])] << 6) & 0xc0)
 8000996:	f802 eb01 	strb.w	lr, [r2], #1
		  outleft--;
 800099a:	3c01      	subs	r4, #1
 800099c:	e7c2      	b.n	8000924 <base64_decode+0x30>
  size_t outleft = *outlen;
 800099e:	4664      	mov	r4, ip
 80009a0:	e7b6      	b.n	8000910 <base64_decode+0x1c>
 80009a2:	bf00      	nop
 80009a4:	0800d9a4 	.word	0x0800d9a4

080009a8 <base64_decode_alloc>:
   input was invalid, in which case *OUT is NULL and *OUTLEN is
   undefined. */
bool
base64_decode_alloc (const char *in, size_t inlen, char **out,
		     size_t *outlen)
{
 80009a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	4680      	mov	r8, r0
 80009b0:	460d      	mov	r5, r1
 80009b2:	4616      	mov	r6, r2
 80009b4:	461f      	mov	r7, r3
  /* This may allocate a few bytes too much, depending on input,
     but it's not worth the extra CPU time to compute the exact amount.
     The exact amount is 3 * inlen / 4, minus 1 if the input ends
     with "=" and minus another 1 if the input ends with "==".
     Dividing before multiplying avoids the possibility of overflow.  */
  size_t needlen = 3 * (inlen / 4) + 2;
 80009b6:	088c      	lsrs	r4, r1, #2
 80009b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80009bc:	1ca0      	adds	r0, r4, #2
 80009be:	9001      	str	r0, [sp, #4]

  *out = malloc (needlen);
 80009c0:	f009 fd18 	bl	800a3f4 <malloc>
 80009c4:	6030      	str	r0, [r6, #0]
  if (!*out)
 80009c6:	b1a0      	cbz	r0, 80009f2 <base64_decode_alloc+0x4a>
 80009c8:	4602      	mov	r2, r0
    return true;

  if (!base64_decode (in, inlen, *out, &needlen))
 80009ca:	ab01      	add	r3, sp, #4
 80009cc:	4629      	mov	r1, r5
 80009ce:	4640      	mov	r0, r8
 80009d0:	f7ff ff90 	bl	80008f4 <base64_decode>
 80009d4:	4604      	mov	r4, r0
 80009d6:	b130      	cbz	r0, 80009e6 <base64_decode_alloc+0x3e>
      free (*out);
      *out = NULL;
      return false;
    }

  if (outlen)
 80009d8:	b10f      	cbz	r7, 80009de <base64_decode_alloc+0x36>
    *outlen = needlen;
 80009da:	9b01      	ldr	r3, [sp, #4]
 80009dc:	603b      	str	r3, [r7, #0]

  return true;
}
 80009de:	4620      	mov	r0, r4
 80009e0:	b002      	add	sp, #8
 80009e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      free (*out);
 80009e6:	6830      	ldr	r0, [r6, #0]
 80009e8:	f009 fd0c 	bl	800a404 <free>
      *out = NULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	6033      	str	r3, [r6, #0]
      return false;
 80009f0:	e7f5      	b.n	80009de <base64_decode_alloc+0x36>
    return true;
 80009f2:	2401      	movs	r4, #1
 80009f4:	e7f3      	b.n	80009de <base64_decode_alloc+0x36>

080009f6 <enableMPU>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009fa:	f3bf 8f6f 	isb	sy
#include "MPUeasy.h"

void enableMPU(int enableBackgroundRegion) {
	__DSB();
	__ISB();
	PPB->MPU_CTRL |= (enableBackgroundRegion ? 0x4 : 0x0) | 0x1;
 80009fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a02:	f8d3 3d94 	ldr.w	r3, [r3, #3476]	; 0xd94
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf14      	ite	ne
 8000a0a:	2205      	movne	r2, #5
 8000a0c:	2201      	moveq	r2, #1
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000a14:	f8c2 3d94 	str.w	r3, [r2, #3476]	; 0xd94
  __ASM volatile ("dsb 0xF":::"memory");
 8000a18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a1c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
 8000a20:	4770      	bx	lr

08000a22 <disableMPU>:
  __ASM volatile ("dsb 0xF":::"memory");
 8000a22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a26:	f3bf 8f6f 	isb	sy

void disableMPU(void) {
	__DSB();
	__ISB();
	PPB->MPU_CTRL = 0;
 8000a2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
  __ASM volatile ("dsb 0xF":::"memory");
 8000a34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a38:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
 8000a3c:	4770      	bx	lr

08000a3e <configMPU>:

void configMPU(MPUconfig_t config) {
 8000a3e:	b470      	push	{r4, r5, r6}
 8000a40:	b085      	sub	sp, #20
 8000a42:	ab04      	add	r3, sp, #16
 8000a44:	e903 0007 	stmdb	r3, {r0, r1, r2}
 8000a48:	9a01      	ldr	r2, [sp, #4]
 8000a4a:	9b02      	ldr	r3, [sp, #8]
 8000a4c:	f89d 100c 	ldrb.w	r1, [sp, #12]
	/* to align baseAddress, we shift right and then left again,
	 * with at least the position of the ADDR bitfield
	 * so other bitfields don't get changed */
	uint8_t addrShift = config.size > PPB_MPU_RBAR_ADDR_Pos ? \
 8000a50:	460e      	mov	r6, r1
 8000a52:	2909      	cmp	r1, #9
 8000a54:	bf38      	it	cc
 8000a56:	2609      	movcc	r6, #9
	                    config.size : PPB_MPU_RBAR_ADDR_Pos;
	/* TEX, S, C, and B field will be set according to recommendation
	 * in table 2-17 of manual */
	uint8_t autoSet = config.baseAddress < (void *)0x10000000 ? 0x2 : \
 8000a58:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8000a5c:	d308      	bcc.n	8000a70 <configMPU+0x32>
 8000a5e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000a62:	d32d      	bcc.n	8000ac0 <configMPU+0x82>
 8000a64:	f1b2 4fc0 	cmp.w	r2, #1610612736	; 0x60000000
 8000a68:	bf34      	ite	cc
 8000a6a:	2405      	movcc	r4, #5
 8000a6c:	2407      	movcs	r4, #7
 8000a6e:	e000      	b.n	8000a72 <configMPU+0x34>
 8000a70:	2402      	movs	r4, #2
	                  config.baseAddress < (void *)0x40000000 ? 0x6 : \
	                  config.baseAddress < (void *)0x60000000 ? 0x5 : \
	                                                            0x7;
	/* switch to correct priority slot */
	PPB->MPU_RNR = config.priority & 0x7;
 8000a72:	f89d 500d 	ldrb.w	r5, [sp, #13]
 8000a76:	f005 0507 	and.w	r5, r5, #7
 8000a7a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8000a7e:	f8c0 5d98 	str.w	r5, [r0, #3480]	; 0xd98
	/* disable region before changing parameters to avoid glitches */
	PPB->MPU_RASR &= ~PPB_MPU_RASR_ENABLE_Msk;
 8000a82:	f8d0 5da0 	ldr.w	r5, [r0, #3488]	; 0xda0
 8000a86:	f025 0501 	bic.w	r5, r5, #1
 8000a8a:	f8c0 5da0 	str.w	r5, [r0, #3488]	; 0xda0

	PPB->MPU_RBAR = ((uint32_t) config.baseAddress >> addrShift) \
 8000a8e:	40f2      	lsrs	r2, r6
	                                               << addrShift;
 8000a90:	40b2      	lsls	r2, r6
	PPB->MPU_RBAR = ((uint32_t) config.baseAddress >> addrShift) \
 8000a92:	f8c0 2d9c 	str.w	r2, [r0, #3484]	; 0xd9c
	PPB->MPU_RASR = (config.permissions << PPB_MPU_RASR_AP_Pos \
 8000a96:	0618      	lsls	r0, r3, #24
                & (PPB_MPU_RASR_XN_Msk | PPB_MPU_RASR_AP_Msk))  | \
 8000a98:	f000 50b8 	and.w	r0, r0, #385875968	; 0x17000000
	                (autoSet            << PPB_MPU_RASR_B_Pos  )  | \
 8000a9c:	0422      	lsls	r2, r4, #16
            ((config.size > 0 ? config.size - 1 : config.size)\
	                                    << PPB_MPU_RASR_SIZE_Pos\
	                                     & PPB_MPU_RASR_SIZE_Msk) | \
 8000a9e:	b189      	cbz	r1, 8000ac4 <configMPU+0x86>
            ((config.size > 0 ? config.size - 1 : config.size)\
 8000aa0:	3901      	subs	r1, #1
	                                    << PPB_MPU_RASR_SIZE_Pos\
 8000aa2:	0049      	lsls	r1, r1, #1
	                                     & PPB_MPU_RASR_SIZE_Msk) | \
 8000aa4:	f001 013e 	and.w	r1, r1, #62	; 0x3e
	                (config.permissions >> 7 \
	                                     & PPB_MPU_RASR_ENABLE_Msk);
 8000aa8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	                                     & PPB_MPU_RASR_SIZE_Msk) | \
 8000aac:	4303      	orrs	r3, r0
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	430b      	orrs	r3, r1
	PPB->MPU_RASR = (config.permissions << PPB_MPU_RASR_AP_Pos \
 8000ab2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000ab6:	f8c2 3da0 	str.w	r3, [r2, #3488]	; 0xda0
}
 8000aba:	b005      	add	sp, #20
 8000abc:	bc70      	pop	{r4, r5, r6}
 8000abe:	4770      	bx	lr
	uint8_t autoSet = config.baseAddress < (void *)0x10000000 ? 0x2 : \
 8000ac0:	2406      	movs	r4, #6
 8000ac2:	e7d6      	b.n	8000a72 <configMPU+0x34>
	                                     & PPB_MPU_RASR_SIZE_Msk) | \
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	e7ef      	b.n	8000aa8 <configMPU+0x6a>

08000ac8 <MemManage_Handler>:

void MemManage_Handler(void) {
  uint8_t MMFSR = PPB->CFSR;
 8000ac8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000acc:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
  void *MMFAR = (MMFSR & PPB_CFSR_MMARVALID_Msk) ? (void *) PPB->MMFAR : NULL;
 8000ad0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ad4:	bf1c      	itt	ne
 8000ad6:	f04f 23e0 	movne.w	r3, #3758153728	; 0xe000e000
 8000ada:	f8d3 3d34 	ldrne.w	r3, [r3, #3380]	; 0xd34
  /* use EXC_FRAME_t with appropriate base address to inspect stacked CPU status before exception */
  EXC_FRAME_t *status = NULL; /* set to correct position using debugger */
  while(1);
 8000ade:	e7fe      	b.n	8000ade <MemManage_Handler+0x16>

08000ae0 <__stack_chk_fail>:
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae0:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ae4:	4905      	ldr	r1, [pc, #20]	; (8000afc <__stack_chk_fail+0x1c>)
 8000ae6:	68ca      	ldr	r2, [r1, #12]
 8000ae8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__stack_chk_fail+0x20>)
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60cb      	str	r3, [r1, #12]
 8000af2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000af6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8000af8:	e7fd      	b.n	8000af6 <__stack_chk_fail+0x16>
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00
 8000b00:	05fa0004 	.word	0x05fa0004

08000b04 <randombytes_salsa20XMC_random_rekey>:
    assert(stream.nonce != (uint64_t) 0U);
}

static void
randombytes_salsa20XMC_random_rekey(const unsigned char * const mix)
{
 8000b04:	b410      	push	{r4}
    unsigned char *key = stream.key;
    size_t         i;

    for (i = (size_t) 0U; i < sizeof stream.key; i++) {
 8000b06:	4c08      	ldr	r4, [pc, #32]	; (8000b28 <randombytes_salsa20XMC_random_rekey+0x24>)
 8000b08:	f104 030f 	add.w	r3, r4, #15
 8000b0c:	3801      	subs	r0, #1
 8000b0e:	342f      	adds	r4, #47	; 0x2f
        key[i] ^= mix[i];
 8000b10:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000b14:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8000b18:	404a      	eors	r2, r1
 8000b1a:	701a      	strb	r2, [r3, #0]
    for (i = (size_t) 0U; i < sizeof stream.key; i++) {
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d1f7      	bne.n	8000b10 <randombytes_salsa20XMC_random_rekey+0xc>
    }
}
 8000b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000030 	.word	0x20000030

08000b2c <randombytes_salsa20XMC_implementation_name>:

static const char *
randombytes_salsa20XMC_implementation_name(void)
{
    return "salsa20XMC";
}
 8000b2c:	4800      	ldr	r0, [pc, #0]	; (8000b30 <randombytes_salsa20XMC_implementation_name+0x4>)
 8000b2e:	4770      	bx	lr
 8000b30:	0800dae8 	.word	0x0800dae8

08000b34 <randombytes_salsa20XMC_random_stir>:
{
 8000b34:	b530      	push	{r4, r5, lr}
 8000b36:	b0b7      	sub	sp, #220	; 0xdc
 8000b38:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <randombytes_salsa20XMC_random_stir+0xb8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	9335      	str	r3, [sp, #212]	; 0xd4
 8000b3e:	f04f 0300 	mov.w	r3, #0
    const unsigned char hsigma[crypto_generichash_KEYBYTES] = {
 8000b42:	ac05      	add	r4, sp, #20
 8000b44:	4d2a      	ldr	r5, [pc, #168]	; (8000bf0 <randombytes_salsa20XMC_random_stir+0xbc>)
 8000b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memset(stream.rnd32, 0, sizeof stream.rnd32);
 8000b52:	4c28      	ldr	r4, [pc, #160]	; (8000bf4 <randombytes_salsa20XMC_random_stir+0xc0>)
 8000b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000b5e:	f00a f80d 	bl	800ab7c <memset>
    stream.rnd32_outleft = (size_t) 0U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	6023      	str	r3, [r4, #0]
    if (stream.initialized == 0) {
 8000b66:	68a3      	ldr	r3, [r4, #8]
 8000b68:	b1d3      	cbz	r3, 8000ba0 <randombytes_salsa20XMC_random_stir+0x6c>
    if (crypto_generichash(stream.key, sizeof stream.key, k0, sizeof_k0,
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	9103      	str	r1, [sp, #12]
 8000b6e:	ab05      	add	r3, sp, #20
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	2300      	movs	r3, #0
 8000b76:	e9cd 2300 	strd	r2, r3, [sp]
 8000b7a:	aa15      	add	r2, sp, #84	; 0x54
 8000b7c:	481e      	ldr	r0, [pc, #120]	; (8000bf8 <randombytes_salsa20XMC_random_stir+0xc4>)
 8000b7e:	f003 fdd4 	bl	800472a <crypto_generichash>
 8000b82:	bb70      	cbnz	r0, 8000be2 <randombytes_salsa20XMC_random_stir+0xae>
    randombytes_salsa20XMC_random_rekey(m0);
 8000b84:	a80d      	add	r0, sp, #52	; 0x34
 8000b86:	f7ff ffbd 	bl	8000b04 <randombytes_salsa20XMC_random_rekey>
    sodium_memzero(m0, sizeof m0);
 8000b8a:	21a0      	movs	r1, #160	; 0xa0
 8000b8c:	a80d      	add	r0, sp, #52	; 0x34
 8000b8e:	f004 f96a 	bl	8004e66 <sodium_memzero>
}
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <randombytes_salsa20XMC_random_stir+0xb8>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8000b98:	405a      	eors	r2, r3
 8000b9a:	d124      	bne.n	8000be6 <randombytes_salsa20XMC_random_stir+0xb2>
 8000b9c:	b037      	add	sp, #220	; 0xdc
 8000b9e:	bd30      	pop	{r4, r5, pc}
    crypto_generichash(hash, sizeof hash, RANDOMBYTES_SALSA20XMC_PSRAM_START,\
 8000ba0:	ac0d      	add	r4, sp, #52	; 0x34
 8000ba2:	9303      	str	r3, [sp, #12]
 8000ba4:	9302      	str	r3, [sp, #8]
 8000ba6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9cd 2300 	strd	r2, r3, [sp]
 8000bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f003 fdb7 	bl	800472a <crypto_generichash>
    memcpy(&stream.nonce, &hash, sizeof(stream.nonce) < sizeof(hash) ? \
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <randombytes_salsa20XMC_random_stir+0xc8>)
 8000bbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bc2:	e883 0003 	stmia.w	r3, {r0, r1}
    assert(stream.nonce != (uint64_t) 0U);
 8000bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	d003      	beq.n	8000bd6 <randombytes_salsa20XMC_random_stir+0xa2>
        stream.initialized = 1;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <randombytes_salsa20XMC_random_stir+0xc0>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	e7c9      	b.n	8000b6a <randombytes_salsa20XMC_random_stir+0x36>
    assert(stream.nonce != (uint64_t) 0U);
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <randombytes_salsa20XMC_random_stir+0xcc>)
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <randombytes_salsa20XMC_random_stir+0xd0>)
 8000bda:	2151      	movs	r1, #81	; 0x51
 8000bdc:	480a      	ldr	r0, [pc, #40]	; (8000c08 <randombytes_salsa20XMC_random_stir+0xd4>)
 8000bde:	f009 fb5f 	bl	800a2a0 <__assert_func>
        abort(); /* LCOV_EXCL_LINE */
 8000be2:	f009 fb55 	bl	800a290 <abort>
}
 8000be6:	f7ff ff7b 	bl	8000ae0 <__stack_chk_fail>
 8000bea:	bf00      	nop
 8000bec:	0800db64 	.word	0x0800db64
 8000bf0:	0800db34 	.word	0x0800db34
 8000bf4:	20000030 	.word	0x20000030
 8000bf8:	20000040 	.word	0x20000040
 8000bfc:	20000460 	.word	0x20000460
 8000c00:	0800daf4 	.word	0x0800daf4
 8000c04:	0800db68 	.word	0x0800db68
 8000c08:	0800db14 	.word	0x0800db14

08000c0c <randombytes_salsa20XMC_random_buf>:
{
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	4604      	mov	r4, r0
 8000c12:	9103      	str	r1, [sp, #12]
    if (stream.initialized == 0) {
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <randombytes_salsa20XMC_random_buf+0x94>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d038      	beq.n	8000c8e <randombytes_salsa20XMC_random_buf+0x82>
    ret = crypto_stream_salsa20((unsigned char *) buf, (unsigned long long) size,
 8000c1c:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <randombytes_salsa20XMC_random_buf+0x94>)
 8000c1e:	f103 0210 	add.w	r2, r3, #16
 8000c22:	9201      	str	r2, [sp, #4]
 8000c24:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	9a03      	ldr	r2, [sp, #12]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f003 ff90 	bl	8004b54 <crypto_stream_salsa20>
    assert(ret == 0);
 8000c34:	bb70      	cbnz	r0, 8000c94 <randombytes_salsa20XMC_random_buf+0x88>
        stream.key[i] ^= ((const unsigned char *) (const void *) &size)[i];
 8000c36:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <randombytes_salsa20XMC_random_buf+0x94>)
 8000c38:	7c03      	ldrb	r3, [r0, #16]
 8000c3a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000c3e:	4053      	eors	r3, r2
 8000c40:	7403      	strb	r3, [r0, #16]
 8000c42:	7c43      	ldrb	r3, [r0, #17]
 8000c44:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000c48:	4053      	eors	r3, r2
 8000c4a:	7443      	strb	r3, [r0, #17]
 8000c4c:	7c83      	ldrb	r3, [r0, #18]
 8000c4e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8000c52:	4053      	eors	r3, r2
 8000c54:	7483      	strb	r3, [r0, #18]
 8000c56:	7cc3      	ldrb	r3, [r0, #19]
 8000c58:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000c5c:	4053      	eors	r3, r2
 8000c5e:	74c3      	strb	r3, [r0, #19]
    stream.nonce++;
 8000c60:	f500 6386 	add.w	r3, r0, #1072	; 0x430
 8000c64:	f8d0 2430 	ldr.w	r2, [r0, #1072]	; 0x430
 8000c68:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
 8000c6c:	3201      	adds	r2, #1
 8000c6e:	f141 0100 	adc.w	r1, r1, #0
 8000c72:	f8c0 2430 	str.w	r2, [r0, #1072]	; 0x430
 8000c76:	f8c0 1434 	str.w	r1, [r0, #1076]	; 0x434
    crypto_stream_salsa20_xor(stream.key, stream.key, sizeof stream.key,
 8000c7a:	3010      	adds	r0, #16
 8000c7c:	9001      	str	r0, [sp, #4]
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2220      	movs	r2, #32
 8000c82:	2300      	movs	r3, #0
 8000c84:	4601      	mov	r1, r0
 8000c86:	f003 ff79 	bl	8004b7c <crypto_stream_salsa20_xor>
}
 8000c8a:	b004      	add	sp, #16
 8000c8c:	bd10      	pop	{r4, pc}
        randombytes_salsa20XMC_random_stir();
 8000c8e:	f7ff ff51 	bl	8000b34 <randombytes_salsa20XMC_random_stir>
 8000c92:	e7c3      	b.n	8000c1c <randombytes_salsa20XMC_random_buf+0x10>
    assert(ret == 0);
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <randombytes_salsa20XMC_random_buf+0x98>)
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <randombytes_salsa20XMC_random_buf+0x9c>)
 8000c98:	219d      	movs	r1, #157	; 0x9d
 8000c9a:	4804      	ldr	r0, [pc, #16]	; (8000cac <randombytes_salsa20XMC_random_buf+0xa0>)
 8000c9c:	f009 fb00 	bl	800a2a0 <__assert_func>
 8000ca0:	20000030 	.word	0x20000030
 8000ca4:	0800db58 	.word	0x0800db58
 8000ca8:	0800db8c 	.word	0x0800db8c
 8000cac:	0800db14 	.word	0x0800db14

08000cb0 <randombytes_salsa20XMC_random>:
{
 8000cb0:	b510      	push	{r4, lr}
 8000cb2:	b082      	sub	sp, #8
    if (stream.rnd32_outleft <= (size_t) 0U) {
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <randombytes_salsa20XMC_random+0x78>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	bb1b      	cbnz	r3, 8000d02 <randombytes_salsa20XMC_random+0x52>
    if (stream.initialized == 0) {
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <randombytes_salsa20XMC_random+0x78>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	b353      	cbz	r3, 8000d16 <randombytes_salsa20XMC_random+0x66>
        ret = crypto_stream_salsa20((unsigned char *) stream.rnd32,
 8000cc0:	4819      	ldr	r0, [pc, #100]	; (8000d28 <randombytes_salsa20XMC_random+0x78>)
 8000cc2:	f100 0310 	add.w	r3, r0, #16
 8000cc6:	9301      	str	r3, [sp, #4]
 8000cc8:	f500 6386 	add.w	r3, r0, #1072	; 0x430
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	3030      	adds	r0, #48	; 0x30
 8000cd6:	f003 ff3d 	bl	8004b54 <crypto_stream_salsa20>
        assert(ret == 0);
 8000cda:	b9f8      	cbnz	r0, 8000d1c <randombytes_salsa20XMC_random+0x6c>
        stream.rnd32_outleft = (sizeof stream.rnd32) - (sizeof stream.key);
 8000cdc:	4c12      	ldr	r4, [pc, #72]	; (8000d28 <randombytes_salsa20XMC_random+0x78>)
 8000cde:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000ce2:	6023      	str	r3, [r4, #0]
        randombytes_salsa20XMC_random_rekey(&stream.rnd32[stream.rnd32_outleft]);
 8000ce4:	f504 6082 	add.w	r0, r4, #1040	; 0x410
 8000ce8:	f7ff ff0c 	bl	8000b04 <randombytes_salsa20XMC_random_rekey>
        stream.nonce++;
 8000cec:	f8d4 2430 	ldr.w	r2, [r4, #1072]	; 0x430
 8000cf0:	f8d4 1434 	ldr.w	r1, [r4, #1076]	; 0x434
 8000cf4:	3201      	adds	r2, #1
 8000cf6:	f141 0100 	adc.w	r1, r1, #0
 8000cfa:	f8c4 2430 	str.w	r2, [r4, #1072]	; 0x430
 8000cfe:	f8c4 1434 	str.w	r1, [r4, #1076]	; 0x434
    stream.rnd32_outleft -= sizeof val;
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <randombytes_salsa20XMC_random+0x78>)
 8000d04:	6813      	ldr	r3, [r2, #0]
 8000d06:	1f19      	subs	r1, r3, #4
 8000d08:	6011      	str	r1, [r2, #0]
    memcpy(&val, &stream.rnd32[stream.rnd32_outleft], sizeof val);
 8000d0a:	332c      	adds	r3, #44	; 0x2c
 8000d0c:	58d0      	ldr	r0, [r2, r3]
    memset(&stream.rnd32[stream.rnd32_outleft], 0, sizeof val);
 8000d0e:	2100      	movs	r1, #0
 8000d10:	50d1      	str	r1, [r2, r3]
}
 8000d12:	b002      	add	sp, #8
 8000d14:	bd10      	pop	{r4, pc}
        randombytes_salsa20XMC_random_stir();
 8000d16:	f7ff ff0d 	bl	8000b34 <randombytes_salsa20XMC_random_stir>
 8000d1a:	e7d1      	b.n	8000cc0 <randombytes_salsa20XMC_random+0x10>
        assert(ret == 0);
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <randombytes_salsa20XMC_random+0x7c>)
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <randombytes_salsa20XMC_random+0x80>)
 8000d20:	21b6      	movs	r1, #182	; 0xb6
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <randombytes_salsa20XMC_random+0x84>)
 8000d24:	f009 fabc 	bl	800a2a0 <__assert_func>
 8000d28:	20000030 	.word	0x20000030
 8000d2c:	0800db58 	.word	0x0800db58
 8000d30:	0800dbb0 	.word	0x0800dbb0
 8000d34:	0800db14 	.word	0x0800db14

08000d38 <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 8000d38:	b510      	push	{r4, lr}
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8000d3a:	4c07      	ldr	r4, [pc, #28]	; (8000d58 <USBD_HandleEP0_Stall+0x20>)
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d40:	2101      	movs	r1, #1
 8000d42:	2080      	movs	r0, #128	; 0x80
 8000d44:	4798      	blx	r3
	device.EP0_State = IDLE;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	2118      	movs	r1, #24
 8000d52:	2000      	movs	r0, #0
 8000d54:	4798      	blx	r3
}
 8000d56:	bd10      	pop	{r4, pc}
 8000d58:	20001244 	.word	0x20001244

08000d5c <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 8000d5c:	b530      	push	{r4, r5, lr}
 8000d5e:	b083      	sub	sp, #12
	uint32_t length = 0,ret;
	uint16_t status = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8ad 3002 	strh.w	r3, [sp, #2]
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 8000d66:	4ba2      	ldr	r3, [pc, #648]	; (8000ff0 <USB_Device_ProcessControlRequest+0x294>)
 8000d68:	885c      	ldrh	r4, [r3, #2]

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
 8000d6a:	f7ff fbbd 	bl	80004e8 <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 8000d6e:	4ba1      	ldr	r3, [pc, #644]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000d70:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000d74:	f013 0f02 	tst.w	r3, #2
 8000d78:	d058      	beq.n	8000e2c <USB_Device_ProcessControlRequest+0xd0>
	Value = USB_ControlRequest.wValue & 0x00FF;
 8000d7a:	b2e4      	uxtb	r4, r4
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 8000d7c:	4b9c      	ldr	r3, [pc, #624]	; (8000ff0 <USB_Device_ProcessControlRequest+0x294>)
 8000d7e:	785b      	ldrb	r3, [r3, #1]
 8000d80:	2b0c      	cmp	r3, #12
 8000d82:	f200 8176 	bhi.w	8001072 <USB_Device_ProcessControlRequest+0x316>
 8000d86:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000d8a:	0089      	.short	0x0089
 8000d8c:	0174000d 	.word	0x0174000d
 8000d90:	0174011a 	.word	0x0174011a
 8000d94:	005300db 	.word	0x005300db
 8000d98:	00420101 	.word	0x00420101
 8000d9c:	007000ea 	.word	0x007000ea
 8000da0:	01710104 	.word	0x01710104
	case REQ_ClearFeature:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8000da4:	4b92      	ldr	r3, [pc, #584]	; (8000ff0 <USB_Device_ProcessControlRequest+0x294>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d008      	beq.n	8000dc2 <USB_Device_ProcessControlRequest+0x66>
			} else {
				USBD_HandleEP0_Stall();
			}
			break;
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8000db0:	bb53      	cbnz	r3, 8000e08 <USB_Device_ProcessControlRequest+0xac>
			 device.RemoteWakeUp = 0;
 8000db2:	4b90      	ldr	r3, [pc, #576]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000db4:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8000db8:	f36f 0282 	bfc	r2, #2, #1
 8000dbc:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
			 break;
 8000dc0:	e02d      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 8000dc2:	4b8b      	ldr	r3, [pc, #556]	; (8000ff0 <USB_Device_ProcessControlRequest+0x294>)
 8000dc4:	8898      	ldrh	r0, [r3, #4]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8000dc6:	4b8c      	ldr	r3, [pc, #560]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d000      	beq.n	8000dd2 <USB_Device_ProcessControlRequest+0x76>
 8000dd0:	b948      	cbnz	r0, 8000de6 <USB_Device_ProcessControlRequest+0x8a>
					device.Endpoints[Index].IsConfigured==1) {
 8000dd2:	f000 020f 	and.w	r2, r0, #15
 8000dd6:	4987      	ldr	r1, [pc, #540]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000dd8:	232c      	movs	r3, #44	; 0x2c
 8000dda:	fb03 1302 	mla	r3, r3, r2, r1
 8000dde:	7a1b      	ldrb	r3, [r3, #8]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8000de0:	f013 0f01 	tst.w	r3, #1
 8000de4:	d102      	bne.n	8000dec <USB_Device_ProcessControlRequest+0x90>
				USBD_HandleEP0_Stall();
 8000de6:	f7ff ffa7 	bl	8000d38 <USBD_HandleEP0_Stall>
 8000dea:	e018      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
				device.Endpoints[Index].IsHalted = 0;
 8000dec:	460b      	mov	r3, r1
 8000dee:	212c      	movs	r1, #44	; 0x2c
 8000df0:	fb01 3202 	mla	r2, r1, r2, r3
 8000df4:	7a11      	ldrb	r1, [r2, #8]
 8000df6:	f36f 0182 	bfc	r1, #2, #1
 8000dfa:	7211      	strb	r1, [r2, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	2100      	movs	r1, #0
 8000e02:	b2c0      	uxtb	r0, r0
 8000e04:	4798      	blx	r3
 8000e06:	e00a      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		}
		USBD_HandleEP0_Stall();
 8000e08:	f7ff ff96 	bl	8000d38 <USBD_HandleEP0_Stall>
		break;
 8000e0c:	e007      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>

	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 8000e0e:	497b      	ldr	r1, [pc, #492]	; (8000ffc <USB_Device_ProcessControlRequest+0x2a0>)
 8000e10:	f2a1 1339 	subw	r3, r1, #313	; 0x139
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	4798      	blx	r3
		break;

	default:
		USBD_HandleEP0_Stall();
	}
	device.IsSetupRecieved = 0;
 8000e1e:	4a75      	ldr	r2, [pc, #468]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000e20:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000e24:	f36f 0341 	bfc	r3, #1, #1
 8000e28:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8000e2c:	b003      	add	sp, #12
 8000e2e:	bd30      	pop	{r4, r5, pc}
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 8000e30:	4b6f      	ldr	r3, [pc, #444]	; (8000ff0 <USB_Device_ProcessControlRequest+0x294>)
 8000e32:	8899      	ldrh	r1, [r3, #4]
 8000e34:	aa01      	add	r2, sp, #4
 8000e36:	b2c9      	uxtb	r1, r1
 8000e38:	8858      	ldrh	r0, [r3, #2]
 8000e3a:	f7ff fb61 	bl	8000500 <CALLBACK_USB_GetDescriptor>
		if (length==0)
 8000e3e:	b188      	cbz	r0, 8000e64 <USB_Device_ProcessControlRequest+0x108>
			length = length < USB_ControlRequest.wLength ?
 8000e40:	4a6b      	ldr	r2, [pc, #428]	; (8000ff0 <USB_Device_ProcessControlRequest+0x294>)
 8000e42:	88d4      	ldrh	r4, [r2, #6]
 8000e44:	4284      	cmp	r4, r0
 8000e46:	bf28      	it	cs
 8000e48:	4604      	movcs	r4, r0
			ret = device.Driver->EndpointWrite(0,buffer,length);
 8000e4a:	4d6a      	ldr	r5, [pc, #424]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4622      	mov	r2, r4
 8000e52:	9901      	ldr	r1, [sp, #4]
 8000e54:	2000      	movs	r0, #0
 8000e56:	4798      	blx	r3
			device.Endpoints[0].InDataLeft = length - ret;
 8000e58:	1a24      	subs	r4, r4, r0
 8000e5a:	62ac      	str	r4, [r5, #40]	; 0x28
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8000e5c:	9b01      	ldr	r3, [sp, #4]
 8000e5e:	4418      	add	r0, r3
 8000e60:	62e8      	str	r0, [r5, #44]	; 0x2c
 8000e62:	e7dc      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000e64:	f7ff ff68 	bl	8000d38 <USBD_HandleEP0_Stall>
 8000e68:	e7d9      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000e6a:	4b63      	ldr	r3, [pc, #396]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d007      	beq.n	8000e84 <USB_Device_ProcessControlRequest+0x128>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000e74:	4b60      	ldr	r3, [pc, #384]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d1cf      	bne.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000e7e:	f7ff ff5b 	bl	8000d38 <USBD_HandleEP0_Stall>
			break;
 8000e82:	e7cc      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 8000e84:	4b5a      	ldr	r3, [pc, #360]	; (8000ff0 <USB_Device_ProcessControlRequest+0x294>)
 8000e86:	889b      	ldrh	r3, [r3, #4]
 8000e88:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000e8c:	4959      	ldr	r1, [pc, #356]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000e8e:	680a      	ldr	r2, [r1, #0]
 8000e90:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8000e92:	2201      	movs	r2, #1
 8000e94:	4419      	add	r1, r3
 8000e96:	2000      	movs	r0, #0
 8000e98:	47a0      	blx	r4
			break;
 8000e9a:	e7c0      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8000e9c:	4b54      	ldr	r3, [pc, #336]	; (8000ff0 <USB_Device_ProcessControlRequest+0x294>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	f013 0303 	ands.w	r3, r3, #3
 8000ea4:	d112      	bne.n	8000ecc <USB_Device_ProcessControlRequest+0x170>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 8000ea6:	4a53      	ldr	r2, [pc, #332]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000ea8:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000eac:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8000eb0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000eb4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000eb8:	f8ad 3002 	strh.w	r3, [sp, #2]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000ebc:	6813      	ldr	r3, [r2, #0]
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	eb0d 0102 	add.w	r1, sp, r2
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	4798      	blx	r3
			break;
 8000eca:	e7a8      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d024      	beq.n	8000f1a <USB_Device_ProcessControlRequest+0x1be>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d127      	bne.n	8000f24 <USB_Device_ProcessControlRequest+0x1c8>
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 8000ed4:	4b46      	ldr	r3, [pc, #280]	; (8000ff0 <USB_Device_ProcessControlRequest+0x294>)
 8000ed6:	889b      	ldrh	r3, [r3, #4]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000ed8:	4a47      	ldr	r2, [pc, #284]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000eda:	7812      	ldrb	r2, [r2, #0]
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	2a04      	cmp	r2, #4
 8000ee0:	d000      	beq.n	8000ee4 <USB_Device_ProcessControlRequest+0x188>
 8000ee2:	b9fb      	cbnz	r3, 8000f24 <USB_Device_ProcessControlRequest+0x1c8>
					device.Endpoints[Index].IsConfigured==1) {
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	4942      	ldr	r1, [pc, #264]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000eea:	222c      	movs	r2, #44	; 0x2c
 8000eec:	fb02 1203 	mla	r2, r2, r3, r1
 8000ef0:	7a12      	ldrb	r2, [r2, #8]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000ef2:	f012 0f01 	tst.w	r2, #1
 8000ef6:	d015      	beq.n	8000f24 <USB_Device_ProcessControlRequest+0x1c8>
				status = device.Endpoints[Index].IsHalted;
 8000ef8:	460a      	mov	r2, r1
 8000efa:	212c      	movs	r1, #44	; 0x2c
 8000efc:	fb01 2303 	mla	r3, r1, r3, r2
 8000f00:	7a1b      	ldrb	r3, [r3, #8]
 8000f02:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f06:	f8ad 3002 	strh.w	r3, [sp, #2]
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	2202      	movs	r2, #2
 8000f10:	eb0d 0102 	add.w	r1, sp, r2
 8000f14:	2000      	movs	r0, #0
 8000f16:	4798      	blx	r3
				break;
 8000f18:	e781      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8000f1a:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d002      	beq.n	8000f2a <USB_Device_ProcessControlRequest+0x1ce>
		USBD_HandleEP0_Stall();
 8000f24:	f7ff ff08 	bl	8000d38 <USBD_HandleEP0_Stall>
		break;
 8000f28:	e779      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
			status = 0;
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f8ad 0002 	strh.w	r0, [sp, #2]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000f30:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	2202      	movs	r2, #2
 8000f38:	eb0d 0102 	add.w	r1, sp, r2
 8000f3c:	4798      	blx	r3
			break;
 8000f3e:	e76e      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		if (Value == 0)
 8000f40:	b94c      	cbnz	r4, 8000f56 <USB_Device_ProcessControlRequest+0x1fa>
			USB_DeviceState = DEVICE_STATE_Default;
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 8000f48:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4620      	mov	r0, r4
 8000f52:	4798      	blx	r3
		break;
 8000f54:	e763      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000f58:	2203      	movs	r2, #3
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e7f4      	b.n	8000f48 <USB_Device_ProcessControlRequest+0x1ec>
		device.Configuration = Value;
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000f60:	f883 4139 	strb.w	r4, [r3, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 8000f64:	f7ff fa9a 	bl	800049c <EVENT_USB_Device_ConfigurationChanged>
		if (Value == 0) {
 8000f68:	b91c      	cbnz	r4, 8000f72 <USB_Device_ProcessControlRequest+0x216>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	701a      	strb	r2, [r3, #0]
			break;
 8000f70:	e755      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		if (device.IsConfigured == 1)
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000f74:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000f78:	f013 0f01 	tst.w	r3, #1
 8000f7c:	d003      	beq.n	8000f86 <USB_Device_ProcessControlRequest+0x22a>
			USB_DeviceState = DEVICE_STATE_Configured;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	701a      	strb	r2, [r3, #0]
 8000f84:	e74b      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000f86:	f7ff fed7 	bl	8000d38 <USBD_HandleEP0_Stall>
 8000f8a:	e748      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		USBD_HandleEP0_Stall();
 8000f8c:	f7ff fed4 	bl	8000d38 <USBD_HandleEP0_Stall>
		break;
 8000f90:	e745      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d008      	beq.n	8000fae <USB_Device_ProcessControlRequest+0x252>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	f47f af3b 	bne.w	8000e1e <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000fa8:	f7ff fec6 	bl	8000d38 <USBD_HandleEP0_Stall>
			break;
 8000fac:	e737      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <USB_Device_ProcessControlRequest+0x294>)
 8000fb0:	8891      	ldrh	r1, [r2, #4]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <USB_Device_ProcessControlRequest+0x298>)
 8000fb4:	440b      	add	r3, r1
 8000fb6:	8852      	ldrh	r2, [r2, #2]
 8000fb8:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 8000fbc:	e72f      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		if (Value == FEATURE_SEL_TestMode) {
 8000fbe:	2c02      	cmp	r4, #2
 8000fc0:	d013      	beq.n	8000fea <USB_Device_ProcessControlRequest+0x28e>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d019      	beq.n	8001000 <USB_Device_ProcessControlRequest+0x2a4>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <USB_Device_ProcessControlRequest+0x29c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d106      	bne.n	8000fe4 <USB_Device_ProcessControlRequest+0x288>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000fd6:	b92c      	cbnz	r4, 8000fe4 <USB_Device_ProcessControlRequest+0x288>
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <USB_Device_ProcessControlRequest+0x294>)
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d036      	beq.n	8001052 <USB_Device_ProcessControlRequest+0x2f6>
		USBD_HandleEP0_Stall();
 8000fe4:	f7ff fea8 	bl	8000d38 <USBD_HandleEP0_Stall>
		break;
 8000fe8:	e719      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000fea:	f7ff fea5 	bl	8000d38 <USBD_HandleEP0_Stall>
			break;
 8000fee:	e716      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
 8000ff0:	20001594 	.word	0x20001594
 8000ff4:	20001244 	.word	0x20001244
 8000ff8:	20001591 	.word	0x20001591
 8000ffc:	2000137d 	.word	0x2000137d
			switch (Value) {
 8001000:	b154      	cbz	r4, 8001018 <USB_Device_ProcessControlRequest+0x2bc>
 8001002:	2c01      	cmp	r4, #1
 8001004:	f47f af0b 	bne.w	8000e1e <USB_Device_ProcessControlRequest+0xc2>
				device.RemoteWakeUp = 1;
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <USB_Device_ProcessControlRequest+0x31c>)
 800100a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				break;
 8001016:	e702      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <USB_Device_ProcessControlRequest+0x320>)
 800101a:	8898      	ldrh	r0, [r3, #4]
				if (device.Endpoints[Index].IsConfigured == 0)
 800101c:	f000 030f 	and.w	r3, r0, #15
 8001020:	4915      	ldr	r1, [pc, #84]	; (8001078 <USB_Device_ProcessControlRequest+0x31c>)
 8001022:	222c      	movs	r2, #44	; 0x2c
 8001024:	fb02 1203 	mla	r2, r2, r3, r1
 8001028:	7a12      	ldrb	r2, [r2, #8]
 800102a:	f012 0f01 	tst.w	r2, #1
 800102e:	d00d      	beq.n	800104c <USB_Device_ProcessControlRequest+0x2f0>
					device.Endpoints[Index].IsHalted = 1;
 8001030:	4911      	ldr	r1, [pc, #68]	; (8001078 <USB_Device_ProcessControlRequest+0x31c>)
 8001032:	222c      	movs	r2, #44	; 0x2c
 8001034:	fb02 1303 	mla	r3, r2, r3, r1
 8001038:	7a1a      	ldrb	r2, [r3, #8]
 800103a:	f042 0204 	orr.w	r2, r2, #4
 800103e:	721a      	strb	r2, [r3, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8001040:	680b      	ldr	r3, [r1, #0]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	2101      	movs	r1, #1
 8001046:	b2c0      	uxtb	r0, r0
 8001048:	4798      	blx	r3
 800104a:	e6e8      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
					USBD_HandleEP0_Stall();
 800104c:	f7ff fe74 	bl	8000d38 <USBD_HandleEP0_Stall>
 8001050:	e6e5      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <USB_Device_ProcessControlRequest+0x320>)
 8001054:	889b      	ldrh	r3, [r3, #4]
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1c3      	bne.n	8000fe4 <USB_Device_ProcessControlRequest+0x288>
				device.Endpoints[0].IsHalted = 1;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <USB_Device_ProcessControlRequest+0x31c>)
 800105e:	7a13      	ldrb	r3, [r2, #8]
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	7213      	strb	r3, [r2, #8]
				USBD_HandleEP0_Stall();
 8001066:	f7ff fe67 	bl	8000d38 <USBD_HandleEP0_Stall>
				break;
 800106a:	e6d8      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		USBD_HandleEP0_Stall();
 800106c:	f7ff fe64 	bl	8000d38 <USBD_HandleEP0_Stall>
		break;
 8001070:	e6d5      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
		USBD_HandleEP0_Stall();
 8001072:	f7ff fe61 	bl	8000d38 <USBD_HandleEP0_Stall>
 8001076:	e6d2      	b.n	8000e1e <USB_Device_ProcessControlRequest+0xc2>
 8001078:	20001244 	.word	0x20001244
 800107c:	20001594 	.word	0x20001594

08001080 <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 8001080:	b510      	push	{r4, lr}
	if (device.EP0_State == IN_DATA) {
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <USBD_HandleEP0_IN+0x38>)
 8001084:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8001088:	2b02      	cmp	r3, #2
 800108a:	d00b      	beq.n	80010a4 <USBD_HandleEP0_IN+0x24>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
		device.EP0_State = OUT_STATUS;
	}
	if (device.EP0_State == IN_STATUS) {
 800108c:	2b03      	cmp	r3, #3
 800108e:	d112      	bne.n	80010b6 <USBD_HandleEP0_IN+0x36>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8001090:	4c09      	ldr	r4, [pc, #36]	; (80010b8 <USBD_HandleEP0_IN+0x38>)
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001096:	2118      	movs	r1, #24
 8001098:	7920      	ldrb	r0, [r4, #4]
 800109a:	4798      	blx	r3
		device.EP0_State = IDLE;
 800109c:	2301      	movs	r3, #1
 800109e:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	}
}
 80010a2:	e008      	b.n	80010b6 <USBD_HandleEP0_IN+0x36>
		device.Driver->EndpointReadStart(0,0);
 80010a4:	4c04      	ldr	r4, [pc, #16]	; (80010b8 <USBD_HandleEP0_IN+0x38>)
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	2100      	movs	r1, #0
 80010ac:	4608      	mov	r0, r1
 80010ae:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 80010b0:	2305      	movs	r3, #5
 80010b2:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
}
 80010b6:	bd10      	pop	{r4, pc}
 80010b8:	20001244 	.word	0x20001244

080010bc <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 80010bc:	b510      	push	{r4, lr}
	if (device.EP0_State == OUT_DATA) {
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <USBD_HandleEP0_OUT+0x40>)
 80010c0:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d002      	beq.n	80010ce <USBD_HandleEP0_OUT+0x12>
		USB_Device_ProcessControlRequest();
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
		device.EP0_State = IN_STATUS;
	}
	if (device.EP0_State == OUT_STATUS) {
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d00d      	beq.n	80010e8 <USBD_HandleEP0_OUT+0x2c>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
		device.EP0_State = IDLE;
	}
}
 80010cc:	bd10      	pop	{r4, pc}
		USB_Device_ProcessControlRequest();
 80010ce:	f7ff fe45 	bl	8000d5c <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 80010d2:	4c0a      	ldr	r4, [pc, #40]	; (80010fc <USBD_HandleEP0_OUT+0x40>)
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	2200      	movs	r2, #0
 80010da:	4611      	mov	r1, r2
 80010dc:	4610      	mov	r0, r2
 80010de:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 80010e0:	2303      	movs	r3, #3
 80010e2:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	if (device.EP0_State == OUT_STATUS) {
 80010e6:	e7f1      	b.n	80010cc <USBD_HandleEP0_OUT+0x10>
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 80010e8:	4c04      	ldr	r4, [pc, #16]	; (80010fc <USBD_HandleEP0_OUT+0x40>)
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	2118      	movs	r1, #24
 80010f0:	7920      	ldrb	r0, [r4, #4]
 80010f2:	4798      	blx	r3
		device.EP0_State = IDLE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
}
 80010fa:	e7e7      	b.n	80010cc <USBD_HandleEP0_OUT+0x10>
 80010fc:	20001244 	.word	0x20001244

08001100 <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 8001100:	b510      	push	{r4, lr}
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 8001102:	4c19      	ldr	r4, [pc, #100]	; (8001168 <USBD_HandleEP0_SETUP+0x68>)
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	2208      	movs	r2, #8
 800110a:	4918      	ldr	r1, [pc, #96]	; (800116c <USBD_HandleEP0_SETUP+0x6c>)
 800110c:	2000      	movs	r0, #0
 800110e:	4798      	blx	r3
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 8001110:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	if (ret_val != 8 )
 800111c:	2808      	cmp	r0, #8
 800111e:	d10f      	bne.n	8001140 <USBD_HandleEP0_SETUP+0x40>
		return;

	/* preprocess */
	/* if length is zero we have only a in_status phase */
	if (USB_ControlRequest.wLength==0) {
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <USBD_HandleEP0_SETUP+0x6c>)
 8001122:	88d9      	ldrh	r1, [r3, #6]
 8001124:	b169      	cbz	r1, 8001142 <USBD_HandleEP0_SETUP+0x42>
		device.EP0_State = IN_STATUS;
		USB_Device_ProcessControlRequest();
		device.Driver->EndpointWrite(0,0,0);
	} else {
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <USBD_HandleEP0_SETUP+0x6c>)
 8001128:	f993 3000 	ldrsb.w	r3, [r3]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db14      	blt.n	800115a <USBD_HandleEP0_SETUP+0x5a>
			device.EP0_State = IN_DATA;
			USB_Device_ProcessControlRequest();
		}
		else {
			device.EP0_State = OUT_DATA;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <USBD_HandleEP0_SETUP+0x68>)
 8001132:	2204      	movs	r2, #4
 8001134:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	2000      	movs	r0, #0
 800113e:	4798      	blx	r3
		}
	}
}
 8001140:	bd10      	pop	{r4, pc}
		device.EP0_State = IN_STATUS;
 8001142:	2303      	movs	r3, #3
 8001144:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 8001148:	f7ff fe08 	bl	8000d5c <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	2200      	movs	r2, #0
 8001152:	4611      	mov	r1, r2
 8001154:	4610      	mov	r0, r2
 8001156:	4798      	blx	r3
 8001158:	e7f2      	b.n	8001140 <USBD_HandleEP0_SETUP+0x40>
			device.EP0_State = IN_DATA;
 800115a:	4b03      	ldr	r3, [pc, #12]	; (8001168 <USBD_HandleEP0_SETUP+0x68>)
 800115c:	2202      	movs	r2, #2
 800115e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			USB_Device_ProcessControlRequest();
 8001162:	f7ff fdfb 	bl	8000d5c <USB_Device_ProcessControlRequest>
 8001166:	e7eb      	b.n	8001140 <USBD_HandleEP0_SETUP+0x40>
 8001168:	20001244 	.word	0x20001244
 800116c:	20001594 	.word	0x20001594

08001170 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	switch (event) {
 8001172:	2809      	cmp	r0, #9
 8001174:	d846      	bhi.n	8001204 <USBD_SignalDeviceEventHandler+0x94>
 8001176:	e8df f000 	tbb	[pc, r0]
 800117a:	525a      	.short	0x525a
 800117c:	45054c49 	.word	0x45054c49
 8001180:	46457f87 	.word	0x46457f87
	case XMC_USBD_EVENT_RESET:
		USB_DeviceState = DEVICE_STATE_Default;
 8001184:	4b45      	ldr	r3, [pc, #276]	; (800129c <USBD_SignalDeviceEventHandler+0x12c>)
 8001186:	2202      	movs	r2, #2
 8001188:	701a      	strb	r2, [r3, #0]
		device.EP0_State = IDLE;
 800118a:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <USBD_SignalDeviceEventHandler+0x130>)
 800118c:	2201      	movs	r2, #1
 800118e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 8001192:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8001196:	f36f 0282 	bfc	r2, #2, #1
 800119a:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 800119e:	2400      	movs	r4, #0
		/* Reset endpoints and configuration */
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
			device.Endpoints[i].InInUse = 0;
 80011a0:	461d      	mov	r5, r3
 80011a2:	262c      	movs	r6, #44	; 0x2c
 80011a4:	e000      	b.n	80011a8 <USBD_SignalDeviceEventHandler+0x38>
 80011a6:	3401      	adds	r4, #1
 80011a8:	fb06 5304 	mla	r3, r6, r4, r5
 80011ac:	891a      	ldrh	r2, [r3, #8]
 80011ae:	f36f 1204 	bfc	r2, #4, #1
 80011b2:	811a      	strh	r2, [r3, #8]
			device.Endpoints[i].OutInUse = 0;
 80011b4:	891a      	ldrh	r2, [r3, #8]
 80011b6:	f36f 02c3 	bfc	r2, #3, #1
 80011ba:	811a      	strh	r2, [r3, #8]
			device.Endpoints[i].IsHalted = 0;
 80011bc:	7a1a      	ldrb	r2, [r3, #8]
 80011be:	f36f 0282 	bfc	r2, #2, #1
 80011c2:	721a      	strb	r2, [r3, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 80011c4:	2c00      	cmp	r4, #0
 80011c6:	d0ee      	beq.n	80011a6 <USBD_SignalDeviceEventHandler+0x36>
 80011c8:	b2d3      	uxtb	r3, r2
 80011ca:	f013 0f01 	tst.w	r3, #1
 80011ce:	d00b      	beq.n	80011e8 <USBD_SignalDeviceEventHandler+0x78>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 80011d0:	fb06 5704 	mla	r7, r6, r4, r5
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	7938      	ldrb	r0, [r7, #4]
 80011da:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 80011dc:	7a3b      	ldrb	r3, [r7, #8]
				device.Endpoints[i].IsEnabled = 0;
 80011de:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80011e2:	f36f 0341 	bfc	r3, #1, #1
 80011e6:	723b      	strb	r3, [r7, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 80011e8:	1c63      	adds	r3, r4, #1
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	dddb      	ble.n	80011a6 <USBD_SignalDeviceEventHandler+0x36>
			}
		}
		device.Configuration = 0;
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <USBD_SignalDeviceEventHandler+0x130>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
		for (i=0;i<NUM_INTERFACES;i++) {
			device.InterfaceSettings[i] = 0;
 80011f6:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
		}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80011fe:	2118      	movs	r1, #24
 8001200:	7918      	ldrb	r0, [r3, #4]
 8001202:	4790      	blx	r2
		EVENT_USB_Device_Suspend();
		break;
	default:
		return;
	}
}
 8001204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		EVENT_USB_Device_StartOfFrame();
 8001206:	f7ff f977 	bl	80004f8 <EVENT_USB_Device_StartOfFrame>
		break;
 800120a:	e7fb      	b.n	8001204 <USBD_SignalDeviceEventHandler+0x94>
		EVENT_USB_Device_Connect();
 800120c:	f7ff f930 	bl	8000470 <EVENT_USB_Device_Connect>
		break;
 8001210:	e7f8      	b.n	8001204 <USBD_SignalDeviceEventHandler+0x94>
		USB_DeviceState = DEVICE_STATE_Powered;
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <USBD_SignalDeviceEventHandler+0x12c>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Disconnect();
 8001218:	f7ff f92b 	bl	8000472 <EVENT_USB_Device_Disconnect>
		break;
 800121c:	e7f2      	b.n	8001204 <USBD_SignalDeviceEventHandler+0x94>
		 USB_DeviceState = DEVICE_STATE_Unattached;
 800121e:	2000      	movs	r0, #0
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <USBD_SignalDeviceEventHandler+0x12c>)
 8001222:	7018      	strb	r0, [r3, #0]
		 device.Driver->EndpointUnconfigure(0);
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <USBD_SignalDeviceEventHandler+0x130>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4798      	blx	r3
		 break;
 800122c:	e7ea      	b.n	8001204 <USBD_SignalDeviceEventHandler+0x94>
		 USB_DeviceState = DEVICE_STATE_Powered;
 800122e:	2501      	movs	r5, #1
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <USBD_SignalDeviceEventHandler+0x12c>)
 8001232:	701d      	strb	r5, [r3, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 8001234:	4c1a      	ldr	r4, [pc, #104]	; (80012a0 <USBD_SignalDeviceEventHandler+0x130>)
 8001236:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800123a:	2100      	movs	r1, #0
 800123c:	4620      	mov	r0, r4
 800123e:	f009 fc9d 	bl	800ab7c <memset>
		 device.Driver = &Driver_USBD0;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <USBD_SignalDeviceEventHandler+0x134>)
 8001244:	6023      	str	r3, [r4, #0]
		 device.EP0_State = IDLE;
 8001246:	f884 513b 	strb.w	r5, [r4, #315]	; 0x13b
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <USBD_SignalDeviceEventHandler+0x138>)
 800124c:	6222      	str	r2, [r4, #32]
		 device.Endpoints[0].InBufferLength = 256;
 800124e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001252:	6262      	str	r2, [r4, #36]	; 0x24
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8001254:	4915      	ldr	r1, [pc, #84]	; (80012ac <USBD_SignalDeviceEventHandler+0x13c>)
 8001256:	6161      	str	r1, [r4, #20]
		 device.Endpoints[0].OutBufferLength = 256;
 8001258:	61a2      	str	r2, [r4, #24]
		 device.Endpoints[0].Direction = 0;
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	7122      	strb	r2, [r4, #4]
		 device.Endpoints[0].IsEnabled = 1;
 8001260:	2203      	movs	r2, #3
 8001262:	7222      	strb	r2, [r4, #8]
		 device.Endpoints[0].MaxPacketSize = 64;
 8001264:	8921      	ldrh	r1, [r4, #8]
 8001266:	2240      	movs	r2, #64	; 0x40
 8001268:	f362 118c 	bfi	r1, r2, #6, #7
 800126c:	8121      	strh	r1, [r4, #8]
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	2100      	movs	r1, #0
 8001272:	4608      	mov	r0, r1
 8001274:	4798      	blx	r3
		break;
 8001276:	e7c5      	b.n	8001204 <USBD_SignalDeviceEventHandler+0x94>
		USB_DeviceState = device.PreSuspendDeviceState;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <USBD_SignalDeviceEventHandler+0x130>)
 800127a:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <USBD_SignalDeviceEventHandler+0x12c>)
 8001280:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_WakeUp();
 8001282:	f7ff f93a 	bl	80004fa <EVENT_USB_Device_WakeUp>
		break;
 8001286:	e7bd      	b.n	8001204 <USBD_SignalDeviceEventHandler+0x94>
		device.PreSuspendDeviceState = USB_DeviceState;
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <USBD_SignalDeviceEventHandler+0x12c>)
 800128a:	7819      	ldrb	r1, [r3, #0]
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <USBD_SignalDeviceEventHandler+0x130>)
 800128e:	f882 113a 	strb.w	r1, [r2, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 8001292:	2205      	movs	r2, #5
 8001294:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Suspend();
 8001296:	f7ff f931 	bl	80004fc <EVENT_USB_Device_Suspend>
		break;
 800129a:	e7b3      	b.n	8001204 <USBD_SignalDeviceEventHandler+0x94>
 800129c:	20001591 	.word	0x20001591
 80012a0:	20001244 	.word	0x20001244
 80012a4:	0800dbd8 	.word	0x0800dbd8
 80012a8:	20001044 	.word	0x20001044
 80012ac:	20001144 	.word	0x20001144

080012b0 <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 80012b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
 80012b2:	f000 040f 	and.w	r4, r0, #15
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 80012b8:	f893 613c 	ldrb.w	r6, [r3, #316]	; 0x13c
	temp_dir = device.CurrentDirection;
 80012bc:	f893 513d 	ldrb.w	r5, [r3, #317]	; 0x13d
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 80012c0:	f883 413c 	strb.w	r4, [r3, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 80012c4:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 80012c8:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	/* choose what to do based on the event */
	switch (ep_event) {
 80012cc:	2901      	cmp	r1, #1
 80012ce:	d015      	beq.n	80012fc <USBD_SignalEndpointEvent_Handler+0x4c>
 80012d0:	2902      	cmp	r1, #2
 80012d2:	d039      	beq.n	8001348 <USBD_SignalEndpointEvent_Handler+0x98>
 80012d4:	b129      	cbz	r1, 80012e2 <USBD_SignalEndpointEvent_Handler+0x32>
		default:
			break;
		}
		break;
	}
	device.CurrentEndpoint = temp_num;
 80012d6:	4b42      	ldr	r3, [pc, #264]	; (80013e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 80012d8:	f883 613c 	strb.w	r6, [r3, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 80012dc:	f883 513d 	strb.w	r5, [r3, #317]	; 0x13d
}
 80012e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ep->OutInUse = 0;
 80012e2:	461a      	mov	r2, r3
 80012e4:	232c      	movs	r3, #44	; 0x2c
 80012e6:	fb03 2304 	mla	r3, r3, r4, r2
 80012ea:	891a      	ldrh	r2, [r3, #8]
 80012ec:	f36f 02c3 	bfc	r2, #3, #1
 80012f0:	811a      	strh	r2, [r3, #8]
		switch(device.CurrentEndpoint) {
 80012f2:	2c00      	cmp	r4, #0
 80012f4:	d1ef      	bne.n	80012d6 <USBD_SignalEndpointEvent_Handler+0x26>
			USBD_HandleEP0_SETUP();
 80012f6:	f7ff ff03 	bl	8001100 <USBD_HandleEP0_SETUP>
			break;
 80012fa:	e7ec      	b.n	80012d6 <USBD_SignalEndpointEvent_Handler+0x26>
		ep->IsOutRecieved = 1;
 80012fc:	4a38      	ldr	r2, [pc, #224]	; (80013e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 80012fe:	232c      	movs	r3, #44	; 0x2c
 8001300:	fb03 2304 	mla	r3, r3, r4, r2
 8001304:	891a      	ldrh	r2, [r3, #8]
 8001306:	f042 0220 	orr.w	r2, r2, #32
 800130a:	811a      	strh	r2, [r3, #8]
		if (ep->OutBytesAvailable == 0) {
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	b963      	cbnz	r3, 800132a <USBD_SignalEndpointEvent_Handler+0x7a>
			ep->OutOffset = 0; /* clear offset, new data is there */
 8001310:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 8001312:	272c      	movs	r7, #44	; 0x2c
 8001314:	fb07 3704 	mla	r7, r7, r4, r3
 8001318:	2200      	movs	r2, #0
 800131a:	613a      	str	r2, [r7, #16]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	6979      	ldr	r1, [r7, #20]
 8001324:	7938      	ldrb	r0, [r7, #4]
 8001326:	4798      	blx	r3
 8001328:	60f8      	str	r0, [r7, #12]
		ep->OutInUse = 0;
 800132a:	4a2d      	ldr	r2, [pc, #180]	; (80013e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 800132c:	232c      	movs	r3, #44	; 0x2c
 800132e:	fb03 2404 	mla	r4, r3, r4, r2
 8001332:	8923      	ldrh	r3, [r4, #8]
 8001334:	f36f 03c3 	bfc	r3, #3, #1
 8001338:	8123      	strh	r3, [r4, #8]
		switch(device.CurrentEndpoint) {
 800133a:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1c9      	bne.n	80012d6 <USBD_SignalEndpointEvent_Handler+0x26>
			USBD_HandleEP0_OUT();
 8001342:	f7ff febb 	bl	80010bc <USBD_HandleEP0_OUT>
			break;
 8001346:	e7c6      	b.n	80012d6 <USBD_SignalEndpointEvent_Handler+0x26>
		if (ep->InDataLeft> 0) {
 8001348:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 800134a:	232c      	movs	r3, #44	; 0x2c
 800134c:	fb03 2304 	mla	r3, r3, r4, r2
 8001350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001352:	2a00      	cmp	r2, #0
 8001354:	d133      	bne.n	80013be <USBD_SignalEndpointEvent_Handler+0x10e>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 8001356:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 8001358:	232c      	movs	r3, #44	; 0x2c
 800135a:	fb03 2304 	mla	r3, r3, r4, r2
 800135e:	7918      	ldrb	r0, [r3, #4]
 8001360:	f010 0f0f 	tst.w	r0, #15
 8001364:	d11a      	bne.n	800139c <USBD_SignalEndpointEvent_Handler+0xec>
 8001366:	232c      	movs	r3, #44	; 0x2c
 8001368:	fb03 2304 	mla	r3, r3, r4, r2
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	b1ab      	cbz	r3, 800139c <USBD_SignalEndpointEvent_Handler+0xec>
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <USBD_SignalEndpointEvent_Handler+0x134>)
 8001372:	88d2      	ldrh	r2, [r2, #6]
 8001374:	4293      	cmp	r3, r2
 8001376:	d011      	beq.n	800139c <USBD_SignalEndpointEvent_Handler+0xec>
 8001378:	4919      	ldr	r1, [pc, #100]	; (80013e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 800137a:	222c      	movs	r2, #44	; 0x2c
 800137c:	fb02 1204 	mla	r2, r2, r4, r1
 8001380:	8912      	ldrh	r2, [r2, #8]
 8001382:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8001386:	fbb3 f1f2 	udiv	r1, r3, r2
 800138a:	fb02 3311 	mls	r3, r2, r1, r3
 800138e:	b92b      	cbnz	r3, 800139c <USBD_SignalEndpointEvent_Handler+0xec>
			device.Driver->EndpointWrite(ep->Address,0,0);
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	2200      	movs	r2, #0
 8001398:	4611      	mov	r1, r2
 800139a:	4798      	blx	r3
		ep->InBytesAvailable = 0;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 800139e:	222c      	movs	r2, #44	; 0x2c
 80013a0:	fb02 3404 	mla	r4, r2, r4, r3
 80013a4:	2100      	movs	r1, #0
 80013a6:	61e1      	str	r1, [r4, #28]
		ep->InInUse = 0;
 80013a8:	8922      	ldrh	r2, [r4, #8]
 80013aa:	f361 1204 	bfi	r2, r1, #4, #1
 80013ae:	8122      	strh	r2, [r4, #8]
		switch(device.CurrentEndpoint) {
 80013b0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d18e      	bne.n	80012d6 <USBD_SignalEndpointEvent_Handler+0x26>
			USBD_HandleEP0_IN();
 80013b8:	f7ff fe62 	bl	8001080 <USBD_HandleEP0_IN>
			break;
 80013bc:	e78b      	b.n	80012d6 <USBD_SignalEndpointEvent_Handler+0x26>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 80013c0:	212c      	movs	r1, #44	; 0x2c
 80013c2:	fb01 3404 	mla	r4, r1, r4, r3
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80013cc:	7920      	ldrb	r0, [r4, #4]
 80013ce:	4798      	blx	r3
			ep->InDataLeft -= data_count;
 80013d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013d2:	1a1b      	subs	r3, r3, r0
 80013d4:	62a3      	str	r3, [r4, #40]	; 0x28
			ep->InDataBuffer+= data_count;
 80013d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013d8:	4418      	add	r0, r3
 80013da:	62e0      	str	r0, [r4, #44]	; 0x2c
			return;
 80013dc:	e780      	b.n	80012e0 <USBD_SignalEndpointEvent_Handler+0x30>
 80013de:	bf00      	nop
 80013e0:	20001244 	.word	0x20001244
 80013e4:	20001594 	.word	0x20001594

080013e8 <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 80013e8:	b538      	push	{r3, r4, r5, lr}
 80013ea:	4605      	mov	r5, r0
	int32_t status = 0;
	memset(&device,0x0,sizeof(USB_Device_t));
 80013ec:	4c18      	ldr	r4, [pc, #96]	; (8001450 <USBD_Initialize+0x68>)
 80013ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013f2:	2100      	movs	r1, #0
 80013f4:	4620      	mov	r0, r4
 80013f6:	f009 fbc1 	bl	800ab7c <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 80013fa:	2100      	movs	r1, #0
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <USBD_Initialize+0x6c>)
 80013fe:	7019      	strb	r1, [r3, #0]
	device.Driver = &Driver_USBD0;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <USBD_Initialize+0x70>)
 8001402:	6023      	str	r3, [r4, #0]
	device.EP0_State = IDLE;
 8001404:	2201      	movs	r2, #1
 8001406:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 800140a:	4a14      	ldr	r2, [pc, #80]	; (800145c <USBD_Initialize+0x74>)
 800140c:	6222      	str	r2, [r4, #32]
	device.Endpoints[0].InBufferLength = 256;
 800140e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001412:	6262      	str	r2, [r4, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8001414:	4812      	ldr	r0, [pc, #72]	; (8001460 <USBD_Initialize+0x78>)
 8001416:	6160      	str	r0, [r4, #20]
	device.Endpoints[0].OutBufferLength = 256;
 8001418:	61a2      	str	r2, [r4, #24]
	device.Endpoints[0].Direction = 0;
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f361 12c7 	bfi	r2, r1, #7, #1
 8001422:	7122      	strb	r2, [r4, #4]
	device.Endpoints[0].IsConfigured = 1;
	device.Endpoints[0].IsEnabled = 1;
 8001424:	2203      	movs	r2, #3
 8001426:	7222      	strb	r2, [r4, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 8001428:	8922      	ldrh	r2, [r4, #8]
 800142a:	2140      	movs	r1, #64	; 0x40
 800142c:	f361 128c 	bfi	r2, r1, #6, #7
 8001430:	8122      	strh	r2, [r4, #8]

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4628      	mov	r0, r5
 8001436:	4798      	blx	r3
	if (status != XMC_USBD_STATUS_OK)
 8001438:	b938      	cbnz	r0, 800144a <USBD_Initialize+0x62>
		return -1;

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	2240      	movs	r2, #64	; 0x40
 8001440:	2100      	movs	r1, #0
 8001442:	4608      	mov	r0, r1
 8001444:	4798      	blx	r3
	if (status != XMC_USBD_STATUS_OK) {
		device.Driver->Uninitialize();
		return -1;
	}

	return 0;
 8001446:	2000      	movs	r0, #0
}
 8001448:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 800144a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800144e:	e7fb      	b.n	8001448 <USBD_Initialize+0x60>
 8001450:	20001244 	.word	0x20001244
 8001454:	20001591 	.word	0x20001591
 8001458:	0800dbd8 	.word	0x0800dbd8
 800145c:	20001044 	.word	0x20001044
 8001460:	20001144 	.word	0x20001144

08001464 <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 8001464:	b508      	push	{r3, lr}
	if (device.Driver->IsEnumDone())
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <USB_IsEnumDone+0x14>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146c:	4798      	blx	r3
		return 1;
	else
		return 0;
 }
 800146e:	3800      	subs	r0, #0
 8001470:	bf18      	it	ne
 8001472:	2001      	movne	r0, #1
 8001474:	bd08      	pop	{r3, pc}
 8001476:	bf00      	nop
 8001478:	20001244 	.word	0x20001244

0800147c <USBD_SetEndpointBuffer>:
 *
 * \param[in] addr Endpoint address
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 800147c:	b410      	push	{r4}
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 800147e:	f000 030f 	and.w	r3, r0, #15
	if (addr & ENDPOINT_DIR_MASK) {
 8001482:	f010 0f80 	tst.w	r0, #128	; 0x80
		device.Endpoints[number].InBuffer = buf;
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <USBD_SetEndpointBuffer+0x24>)
 8001488:	f04f 042c 	mov.w	r4, #44	; 0x2c
 800148c:	fb04 0303 	mla	r3, r4, r3, r0
 8001490:	bf19      	ittee	ne
 8001492:	6219      	strne	r1, [r3, #32]
		device.Endpoints[number].InBufferLength = len;
 8001494:	625a      	strne	r2, [r3, #36]	; 0x24
	} else {
		device.Endpoints[number].OutBuffer = buf;
 8001496:	6159      	streq	r1, [r3, #20]
		device.Endpoints[number].OutBufferLength = len;
 8001498:	619a      	streq	r2, [r3, #24]
	}
}
 800149a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	20001244 	.word	0x20001244

080014a4 <XMC_USBD_lReadFifo>:
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 80014a4:	4b26      	ldr	r3, [pc, #152]	; (8001540 <XMC_USBD_lReadFifo+0x9c>)
 80014a6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80014aa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80014ae:	681b      	ldr	r3, [r3, #0]
  word_count = (byte_count >> 2U );
  temp_word_count = (word_count << 2U);
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 80014b0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80014b4:	d100      	bne.n	80014b8 <XMC_USBD_lReadFifo+0x14>
 80014b6:	4770      	bx	lr
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <XMC_USBD_lReadFifo+0x9c>)
 80014ba:	2334      	movs	r3, #52	; 0x34
 80014bc:	fb03 2300 	mla	r3, r3, r0, r2
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f7      	beq.n	80014b6 <XMC_USBD_lReadFifo+0x12>
{
 80014c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 80014c8:	f8d2 61e0 	ldr.w	r6, [r2, #480]	; 0x1e0
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 80014cc:	ea5f 0e91 	movs.w	lr, r1, lsr #2
 80014d0:	d00b      	beq.n	80014ea <XMC_USBD_lReadFifo+0x46>
 80014d2:	ea4f 078e 	mov.w	r7, lr, lsl #2
 80014d6:	2300      	movs	r3, #0
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 80014d8:	2534      	movs	r5, #52	; 0x34
 80014da:	fb05 2500 	mla	r5, r5, r0, r2
 80014de:	6834      	ldr	r4, [r6, #0]
 80014e0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80014e2:	50d4      	str	r4, [r2, r3]
    for (i = 0U;i < word_count; i++)
 80014e4:	3304      	adds	r3, #4
 80014e6:	429f      	cmp	r7, r3
 80014e8:	d1f9      	bne.n	80014de <XMC_USBD_lReadFifo+0x3a>
  temp_word_count = (word_count << 2U);
 80014ea:	f021 0303 	bic.w	r3, r1, #3
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 80014ee:	f011 0f03 	tst.w	r1, #3
 80014f2:	d019      	beq.n	8001528 <XMC_USBD_lReadFifo+0x84>
    {
      temp_data = *fifo;
 80014f4:	6835      	ldr	r5, [r6, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80014f6:	4299      	cmp	r1, r3
 80014f8:	d916      	bls.n	8001528 <XMC_USBD_lReadFifo+0x84>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 80014fa:	ea4f 048e 	mov.w	r4, lr, lsl #2
 80014fe:	ebc3 068e 	rsb	r6, r3, lr, lsl #2
 8001502:	eb06 0c01 	add.w	ip, r6, r1
 8001506:	2200      	movs	r2, #0
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <XMC_USBD_lReadFifo+0x9c>)
 800150a:	2734      	movs	r7, #52	; 0x34
 800150c:	fb07 3700 	mla	r7, r7, r0, r3
 8001510:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8001514:	fa0e f302 	lsl.w	r3, lr, r2
 8001518:	402b      	ands	r3, r5
 800151a:	40d3      	lsrs	r3, r2
 800151c:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800151e:	5533      	strb	r3, [r6, r4]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001520:	3208      	adds	r2, #8
 8001522:	3401      	adds	r4, #1
 8001524:	4564      	cmp	r4, ip
 8001526:	d1f5      	bne.n	8001514 <XMC_USBD_lReadFifo+0x70>
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <XMC_USBD_lReadFifo+0x9c>)
 800152a:	2234      	movs	r2, #52	; 0x34
 800152c:	fb02 3000 	mla	r0, r2, r0, r3
 8001530:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001532:	440b      	add	r3, r1
 8001534:	62c3      	str	r3, [r0, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001536:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001538:	4419      	add	r1, r3
 800153a:	6241      	str	r1, [r0, #36]	; 0x24
  }
}
 800153c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153e:	bf00      	nop
 8001540:	20001388 	.word	0x20001388

08001544 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 8001544:	b082      	sub	sp, #8
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	9301      	str	r3, [sp, #4]
  /*flush fifo */
  data.b.txfflsh = 1U;
 800154a:	9b01      	ldr	r3, [sp, #4]
 800154c:	f043 0320 	orr.w	r3, r3, #32
 8001550:	9301      	str	r3, [sp, #4]
  data.b.txfnum = fifo_num;
 8001552:	9b01      	ldr	r3, [sp, #4]
 8001554:	f360 138a 	bfi	r3, r0, #6, #5
 8001558:	9301      	str	r3, [sp, #4]
  xmc_device.global_register->grstctl = data.d32;
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <XMC_USBD_lFlushTXFifo+0x48>)
 800155c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001560:	9a01      	ldr	r2, [sp, #4]
 8001562:	611a      	str	r2, [r3, #16]
 8001564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  for (count = 0U;count < 1000U; count++){}
 8001568:	3b01      	subs	r3, #1
 800156a:	d1fd      	bne.n	8001568 <XMC_USBD_lFlushTXFifo+0x24>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <XMC_USBD_lFlushTXFifo+0x48>)
 800156e:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 8001572:	6913      	ldr	r3, [r2, #16]
 8001574:	9301      	str	r3, [sp, #4]
  } while (data.b.txfflsh);
 8001576:	9b01      	ldr	r3, [sp, #4]
 8001578:	f013 0f20 	tst.w	r3, #32
 800157c:	d1f9      	bne.n	8001572 <XMC_USBD_lFlushTXFifo+0x2e>
 800157e:	f240 33e9 	movw	r3, #1001	; 0x3e9
    count = 0U;
  while (count++ < 1000U)
 8001582:	3b01      	subs	r3, #1
 8001584:	d1fd      	bne.n	8001582 <XMC_USBD_lFlushTXFifo+0x3e>
  {
    /* wait 3 phy clocks */
  }
}
 8001586:	b002      	add	sp, #8
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20001388 	.word	0x20001388

08001590 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8001590:	b082      	sub	sp, #8
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	9301      	str	r3, [sp, #4]
  data.b.rxfflsh = 1U;
 8001596:	9b01      	ldr	r3, [sp, #4]
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	9301      	str	r3, [sp, #4]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <XMC_USBD_lFlushRXFifo+0x3c>)
 80015a0:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 80015a4:	9901      	ldr	r1, [sp, #4]
 80015a6:	6111      	str	r1, [r2, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
    data.d32 = xmc_device.global_register->grstctl;
 80015a8:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
{
 80015ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    for (count = 0U; count < 1000U; count++){}
 80015b0:	3b01      	subs	r3, #1
 80015b2:	d1fd      	bne.n	80015b0 <XMC_USBD_lFlushRXFifo+0x20>
    data.d32 = xmc_device.global_register->grstctl;
 80015b4:	6913      	ldr	r3, [r2, #16]
 80015b6:	9301      	str	r3, [sp, #4]
  } while (data.b.rxfflsh);
 80015b8:	9b01      	ldr	r3, [sp, #4]
 80015ba:	f013 0f10 	tst.w	r3, #16
 80015be:	d1f5      	bne.n	80015ac <XMC_USBD_lFlushRXFifo+0x1c>
 80015c0:	f240 33e9 	movw	r3, #1001	; 0x3e9
  count = 0U;
  while (count++ < 1000U)
 80015c4:	3b01      	subs	r3, #1
 80015c6:	d1fd      	bne.n	80015c4 <XMC_USBD_lFlushRXFifo+0x34>
  {
    /* wait 3 phy clocks */
  }
}
 80015c8:	b002      	add	sp, #8
 80015ca:	4770      	bx	lr
 80015cc:	20001388 	.word	0x20001388

080015d0 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 80015d0:	b430      	push	{r4, r5}
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 80015d2:	2100      	movs	r1, #0
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80015d4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80015d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80015d8:	6882      	ldr	r2, [r0, #8]
 80015da:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80015de:	1ae5      	subs	r5, r4, r3
 80015e0:	4295      	cmp	r5, r2
  {
    ep->xferLength += ep->maxTransferSize;
 80015e2:	bf8c      	ite	hi
 80015e4:	189b      	addhi	r3, r3, r2
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 80015e6:	4623      	movls	r3, r4
 80015e8:	6283      	str	r3, [r0, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 80015ea:	7802      	ldrb	r2, [r0, #0]
 80015ec:	f012 0f0f 	tst.w	r2, #15
 80015f0:	d12a      	bne.n	8001648 <XMC_USBD_lStartReadXfer+0x78>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
 80015f2:	2301      	movs	r3, #1
 80015f4:	f363 41d4 	bfi	r1, r3, #19, #2
    ep0_data->b.supcnt = 0x3U;
 80015f8:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 80015fc:	f364 0106 	bfi	r1, r4, #0, #7
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <XMC_USBD_lStartReadXfer+0xa4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	7b5b      	ldrb	r3, [r3, #13]
 8001606:	b94b      	cbnz	r3, 800161c <XMC_USBD_lStartReadXfer+0x4c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8001608:	7803      	ldrb	r3, [r0, #0]
 800160a:	f003 020f 	and.w	r2, r3, #15
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <XMC_USBD_lStartReadXfer+0xa8>)
 8001610:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001614:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001618:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800161a:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 800161c:	4a16      	ldr	r2, [pc, #88]	; (8001678 <XMC_USBD_lStartReadXfer+0xa8>)
 800161e:	7803      	ldrb	r3, [r0, #0]
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001628:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800162c:	6119      	str	r1, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800162e:	7803      	ldrb	r3, [r0, #0]
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001638:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 800163c:	6813      	ldr	r3, [r2, #0]
  epctl.b.cnak = 1U;
  epctl.b.epena = 1U;
 800163e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bc30      	pop	{r4, r5}
 8001646:	4770      	bx	lr
    if (ep->xferLength == 0U)
 8001648:	b92b      	cbnz	r3, 8001656 <XMC_USBD_lStartReadXfer+0x86>
      data.b.xfersize = 0U;
 800164a:	f36f 0112 	bfc	r1, #0, #19
      data.b.pktcnt = 1U;
 800164e:	2301      	movs	r3, #1
 8001650:	f363 41dc 	bfi	r1, r3, #19, #10
 8001654:	e7d4      	b.n	8001600 <XMC_USBD_lStartReadXfer+0x30>
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8001656:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	6842      	ldr	r2, [r0, #4]
 800165c:	f3c2 24c6 	ubfx	r4, r2, #11, #7
 8001660:	1e62      	subs	r2, r4, #1
 8001662:	441a      	add	r2, r3
 8001664:	fbb2 f2f4 	udiv	r2, r2, r4
 8001668:	f362 41dc 	bfi	r1, r2, #19, #10
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 800166c:	f363 0112 	bfi	r1, r3, #0, #19
 8001670:	e7c6      	b.n	8001600 <XMC_USBD_lStartReadXfer+0x30>
 8001672:	bf00      	nop
 8001674:	20001384 	.word	0x20001384
 8001678:	20001388 	.word	0x20001388

0800167c <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 800167c:	b4f0      	push	{r4, r5, r6, r7}
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 800167e:	2500      	movs	r5, #0
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001680:	7802      	ldrb	r2, [r0, #0]
 8001682:	f002 020f 	and.w	r2, r2, #15
 8001686:	f102 016a 	add.w	r1, r2, #106	; 0x6a
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <XMC_USBD_lStartWriteXfer+0xc8>)
 800168c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001690:	681c      	ldr	r4, [r3, #0]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8001692:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001694:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8001696:	6881      	ldr	r1, [r0, #8]
 8001698:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800169c:	1b9f      	subs	r7, r3, r6
 800169e:	428f      	cmp	r7, r1
  {
    ep->xferLength = ep->xferTotal;
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 80016a0:	bf28      	it	cs
 80016a2:	1873      	addcs	r3, r6, r1
 80016a4:	6283      	str	r3, [r0, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 80016a6:	b9bb      	cbnz	r3, 80016d8 <XMC_USBD_lStartWriteXfer+0x5c>
  {
    size.b.xfersize = 0U;
 80016a8:	f36f 0512 	bfc	r5, #0, #19
    size.b.pktcnt = 1U;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f363 45dc 	bfi	r5, r3, #19, #10
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 80016b2:	4a24      	ldr	r2, [pc, #144]	; (8001744 <XMC_USBD_lStartWriteXfer+0xc8>)
 80016b4:	7803      	ldrb	r3, [r0, #0]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	336a      	adds	r3, #106	; 0x6a
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	611d      	str	r5, [r3, #16]
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
 80016c2:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 80016c6:	7803      	ldrb	r3, [r0, #0]
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	336a      	adds	r3, #106	; 0x6a
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	601c      	str	r4, [r3, #0]
}
 80016d4:	bcf0      	pop	{r4, r5, r6, r7}
 80016d6:	4770      	bx	lr
    if (ep->address_u.address_st.number == 0U)
 80016d8:	7801      	ldrb	r1, [r0, #0]
 80016da:	f011 0f0f 	tst.w	r1, #15
 80016de:	d11f      	bne.n	8001720 <XMC_USBD_lStartWriteXfer+0xa4>
      size.b.pktcnt = 1U;
 80016e0:	2101      	movs	r1, #1
 80016e2:	f361 45dc 	bfi	r5, r1, #19, #10
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 80016e6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80016e8:	1a5b      	subs	r3, r3, r1
 80016ea:	f363 0512 	bfi	r5, r3, #0, #19
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <XMC_USBD_lStartWriteXfer+0xcc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	7b59      	ldrb	r1, [r3, #13]
 80016f4:	b929      	cbnz	r1, 8001702 <XMC_USBD_lStartWriteXfer+0x86>
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 80016f6:	326a      	adds	r2, #106	; 0x6a
 80016f8:	4912      	ldr	r1, [pc, #72]	; (8001744 <XMC_USBD_lStartWriteXfer+0xc8>)
 80016fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016fe:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001700:	6151      	str	r1, [r2, #20]
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001702:	7b5b      	ldrb	r3, [r3, #13]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d1d4      	bne.n	80016b2 <XMC_USBD_lStartWriteXfer+0x36>
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <XMC_USBD_lStartWriteXfer+0xc8>)
 800170a:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800170e:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8001710:	7803      	ldrb	r3, [r0, #0]
 8001712:	f003 020f 	and.w	r2, r3, #15
 8001716:	2301      	movs	r3, #1
 8001718:	4093      	lsls	r3, r2
 800171a:	4333      	orrs	r3, r6
 800171c:	634b      	str	r3, [r1, #52]	; 0x34
 800171e:	e7c8      	b.n	80016b2 <XMC_USBD_lStartWriteXfer+0x36>
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001720:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8001722:	1b99      	subs	r1, r3, r6
 8001724:	f361 0512 	bfi	r5, r1, #0, #19
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001728:	6841      	ldr	r1, [r0, #4]
 800172a:	f3c1 21c6 	ubfx	r1, r1, #11, #7
 800172e:	1b9b      	subs	r3, r3, r6
 8001730:	1e4e      	subs	r6, r1, #1
 8001732:	b2b6      	uxth	r6, r6
 8001734:	fa16 f383 	uxtah	r3, r6, r3
 8001738:	fb93 f3f1 	sdiv	r3, r3, r1
 800173c:	f363 45dc 	bfi	r5, r3, #19, #10
 8001740:	e7d5      	b.n	80016ee <XMC_USBD_lStartWriteXfer+0x72>
 8001742:	bf00      	nop
 8001744:	20001388 	.word	0x20001388
 8001748:	20001384 	.word	0x20001384

0800174c <XMC_USBD_GetCapabilities>:
  cap.event_reset = 1U;
  cap.event_resume = 1U;
  cap.event_suspend = 1U;
  cap.reserved = 0U;
  return cap;
}
 800174c:	f240 10df 	movw	r0, #479	; 0x1df
 8001750:	4770      	bx	lr
	...

08001754 <XMC_USBD_DeviceConnect>:
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <XMC_USBD_DeviceConnect+0x14>)
 8001756:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 800175a:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 0U;
 800175c:	f36f 0341 	bfc	r3, #1, #1
  xmc_device.device_register->dctl = dctl.d32;
 8001760:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 8001762:	2000      	movs	r0, #0
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20001388 	.word	0x20001388

0800176c <XMC_USBD_DeviceDisconnect>:
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <XMC_USBD_DeviceDisconnect+0x14>)
 800176e:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001772:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 8001774:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8001778:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 800177a:	2000      	movs	r0, #0
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20001388 	.word	0x20001388

08001784 <XMC_USBD_EndpointReadStart>:
/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8001784:	f000 000f 	and.w	r0, r0, #15
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <XMC_USBD_EndpointReadStart+0x54>)
 800178a:	2334      	movs	r3, #52	; 0x34
 800178c:	fb03 2300 	mla	r3, r3, r0, r2
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f013 0f10 	tst.w	r3, #16
 8001796:	d11c      	bne.n	80017d2 <XMC_USBD_EndpointReadStart+0x4e>
 8001798:	2334      	movs	r3, #52	; 0x34
 800179a:	fb03 2300 	mla	r3, r3, r0, r2
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	f013 0f04 	tst.w	r3, #4
 80017a4:	d101      	bne.n	80017aa <XMC_USBD_EndpointReadStart+0x26>
  {
    result = XMC_USBD_STATUS_ERROR;
 80017a6:	2001      	movs	r0, #1
    ep->outBytesAvailable = 0U;
    XMC_USBD_lStartReadXfer(ep);
    result= XMC_USBD_STATUS_OK;
  }
  return result;
}
 80017a8:	4770      	bx	lr
{
 80017aa:	b570      	push	{r4, r5, r6, lr}
    ep->xferTotal = size;
 80017ac:	2634      	movs	r6, #52	; 0x34
 80017ae:	fb06 2300 	mla	r3, r6, r0, r2
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	4291      	cmp	r1, r2
 80017b6:	bf28      	it	cs
 80017b8:	4611      	movcs	r1, r2
 80017ba:	6319      	str	r1, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 80017bc:	2400      	movs	r4, #0
 80017be:	62dc      	str	r4, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 80017c0:	629c      	str	r4, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 80017c6:	611c      	str	r4, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff01 	bl	80015d0 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 80017ce:	4620      	mov	r0, r4
}
 80017d0:	bd70      	pop	{r4, r5, r6, pc}
    result = XMC_USBD_STATUS_ERROR;
 80017d2:	2001      	movs	r0, #1
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20001388 	.word	0x20001388

080017dc <XMC_USBD_DeviceSetAddress>:
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <XMC_USBD_DeviceSetAddress+0x14>)
 80017de:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80017e2:	681a      	ldr	r2, [r3, #0]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 80017e4:	b911      	cbnz	r1, 80017ec <XMC_USBD_DeviceSetAddress+0x10>
  {
    data.b.devaddr = address;
 80017e6:	f360 120a 	bfi	r2, r0, #4, #7
    xmc_device.device_register->dcfg = data.d32;
 80017ea:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
}
 80017ec:	2000      	movs	r0, #0
 80017ee:	4770      	bx	lr
 80017f0:	20001388 	.word	0x20001388

080017f4 <XMC_USBD_EndpointStall>:
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 80017f4:	f000 020f 	and.w	r2, r0, #15
  if (stall)
 80017f8:	b351      	cbz	r1, 8001850 <XMC_USBD_EndpointStall+0x5c>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 80017fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80017fe:	d118      	bne.n	8001832 <XMC_USBD_EndpointStall+0x3e>
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <XMC_USBD_EndpointStall+0xb8>)
 8001802:	2134      	movs	r1, #52	; 0x34
 8001804:	fb01 f102 	mul.w	r1, r1, r2
 8001808:	5c59      	ldrb	r1, [r3, r1]
 800180a:	f001 010f 	and.w	r1, r1, #15
 800180e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001812:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
 8001816:	680b      	ldr	r3, [r1, #0]
      data.b.stall = 1U;
 8001818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800181c:	600b      	str	r3, [r1, #0]
    }
    ep->isStalled = 1U;
 800181e:	4923      	ldr	r1, [pc, #140]	; (80018ac <XMC_USBD_EndpointStall+0xb8>)
 8001820:	2334      	movs	r3, #52	; 0x34
 8001822:	fb03 1202 	mla	r2, r3, r2, r1
 8001826:	7913      	ldrb	r3, [r2, #4]
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	7113      	strb	r3, [r2, #4]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
	}
	return XMC_USBD_STATUS_OK;
}
 800182e:	2000      	movs	r0, #0
 8001830:	4770      	bx	lr
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001832:	491e      	ldr	r1, [pc, #120]	; (80018ac <XMC_USBD_EndpointStall+0xb8>)
 8001834:	2334      	movs	r3, #52	; 0x34
 8001836:	fb03 f302 	mul.w	r3, r3, r2
 800183a:	5ccb      	ldrb	r3, [r1, r3]
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	336a      	adds	r3, #106	; 0x6a
 8001842:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001846:	680b      	ldr	r3, [r1, #0]
      data.b.stall = 1U;
 8001848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800184c:	600b      	str	r3, [r1, #0]
 800184e:	e7e6      	b.n	800181e <XMC_USBD_EndpointStall+0x2a>
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8001850:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001854:	d119      	bne.n	800188a <XMC_USBD_EndpointStall+0x96>
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <XMC_USBD_EndpointStall+0xb8>)
 8001858:	2134      	movs	r1, #52	; 0x34
 800185a:	fb01 f102 	mul.w	r1, r1, r2
 800185e:	5c59      	ldrb	r1, [r3, r1]
 8001860:	f001 010f 	and.w	r1, r1, #15
 8001864:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001868:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
 800186c:	680b      	ldr	r3, [r1, #0]
			data.b.stall = 0U;
 800186e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8001872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8001876:	600b      	str	r3, [r1, #0]
		ep->isStalled = 0U;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <XMC_USBD_EndpointStall+0xb8>)
 800187a:	2134      	movs	r1, #52	; 0x34
 800187c:	fb01 3202 	mla	r2, r1, r2, r3
 8001880:	7913      	ldrb	r3, [r2, #4]
 8001882:	f36f 1345 	bfc	r3, #5, #1
 8001886:	7113      	strb	r3, [r2, #4]
 8001888:	e7d1      	b.n	800182e <XMC_USBD_EndpointStall+0x3a>
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <XMC_USBD_EndpointStall+0xb8>)
 800188c:	2334      	movs	r3, #52	; 0x34
 800188e:	fb03 f302 	mul.w	r3, r3, r2
 8001892:	5ccb      	ldrb	r3, [r1, r3]
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	336a      	adds	r3, #106	; 0x6a
 800189a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800189e:	680b      	ldr	r3, [r1, #0]
			data.b.stall = 0U;
 80018a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
			data.b.setd0pid = 1U; /* reset pid to 0 */
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80018a8:	600b      	str	r3, [r1, #0]
 80018aa:	e7e5      	b.n	8001878 <XMC_USBD_EndpointStall+0x84>
 80018ac:	20001388 	.word	0x20001388

080018b0 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80018b0:	f000 000f 	and.w	r0, r0, #15
  if (ep->address_u.address_st.direction)
 80018b4:	2334      	movs	r3, #52	; 0x34
 80018b6:	fb03 f300 	mul.w	r3, r3, r0
 80018ba:	4a11      	ldr	r2, [pc, #68]	; (8001900 <XMC_USBD_EndpointAbort+0x50>)
 80018bc:	56d3      	ldrsb	r3, [r2, r3]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db16      	blt.n	80018f0 <XMC_USBD_EndpointAbort+0x40>
  {
    ep->inInUse = 0U;
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <XMC_USBD_EndpointAbort+0x50>)
 80018c4:	2334      	movs	r3, #52	; 0x34
 80018c6:	fb03 2300 	mla	r3, r3, r0, r2
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	f36f 1204 	bfc	r2, #4, #1
 80018d0:	605a      	str	r2, [r3, #4]
  }
  ep->isStalled = 0U;
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <XMC_USBD_EndpointAbort+0x50>)
 80018d4:	2334      	movs	r3, #52	; 0x34
 80018d6:	fb03 2300 	mla	r3, r3, r0, r2
 80018da:	791a      	ldrb	r2, [r3, #4]
 80018dc:	f36f 1245 	bfc	r2, #5, #1
 80018e0:	711a      	strb	r2, [r3, #4]
  ep->outBytesAvailable = 0U;
 80018e2:	2000      	movs	r0, #0
 80018e4:	6118      	str	r0, [r3, #16]
  ep->outOffset = 0U;
 80018e6:	6198      	str	r0, [r3, #24]
  ep->xferLength = 0U;
 80018e8:	6298      	str	r0, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 80018ea:	62d8      	str	r0, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 80018ec:	6318      	str	r0, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
}
 80018ee:	4770      	bx	lr
    ep->inInUse = 0U;
 80018f0:	2334      	movs	r3, #52	; 0x34
 80018f2:	fb03 2300 	mla	r3, r3, r0, r2
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	f36f 02c3 	bfc	r2, #3, #1
 80018fc:	605a      	str	r2, [r3, #4]
  if (!ep->address_u.address_st.direction)
 80018fe:	e7e8      	b.n	80018d2 <XMC_USBD_EndpointAbort+0x22>
 8001900:	20001388 	.word	0x20001388

08001904 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8001906:	f000 000f 	and.w	r0, r0, #15
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800190a:	4c42      	ldr	r4, [pc, #264]	; (8001a14 <XMC_USBD_EndpointUnconfigure+0x110>)
 800190c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8001910:	69db      	ldr	r3, [r3, #28]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
 8001912:	2234      	movs	r2, #52	; 0x34
 8001914:	fb02 4200 	mla	r2, r2, r0, r4
 8001918:	7912      	ldrb	r2, [r2, #4]
 800191a:	f012 0f04 	tst.w	r2, #4
 800191e:	d076      	beq.n	8001a0e <XMC_USBD_EndpointUnconfigure+0x10a>
 8001920:	2100      	movs	r1, #0
 8001922:	461f      	mov	r7, r3
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001924:	46a6      	mov	lr, r4
 8001926:	2534      	movs	r5, #52	; 0x34
 8001928:	fb05 f500 	mul.w	r5, r5, r0
 800192c:	1962      	adds	r2, r4, r5
 800192e:	5d64      	ldrb	r4, [r4, r5]
 8001930:	f004 040f 	and.w	r4, r4, #15
 8001934:	f04f 0c01 	mov.w	ip, #1
 8001938:	fa0c fc04 	lsl.w	ip, ip, r4
     result = XMC_USBD_STATUS_ERROR;
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 800193c:	f36f 31cf 	bfc	r1, #15, #1
    data.b.epdis =  1U;
    data.b.snak =  1U;
 8001940:	f041 4190 	orr.w	r1, r1, #1207959552	; 0x48000000
    data.b.stall =  0U;
 8001944:	f36f 5155 	bfc	r1, #21, #1
    ep->isConfigured =  0U;
 8001948:	7916      	ldrb	r6, [r2, #4]
    ep->isStalled =  0U;
 800194a:	f006 06fb 	and.w	r6, r6, #251	; 0xfb
 800194e:	f36f 1645 	bfc	r6, #5, #1
 8001952:	7116      	strb	r6, [r2, #4]
    ep->outInUse =  0U;
 8001954:	6856      	ldr	r6, [r2, #4]
 8001956:	f36f 1604 	bfc	r6, #4, #1
 800195a:	6056      	str	r6, [r2, #4]
    ep->inInUse =  0U;
 800195c:	6856      	ldr	r6, [r2, #4]
 800195e:	f36f 06c3 	bfc	r6, #3, #1
 8001962:	6056      	str	r6, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001964:	f91e 2005 	ldrsb.w	r2, [lr, r5]
 8001968:	2a00      	cmp	r2, #0
 800196a:	db06      	blt.n	800197a <XMC_USBD_EndpointUnconfigure+0x76>
 800196c:	2234      	movs	r2, #52	; 0x34
 800196e:	fb02 e200 	mla	r2, r2, r0, lr
 8001972:	7912      	ldrb	r2, [r2, #4]
 8001974:	f012 0f03 	tst.w	r2, #3
 8001978:	d115      	bne.n	80019a6 <XMC_USBD_EndpointUnconfigure+0xa2>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800197a:	4d26      	ldr	r5, [pc, #152]	; (8001a14 <XMC_USBD_EndpointUnconfigure+0x110>)
 800197c:	346a      	adds	r4, #106	; 0x6a
 800197e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8001982:	6011      	str	r1, [r2, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8001984:	ea23 020c 	bic.w	r2, r3, ip
 8001988:	f362 070f 	bfi	r7, r2, #0, #16
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800198c:	2234      	movs	r2, #52	; 0x34
 800198e:	fb02 f200 	mul.w	r2, r2, r0
 8001992:	56aa      	ldrsb	r2, [r5, r2]
 8001994:	2a00      	cmp	r2, #0
 8001996:	da06      	bge.n	80019a6 <XMC_USBD_EndpointUnconfigure+0xa2>
 8001998:	2234      	movs	r2, #52	; 0x34
 800199a:	fb02 5200 	mla	r2, r2, r0, r5
 800199e:	7912      	ldrb	r2, [r2, #4]
 80019a0:	f012 0f03 	tst.w	r2, #3
 80019a4:	d116      	bne.n	80019d4 <XMC_USBD_EndpointUnconfigure+0xd0>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80019a6:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <XMC_USBD_EndpointUnconfigure+0x110>)
 80019a8:	2434      	movs	r4, #52	; 0x34
 80019aa:	fb04 f400 	mul.w	r4, r4, r0
 80019ae:	5d14      	ldrb	r4, [r2, r4]
 80019b0:	f004 040f 	and.w	r4, r4, #15
 80019b4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80019b8:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 80019bc:	6011      	str	r1, [r2, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 80019be:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80019c2:	ea23 030c 	bic.w	r3, r3, ip
 80019c6:	f363 471f 	bfi	r7, r3, #16, #16
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <XMC_USBD_EndpointUnconfigure+0x114>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	7b5b      	ldrb	r3, [r3, #13]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d014      	beq.n	80019fe <XMC_USBD_EndpointUnconfigure+0xfa>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <XMC_USBD_EndpointUnconfigure+0x110>)
 80019d6:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 80019da:	61d7      	str	r7, [r2, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 80019dc:	2234      	movs	r2, #52	; 0x34
 80019de:	fb02 3000 	mla	r0, r2, r0, r3
 80019e2:	8881      	ldrh	r1, [r0, #4]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 80019e4:	f3c1 1183 	ubfx	r1, r1, #6, #4
 80019e8:	2201      	movs	r2, #1
 80019ea:	fa02 f101 	lsl.w	r1, r2, r1
 80019ee:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80019f2:	ea22 0201 	bic.w	r2, r2, r1
 80019f6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result = XMC_USBD_STATUS_OK;
 80019fa:	2000      	movs	r0, #0
  }
  return result;
}
 80019fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <XMC_USBD_EndpointUnconfigure+0x110>)
 8001a00:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001a04:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001a06:	ea23 030c 	bic.w	r3, r3, ip
 8001a0a:	6353      	str	r3, [r2, #52]	; 0x34
 8001a0c:	e7e2      	b.n	80019d4 <XMC_USBD_EndpointUnconfigure+0xd0>
     result = XMC_USBD_STATUS_ERROR;
 8001a0e:	2001      	movs	r0, #1
 8001a10:	e7f4      	b.n	80019fc <XMC_USBD_EndpointUnconfigure+0xf8>
 8001a12:	bf00      	nop
 8001a14:	20001388 	.word	0x20001388
 8001a18:	20001384 	.word	0x20001384

08001a1c <XMC_USBD_GetFrameNumber>:
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <XMC_USBD_GetFrameNumber+0x10>)
 8001a1e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001a22:	6898      	ldr	r0, [r3, #8]
  result = (uint16_t)dsts.b.soffn;
  return result;
}
 8001a24:	f3c0 200d 	ubfx	r0, r0, #8, #14
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20001388 	.word	0x20001388

08001a30 <XMC_USBD_IsEnumDone>:
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <XMC_USBD_IsEnumDone+0x14>)
 8001a32:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
 8001a36:	f000 0005 	and.w	r0, r0, #5
}
 8001a3a:	2805      	cmp	r0, #5
 8001a3c:	bf14      	ite	ne
 8001a3e:	2000      	movne	r0, #0
 8001a40:	2001      	moveq	r0, #1
 8001a42:	4770      	bx	lr
 8001a44:	20001388 	.word	0x20001388

08001a48 <XMC_USBD_Uninitialize>:
{
 8001a48:	b508      	push	{r3, lr}
	dctl.d32 = xmc_device.device_register->dctl;
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <XMC_USBD_Uninitialize+0x20>)
 8001a4c:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
 8001a50:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 8001a52:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8001a56:	6053      	str	r3, [r2, #4]
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8001a58:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	f009 f88d 	bl	800ab7c <memset>
}
 8001a62:	2000      	movs	r0, #0
 8001a64:	bd08      	pop	{r3, pc}
 8001a66:	bf00      	nop
 8001a68:	20001388 	.word	0x20001388

08001a6c <XMC_USBD_EndpointConfigure>:
{
 8001a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a70:	b083      	sub	sp, #12
 8001a72:	4605      	mov	r5, r0
 8001a74:	460f      	mov	r7, r1
 8001a76:	4614      	mov	r4, r2
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001a78:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8001cf0 <XMC_USBD_EndpointConfigure+0x284>
 8001a7c:	f8d9 31a4 	ldr.w	r3, [r9, #420]	; 0x1a4
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	469a      	mov	sl, r3
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8001a86:	f000 080f 	and.w	r8, r0, #15
 8001a8a:	2234      	movs	r2, #52	; 0x34
 8001a8c:	fb02 fb08 	mul.w	fp, r2, r8
 8001a90:	eb0b 0609 	add.w	r6, fp, r9
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8001a94:	2100      	movs	r1, #0
 8001a96:	4630      	mov	r0, r6
 8001a98:	f009 f870 	bl	800ab7c <memset>
  ep->address_u.address = ep_addr;
 8001a9c:	f80b 5009 	strb.w	r5, [fp, r9]
  ep->isConfigured = 1U;
 8001aa0:	7933      	ldrb	r3, [r6, #4]
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	7133      	strb	r3, [r6, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8001aa8:	6873      	ldr	r3, [r6, #4]
 8001aaa:	f364 23d1 	bfi	r3, r4, #11, #7
 8001aae:	6073      	str	r3, [r6, #4]
  if (ep->address_u.address != 0U)
 8001ab0:	2d00      	cmp	r5, #0
 8001ab2:	f000 80e1 	beq.w	8001c78 <XMC_USBD_EndpointConfigure+0x20c>
 8001ab6:	4631      	mov	r1, r6
 8001ab8:	68b6      	ldr	r6, [r6, #8]
 8001aba:	f64f 7cc0 	movw	ip, #65472	; 0xffc0
 8001abe:	f36c 0612 	bfi	r6, ip, #0, #19
 8001ac2:	608e      	str	r6, [r1, #8]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001ac4:	f819 300b 	ldrb.w	r3, [r9, fp]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	4a86      	ldr	r2, [pc, #536]	; (8001ce8 <XMC_USBD_EndpointConfigure+0x27c>)
 8001ace:	eb02 2003 	add.w	r0, r2, r3, lsl #8
 8001ad2:	61c8      	str	r0, [r1, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001ad4:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
 8001ad8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001adc:	60ca      	str	r2, [r1, #12]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8001ade:	4a83      	ldr	r2, [pc, #524]	; (8001cec <XMC_USBD_EndpointConfigure+0x280>)
 8001ae0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ae4:	6208      	str	r0, [r1, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8001ae6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001aea:	69d2      	ldr	r2, [r2, #28]
 8001aec:	614a      	str	r2, [r1, #20]
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001aee:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001af2:	f000 80df 	beq.w	8001cb4 <XMC_USBD_EndpointConfigure+0x248>
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001af6:	336a      	adds	r3, #106	; 0x6a
 8001af8:	4a7d      	ldr	r2, [pc, #500]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001afa:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8001afe:	682a      	ldr	r2, [r5, #0]
		data.b.usbactep = 1U;
 8001b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001b04:	f367 4293 	bfi	r2, r7, #18, #2
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8001b08:	2f00      	cmp	r7, #0
 8001b0a:	f000 80a6 	beq.w	8001c5a <XMC_USBD_EndpointConfigure+0x1ee>
			data.b.mps = ep_max_packet_size;
 8001b0e:	f364 020a 	bfi	r2, r4, #0, #11
		data.b.setd0pid = 1U;
 8001b12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
		data.b.stall = 0U;
 8001b16:	f36f 5255 	bfc	r2, #21, #1
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001b1a:	4b75      	ldr	r3, [pc, #468]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001b1c:	f8b3 01fc 	ldrh.w	r0, [r3, #508]	; 0x1fc
 8001b20:	f010 0f01 	tst.w	r0, #1
 8001b24:	d01a      	beq.n	8001b5c <XMC_USBD_EndpointConfigure+0xf0>
    i++;
 8001b26:	2301      	movs	r3, #1
    mask = (uint16_t)(mask << 1U);
 8001b28:	2102      	movs	r1, #2
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001b2a:	4208      	tst	r0, r1
 8001b2c:	d018      	beq.n	8001b60 <XMC_USBD_EndpointConfigure+0xf4>
    mask = (uint16_t)(mask << 1U);
 8001b2e:	0049      	lsls	r1, r1, #1
 8001b30:	b289      	uxth	r1, r1
    i++;
 8001b32:	3301      	adds	r3, #1
 8001b34:	b2db      	uxtb	r3, r3
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001b36:	2b07      	cmp	r3, #7
 8001b38:	d1f7      	bne.n	8001b2a <XMC_USBD_EndpointConfigure+0xbe>
  if ((xmc_device.txfifomsk & mask) == 0U)
 8001b3a:	4208      	tst	r0, r1
 8001b3c:	d010      	beq.n	8001b60 <XMC_USBD_EndpointConfigure+0xf4>
  uint8_t result = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e012      	b.n	8001b68 <XMC_USBD_EndpointConfigure+0xfc>
			switch(ep_max_packet_size)
 8001b42:	2c40      	cmp	r4, #64	; 0x40
 8001b44:	d1e5      	bne.n	8001b12 <XMC_USBD_EndpointConfigure+0xa6>
				data.b.mps = 0x0U;
 8001b46:	f36f 020a 	bfc	r2, #0, #11
				break;
 8001b4a:	e7e2      	b.n	8001b12 <XMC_USBD_EndpointConfigure+0xa6>
				data.b.mps = 0x1U;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f363 020a 	bfi	r2, r3, #0, #11
				break;
 8001b52:	e7de      	b.n	8001b12 <XMC_USBD_EndpointConfigure+0xa6>
				data.b.mps = 0x3U;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f363 020a 	bfi	r2, r3, #0, #11
				break;
 8001b5a:	e7da      	b.n	8001b12 <XMC_USBD_EndpointConfigure+0xa6>
  uint8_t i = 0U;
 8001b5c:	2300      	movs	r3, #0
  uint16_t mask = 1U;
 8001b5e:	2101      	movs	r1, #1
    xmc_device.txfifomsk |= mask;
 8001b60:	4301      	orrs	r1, r0
 8001b62:	4863      	ldr	r0, [pc, #396]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001b64:	f8a0 11fc 	strh.w	r1, [r0, #508]	; 0x1fc
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	4860      	ldr	r0, [pc, #384]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001b6e:	2134      	movs	r1, #52	; 0x34
 8001b70:	fb01 f108 	mul.w	r1, r1, r8
 8001b74:	1846      	adds	r6, r0, r1
 8001b76:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8001b7a:	f363 1c89 	bfi	ip, r3, #6, #4
 8001b7e:	f8a6 c004 	strh.w	ip, [r6, #4]
		data.b.txfnum = ep->txFifoNum;
 8001b82:	f363 5299 	bfi	r2, r3, #22, #4
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8001b86:	602a      	str	r2, [r5, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8001b88:	5c42      	ldrb	r2, [r0, r1]
 8001b8a:	f002 020f 	and.w	r2, r2, #15
 8001b8e:	2301      	movs	r3, #1
 8001b90:	4093      	lsls	r3, r2
 8001b92:	9d01      	ldr	r5, [sp, #4]
 8001b94:	432b      	orrs	r3, r5
 8001b96:	f363 0a0f 	bfi	sl, r3, #0, #16
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001b9a:	5643      	ldrsb	r3, [r0, r1]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db29      	blt.n	8001bf4 <XMC_USBD_EndpointConfigure+0x188>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001ba2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001ba6:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 8001baa:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 8001bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001bb0:	f367 4393 	bfi	r3, r7, #18, #2
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8001bb4:	b387      	cbz	r7, 8001c18 <XMC_USBD_EndpointConfigure+0x1ac>
			data.b.mps = ep_max_packet_size;
 8001bb6:	f364 030a 	bfi	r3, r4, #0, #11
		data.b.setd0pid = 1U;
 8001bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		data.b.stall =(uint8_t) 0U;
 8001bbe:	f36f 5355 	bfc	r3, #21, #1
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 8001bc2:	6013      	str	r3, [r2, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8001bc4:	2334      	movs	r3, #52	; 0x34
 8001bc6:	fb03 f808 	mul.w	r8, r3, r8
 8001bca:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001bcc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8001bd0:	f003 020f 	and.w	r2, r3, #15
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	4093      	lsls	r3, r2
 8001bd8:	9a01      	ldr	r2, [sp, #4]
 8001bda:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8001bde:	f363 4a1f 	bfi	sl, r3, #16, #16
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8001be2:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001be4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001be8:	f8c3 a01c 	str.w	sl, [r3, #28]
}
 8001bec:	2000      	movs	r0, #0
 8001bee:	b003      	add	sp, #12
 8001bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001bf4:	2f00      	cmp	r7, #0
 8001bf6:	d1f4      	bne.n	8001be2 <XMC_USBD_EndpointConfigure+0x176>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001bfa:	2234      	movs	r2, #52	; 0x34
 8001bfc:	fb02 f208 	mul.w	r2, r2, r8
 8001c00:	5c9a      	ldrb	r2, [r3, r2]
 8001c02:	f002 020f 	and.w	r2, r2, #15
 8001c06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001c0a:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8001c0e:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 8001c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001c14:	f36f 4393 	bfc	r3, #18, #2
			switch(ep_max_packet_size)
 8001c18:	2c20      	cmp	r4, #32
 8001c1a:	d00d      	beq.n	8001c38 <XMC_USBD_EndpointConfigure+0x1cc>
 8001c1c:	d807      	bhi.n	8001c2e <XMC_USBD_EndpointConfigure+0x1c2>
 8001c1e:	2c08      	cmp	r4, #8
 8001c20:	d00e      	beq.n	8001c40 <XMC_USBD_EndpointConfigure+0x1d4>
 8001c22:	2c10      	cmp	r4, #16
 8001c24:	d1c9      	bne.n	8001bba <XMC_USBD_EndpointConfigure+0x14e>
					data.b.mps = 0x2U;
 8001c26:	2102      	movs	r1, #2
 8001c28:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 8001c2c:	e7c5      	b.n	8001bba <XMC_USBD_EndpointConfigure+0x14e>
			switch(ep_max_packet_size)
 8001c2e:	2c40      	cmp	r4, #64	; 0x40
 8001c30:	d1c3      	bne.n	8001bba <XMC_USBD_EndpointConfigure+0x14e>
					data.b.mps = 0x0U;
 8001c32:	f36f 030a 	bfc	r3, #0, #11
					break;
 8001c36:	e7c0      	b.n	8001bba <XMC_USBD_EndpointConfigure+0x14e>
					data.b.mps = 0x1U;
 8001c38:	2101      	movs	r1, #1
 8001c3a:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 8001c3e:	e7bc      	b.n	8001bba <XMC_USBD_EndpointConfigure+0x14e>
					data.b.mps = 0x3U;
 8001c40:	2103      	movs	r1, #3
 8001c42:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 8001c46:	e7b8      	b.n	8001bba <XMC_USBD_EndpointConfigure+0x14e>
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001c48:	336a      	adds	r3, #106	; 0x6a
 8001c4a:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001c4c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8001c50:	682a      	ldr	r2, [r5, #0]
		data.b.usbactep = 1U;
 8001c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001c56:	f36f 4293 	bfc	r2, #18, #2
			switch(ep_max_packet_size)
 8001c5a:	2c20      	cmp	r4, #32
 8001c5c:	f43f af76 	beq.w	8001b4c <XMC_USBD_EndpointConfigure+0xe0>
 8001c60:	f63f af6f 	bhi.w	8001b42 <XMC_USBD_EndpointConfigure+0xd6>
 8001c64:	2c08      	cmp	r4, #8
 8001c66:	f43f af75 	beq.w	8001b54 <XMC_USBD_EndpointConfigure+0xe8>
 8001c6a:	2c10      	cmp	r4, #16
 8001c6c:	f47f af51 	bne.w	8001b12 <XMC_USBD_EndpointConfigure+0xa6>
				data.b.mps = 0x2U;
 8001c70:	2302      	movs	r3, #2
 8001c72:	f363 020a 	bfi	r2, r3, #0, #11
				break;
 8001c76:	e74c      	b.n	8001b12 <XMC_USBD_EndpointConfigure+0xa6>
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001c7a:	2334      	movs	r3, #52	; 0x34
 8001c7c:	fb03 f308 	mul.w	r3, r3, r8
 8001c80:	18d1      	adds	r1, r2, r3
 8001c82:	688d      	ldr	r5, [r1, #8]
 8001c84:	2640      	movs	r6, #64	; 0x40
 8001c86:	f366 0512 	bfi	r5, r6, #0, #19
 8001c8a:	608d      	str	r5, [r1, #8]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001c8c:	5cd3      	ldrb	r3, [r2, r3]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	4a15      	ldr	r2, [pc, #84]	; (8001ce8 <XMC_USBD_EndpointConfigure+0x27c>)
 8001c94:	eb02 2003 	add.w	r0, r2, r3, lsl #8
 8001c98:	61c8      	str	r0, [r1, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001c9a:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
 8001c9e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001ca2:	60ca      	str	r2, [r1, #12]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8001ca4:	4a11      	ldr	r2, [pc, #68]	; (8001cec <XMC_USBD_EndpointConfigure+0x280>)
 8001ca6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001caa:	6208      	str	r0, [r1, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8001cac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cb0:	69d2      	ldr	r2, [r2, #28]
 8001cb2:	614a      	str	r2, [r1, #20]
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001cb4:	2f00      	cmp	r7, #0
 8001cb6:	d0c7      	beq.n	8001c48 <XMC_USBD_EndpointConfigure+0x1dc>
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001cb8:	2334      	movs	r3, #52	; 0x34
 8001cba:	fb03 f308 	mul.w	r3, r3, r8
 8001cbe:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001cc0:	56d3      	ldrsb	r3, [r2, r3]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db8d      	blt.n	8001be2 <XMC_USBD_EndpointConfigure+0x176>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <XMC_USBD_EndpointConfigure+0x284>)
 8001cc8:	2234      	movs	r2, #52	; 0x34
 8001cca:	fb02 f208 	mul.w	r2, r2, r8
 8001cce:	5c9a      	ldrb	r2, [r3, r2]
 8001cd0:	f002 020f 	and.w	r2, r2, #15
 8001cd4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001cd8:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8001cdc:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 8001cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001ce2:	f367 4393 	bfi	r3, r7, #18, #2
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8001ce6:	e766      	b.n	8001bb6 <XMC_USBD_EndpointConfigure+0x14a>
 8001ce8:	30000000 	.word	0x30000000
 8001cec:	20000ebc 	.word	0x20000ebc
 8001cf0:	20001388 	.word	0x20001388

08001cf4 <XMC_USBD_EndpointRead>:
{
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	4605      	mov	r5, r0
 8001cf8:	4608      	mov	r0, r1
  if (length > ep->outBytesAvailable)
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <XMC_USBD_EndpointRead+0x3c>)
 8001cfc:	2434      	movs	r4, #52	; 0x34
 8001cfe:	fb04 3405 	mla	r4, r4, r5, r3
 8001d02:	6923      	ldr	r3, [r4, #16]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	bf28      	it	cs
 8001d08:	461a      	movcs	r2, r3
 8001d0a:	4616      	mov	r6, r2
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8001d0c:	68e1      	ldr	r1, [r4, #12]
 8001d0e:	69a3      	ldr	r3, [r4, #24]
 8001d10:	4419      	add	r1, r3
 8001d12:	f008 fe31 	bl	800a978 <memcpy>
  ep->outBytesAvailable -= length;
 8001d16:	6923      	ldr	r3, [r4, #16]
 8001d18:	1b9b      	subs	r3, r3, r6
 8001d1a:	6123      	str	r3, [r4, #16]
  if (ep->outBytesAvailable)
 8001d1c:	b10b      	cbz	r3, 8001d22 <XMC_USBD_EndpointRead+0x2e>
    ep->outOffset += length;
 8001d1e:	69a3      	ldr	r3, [r4, #24]
 8001d20:	4433      	add	r3, r6
 8001d22:	4803      	ldr	r0, [pc, #12]	; (8001d30 <XMC_USBD_EndpointRead+0x3c>)
 8001d24:	2234      	movs	r2, #52	; 0x34
 8001d26:	fb02 0505 	mla	r5, r2, r5, r0
 8001d2a:	61ab      	str	r3, [r5, #24]
}
 8001d2c:	4630      	mov	r0, r6
 8001d2e:	bd70      	pop	{r4, r5, r6, pc}
 8001d30:	20001388 	.word	0x20001388

08001d34 <XMC_USBD_EndpointWrite>:
{
 8001d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8001d38:	f000 040f 	and.w	r4, r0, #15
  if (!ep->isConfigured)
 8001d3c:	4817      	ldr	r0, [pc, #92]	; (8001d9c <XMC_USBD_EndpointWrite+0x68>)
 8001d3e:	2334      	movs	r3, #52	; 0x34
 8001d40:	fb03 0304 	mla	r3, r3, r4, r0
 8001d44:	791b      	ldrb	r3, [r3, #4]
 8001d46:	f013 0f04 	tst.w	r3, #4
 8001d4a:	d023      	beq.n	8001d94 <XMC_USBD_EndpointWrite+0x60>
  else if (ep->inInUse == 1U)
 8001d4c:	2334      	movs	r3, #52	; 0x34
 8001d4e:	fb03 0304 	mla	r3, r3, r4, r0
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f013 0f08 	tst.w	r3, #8
 8001d58:	d001      	beq.n	8001d5e <XMC_USBD_EndpointWrite+0x2a>
    result=(int32_t)0;
 8001d5a:	2000      	movs	r0, #0
  return result;
 8001d5c:	e01b      	b.n	8001d96 <XMC_USBD_EndpointWrite+0x62>
    if (length > ep->inBufferSize)
 8001d5e:	f04f 0834 	mov.w	r8, #52	; 0x34
 8001d62:	fb08 0504 	mla	r5, r8, r4, r0
 8001d66:	6a2e      	ldr	r6, [r5, #32]
 8001d68:	4296      	cmp	r6, r2
 8001d6a:	bf28      	it	cs
 8001d6c:	4616      	movcs	r6, r2
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8001d6e:	4632      	mov	r2, r6
 8001d70:	69e8      	ldr	r0, [r5, #28]
 8001d72:	f008 fe01 	bl	800a978 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 8001d76:	69eb      	ldr	r3, [r5, #28]
 8001d78:	626b      	str	r3, [r5, #36]	; 0x24
    ep->xferTotal = length;
 8001d7a:	632e      	str	r6, [r5, #48]	; 0x30
    ep->xferLength = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62ab      	str	r3, [r5, #40]	; 0x28
    ep->xferCount = 0U;
 8001d80:	62eb      	str	r3, [r5, #44]	; 0x2c
    ep->inInUse = 1U;
 8001d82:	686b      	ldr	r3, [r5, #4]
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	606b      	str	r3, [r5, #4]
    XMC_USBD_lStartWriteXfer(ep);
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f7ff fc76 	bl	800167c <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8001d90:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001d92:	e000      	b.n	8001d96 <XMC_USBD_EndpointWrite+0x62>
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8001d94:	2001      	movs	r0, #1
}
 8001d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20001388 	.word	0x20001388

08001da0 <XMC_USBD_lDeviceActive>:
{
 8001da0:	b430      	push	{r4, r5}
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001da2:	7b05      	ldrb	r5, [r0, #12]
 8001da4:	b1bd      	cbz	r5, 8001dd6 <XMC_USBD_lDeviceActive+0x36>
 8001da6:	2300      	movs	r3, #0
  uint8_t result = 0U;
 8001da8:	4618      	mov	r0, r3
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001daa:	4c0c      	ldr	r4, [pc, #48]	; (8001ddc <XMC_USBD_lDeviceActive+0x3c>)
 8001dac:	2134      	movs	r1, #52	; 0x34
 8001dae:	e004      	b.n	8001dba <XMC_USBD_lDeviceActive+0x1a>
      result = 1U;
 8001db0:	2001      	movs	r0, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001db2:	3301      	adds	r3, #1
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	42aa      	cmp	r2, r5
 8001db8:	d20e      	bcs.n	8001dd8 <XMC_USBD_lDeviceActive+0x38>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001dba:	fb01 4203 	mla	r2, r1, r3, r4
 8001dbe:	6852      	ldr	r2, [r2, #4]
 8001dc0:	f012 0f08 	tst.w	r2, #8
 8001dc4:	d1f4      	bne.n	8001db0 <XMC_USBD_lDeviceActive+0x10>
 8001dc6:	fb01 4203 	mla	r2, r1, r3, r4
 8001dca:	6852      	ldr	r2, [r2, #4]
      result = 1U;
 8001dcc:	f012 0f10 	tst.w	r2, #16
 8001dd0:	bf18      	it	ne
 8001dd2:	2001      	movne	r0, #1
 8001dd4:	e7ed      	b.n	8001db2 <XMC_USBD_lDeviceActive+0x12>
  uint8_t result = 0U;
 8001dd6:	4628      	mov	r0, r5
}
 8001dd8:	bc30      	pop	{r4, r5}
 8001dda:	4770      	bx	lr
 8001ddc:	20001388 	.word	0x20001388

08001de0 <XMC_USBD_DeviceGetState>:
{
 8001de0:	b570      	push	{r4, r5, r6, lr}
  XMC_USBD_STATE_t state={0U};
 8001de2:	2400      	movs	r4, #0
  state.connected = xmc_device.IsConnected;
 8001de4:	4e0a      	ldr	r6, [pc, #40]	; (8001e10 <XMC_USBD_DeviceGetState+0x30>)
 8001de6:	f896 51fe 	ldrb.w	r5, [r6, #510]	; 0x1fe
 8001dea:	f005 0501 	and.w	r5, r5, #1
  state.active = XMC_USBD_lDeviceActive(obj);
 8001dee:	f7ff ffd7 	bl	8001da0 <XMC_USBD_lDeviceActive>
  state.powered = xmc_device.IsPowered;
 8001df2:	f896 31fe 	ldrb.w	r3, [r6, #510]	; 0x1fe
 8001df6:	f3c3 0380 	ubfx	r3, r3, #2, #1
  return state;
 8001dfa:	f363 0400 	bfi	r4, r3, #0, #1
 8001dfe:	f365 0441 	bfi	r4, r5, #1, #1
 8001e02:	f360 0482 	bfi	r4, r0, #2, #1
 8001e06:	2301      	movs	r3, #1
 8001e08:	f363 04c4 	bfi	r4, r3, #3, #2
}
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}
 8001e10:	20001388 	.word	0x20001388

08001e14 <XMC_USBD_Enable>:
{
 8001e14:	b508      	push	{r3, lr}
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001e16:	4803      	ldr	r0, [pc, #12]	; (8001e24 <XMC_USBD_Enable+0x10>)
 8001e18:	f001 f902 	bl	8003020 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8001e1c:	f001 fb40 	bl	80034a0 <XMC_SCU_POWER_EnableUsb>
}
 8001e20:	bd08      	pop	{r3, pc}
 8001e22:	bf00      	nop
 8001e24:	20000080 	.word	0x20000080

08001e28 <XMC_USBD_Init>:
{
 8001e28:	b538      	push	{r3, r4, r5, lr}
 8001e2a:	4604      	mov	r4, r0
  XMC_USBD_Enable();
 8001e2c:	f7ff fff2 	bl	8001e14 <XMC_USBD_Enable>
  usbd_init = obj;
 8001e30:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <XMC_USBD_Init+0x108>)
 8001e32:	601c      	str	r4, [r3, #0]
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001e34:	483f      	ldr	r0, [pc, #252]	; (8001f34 <XMC_USBD_Init+0x10c>)
 8001e36:	f100 0318 	add.w	r3, r0, #24
 8001e3a:	1f01      	subs	r1, r0, #4
 8001e3c:	3034      	adds	r0, #52	; 0x34
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8001e3e:	2240      	movs	r2, #64	; 0x40
 8001e40:	f843 2f04 	str.w	r2, [r3, #4]!
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8001e44:	f841 2f04 	str.w	r2, [r1, #4]!
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001e48:	4283      	cmp	r3, r0
 8001e4a:	d1f9      	bne.n	8001e40 <XMC_USBD_Init+0x18>
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8001e4c:	4d3a      	ldr	r5, [pc, #232]	; (8001f38 <XMC_USBD_Init+0x110>)
 8001e4e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001e52:	2100      	movs	r1, #0
 8001e54:	4628      	mov	r0, r5
 8001e56:	f008 fe91 	bl	800ab7c <memset>
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8001e5a:	6863      	ldr	r3, [r4, #4]
 8001e5c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8001e60:	68a3      	ldr	r3, [r4, #8]
 8001e62:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8001e66:	6820      	ldr	r0, [r4, #0]
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8001e68:	f8c5 01a0 	str.w	r0, [r5, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8001e6c:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8001e70:	f8c5 31a4 	str.w	r3, [r5, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001e74:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8001e78:	f505 73d4 	add.w	r3, r5, #424	; 0x1a8
 8001e7c:	f505 71e2 	add.w	r1, r5, #452	; 0x1c4
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8001e80:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001e84:	3220      	adds	r2, #32
 8001e86:	428b      	cmp	r3, r1
 8001e88:	d1fa      	bne.n	8001e80 <XMC_USBD_Init+0x58>
 8001e8a:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <XMC_USBD_Init+0x114>)
 8001e90:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8001e94:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001e98:	3220      	adds	r2, #32
 8001e9a:	428b      	cmp	r3, r1
 8001e9c:	d1fa      	bne.n	8001e94 <XMC_USBD_Init+0x6c>
 8001e9e:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <XMC_USBD_Init+0x118>)
 8001ea4:	f505 75fe 	add.w	r5, r5, #508	; 0x1fc
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8001ea8:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8001eac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eb0:	42ab      	cmp	r3, r5
 8001eb2:	d1f9      	bne.n	8001ea8 <XMC_USBD_Init+0x80>
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8001eb4:	6882      	ldr	r2, [r0, #8]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8001eb6:	f042 0281 	orr.w	r2, r2, #129	; 0x81
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001eba:	7b63      	ldrb	r3, [r4, #13]
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	f363 1245 	bfi	r2, r3, #5, #1
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8001ec6:	6082      	str	r2, [r0, #8]
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 8001ec8:	4d1b      	ldr	r5, [pc, #108]	; (8001f38 <XMC_USBD_Init+0x110>)
 8001eca:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
 8001ece:	68d3      	ldr	r3, [r2, #12]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8001ed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001ed8:	60d3      	str	r3, [r2, #12]
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001eda:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 8001ede:	6813      	ldr	r3, [r2, #0]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8001ee0:	f043 0303 	orr.w	r3, r3, #3
  dcfg.b.descdma = 0U;
 8001ee4:	f36f 53d7 	bfc	r3, #23, #1
  xmc_device.device_register->dcfg = dcfg.d32;
 8001ee8:	6013      	str	r3, [r2, #0]
  dctl.d32 = xmc_device.device_register->dctl;
 8001eea:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 8001eee:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8001ef4:	6053      	str	r3, [r2, #4]
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 8001ef6:	2010      	movs	r0, #16
 8001ef8:	f7ff fb24 	bl	8001544 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8001efc:	f7ff fb48 	bl	8001590 <XMC_USBD_lFlushRXFifo>
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8001f00:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8001f08:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f10:	615a      	str	r2, [r3, #20]
  gintmsk.b.sofintr = 1U;
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <XMC_USBD_Init+0x11c>)
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001f14:	7b62      	ldrb	r2, [r4, #13]
 8001f16:	2a01      	cmp	r2, #1
    gintmsk.b.rxstsqlvl = 1U;
 8001f18:	bf08      	it	eq
 8001f1a:	f043 0310 	orreq.w	r3, r3, #16
  gintmsk.b.inepintr = 1U;
 8001f1e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
  xmc_device.global_register->gintmsk = gintmsk.d32;
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <XMC_USBD_Init+0x110>)
 8001f24:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8001f28:	6193      	str	r3, [r2, #24]
}
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	bd38      	pop	{r3, r4, r5, pc}
 8001f2e:	bf00      	nop
 8001f30:	20001384 	.word	0x20001384
 8001f34:	20000ebc 	.word	0x20000ebc
 8001f38:	20001388 	.word	0x20001388
 8001f3c:	2000154c 	.word	0x2000154c
 8001f40:	20001568 	.word	0x20001568
 8001f44:	c0003c0e 	.word	0xc0003c0e

08001f48 <XMC_USBD_Disable>:
{
 8001f48:	b508      	push	{r3, lr}
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <XMC_USBD_Disable+0x10>)
 8001f4c:	f001 f85c 	bl	8003008 <XMC_SCU_RESET_AssertPeripheralReset>
  XMC_SCU_POWER_DisableUsb();
 8001f50:	f001 faae 	bl	80034b0 <XMC_SCU_POWER_DisableUsb>
}
 8001f54:	bd08      	pop	{r3, pc}
 8001f56:	bf00      	nop
 8001f58:	20000080 	.word	0x20000080

08001f5c <XMC_USBD_ClearEvent>:
  clear.d32 = 0U;
 8001f5c:	2300      	movs	r3, #0
  switch(event)
 8001f5e:	280d      	cmp	r0, #13
 8001f60:	d80a      	bhi.n	8001f78 <XMC_USBD_ClearEvent+0x1c>
 8001f62:	e8df f000 	tbb	[pc, r0]
 8001f66:	0907      	.short	0x0907
 8001f68:	090e0909 	.word	0x090e0909
 8001f6c:	1a171411 	.word	0x1a171411
 8001f70:	22091f1c 	.word	0x22091f1c
	  clear.b.sessreqintr = 1U;
 8001f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	xmc_device.global_register->gintsts = clear.d32;
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <XMC_USBD_ClearEvent+0x54>)
 8001f7a:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8001f7e:	6153      	str	r3, [r2, #20]
}
 8001f80:	4770      	bx	lr
	  clear.b.usbreset = 1U;
 8001f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  break;
 8001f86:	e7f7      	b.n	8001f78 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.usbsuspend = 1U;
 8001f88:	f44f 6300 	mov.w	r3, #2048	; 0x800
	  break;
 8001f8c:	e7f4      	b.n	8001f78 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.wkupintr = 1U;
 8001f8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	  break;
 8001f92:	e7f1      	b.n	8001f78 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.wkupintr = 1U;
 8001f94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	  break;
 8001f98:	e7ee      	b.n	8001f78 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.sofintr = 1U;
 8001f9a:	2308      	movs	r3, #8
	  break;
 8001f9c:	e7ec      	b.n	8001f78 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.erlysuspend = 1U;
 8001f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
	  break;
 8001fa2:	e7e9      	b.n	8001f78 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.enumdone = 1U;
 8001fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	  break;
 8001fa8:	e7e6      	b.n	8001f78 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.outepintr = 1U;
 8001faa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	  break;
 8001fae:	e7e3      	b.n	8001f78 <XMC_USBD_ClearEvent+0x1c>
 8001fb0:	20001388 	.word	0x20001388

08001fb4 <XMC_USBD_ClearEventINEP>:
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001fb4:	316a      	adds	r1, #106	; 0x6a
 8001fb6:	4b02      	ldr	r3, [pc, #8]	; (8001fc0 <XMC_USBD_ClearEventINEP+0xc>)
 8001fb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fbc:	6098      	str	r0, [r3, #8]
}
 8001fbe:	4770      	bx	lr
 8001fc0:	20001388 	.word	0x20001388

08001fc4 <XMC_USBD_ClearEventOUTEP>:
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <XMC_USBD_ClearEventOUTEP+0x10>)
 8001fc6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001fca:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001fce:	6098      	str	r0, [r3, #8]
}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20001388 	.word	0x20001388

08001fd8 <XMC_USBD_EnableEventOUTEP>:
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <XMC_USBD_EnableEventOUTEP+0x10>)
 8001fda:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001fde:	6953      	ldr	r3, [r2, #20]
 8001fe0:	4303      	orrs	r3, r0
 8001fe2:	6153      	str	r3, [r2, #20]
}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20001388 	.word	0x20001388

08001fec <XMC_USBD_EnableEventINEP>:
	xmc_device.device_register->diepmsk |= diepint.d32;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <XMC_USBD_EnableEventINEP+0x10>)
 8001fee:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001ff2:	6913      	ldr	r3, [r2, #16]
 8001ff4:	4303      	orrs	r3, r0
 8001ff6:	6113      	str	r3, [r2, #16]
}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20001388 	.word	0x20001388

08002000 <XMC_USBD_IRQHandler>:
{
 8002000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002004:	b085      	sub	sp, #20
 8002006:	4683      	mov	fp, r0
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8002008:	4bc2      	ldr	r3, [pc, #776]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 800200a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800200e:	699d      	ldr	r5, [r3, #24]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8002010:	695c      	ldr	r4, [r3, #20]
 8002012:	402c      	ands	r4, r5
  if (data.b.sofintr)
 8002014:	b2e3      	uxtb	r3, r4
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	f014 0f08 	tst.w	r4, #8
 800201c:	d007      	beq.n	800202e <XMC_USBD_IRQHandler+0x2e>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 800201e:	4bbd      	ldr	r3, [pc, #756]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 8002020:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002024:	2009      	movs	r0, #9
 8002026:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8002028:	2009      	movs	r0, #9
 800202a:	f7ff ff97 	bl	8001f5c <XMC_USBD_ClearEvent>
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800202e:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d03c      	beq.n	80020b0 <XMC_USBD_IRQHandler+0xb0>
  if (data.b.erlysuspend)
 8002036:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800203a:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800203e:	d15f      	bne.n	8002100 <XMC_USBD_IRQHandler+0x100>
  if (data.b.usbsuspend)
 8002040:	f015 0f08 	tst.w	r5, #8
 8002044:	d007      	beq.n	8002056 <XMC_USBD_IRQHandler+0x56>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8002046:	4bb3      	ldr	r3, [pc, #716]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 8002048:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800204c:	2006      	movs	r0, #6
 800204e:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8002050:	2006      	movs	r0, #6
 8002052:	f7ff ff83 	bl	8001f5c <XMC_USBD_ClearEvent>
  if (data.b.wkupintr)
 8002056:	0e26      	lsrs	r6, r4, #24
 8002058:	2c00      	cmp	r4, #0
 800205a:	db55      	blt.n	8002108 <XMC_USBD_IRQHandler+0x108>
  if (data.b.sessreqintr)
 800205c:	f016 0f40 	tst.w	r6, #64	; 0x40
 8002060:	d00d      	beq.n	800207e <XMC_USBD_IRQHandler+0x7e>
    xmc_device.IsPowered = 1U;
 8002062:	4bac      	ldr	r3, [pc, #688]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 8002064:	f893 21fe 	ldrb.w	r2, [r3, #510]	; 0x1fe
 8002068:	f042 0204 	orr.w	r2, r2, #4
 800206c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8002070:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002074:	2000      	movs	r0, #0
 8002076:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff ff6f 	bl	8001f5c <XMC_USBD_ClearEvent>
  if (data.b.usbreset)
 800207e:	f015 0f10 	tst.w	r5, #16
 8002082:	d14a      	bne.n	800211a <XMC_USBD_IRQHandler+0x11a>
  if (data.b.enumdone)
 8002084:	f015 0f20 	tst.w	r5, #32
 8002088:	f040 80ba 	bne.w	8002200 <XMC_USBD_IRQHandler+0x200>
  if (data.b.inepint)
 800208c:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8002090:	f414 2f80 	tst.w	r4, #262144	; 0x40000
 8002094:	f040 80d0 	bne.w	8002238 <XMC_USBD_IRQHandler+0x238>
  if (data.b.outepintr)
 8002098:	f019 0f08 	tst.w	r9, #8
 800209c:	f040 818c 	bne.w	80023b8 <XMC_USBD_IRQHandler+0x3b8>
	if (data.b.otgintr)
 80020a0:	9b01      	ldr	r3, [sp, #4]
 80020a2:	f013 0f04 	tst.w	r3, #4
 80020a6:	f040 821b 	bne.w	80024e0 <XMC_USBD_IRQHandler+0x4e0>
}
 80020aa:	b005      	add	sp, #20
 80020ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (data.b.rxstsqlvl)
 80020b0:	9b01      	ldr	r3, [sp, #4]
 80020b2:	f013 0f10 	tst.w	r3, #16
 80020b6:	d0be      	beq.n	8002036 <XMC_USBD_IRQHandler+0x36>
      gintmsk.b.rxstsqlvl = 0U;
 80020b8:	f36f 1504 	bfc	r5, #4, #1
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80020bc:	4b95      	ldr	r3, [pc, #596]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 80020be:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 80020c2:	6195      	str	r5, [r2, #24]
  data.d32 = xmc_device.global_register->grxstsp;
 80020c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020c8:	6a18      	ldr	r0, [r3, #32]
  switch (data.b.pktsts)
 80020ca:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d008      	beq.n	80020e4 <XMC_USBD_IRQHandler+0xe4>
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d00d      	beq.n	80020f2 <XMC_USBD_IRQHandler+0xf2>
      gintmsk.b.rxstsqlvl = 1U;
 80020d6:	f045 0510 	orr.w	r5, r5, #16
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80020da:	4b8e      	ldr	r3, [pc, #568]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 80020dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020e0:	619d      	str	r5, [r3, #24]
 80020e2:	e7a8      	b.n	8002036 <XMC_USBD_IRQHandler+0x36>
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 80020e4:	f3c0 110a 	ubfx	r1, r0, #4, #11
 80020e8:	f000 000f 	and.w	r0, r0, #15
 80020ec:	f7ff f9da 	bl	80014a4 <XMC_USBD_lReadFifo>
      break;
 80020f0:	e7f1      	b.n	80020d6 <XMC_USBD_IRQHandler+0xd6>
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 80020f2:	f3c0 110a 	ubfx	r1, r0, #4, #11
 80020f6:	f000 000f 	and.w	r0, r0, #15
 80020fa:	f7ff f9d3 	bl	80014a4 <XMC_USBD_lReadFifo>
      break;
 80020fe:	e7ea      	b.n	80020d6 <XMC_USBD_IRQHandler+0xd6>
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8002100:	200a      	movs	r0, #10
 8002102:	f7ff ff2b 	bl	8001f5c <XMC_USBD_ClearEvent>
 8002106:	e79b      	b.n	8002040 <XMC_USBD_IRQHandler+0x40>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8002108:	4b82      	ldr	r3, [pc, #520]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 800210a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800210e:	2008      	movs	r0, #8
 8002110:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8002112:	2008      	movs	r0, #8
 8002114:	f7ff ff22 	bl	8001f5c <XMC_USBD_ClearEvent>
 8002118:	e7a0      	b.n	800205c <XMC_USBD_IRQHandler+0x5c>
  dctl.d32 = xmc_device.device_register->dctl;
 800211a:	487e      	ldr	r0, [pc, #504]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 800211c:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
 8002120:	6853      	ldr	r3, [r2, #4]
  dctl.b.rmtwkupsig = 1U;
 8002122:	f043 0301 	orr.w	r3, r3, #1
  xmc_device.device_register->dctl = dctl.d32;
 8002126:	6053      	str	r3, [r2, #4]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8002128:	f500 72e2 	add.w	r2, r0, #452	; 0x1c4
 800212c:	f500 70f0 	add.w	r0, r0, #480	; 0x1e0
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8002130:	f852 1b04 	ldr.w	r1, [r2], #4
 8002134:	680b      	ldr	r3, [r1, #0]
		epctl.b.snak = 1U;
 8002136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 800213a:	f36f 5355 	bfc	r3, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 800213e:	600b      	str	r3, [r1, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8002140:	4282      	cmp	r2, r0
 8002142:	d1f5      	bne.n	8002130 <XMC_USBD_IRQHandler+0x130>
  xmc_device.global_register->grxfsiz = 64U;
 8002144:	4e73      	ldr	r6, [pc, #460]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 8002146:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
 800214a:	2240      	movs	r2, #64	; 0x40
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
  gnptxfsiz.b.depth = 16U;
 800214e:	2010      	movs	r0, #16
 8002150:	2300      	movs	r3, #0
 8002152:	f360 431f 	bfi	r3, r0, #16, #16
  gnptxfsiz.b.startaddr = 64U;
 8002156:	f362 030f 	bfi	r3, r2, #0, #16
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 800215a:	f8d6 21a0 	ldr.w	r2, [r6, #416]	; 0x1a0
 800215e:	6293      	str	r3, [r2, #40]	; 0x28
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8002160:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
 8002164:	4a6c      	ldr	r2, [pc, #432]	; (8002318 <XMC_USBD_IRQHandler+0x318>)
 8002166:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800216a:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
 800216e:	3210      	adds	r2, #16
 8002170:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8002174:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
 8002178:	3210      	adds	r2, #16
 800217a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800217e:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
 8002182:	3210      	adds	r2, #16
 8002184:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8002188:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
 800218c:	3210      	adds	r2, #16
 800218e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8002192:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
 8002196:	3210      	adds	r2, #16
 8002198:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 800219c:	f7ff f9d2 	bl	8001544 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7ff f9cf 	bl	8001544 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 80021a6:	f7ff f9f3 	bl	8001590 <XMC_USBD_lFlushRXFifo>
  xmc_device.device_register->daintmsk = daint.d32;
 80021aa:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
 80021ae:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80021b2:	61da      	str	r2, [r3, #28]
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 80021b4:	200f      	movs	r0, #15
 80021b6:	f7ff ff0f 	bl	8001fd8 <XMC_USBD_EnableEventOUTEP>
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 80021ba:	200f      	movs	r0, #15
 80021bc:	f7ff ff16 	bl	8001fec <XMC_USBD_EnableEventINEP>
  dcfg.d32 = xmc_device.device_register->dcfg;
 80021c0:	f8d6 21a4 	ldr.w	r2, [r6, #420]	; 0x1a4
 80021c4:	6813      	ldr	r3, [r2, #0]
  dcfg.b.devaddr = 0U;
 80021c6:	f36f 130a 	bfc	r3, #4, #7
  xmc_device.device_register->dcfg = dcfg.d32;
 80021ca:	6013      	str	r3, [r2, #0]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80021cc:	f89b 300d 	ldrb.w	r3, [fp, #13]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d010      	beq.n	80021f6 <XMC_USBD_IRQHandler+0x1f6>
  xmc_device.ep[0U].outInUse = 0U;
 80021d4:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	f36f 1204 	bfc	r2, #4, #1
 80021dc:	605a      	str	r2, [r3, #4]
  xmc_device.ep[0U].inInUse = 0U;
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	f36f 02c3 	bfc	r2, #3, #1
 80021e4:	605a      	str	r2, [r3, #4]
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 80021e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021ea:	2004      	movs	r0, #4
 80021ec:	4798      	blx	r3
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 80021ee:	2004      	movs	r0, #4
 80021f0:	f7ff feb4 	bl	8001f5c <XMC_USBD_ClearEvent>
}
 80021f4:	e746      	b.n	8002084 <XMC_USBD_IRQHandler+0x84>
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 80021f6:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
 80021fa:	2200      	movs	r2, #0
 80021fc:	635a      	str	r2, [r3, #52]	; 0x34
 80021fe:	e7e9      	b.n	80021d4 <XMC_USBD_IRQHandler+0x1d4>
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8002200:	4d44      	ldr	r5, [pc, #272]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 8002202:	f8d5 21a8 	ldr.w	r2, [r5, #424]	; 0x1a8
 8002206:	6813      	ldr	r3, [r2, #0]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8002208:	f36f 030a 	bfc	r3, #0, #11
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 800220c:	6013      	str	r3, [r2, #0]
  xmc_device.IsConnected = 1U;
 800220e:	f895 31fe 	ldrb.w	r3, [r5, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8002212:	f043 0305 	orr.w	r3, r3, #5
 8002216:	f885 31fe 	strb.w	r3, [r5, #510]	; 0x1fe
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 800221a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800221e:	2002      	movs	r0, #2
 8002220:	4798      	blx	r3
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8002222:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
 8002226:	68d3      	ldr	r3, [r2, #12]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8002228:	2109      	movs	r1, #9
 800222a:	f361 238d 	bfi	r3, r1, #10, #4
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 800222e:	60d3      	str	r3, [r2, #12]
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 8002230:	200b      	movs	r0, #11
 8002232:	f7ff fe93 	bl	8001f5c <XMC_USBD_ClearEvent>
}
 8002236:	e729      	b.n	800208c <XMC_USBD_IRQHandler+0x8c>
  daint.d32 = xmc_device.device_register->daint;
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
 800223a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800223e:	699a      	ldr	r2, [r3, #24]
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8002240:	6919      	ldr	r1, [r3, #16]
  while ((uint16_t)mask >> ep_num)
 8002242:	fa1f fa82 	uxth.w	sl, r2
 8002246:	f1ba 0f00 	cmp.w	sl, #0
 800224a:	f000 80b1 	beq.w	80023b0 <XMC_USBD_IRQHandler+0x3b0>
 800224e:	4653      	mov	r3, sl
  dieptsiz.d32 = 0U;
 8002250:	2200      	movs	r2, #0
 8002252:	4615      	mov	r5, r2
 8002254:	9202      	str	r2, [sp, #8]
  ep_num = 0U;
 8002256:	4616      	mov	r6, r2
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8002258:	4f2e      	ldr	r7, [pc, #184]	; (8002314 <XMC_USBD_IRQHandler+0x314>)
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800225a:	f04f 0834 	mov.w	r8, #52	; 0x34
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 800225e:	f8cd 900c 	str.w	r9, [sp, #12]
 8002262:	4689      	mov	r9, r1
 8002264:	e029      	b.n	80022ba <XMC_USBD_IRQHandler+0x2ba>
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002266:	2901      	cmp	r1, #1
 8002268:	f040 8151 	bne.w	800250e <XMC_USBD_IRQHandler+0x50e>
        if (diepint.b.emptyintr)
 800226c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002270:	d154      	bne.n	800231c <XMC_USBD_IRQHandler+0x31c>
      if (diepint.b.xfercompl)
 8002272:	f014 0f01 	tst.w	r4, #1
 8002276:	d016      	beq.n	80022a6 <XMC_USBD_IRQHandler+0x2a6>
        if (ep->xferTotal==ep->xferLength)
 8002278:	fb08 7305 	mla	r3, r8, r5, r7
 800227c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	429a      	cmp	r2, r3
 8002282:	f040 808e 	bne.w	80023a2 <XMC_USBD_IRQHandler+0x3a2>
          ep->inInUse = 0U;
 8002286:	fb08 7305 	mla	r3, r8, r5, r7
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	f36f 02c3 	bfc	r2, #3, #1
 8002290:	605a      	str	r2, [r3, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002292:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d07a      	beq.n	8002390 <XMC_USBD_IRQHandler+0x390>
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 800229a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800229e:	2102      	movs	r1, #2
 80022a0:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 80022a4:	4798      	blx	r3
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 80022a6:	356a      	adds	r5, #106	; 0x6a
 80022a8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80022ac:	609c      	str	r4, [r3, #8]
    ep_num++;
 80022ae:	3601      	adds	r6, #1
 80022b0:	b2f6      	uxtb	r6, r6
  while ((uint16_t)mask >> ep_num)
 80022b2:	4635      	mov	r5, r6
 80022b4:	fa5a f306 	asrs.w	r3, sl, r6
 80022b8:	d078      	beq.n	80023ac <XMC_USBD_IRQHandler+0x3ac>
    if ((uint16_t)temp)
 80022ba:	f013 0f01 	tst.w	r3, #1
 80022be:	d0f6      	beq.n	80022ae <XMC_USBD_IRQHandler+0x2ae>
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 80022c0:	f105 036a 	add.w	r3, r5, #106	; 0x6a
 80022c4:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80022c8:	6891      	ldr	r1, [r2, #8]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 80022ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022ce:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80022d0:	fb08 f305 	mul.w	r3, r8, r5
 80022d4:	5cfb      	ldrb	r3, [r7, r3]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	40dc      	lsrs	r4, r3
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 80022dc:	01e4      	lsls	r4, r4, #7
 80022de:	b2e4      	uxtb	r4, r4
 80022e0:	ea44 0409 	orr.w	r4, r4, r9
      diepint.d32 = inepint &
 80022e4:	400c      	ands	r4, r1
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80022e6:	f89b 100d 	ldrb.w	r1, [fp, #13]
 80022ea:	2900      	cmp	r1, #0
 80022ec:	d1bb      	bne.n	8002266 <XMC_USBD_IRQHandler+0x266>
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 80022ee:	6913      	ldr	r3, [r2, #16]
 80022f0:	9302      	str	r3, [sp, #8]
      if (diepint.b.xfercompl)
 80022f2:	f014 0f01 	tst.w	r4, #1
 80022f6:	d0d6      	beq.n	80022a6 <XMC_USBD_IRQHandler+0x2a6>
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 80022f8:	9b02      	ldr	r3, [sp, #8]
 80022fa:	f033 4360 	bics.w	r3, r3, #3758096384	; 0xe0000000
 80022fe:	d1bb      	bne.n	8002278 <XMC_USBD_IRQHandler+0x278>
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8002300:	fb08 7305 	mla	r3, r8, r5, r7
 8002304:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	1a81      	subs	r1, r0, r2
            ep->xferCount += Bytes;
 800230a:	62d8      	str	r0, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 800230c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230e:	440a      	add	r2, r1
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
 8002312:	e7b1      	b.n	8002278 <XMC_USBD_IRQHandler+0x278>
 8002314:	20001388 	.word	0x20001388
 8002318:	00100050 	.word	0x00100050
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 800231c:	f103 026a 	add.w	r2, r3, #106	; 0x6a
 8002320:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8002324:	f8d2 c018 	ldr.w	ip, [r2, #24]
  byte_count = ep->xferLength - ep->xferCount;
 8002328:	fb08 7205 	mla	r2, r8, r5, r7
 800232c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800232e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  if (!byte_count)
 8002330:	ebb1 0e02 	subs.w	lr, r1, r2
 8002334:	d01b      	beq.n	800236e <XMC_USBD_IRQHandler+0x36e>
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8002336:	f10e 0203 	add.w	r2, lr, #3
 800233a:	0890      	lsrs	r0, r2, #2
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 800233c:	fa1f fc8c 	uxth.w	ip, ip
 8002340:	ebbc 0f92 	cmp.w	ip, r2, lsr #2
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 8002344:	bf3c      	itt	cc
 8002346:	ea4f 0e8c 	movcc.w	lr, ip, lsl #2
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 800234a:	4660      	movcc	r0, ip
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 800234c:	b178      	cbz	r0, 800236e <XMC_USBD_IRQHandler+0x36e>
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 800234e:	3378      	adds	r3, #120	; 0x78
 8002350:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8002354:	2100      	movs	r1, #0
      *fifo = *(uint32_t*)ep->xferBuffer;
 8002356:	fb08 7205 	mla	r2, r8, r5, r7
 800235a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8cc 3000 	str.w	r3, [ip]
      i++;
 8002362:	3101      	adds	r1, #1
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8002364:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002366:	3304      	adds	r3, #4
 8002368:	6253      	str	r3, [r2, #36]	; 0x24
 800236a:	4281      	cmp	r1, r0
 800236c:	d1f5      	bne.n	800235a <XMC_USBD_IRQHandler+0x35a>
          ep->xferCount += bytes;
 800236e:	fb08 7305 	mla	r3, r8, r5, r7
 8002372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002374:	4472      	add	r2, lr
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8002378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237a:	4472      	add	r2, lr
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
      if (diepint.b.xfercompl)
 800237e:	f014 0f01 	tst.w	r4, #1
 8002382:	d090      	beq.n	80022a6 <XMC_USBD_IRQHandler+0x2a6>
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002384:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f47f af75 	bne.w	8002278 <XMC_USBD_IRQHandler+0x278>
 800238e:	e7b3      	b.n	80022f8 <XMC_USBD_IRQHandler+0x2f8>
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8002390:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8002394:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002396:	2201      	movs	r2, #1
 8002398:	40aa      	lsls	r2, r5
 800239a:	ea23 0302 	bic.w	r3, r3, r2
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 800239e:	634b      	str	r3, [r1, #52]	; 0x34
 80023a0:	e77b      	b.n	800229a <XMC_USBD_IRQHandler+0x29a>
          XMC_USBD_lStartWriteXfer(ep);
 80023a2:	fb08 7005 	mla	r0, r8, r5, r7
 80023a6:	f7ff f969 	bl	800167c <XMC_USBD_lStartWriteXfer>
 80023aa:	e77c      	b.n	80022a6 <XMC_USBD_IRQHandler+0x2a6>
 80023ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 80023b0:	200e      	movs	r0, #14
 80023b2:	f7ff fdd3 	bl	8001f5c <XMC_USBD_ClearEvent>
}
 80023b6:	e66f      	b.n	8002098 <XMC_USBD_IRQHandler+0x98>
  daint.d32 = xmc_device.device_register->daint;
 80023b8:	4b57      	ldr	r3, [pc, #348]	; (8002518 <XMC_USBD_IRQHandler+0x518>)
 80023ba:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 80023be:	6991      	ldr	r1, [r2, #24]
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 80023c0:	69d3      	ldr	r3, [r2, #28]
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 80023c2:	6952      	ldr	r2, [r2, #20]
 80023c4:	9203      	str	r2, [sp, #12]
  doeptsiz.d32 = 0U;
 80023c6:	2200      	movs	r2, #0
 80023c8:	9202      	str	r2, [sp, #8]
  mask = daint.ep.out & daintmsk.ep.out;
 80023ca:	f3c3 480f 	ubfx	r8, r3, #16, #16
  while ((uint16_t)mask >> ep_num)
 80023ce:	ea18 4811 	ands.w	r8, r8, r1, lsr #16
 80023d2:	f000 8081 	beq.w	80024d8 <XMC_USBD_IRQHandler+0x4d8>
 80023d6:	4643      	mov	r3, r8
  ep_num = 0U;
 80023d8:	4615      	mov	r5, r2
  while ((uint16_t)mask >> ep_num)
 80023da:	4614      	mov	r4, r2
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 80023dc:	4e4e      	ldr	r6, [pc, #312]	; (8002518 <XMC_USBD_IRQHandler+0x518>)
        if (ep->xferTotal == ep->xferLength)
 80023de:	f04f 0934 	mov.w	r9, #52	; 0x34
 80023e2:	e024      	b.n	800242e <XMC_USBD_IRQHandler+0x42e>
			ep->outBytesAvailable += ep->xferCount;
 80023e4:	fb09 6304 	mla	r3, r9, r4, r6
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ec:	440a      	add	r2, r1
 80023ee:	611a      	str	r2, [r3, #16]
 80023f0:	e047      	b.n	8002482 <XMC_USBD_IRQHandler+0x482>
        if (ep->xferTotal == ep->xferLength)
 80023f2:	fb09 6304 	mla	r3, r9, r4, r6
 80023f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d167      	bne.n	80024ce <XMC_USBD_IRQHandler+0x4ce>
          ep->outBytesAvailable = ep->xferCount;
 80023fe:	fb09 6304 	mla	r3, r9, r4, r6
 8002402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002404:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	f36f 1204 	bfc	r2, #4, #1
 800240c:	605a      	str	r2, [r3, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 800240e:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
 8002412:	2101      	movs	r1, #1
 8002414:	4628      	mov	r0, r5
 8002416:	4798      	blx	r3
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8002418:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800241c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 8002420:	609f      	str	r7, [r3, #8]
    ep_num++;
 8002422:	3501      	adds	r5, #1
 8002424:	b2ed      	uxtb	r5, r5
  while ((uint16_t)mask >> ep_num)
 8002426:	462c      	mov	r4, r5
 8002428:	fa58 f305 	asrs.w	r3, r8, r5
 800242c:	d054      	beq.n	80024d8 <XMC_USBD_IRQHandler+0x4d8>
    if (temp)
 800242e:	f013 0f01 	tst.w	r3, #1
 8002432:	d0f6      	beq.n	8002422 <XMC_USBD_IRQHandler+0x422>
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8002434:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002438:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800243c:	689f      	ldr	r7, [r3, #8]
 800243e:	9a03      	ldr	r2, [sp, #12]
 8002440:	4017      	ands	r7, r2
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002442:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8002446:	b90a      	cbnz	r2, 800244c <XMC_USBD_IRQHandler+0x44c>
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	9302      	str	r3, [sp, #8]
      if (doepint.b.setup)
 800244c:	fa5f fa87 	uxtb.w	sl, r7
 8002450:	f017 0f08 	tst.w	r7, #8
 8002454:	d026      	beq.n	80024a4 <XMC_USBD_IRQHandler+0x4a4>
        ep->isStalled = 0U;
 8002456:	fb09 6304 	mla	r3, r9, r4, r6
 800245a:	791a      	ldrb	r2, [r3, #4]
 800245c:	f36f 1245 	bfc	r2, #5, #1
 8002460:	711a      	strb	r2, [r3, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002462:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8002466:	b943      	cbnz	r3, 800247a <XMC_USBD_IRQHandler+0x47a>
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8002468:	fb09 6204 	mla	r2, r9, r4, r6
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 800246c:	9b02      	ldr	r3, [sp, #8]
 800246e:	f3c3 7341 	ubfx	r3, r3, #29, #2
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8002472:	f1c3 0303 	rsb	r3, r3, #3
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	6113      	str	r3, [r2, #16]
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800247a:	f89b 300d 	ldrb.w	r3, [fp, #13]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d0b0      	beq.n	80023e4 <XMC_USBD_IRQHandler+0x3e4>
		ep->outInUse = 0U;
 8002482:	fb09 6304 	mla	r3, r9, r4, r6
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	f36f 1204 	bfc	r2, #4, #1
 800248c:	605a      	str	r2, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 800248e:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
 8002492:	2100      	movs	r1, #0
 8002494:	4608      	mov	r0, r1
 8002496:	4798      	blx	r3
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8002498:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800249c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80024a0:	2208      	movs	r2, #8
 80024a2:	609a      	str	r2, [r3, #8]
      if (doepint.b.xfercompl)
 80024a4:	f01a 0f01 	tst.w	sl, #1
 80024a8:	d0b6      	beq.n	8002418 <XMC_USBD_IRQHandler+0x418>
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80024aa:	f89b 300d 	ldrb.w	r3, [fp, #13]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d19f      	bne.n	80023f2 <XMC_USBD_IRQHandler+0x3f2>
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 80024b2:	fb09 6304 	mla	r3, r9, r4, r6
 80024b6:	9a02      	ldr	r2, [sp, #8]
 80024b8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80024bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80024be:	1a8a      	subs	r2, r1, r2
 80024c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c2:	1a51      	subs	r1, r2, r1
          ep->xferCount += bytes;
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 80024c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c8:	440a      	add	r2, r1
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24
 80024cc:	e791      	b.n	80023f2 <XMC_USBD_IRQHandler+0x3f2>
          XMC_USBD_lStartReadXfer(ep);
 80024ce:	fb09 6004 	mla	r0, r9, r4, r6
 80024d2:	f7ff f87d 	bl	80015d0 <XMC_USBD_lStartReadXfer>
 80024d6:	e79f      	b.n	8002418 <XMC_USBD_IRQHandler+0x418>
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 80024d8:	200d      	movs	r0, #13
 80024da:	f7ff fd3f 	bl	8001f5c <XMC_USBD_ClearEvent>
}
 80024de:	e5df      	b.n	80020a0 <XMC_USBD_IRQHandler+0xa0>
  data.d32 = xmc_device.global_register->gotgint;
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <XMC_USBD_IRQHandler+0x518>)
 80024e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80024e6:	685c      	ldr	r4, [r3, #4]
  if (data.b.sesenddet)
 80024e8:	f014 0f04 	tst.w	r4, #4
 80024ec:	d00a      	beq.n	8002504 <XMC_USBD_IRQHandler+0x504>
		xmc_device.IsPowered = 0U;
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <XMC_USBD_IRQHandler+0x518>)
 80024f0:	f893 21fe 	ldrb.w	r2, [r3, #510]	; 0x1fe
 80024f4:	f36f 0282 	bfc	r2, #2, #1
 80024f8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 80024fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002500:	2001      	movs	r0, #1
 8002502:	4798      	blx	r3
  xmc_device.global_register->gotgint = clear.d32;
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <XMC_USBD_IRQHandler+0x518>)
 8002506:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800250a:	605c      	str	r4, [r3, #4]
}
 800250c:	e5cd      	b.n	80020aa <XMC_USBD_IRQHandler+0xaa>
      if (diepint.b.xfercompl)
 800250e:	f014 0f01 	tst.w	r4, #1
 8002512:	f47f aeb1 	bne.w	8002278 <XMC_USBD_IRQHandler+0x278>
 8002516:	e6c6      	b.n	80022a6 <XMC_USBD_IRQHandler+0x2a6>
 8002518:	20001388 	.word	0x20001388

0800251c <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800251c:	b510      	push	{r4, lr}
 800251e:	4604      	mov	r4, r0
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8002520:	2300      	movs	r3, #0
 8002522:	6143      	str	r3, [r0, #20]
 8002524:	6183      	str	r3, [r0, #24]
 8002526:	61c3      	str	r3, [r0, #28]

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 8002528:	2302      	movs	r3, #2
 800252a:	7183      	strb	r3, [r0, #6]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 800252c:	7303      	strb	r3, [r0, #12]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 800252e:	2303      	movs	r3, #3
 8002530:	7483      	strb	r3, [r0, #18]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8002532:	2101      	movs	r1, #1
 8002534:	3002      	adds	r0, #2
 8002536:	f000 fbd3 	bl	8002ce0 <Endpoint_ConfigureEndpointTable>
 800253a:	4603      	mov	r3, r0
 800253c:	b908      	cbnz	r0, 8002542 <CDC_Device_ConfigureEndpoints+0x26>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
 800253e:	4618      	mov	r0, r3
 8002540:	bd10      	pop	{r4, pc}
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 8002542:	2101      	movs	r1, #1
 8002544:	f104 0008 	add.w	r0, r4, #8
 8002548:	f000 fbca 	bl	8002ce0 <Endpoint_ConfigureEndpointTable>
 800254c:	4603      	mov	r3, r0
 800254e:	2800      	cmp	r0, #0
 8002550:	d0f5      	beq.n	800253e <CDC_Device_ConfigureEndpoints+0x22>
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8002552:	2101      	movs	r1, #1
 8002554:	f104 000e 	add.w	r0, r4, #14
 8002558:	f000 fbc2 	bl	8002ce0 <Endpoint_ConfigureEndpointTable>
 800255c:	4603      	mov	r3, r0
 800255e:	e7ee      	b.n	800253e <CDC_Device_ConfigureEndpoints+0x22>

08002560 <CDC_Device_SendString>:
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <CDC_Device_SendString+0x40>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b04      	cmp	r3, #4
 8002568:	d116      	bne.n	8002598 <CDC_Device_SendString+0x38>
{
 800256a:	b510      	push	{r4, lr}
 800256c:	460c      	mov	r4, r1
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800256e:	6983      	ldr	r3, [r0, #24]
 8002570:	b1a3      	cbz	r3, 800259c <CDC_Device_SendString+0x3c>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002572:	7883      	ldrb	r3, [r0, #2]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002574:	4a0b      	ldr	r2, [pc, #44]	; (80025a4 <CDC_Device_SendString+0x44>)
 8002576:	f003 010f 	and.w	r1, r3, #15
 800257a:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800257e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002582:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8002586:	4620      	mov	r0, r4
 8002588:	f008 fc5a 	bl	800ae40 <strlen>
 800258c:	2200      	movs	r2, #0
 800258e:	b281      	uxth	r1, r0
 8002590:	4620      	mov	r0, r4
 8002592:	f001 fac3 	bl	8003b1c <Endpoint_Write_Stream_LE>
}
 8002596:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8002598:	2002      	movs	r0, #2
}
 800259a:	4770      	bx	lr
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 800259c:	2002      	movs	r0, #2
 800259e:	e7fa      	b.n	8002596 <CDC_Device_SendString+0x36>
 80025a0:	20001591 	.word	0x20001591
 80025a4:	20001244 	.word	0x20001244

080025a8 <CDC_Device_SendData>:

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 80025a8:	b510      	push	{r4, lr}
 80025aa:	4603      	mov	r3, r0
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <CDC_Device_SendData+0x3c>)
 80025b2:	7814      	ldrb	r4, [r2, #0]
 80025b4:	b2e4      	uxtb	r4, r4
 80025b6:	2c04      	cmp	r4, #4
 80025b8:	d10f      	bne.n	80025da <CDC_Device_SendData+0x32>
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	b17a      	cbz	r2, 80025de <CDC_Device_SendData+0x36>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80025be:	789b      	ldrb	r3, [r3, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80025c0:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <CDC_Device_SendData+0x40>)
 80025c2:	f003 040f 	and.w	r4, r3, #15
 80025c6:	f882 413c 	strb.w	r4, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80025ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80025ce:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 80025d2:	2200      	movs	r2, #0
 80025d4:	f001 faa2 	bl	8003b1c <Endpoint_Write_Stream_LE>
}
 80025d8:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80025da:	2002      	movs	r0, #2
 80025dc:	e7fc      	b.n	80025d8 <CDC_Device_SendData+0x30>
 80025de:	2002      	movs	r0, #2
 80025e0:	e7fa      	b.n	80025d8 <CDC_Device_SendData+0x30>
 80025e2:	bf00      	nop
 80025e4:	20001591 	.word	0x20001591
 80025e8:	20001244 	.word	0x20001244

080025ec <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <CDC_Device_SendByte+0x48>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d11a      	bne.n	800262c <CDC_Device_SendByte+0x40>
{
 80025f6:	b510      	push	{r4, lr}
 80025f8:	460c      	mov	r4, r1
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80025fa:	6983      	ldr	r3, [r0, #24]
 80025fc:	b1c3      	cbz	r3, 8002630 <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80025fe:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002600:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <CDC_Device_SendByte+0x4c>)
 8002602:	f003 010f 	and.w	r1, r3, #15
 8002606:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800260a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800260e:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d

	if (!(Endpoint_IsReadWriteAllowed()))
 8002612:	f000 fae1 	bl	8002bd8 <Endpoint_IsReadWriteAllowed>
 8002616:	b920      	cbnz	r0, 8002622 <CDC_Device_SendByte+0x36>
	{
		Endpoint_ClearIN();
 8002618:	f000 fa82 	bl	8002b20 <Endpoint_ClearIN>

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 800261c:	f000 fa02 	bl	8002a24 <Endpoint_WaitUntilReady>
 8002620:	b918      	cbnz	r0, 800262a <CDC_Device_SendByte+0x3e>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
 8002622:	4620      	mov	r0, r4
 8002624:	f000 faf8 	bl	8002c18 <Endpoint_Write_8>
	return ENDPOINT_READYWAIT_NoError;
 8002628:	2000      	movs	r0, #0
}
 800262a:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 800262c:	2002      	movs	r0, #2
}
 800262e:	4770      	bx	lr
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8002630:	2002      	movs	r0, #2
 8002632:	e7fa      	b.n	800262a <CDC_Device_SendByte+0x3e>
 8002634:	20001591 	.word	0x20001591
 8002638:	20001244 	.word	0x20001244

0800263c <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800263c:	b510      	push	{r4, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <CDC_Device_Flush+0x78>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b04      	cmp	r3, #4
 8002646:	d12f      	bne.n	80026a8 <CDC_Device_Flush+0x6c>
 8002648:	6983      	ldr	r3, [r0, #24]
 800264a:	b383      	cbz	r3, 80026ae <CDC_Device_Flush+0x72>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 800264c:	7882      	ldrb	r2, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800264e:	f002 030f 	and.w	r3, r2, #15
 8002652:	4919      	ldr	r1, [pc, #100]	; (80026b8 <CDC_Device_Flush+0x7c>)
 8002654:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002658:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800265c:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 8002660:	222c      	movs	r2, #44	; 0x2c
 8002662:	fb02 1203 	mla	r2, r2, r3, r1
 8002666:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800266a:	2a00      	cmp	r2, #0
 800266c:	db07      	blt.n	800267e <CDC_Device_Flush+0x42>
			return ep->InBytesAvailable;
		else
			return ep->OutBytesAvailable;
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <CDC_Device_Flush+0x7c>)
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 2303 	mla	r3, r1, r3, r2
 8002676:	899b      	ldrh	r3, [r3, #12]

	if (!(Endpoint_BytesInEndpoint()))
 8002678:	b93b      	cbnz	r3, 800268a <CDC_Device_Flush+0x4e>
	  return ENDPOINT_READYWAIT_NoError;
 800267a:	2400      	movs	r4, #0
 800267c:	e015      	b.n	80026aa <CDC_Device_Flush+0x6e>
			return ep->InBytesAvailable;
 800267e:	460a      	mov	r2, r1
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 2303 	mla	r3, r1, r3, r2
 8002686:	8b9b      	ldrh	r3, [r3, #28]
 8002688:	e7f6      	b.n	8002678 <CDC_Device_Flush+0x3c>

	bool BankFull = !(Endpoint_IsReadWriteAllowed());
 800268a:	f000 faa5 	bl	8002bd8 <Endpoint_IsReadWriteAllowed>
 800268e:	4604      	mov	r4, r0

	Endpoint_ClearIN();
 8002690:	f000 fa46 	bl	8002b20 <Endpoint_ClearIN>

	if (BankFull)
 8002694:	b10c      	cbz	r4, 800269a <CDC_Device_Flush+0x5e>
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
 8002696:	2400      	movs	r4, #0
 8002698:	e007      	b.n	80026aa <CDC_Device_Flush+0x6e>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 800269a:	f000 f9c3 	bl	8002a24 <Endpoint_WaitUntilReady>
 800269e:	4604      	mov	r4, r0
 80026a0:	b918      	cbnz	r0, 80026aa <CDC_Device_Flush+0x6e>
		Endpoint_ClearIN();
 80026a2:	f000 fa3d 	bl	8002b20 <Endpoint_ClearIN>
 80026a6:	e000      	b.n	80026aa <CDC_Device_Flush+0x6e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80026a8:	2402      	movs	r4, #2
}
 80026aa:	4620      	mov	r0, r4
 80026ac:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80026ae:	2402      	movs	r4, #2
 80026b0:	e7fb      	b.n	80026aa <CDC_Device_Flush+0x6e>
 80026b2:	bf00      	nop
 80026b4:	20001591 	.word	0x20001591
 80026b8:	20001244 	.word	0x20001244

080026bc <CDC_Device_USBTask>:
{
 80026bc:	b508      	push	{r3, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <CDC_Device_USBTask+0x48>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d11c      	bne.n	8002702 <CDC_Device_USBTask+0x46>
 80026c8:	6983      	ldr	r3, [r0, #24]
 80026ca:	b1d3      	cbz	r3, 8002702 <CDC_Device_USBTask+0x46>
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80026cc:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80026ce:	f003 020f 	and.w	r2, r3, #15
 80026d2:	490d      	ldr	r1, [pc, #52]	; (8002708 <CDC_Device_USBTask+0x4c>)
 80026d4:	f881 213c 	strb.w	r2, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80026d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80026dc:	f881 313d 	strb.w	r3, [r1, #317]	; 0x13d
		return ep->InInUse == 0 && ep->IsEnabled;
 80026e0:	232c      	movs	r3, #44	; 0x2c
 80026e2:	fb03 1302 	mla	r3, r3, r2, r1
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f013 0f10 	tst.w	r3, #16
 80026ec:	d109      	bne.n	8002702 <CDC_Device_USBTask+0x46>
 80026ee:	460b      	mov	r3, r1
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 3202 	mla	r2, r1, r2, r3
 80026f6:	7a13      	ldrb	r3, [r2, #8]
 80026f8:	f013 0f02 	tst.w	r3, #2
 80026fc:	d001      	beq.n	8002702 <CDC_Device_USBTask+0x46>
	  CDC_Device_Flush(CDCInterfaceInfo);
 80026fe:	f7ff ff9d 	bl	800263c <CDC_Device_Flush>
}
 8002702:	bd08      	pop	{r3, pc}
 8002704:	20001591 	.word	0x20001591
 8002708:	20001244 	.word	0x20001244

0800270c <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800270c:	b510      	push	{r4, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <CDC_Device_BytesReceived+0x6c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b04      	cmp	r3, #4
 8002716:	d127      	bne.n	8002768 <CDC_Device_BytesReceived+0x5c>
 8002718:	6983      	ldr	r3, [r0, #24]
 800271a:	b343      	cbz	r3, 800276e <CDC_Device_BytesReceived+0x62>
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 800271c:	7a02      	ldrb	r2, [r0, #8]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800271e:	f002 030f 	and.w	r3, r2, #15
 8002722:	4916      	ldr	r1, [pc, #88]	; (800277c <CDC_Device_BytesReceived+0x70>)
 8002724:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002728:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800272c:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
		return ep->IsOutRecieved;
 8002730:	222c      	movs	r2, #44	; 0x2c
 8002732:	fb02 1203 	mla	r2, r2, r3, r1
 8002736:	6892      	ldr	r2, [r2, #8]

	if (Endpoint_IsOUTReceived())
 8002738:	f012 0f20 	tst.w	r2, #32
 800273c:	d019      	beq.n	8002772 <CDC_Device_BytesReceived+0x66>
		if (ep->Direction)
 800273e:	222c      	movs	r2, #44	; 0x2c
 8002740:	fb02 1203 	mla	r2, r2, r3, r1
 8002744:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8002748:	2a00      	cmp	r2, #0
 800274a:	db08      	blt.n	800275e <CDC_Device_BytesReceived+0x52>
			return ep->OutBytesAvailable;
 800274c:	4a0b      	ldr	r2, [pc, #44]	; (800277c <CDC_Device_BytesReceived+0x70>)
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 2303 	mla	r3, r1, r3, r2
 8002754:	899c      	ldrh	r4, [r3, #12]
	{
		if (!(Endpoint_BytesInEndpoint()))
 8002756:	b944      	cbnz	r4, 800276a <CDC_Device_BytesReceived+0x5e>
		{
			Endpoint_ClearOUT();
 8002758:	f000 f9b4 	bl	8002ac4 <Endpoint_ClearOUT>
			return 0;
 800275c:	e005      	b.n	800276a <CDC_Device_BytesReceived+0x5e>
			return ep->InBytesAvailable;
 800275e:	222c      	movs	r2, #44	; 0x2c
 8002760:	fb02 1303 	mla	r3, r2, r3, r1
 8002764:	8b9c      	ldrh	r4, [r3, #28]
 8002766:	e7f6      	b.n	8002756 <CDC_Device_BytesReceived+0x4a>
	  return 0;
 8002768:	2400      	movs	r4, #0
	}
	else
	{
		return 0;
	}
}
 800276a:	4620      	mov	r0, r4
 800276c:	bd10      	pop	{r4, pc}
	  return 0;
 800276e:	2400      	movs	r4, #0
 8002770:	e7fb      	b.n	800276a <CDC_Device_BytesReceived+0x5e>
		return 0;
 8002772:	2400      	movs	r4, #0
 8002774:	e7f9      	b.n	800276a <CDC_Device_BytesReceived+0x5e>
 8002776:	bf00      	nop
 8002778:	20001591 	.word	0x20001591
 800277c:	20001244 	.word	0x20001244

08002780 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002780:	b538      	push	{r3, r4, r5, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <CDC_Device_ReceiveByte+0xb4>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b04      	cmp	r3, #4
 800278a:	d149      	bne.n	8002820 <CDC_Device_ReceiveByte+0xa0>
 800278c:	6983      	ldr	r3, [r0, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d049      	beq.n	8002826 <CDC_Device_ReceiveByte+0xa6>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8002792:	7a02      	ldrb	r2, [r0, #8]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002794:	f002 030f 	and.w	r3, r2, #15
 8002798:	4927      	ldr	r1, [pc, #156]	; (8002838 <CDC_Device_ReceiveByte+0xb8>)
 800279a:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800279e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80027a2:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80027a6:	461c      	mov	r4, r3
		return ep->IsOutRecieved;
 80027a8:	222c      	movs	r2, #44	; 0x2c
 80027aa:	fb02 1203 	mla	r2, r2, r3, r1
 80027ae:	6892      	ldr	r2, [r2, #8]

	if (Endpoint_IsOUTReceived())
 80027b0:	f012 0f20 	tst.w	r2, #32
 80027b4:	d03a      	beq.n	800282c <CDC_Device_ReceiveByte+0xac>
		if (ep->Direction)
 80027b6:	222c      	movs	r2, #44	; 0x2c
 80027b8:	fb02 1203 	mla	r2, r2, r3, r1
 80027bc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80027c0:	2a00      	cmp	r2, #0
 80027c2:	db0f      	blt.n	80027e4 <CDC_Device_ReceiveByte+0x64>
			return ep->OutBytesAvailable;
 80027c4:	4a1c      	ldr	r2, [pc, #112]	; (8002838 <CDC_Device_ReceiveByte+0xb8>)
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 2303 	mla	r3, r1, r3, r2
	{
		if (Endpoint_BytesInEndpoint())
 80027cc:	899b      	ldrh	r3, [r3, #12]
 80027ce:	b9b3      	cbnz	r3, 80027fe <CDC_Device_ReceiveByte+0x7e>
	int16_t ReceivedByte = -1;
 80027d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <CDC_Device_ReceiveByte+0xb8>)
 80027d6:	222c      	movs	r2, #44	; 0x2c
 80027d8:	fb02 3404 	mla	r4, r2, r4, r3
 80027dc:	89a3      	ldrh	r3, [r4, #12]
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 80027de:	b1e3      	cbz	r3, 800281a <CDC_Device_ReceiveByte+0x9a>
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 80027e0:	4628      	mov	r0, r5
 80027e2:	bd38      	pop	{r3, r4, r5, pc}
			return ep->InBytesAvailable;
 80027e4:	222c      	movs	r2, #44	; 0x2c
 80027e6:	fb02 1303 	mla	r3, r2, r3, r1
		if (Endpoint_BytesInEndpoint())
 80027ea:	8b9b      	ldrh	r3, [r3, #28]
 80027ec:	b93b      	cbnz	r3, 80027fe <CDC_Device_ReceiveByte+0x7e>
	int16_t ReceivedByte = -1;
 80027ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80027f2:	4a11      	ldr	r2, [pc, #68]	; (8002838 <CDC_Device_ReceiveByte+0xb8>)
 80027f4:	232c      	movs	r3, #44	; 0x2c
 80027f6:	fb03 2404 	mla	r4, r3, r4, r2
 80027fa:	8ba3      	ldrh	r3, [r4, #28]
 80027fc:	e7ef      	b.n	80027de <CDC_Device_ReceiveByte+0x5e>
		  ReceivedByte = Endpoint_Read_8();
 80027fe:	f000 fa25 	bl	8002c4c <Endpoint_Read_8>
 8002802:	b205      	sxth	r5, r0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002804:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <CDC_Device_ReceiveByte+0xb8>)
 8002806:	f892 413c 	ldrb.w	r4, [r2, #316]	; 0x13c
		if (ep->Direction)
 800280a:	232c      	movs	r3, #44	; 0x2c
 800280c:	fb03 2304 	mla	r3, r3, r4, r2
 8002810:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	dadd      	bge.n	80027d4 <CDC_Device_ReceiveByte+0x54>
 8002818:	e7eb      	b.n	80027f2 <CDC_Device_ReceiveByte+0x72>
		  Endpoint_ClearOUT();
 800281a:	f000 f953 	bl	8002ac4 <Endpoint_ClearOUT>
 800281e:	e7df      	b.n	80027e0 <CDC_Device_ReceiveByte+0x60>
	  return -1;
 8002820:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002824:	e7dc      	b.n	80027e0 <CDC_Device_ReceiveByte+0x60>
 8002826:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800282a:	e7d9      	b.n	80027e0 <CDC_Device_ReceiveByte+0x60>
	int16_t ReceivedByte = -1;
 800282c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002830:	e7d6      	b.n	80027e0 <CDC_Device_ReceiveByte+0x60>
 8002832:	bf00      	nop
 8002834:	20001591 	.word	0x20001591
 8002838:	20001244 	.word	0x20001244

0800283c <CDC_Device_SendControlLineStateChange>:

void CDC_Device_SendControlLineStateChange(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <CDC_Device_SendControlLineStateChange+0x58>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b04      	cmp	r3, #4
 8002844:	d124      	bne.n	8002890 <CDC_Device_SendControlLineStateChange+0x54>
{
 8002846:	b510      	push	{r4, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	4604      	mov	r4, r0
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800284c:	6983      	ldr	r3, [r0, #24]
 800284e:	b90b      	cbnz	r3, 8002854 <CDC_Device_SendControlLineStateChange+0x18>
	Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
	Endpoint_Write_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
	                         sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
	                         NULL);
	Endpoint_ClearIN();
}
 8002850:	b002      	add	sp, #8
 8002852:	bd10      	pop	{r4, pc}
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.NotificationEndpoint.Address);
 8002854:	7b83      	ldrb	r3, [r0, #14]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002856:	4a10      	ldr	r2, [pc, #64]	; (8002898 <CDC_Device_SendControlLineStateChange+0x5c>)
 8002858:	f003 010f 	and.w	r1, r3, #15
 800285c:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002860:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002864:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	USB_Request_Header_t Notification = (USB_Request_Header_t)
 8002868:	4a0c      	ldr	r2, [pc, #48]	; (800289c <CDC_Device_SendControlLineStateChange+0x60>)
 800286a:	466b      	mov	r3, sp
 800286c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002870:	e883 0003 	stmia.w	r3, {r0, r1}
	Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
 8002874:	2200      	movs	r2, #0
 8002876:	2108      	movs	r1, #8
 8002878:	4618      	mov	r0, r3
 800287a:	f001 f94f 	bl	8003b1c <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
 800287e:	2200      	movs	r2, #0
 8002880:	2102      	movs	r1, #2
 8002882:	f104 0016 	add.w	r0, r4, #22
 8002886:	f001 f949 	bl	8003b1c <Endpoint_Write_Stream_LE>
	Endpoint_ClearIN();
 800288a:	f000 f949 	bl	8002b20 <Endpoint_ClearIN>
 800288e:	e7df      	b.n	8002850 <CDC_Device_SendControlLineStateChange+0x14>
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20001591 	.word	0x20001591
 8002898:	20001244 	.word	0x20001244
 800289c:	0800dc18 	.word	0x0800dc18

080028a0 <EVENT_CDC_Device_LineEncodingChanged>:
}
#endif

__WEAK void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
}
 80028a0:	4770      	bx	lr

080028a2 <EVENT_CDC_Device_ControLineStateChanged>:

__WEAK void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
}
 80028a2:	4770      	bx	lr

080028a4 <EVENT_CDC_Device_BreakSent>:

__WEAK void EVENT_CDC_Device_BreakSent(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
				                               const uint8_t Duration)
{
}
 80028a4:	4770      	bx	lr
	...

080028a8 <CDC_Device_ProcessControlRequest>:
		return device.IsSetupRecieved;
 80028a8:	4b48      	ldr	r3, [pc, #288]	; (80029cc <CDC_Device_ProcessControlRequest+0x124>)
 80028aa:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
	if (!(Endpoint_IsSETUPReceived()))
 80028ae:	f013 0f02 	tst.w	r3, #2
 80028b2:	f000 808a 	beq.w	80029ca <CDC_Device_ProcessControlRequest+0x122>
{
 80028b6:	b510      	push	{r4, lr}
 80028b8:	4604      	mov	r4, r0
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 80028ba:	4b45      	ldr	r3, [pc, #276]	; (80029d0 <CDC_Device_ProcessControlRequest+0x128>)
 80028bc:	889a      	ldrh	r2, [r3, #4]
 80028be:	7803      	ldrb	r3, [r0, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d160      	bne.n	8002986 <CDC_Device_ProcessControlRequest+0xde>
	switch (USB_ControlRequest.bRequest)
 80028c4:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <CDC_Device_ProcessControlRequest+0x128>)
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	3b20      	subs	r3, #32
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d85b      	bhi.n	8002986 <CDC_Device_ProcessControlRequest+0xde>
 80028ce:	e8df f003 	tbb	[pc, r3]
 80028d2:	022a      	.short	0x022a
 80028d4:	6b56      	.short	0x6b56
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 80028d6:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <CDC_Device_ProcessControlRequest+0x128>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2ba1      	cmp	r3, #161	; 0xa1
 80028dc:	d153      	bne.n	8002986 <CDC_Device_ProcessControlRequest+0xde>
		device.IsSetupRecieved = 0;
 80028de:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <CDC_Device_ProcessControlRequest+0x124>)
 80028e0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80028e4:	f36f 0341 	bfc	r3, #1, #1
 80028e8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80028ec:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
		return ep->InInUse == 0 && ep->IsEnabled;
 80028f0:	4b36      	ldr	r3, [pc, #216]	; (80029cc <CDC_Device_ProcessControlRequest+0x124>)
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 3202 	mla	r2, r1, r2, r3
 80028f8:	6893      	ldr	r3, [r2, #8]
 80028fa:	f013 0f10 	tst.w	r3, #16
 80028fe:	d1fb      	bne.n	80028f8 <CDC_Device_ProcessControlRequest+0x50>
 8002900:	7a13      	ldrb	r3, [r2, #8]
 8002902:	f013 0f02 	tst.w	r3, #2
 8002906:	d0f7      	beq.n	80028f8 <CDC_Device_ProcessControlRequest+0x50>
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 8002908:	69a0      	ldr	r0, [r4, #24]
 800290a:	f000 f9b7 	bl	8002c7c <Endpoint_Write_32_LE>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 800290e:	7f20      	ldrb	r0, [r4, #28]
 8002910:	f000 f982 	bl	8002c18 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 8002914:	7f60      	ldrb	r0, [r4, #29]
 8002916:	f000 f97f 	bl	8002c18 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 800291a:	7fa0      	ldrb	r0, [r4, #30]
 800291c:	f000 f97c 	bl	8002c18 <Endpoint_Write_8>
				Endpoint_ClearIN();
 8002920:	f000 f8fe 	bl	8002b20 <Endpoint_ClearIN>
	}
 8002924:	e02f      	b.n	8002986 <CDC_Device_ProcessControlRequest+0xde>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8002926:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <CDC_Device_ProcessControlRequest+0x128>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b21      	cmp	r3, #33	; 0x21
 800292c:	d12b      	bne.n	8002986 <CDC_Device_ProcessControlRequest+0xde>
		device.IsSetupRecieved = 0;
 800292e:	4a27      	ldr	r2, [pc, #156]	; (80029cc <CDC_Device_ProcessControlRequest+0x124>)
 8002930:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002934:	f36f 0341 	bfc	r3, #1, #1
 8002938:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800293c:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
		return ep->IsOutRecieved;
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <CDC_Device_ProcessControlRequest+0x124>)
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 3202 	mla	r2, r1, r2, r3
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 8002948:	4922      	ldr	r1, [pc, #136]	; (80029d4 <CDC_Device_ProcessControlRequest+0x12c>)
 800294a:	6893      	ldr	r3, [r2, #8]
				while (!(Endpoint_IsOUTReceived()))
 800294c:	f013 0f20 	tst.w	r3, #32
 8002950:	d103      	bne.n	800295a <CDC_Device_ProcessControlRequest+0xb2>
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 8002952:	780b      	ldrb	r3, [r1, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f8      	bne.n	800294a <CDC_Device_ProcessControlRequest+0xa2>
 8002958:	e015      	b.n	8002986 <CDC_Device_ProcessControlRequest+0xde>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 800295a:	f000 f9a9 	bl	8002cb0 <Endpoint_Read_32_LE>
 800295e:	61a0      	str	r0, [r4, #24]
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 8002960:	f000 f974 	bl	8002c4c <Endpoint_Read_8>
 8002964:	7720      	strb	r0, [r4, #28]
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 8002966:	f000 f971 	bl	8002c4c <Endpoint_Read_8>
 800296a:	7760      	strb	r0, [r4, #29]
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 800296c:	f000 f96e 	bl	8002c4c <Endpoint_Read_8>
 8002970:	77a0      	strb	r0, [r4, #30]
				Endpoint_ClearOUT();
 8002972:	f000 f8a7 	bl	8002ac4 <Endpoint_ClearOUT>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 8002976:	4620      	mov	r0, r4
 8002978:	f7ff ff92 	bl	80028a0 <EVENT_CDC_Device_LineEncodingChanged>
 800297c:	e003      	b.n	8002986 <CDC_Device_ProcessControlRequest+0xde>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <CDC_Device_ProcessControlRequest+0x128>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b21      	cmp	r3, #33	; 0x21
 8002984:	d000      	beq.n	8002988 <CDC_Device_ProcessControlRequest+0xe0>
}
 8002986:	bd10      	pop	{r4, pc}
		device.IsSetupRecieved = 0;
 8002988:	4a10      	ldr	r2, [pc, #64]	; (80029cc <CDC_Device_ProcessControlRequest+0x124>)
 800298a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800298e:	f36f 0341 	bfc	r3, #1, #1
 8002992:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8002996:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <CDC_Device_ProcessControlRequest+0x128>)
 8002998:	7893      	ldrb	r3, [r2, #2]
 800299a:	78d2      	ldrb	r2, [r2, #3]
 800299c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80029a0:	8283      	strh	r3, [r0, #20]
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 80029a2:	f7ff ff7e 	bl	80028a2 <EVENT_CDC_Device_ControLineStateChanged>
 80029a6:	e7ee      	b.n	8002986 <CDC_Device_ProcessControlRequest+0xde>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <CDC_Device_ProcessControlRequest+0x128>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b21      	cmp	r3, #33	; 0x21
 80029ae:	d1ea      	bne.n	8002986 <CDC_Device_ProcessControlRequest+0xde>
 80029b0:	4a06      	ldr	r2, [pc, #24]	; (80029cc <CDC_Device_ProcessControlRequest+0x124>)
 80029b2:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80029b6:	f36f 0341 	bfc	r3, #1, #1
 80029ba:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <CDC_Device_ProcessControlRequest+0x128>)
 80029c0:	8859      	ldrh	r1, [r3, #2]
 80029c2:	b2c9      	uxtb	r1, r1
 80029c4:	f7ff ff6e 	bl	80028a4 <EVENT_CDC_Device_BreakSent>
 80029c8:	e7dd      	b.n	8002986 <CDC_Device_ProcessControlRequest+0xde>
 80029ca:	4770      	bx	lr
 80029cc:	20001244 	.word	0x20001244
 80029d0:	20001594 	.word	0x20001594
 80029d4:	20001591 	.word	0x20001591

080029d8 <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <USB_USBTask+0x44>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b1eb      	cbz	r3, 8002a1a <USB_USBTask+0x42>
{
 80029de:	b510      	push	{r4, lr}
	 *  \return Index of the currently selected endpoint.
	 */
	static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetCurrentEndpoint(void)
	{
		return device.CurrentDirection | device.CurrentEndpoint;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <USB_USBTask+0x48>)
 80029e2:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
 80029e6:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 80029ea:	4314      	orrs	r4, r2
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80029f2:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 80029f6:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 80029fa:	f013 0f02 	tst.w	r3, #2
 80029fe:	d109      	bne.n	8002a14 <USB_USBTask+0x3c>
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <USB_USBTask+0x48>)
 8002a02:	f004 020f 	and.w	r2, r4, #15
 8002a06:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002a0a:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
 8002a0e:	f883 413d 	strb.w	r4, [r3, #317]	; 0x13d
}
 8002a12:	bd10      	pop	{r4, pc}
	  USB_Device_ProcessControlRequest();
 8002a14:	f7fe f9a2 	bl	8000d5c <USB_Device_ProcessControlRequest>
 8002a18:	e7f2      	b.n	8002a00 <USB_USBTask+0x28>
 8002a1a:	4770      	bx	lr
 8002a1c:	20001591 	.word	0x20001591
 8002a20:	20001244 	.word	0x20001244

08002a24 <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 8002a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <Endpoint_WaitUntilReady+0x98>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	4798      	blx	r3
 8002a30:	4606      	mov	r6, r0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8002a32:	2764      	movs	r7, #100	; 0x64
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002a34:	4c21      	ldr	r4, [pc, #132]	; (8002abc <Endpoint_WaitUntilReady+0x98>)
		return ep->Address & ENDPOINT_DIR_MASK;
 8002a36:	252c      	movs	r5, #44	; 0x2c
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8002a38:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8002ac0 <Endpoint_WaitUntilReady+0x9c>
 8002a3c:	e022      	b.n	8002a84 <Endpoint_WaitUntilReady+0x60>
		return ep->InInUse == 0 && ep->IsEnabled;
 8002a3e:	fb05 4203 	mla	r2, r5, r3, r4
 8002a42:	6892      	ldr	r2, [r2, #8]
 8002a44:	f012 0f10 	tst.w	r2, #16
 8002a48:	d105      	bne.n	8002a56 <Endpoint_WaitUntilReady+0x32>
 8002a4a:	fb05 4203 	mla	r2, r5, r3, r4
 8002a4e:	7a12      	ldrb	r2, [r2, #8]
 8002a50:	f012 0f02 	tst.w	r2, #2
 8002a54:	d128      	bne.n	8002aa8 <Endpoint_WaitUntilReady+0x84>
 8002a56:	f898 2000 	ldrb.w	r2, [r8]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8002a5a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8002a5e:	b332      	cbz	r2, 8002aae <Endpoint_WaitUntilReady+0x8a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8002a60:	2905      	cmp	r1, #5
 8002a62:	d026      	beq.n	8002ab2 <Endpoint_WaitUntilReady+0x8e>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 8002a64:	fb05 4303 	mla	r3, r5, r3, r4
 8002a68:	7a1b      	ldrb	r3, [r3, #8]
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 8002a6a:	f013 0f04 	tst.w	r3, #4
 8002a6e:	d122      	bne.n	8002ab6 <Endpoint_WaitUntilReady+0x92>
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	4798      	blx	r3
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8002a76:	4286      	cmp	r6, r0
 8002a78:	d003      	beq.n	8002a82 <Endpoint_WaitUntilReady+0x5e>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8002a7a:	1e7b      	subs	r3, r7, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	b18f      	cbz	r7, 8002aa4 <Endpoint_WaitUntilReady+0x80>
 8002a80:	461f      	mov	r7, r3
 8002a82:	4606      	mov	r6, r0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002a84:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		return ep->Address & ENDPOINT_DIR_MASK;
 8002a88:	fb05 4203 	mla	r2, r5, r3, r4
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8002a8c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8002a90:	2a00      	cmp	r2, #0
 8002a92:	dbd4      	blt.n	8002a3e <Endpoint_WaitUntilReady+0x1a>
		return ep->IsOutRecieved;
 8002a94:	fb05 4203 	mla	r2, r5, r3, r4
 8002a98:	6892      	ldr	r2, [r2, #8]
			if (Endpoint_IsOUTReceived())
 8002a9a:	f012 0f20 	tst.w	r2, #32
 8002a9e:	d0da      	beq.n	8002a56 <Endpoint_WaitUntilReady+0x32>
			  return ENDPOINT_READYWAIT_NoError;
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	e002      	b.n	8002aaa <Endpoint_WaitUntilReady+0x86>
			  return ENDPOINT_READYWAIT_Timeout;
 8002aa4:	2004      	movs	r0, #4
 8002aa6:	e000      	b.n	8002aaa <Endpoint_WaitUntilReady+0x86>
			  return ENDPOINT_READYWAIT_NoError;
 8002aa8:	2000      	movs	r0, #0
		}
	}
}
 8002aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8002aae:	2002      	movs	r0, #2
 8002ab0:	e7fb      	b.n	8002aaa <Endpoint_WaitUntilReady+0x86>
		  return ENDPOINT_READYWAIT_BusSuspended;
 8002ab2:	2003      	movs	r0, #3
 8002ab4:	e7f9      	b.n	8002aaa <Endpoint_WaitUntilReady+0x86>
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	e7f7      	b.n	8002aaa <Endpoint_WaitUntilReady+0x86>
 8002aba:	bf00      	nop
 8002abc:	20001244 	.word	0x20001244
 8002ac0:	20001591 	.word	0x20001591

08002ac4 <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 8002ac4:	b538      	push	{r3, r4, r5, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002ac6:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <Endpoint_ClearOUT+0x58>)
 8002ac8:	f892 513c 	ldrb.w	r5, [r2, #316]	; 0x13c
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 8002acc:	232c      	movs	r3, #44	; 0x2c
 8002ace:	fb03 2305 	mla	r3, r3, r5, r2
 8002ad2:	7a1b      	ldrb	r3, [r3, #8]
 8002ad4:	f013 0f02 	tst.w	r3, #2
 8002ad8:	d01e      	beq.n	8002b18 <Endpoint_ClearOUT+0x54>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002ada:	242c      	movs	r4, #44	; 0x2c
 8002adc:	fb04 2405 	mla	r4, r4, r5, r2
 8002ae0:	6813      	ldr	r3, [r2, #0]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	69a2      	ldr	r2, [r4, #24]
 8002ae6:	6961      	ldr	r1, [r4, #20]
 8002ae8:	7920      	ldrb	r0, [r4, #4]
 8002aea:	4798      	blx	r3
 8002aec:	60e0      	str	r0, [r4, #12]
	ep->OutOffset = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	6123      	str	r3, [r4, #16]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 8002af2:	68a3      	ldr	r3, [r4, #8]
 8002af4:	f013 0f08 	tst.w	r3, #8
 8002af8:	d10e      	bne.n	8002b18 <Endpoint_ClearOUT+0x54>
 8002afa:	b968      	cbnz	r0, 8002b18 <Endpoint_ClearOUT+0x54>
		ep->OutInUse = true;
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <Endpoint_ClearOUT+0x58>)
 8002afe:	8923      	ldrh	r3, [r4, #8]
 8002b00:	f043 0308 	orr.w	r3, r3, #8
 8002b04:	8123      	strh	r3, [r4, #8]
		ep->IsOutRecieved = 0;
 8002b06:	8923      	ldrh	r3, [r4, #8]
 8002b08:	f36f 1345 	bfc	r3, #5, #1
 8002b0c:	8123      	strh	r3, [r4, #8]
		device.Driver->EndpointReadStart(ep->Address,
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	69a1      	ldr	r1, [r4, #24]
 8002b14:	7920      	ldrb	r0, [r4, #4]
 8002b16:	4798      	blx	r3
				ep->OutBufferLength);
	}
}
 8002b18:	bd38      	pop	{r3, r4, r5, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20001244 	.word	0x20001244

08002b20 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002b22:	4a2a      	ldr	r2, [pc, #168]	; (8002bcc <Endpoint_ClearIN+0xac>)
 8002b24:	f892 513c 	ldrb.w	r5, [r2, #316]	; 0x13c
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8002b28:	232c      	movs	r3, #44	; 0x2c
 8002b2a:	fb03 2305 	mla	r3, r3, r5, r2
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f013 0f10 	tst.w	r3, #16
 8002b34:	d12e      	bne.n	8002b94 <Endpoint_ClearIN+0x74>
 8002b36:	232c      	movs	r3, #44	; 0x2c
 8002b38:	fb03 2305 	mla	r3, r3, r5, r2
 8002b3c:	7a1b      	ldrb	r3, [r3, #8]
 8002b3e:	f013 0f02 	tst.w	r3, #2
 8002b42:	d027      	beq.n	8002b94 <Endpoint_ClearIN+0x74>
		return;
	ep->InInUse = true;
 8002b44:	242c      	movs	r4, #44	; 0x2c
 8002b46:	fb04 2405 	mla	r4, r4, r5, r2
 8002b4a:	8923      	ldrh	r3, [r4, #8]
 8002b4c:	f043 0310 	orr.w	r3, r3, #16
 8002b50:	8123      	strh	r3, [r4, #8]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8002b52:	6a23      	ldr	r3, [r4, #32]
 8002b54:	62e3      	str	r3, [r4, #44]	; 0x2c
	ep->InDataLeft = ep->InBytesAvailable;
 8002b56:	69e3      	ldr	r3, [r4, #28]
 8002b58:	62a3      	str	r3, [r4, #40]	; 0x28
	ep->InBytesAvailable = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61e3      	str	r3, [r4, #28]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b5e:	4e1c      	ldr	r6, [pc, #112]	; (8002bd0 <Endpoint_ClearIN+0xb0>)
 8002b60:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8002b64:	f8c6 708c 	str.w	r7, [r6, #140]	; 0x8c
 8002b68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b6c:	f3bf 8f6f 	isb	sy
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 8002b70:	6813      	ldr	r3, [r2, #0]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b78:	7920      	ldrb	r0, [r4, #4]
 8002b7a:	4798      	blx	r3
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8002b7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b7e:	4403      	add	r3, r0
 8002b80:	62e3      	str	r3, [r4, #44]	; 0x2c
	ep->InDataLeft -= data_count;
 8002b82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b84:	1a18      	subs	r0, r3, r0
 8002b86:	62a0      	str	r0, [r4, #40]	; 0x28
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b88:	60f7      	str	r7, [r6, #12]
	NVIC_EnableIRQ(USB0_0_IRQn);
	if((zlp_flag == true) && (ep->Number != 0))
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <Endpoint_ClearIN+0xb4>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d000      	beq.n	8002b96 <Endpoint_ClearIN+0x76>
	  ep->InInUse = true;
	  device.Driver->EndpointWrite(ep->Address,
	  			ep->InDataBuffer,0);
	  zlp_flag = false;
	}
}
 8002b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((zlp_flag == true) && (ep->Number != 0))
 8002b96:	7920      	ldrb	r0, [r4, #4]
 8002b98:	f010 0f0f 	tst.w	r0, #15
 8002b9c:	d0fa      	beq.n	8002b94 <Endpoint_ClearIN+0x74>
	  while(ep->InInUse)
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	6893      	ldr	r3, [r2, #8]
 8002ba2:	f013 0f10 	tst.w	r3, #16
 8002ba6:	d1fb      	bne.n	8002ba0 <Endpoint_ClearIN+0x80>
	  ep->InInUse = true;
 8002ba8:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <Endpoint_ClearIN+0xac>)
 8002baa:	232c      	movs	r3, #44	; 0x2c
 8002bac:	fb03 2505 	mla	r5, r3, r5, r2
 8002bb0:	892b      	ldrh	r3, [r5, #8]
 8002bb2:	f043 0310 	orr.w	r3, r3, #16
 8002bb6:	812b      	strh	r3, [r5, #8]
	  device.Driver->EndpointWrite(ep->Address,
 8002bb8:	6813      	ldr	r3, [r2, #0]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002bc0:	4798      	blx	r3
	  zlp_flag = false;
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <Endpoint_ClearIN+0xb4>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e7e4      	b.n	8002b94 <Endpoint_ClearIN+0x74>
 8002bca:	bf00      	nop
 8002bcc:	20001244 	.word	0x20001244
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	20000ef4 	.word	0x20000ef4

08002bd8 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <Endpoint_IsReadWriteAllowed+0x3c>)
 8002bda:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	bool Retval = false;

	if(EndPoint->Direction)
 8002bde:	222c      	movs	r2, #44	; 0x2c
 8002be0:	fb02 1203 	mla	r2, r2, r3, r1
 8002be4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8002be8:	2a00      	cmp	r2, #0
 8002bea:	db08      	blt.n	8002bfe <Endpoint_IsReadWriteAllowed+0x26>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8002bec:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <Endpoint_IsReadWriteAllowed+0x3c>)
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 2303 	mla	r3, r1, r3, r2
 8002bf4:	68d8      	ldr	r0, [r3, #12]
 8002bf6:	3800      	subs	r0, #0
 8002bf8:	bf18      	it	ne
 8002bfa:	2001      	movne	r0, #1
	}
	return Retval;
}
 8002bfc:	4770      	bx	lr
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 8002bfe:	460a      	mov	r2, r1
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 2303 	mla	r3, r1, r3, r2
 8002c06:	69d8      	ldr	r0, [r3, #28]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	4298      	cmp	r0, r3
 8002c0c:	bf2c      	ite	cs
 8002c0e:	2000      	movcs	r0, #0
 8002c10:	2001      	movcc	r0, #1
 8002c12:	4770      	bx	lr
 8002c14:	20001244 	.word	0x20001244

08002c18 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8002c18:	b410      	push	{r4}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <Endpoint_Write_8+0x30>)
 8002c1c:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
	bool Success = false;

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8002c20:	222c      	movs	r2, #44	; 0x2c
 8002c22:	fb02 3201 	mla	r2, r2, r1, r3
 8002c26:	69d3      	ldr	r3, [r2, #28]
 8002c28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d2fd      	bcs.n	8002c2a <Endpoint_Write_8+0x12>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8002c2e:	4a06      	ldr	r2, [pc, #24]	; (8002c48 <Endpoint_Write_8+0x30>)
 8002c30:	242c      	movs	r4, #44	; 0x2c
 8002c32:	fb04 2201 	mla	r2, r4, r1, r2
 8002c36:	6a11      	ldr	r1, [r2, #32]
 8002c38:	54c8      	strb	r0, [r1, r3]
	      EndPoint->InBytesAvailable++;
 8002c3a:	69d3      	ldr	r3, [r2, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61d3      	str	r3, [r2, #28]

	      Success = true;
	    }
	  }while(!Success);
}
 8002c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20001244 	.word	0x20001244

08002c4c <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002c4c:	490a      	ldr	r1, [pc, #40]	; (8002c78 <Endpoint_Read_8+0x2c>)
 8002c4e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	bool Success = false;
	uint8_t data = 0;
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8002c52:	222c      	movs	r2, #44	; 0x2c
 8002c54:	fb02 1203 	mla	r2, r2, r3, r1
 8002c58:	68d2      	ldr	r2, [r2, #12]
 8002c5a:	2a00      	cmp	r2, #0
 8002c5c:	d0fd      	beq.n	8002c5a <Endpoint_Read_8+0xe>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8002c5e:	4906      	ldr	r1, [pc, #24]	; (8002c78 <Endpoint_Read_8+0x2c>)
 8002c60:	202c      	movs	r0, #44	; 0x2c
 8002c62:	fb00 1303 	mla	r3, r0, r3, r1
 8002c66:	6919      	ldr	r1, [r3, #16]
 8002c68:	6958      	ldr	r0, [r3, #20]
 8002c6a:	5c40      	ldrb	r0, [r0, r1]
          EndPoint->OutOffset++;
 8002c6c:	3101      	adds	r1, #1
 8002c6e:	6119      	str	r1, [r3, #16]
          EndPoint->OutBytesAvailable--;
 8002c70:	3a01      	subs	r2, #1
 8002c72:	60da      	str	r2, [r3, #12]
		  Success = true;
		}
	  }while(!Success);
	 return data;
}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20001244 	.word	0x20001244

08002c7c <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8002c7c:	b410      	push	{r4}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <Endpoint_Write_32_LE+0x30>)
 8002c80:	f892 113c 	ldrb.w	r1, [r2, #316]	; 0x13c
	bool Success = false;

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8002c84:	232c      	movs	r3, #44	; 0x2c
 8002c86:	fb03 2301 	mla	r3, r3, r1, r2
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	3b03      	subs	r3, #3
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d2fd      	bcs.n	8002c90 <Endpoint_Write_32_LE+0x14>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <Endpoint_Write_32_LE+0x30>)
 8002c96:	242c      	movs	r4, #44	; 0x2c
 8002c98:	fb04 3301 	mla	r3, r4, r1, r3
 8002c9c:	6a19      	ldr	r1, [r3, #32]
 8002c9e:	5088      	str	r0, [r1, r2]
			EndPoint->InBytesAvailable+=4;
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	3204      	adds	r2, #4
 8002ca4:	61da      	str	r2, [r3, #28]

			Success = true;
		}
	}while(!Success);
}
 8002ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	20001244 	.word	0x20001244

08002cb0 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002cb0:	490a      	ldr	r1, [pc, #40]	; (8002cdc <Endpoint_Read_32_LE+0x2c>)
 8002cb2:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	bool Success = false;
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 8002cb6:	222c      	movs	r2, #44	; 0x2c
 8002cb8:	fb02 1203 	mla	r2, r2, r3, r1
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	2a03      	cmp	r2, #3
 8002cc0:	d9fd      	bls.n	8002cbe <Endpoint_Read_32_LE+0xe>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8002cc2:	4906      	ldr	r1, [pc, #24]	; (8002cdc <Endpoint_Read_32_LE+0x2c>)
 8002cc4:	202c      	movs	r0, #44	; 0x2c
 8002cc6:	fb00 1303 	mla	r3, r0, r3, r1
 8002cca:	6919      	ldr	r1, [r3, #16]
 8002ccc:	6958      	ldr	r0, [r3, #20]
 8002cce:	5840      	ldr	r0, [r0, r1]
			EndPoint->OutOffset+=4;
 8002cd0:	3104      	adds	r1, #4
 8002cd2:	6119      	str	r1, [r3, #16]
			EndPoint->OutBytesAvailable-=4;
 8002cd4:	3a04      	subs	r2, #4
 8002cd6:	60da      	str	r2, [r3, #12]

			Success = true;
		}
	} while(!Success);
	return data;
}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20001244 	.word	0x20001244

08002ce0 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8002ce0:	2900      	cmp	r1, #0
 8002ce2:	d031      	beq.n	8002d48 <Endpoint_ConfigureEndpointTable+0x68>
			                                     const uint8_t Entries) {
 8002ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ce8:	4604      	mov	r4, r0
 8002cea:	1e4f      	subs	r7, r1, #1
 8002cec:	b2ff      	uxtb	r7, r7
 8002cee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8002cf2:	3006      	adds	r0, #6
 8002cf4:	eb00 0747 	add.w	r7, r0, r7, lsl #1
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8002cf8:	4e16      	ldr	r6, [pc, #88]	; (8002d54 <Endpoint_ConfigureEndpointTable+0x74>)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8002cfa:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8002cfe:	e002      	b.n	8002d06 <Endpoint_ConfigureEndpointTable+0x26>
	for (i=0;i<Entries;i++) {
 8002d00:	3406      	adds	r4, #6
 8002d02:	42bc      	cmp	r4, r7
 8002d04:	d01e      	beq.n	8002d44 <Endpoint_ConfigureEndpointTable+0x64>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8002d06:	7820      	ldrb	r0, [r4, #0]
 8002d08:	f000 050f 	and.w	r5, r0, #15
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8002d0c:	6833      	ldr	r3, [r6, #0]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	8862      	ldrh	r2, [r4, #2]
 8002d12:	7921      	ldrb	r1, [r4, #4]
 8002d14:	4798      	blx	r3
 8002d16:	b9c8      	cbnz	r0, 8002d4c <Endpoint_ConfigureEndpointTable+0x6c>
		device.Endpoints[Number].Address = Table[i].Address;
 8002d18:	7823      	ldrb	r3, [r4, #0]
 8002d1a:	fb08 6205 	mla	r2, r8, r5, r6
 8002d1e:	7113      	strb	r3, [r2, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8002d20:	8913      	ldrh	r3, [r2, #8]
 8002d22:	8861      	ldrh	r1, [r4, #2]
 8002d24:	f361 138c 	bfi	r3, r1, #6, #7
 8002d28:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
		device.Endpoints[Number].IsEnabled = 1;
 8002d2a:	f043 0303 	orr.w	r3, r3, #3
 8002d2e:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8002d30:	7820      	ldrb	r0, [r4, #0]
 8002d32:	f994 3000 	ldrsb.w	r3, [r4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	dbe2      	blt.n	8002d00 <Endpoint_ConfigureEndpointTable+0x20>
			device.Driver->EndpointReadStart(Table[i].Address,
 8002d3a:	6833      	ldr	r3, [r6, #0]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	6991      	ldr	r1, [r2, #24]
 8002d40:	4798      	blx	r3
 8002d42:	e7dd      	b.n	8002d00 <Endpoint_ConfigureEndpointTable+0x20>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8002d44:	2001      	movs	r0, #1
 8002d46:	e002      	b.n	8002d4e <Endpoint_ConfigureEndpointTable+0x6e>
 8002d48:	2001      	movs	r0, #1
}
 8002d4a:	4770      	bx	lr
			return false;
 8002d4c:	2000      	movs	r0, #0
}
 8002d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d52:	bf00      	nop
 8002d54:	20001244 	.word	0x20001244

08002d58 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8002d58:	b510      	push	{r4, lr}
 8002d5a:	4604      	mov	r4, r0
  uint32_t i;

  SystemCoreClockUpdate();
 8002d5c:	f001 fb88 	bl	8004470 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <XMC_SCU_lDelay+0x28>)
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <XMC_SCU_lDelay+0x2c>)
 8002d66:	fba3 3000 	umull	r3, r0, r3, r0
 8002d6a:	0c80      	lsrs	r0, r0, #18
 8002d6c:	fb04 f000 	mul.w	r0, r4, r0

  for (i = 0U; i < delay; ++i)
 8002d70:	b120      	cbz	r0, 8002d7c <XMC_SCU_lDelay+0x24>
 8002d72:	2300      	movs	r3, #0
  {
    __NOP();
 8002d74:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8002d76:	3301      	adds	r3, #1
 8002d78:	4298      	cmp	r0, r3
 8002d7a:	d1fb      	bne.n	8002d74 <XMC_SCU_lDelay+0x1c>
  }
}
 8002d7c:	bd10      	pop	{r4, pc}
 8002d7e:	bf00      	nop
 8002d80:	2000ffc0 	.word	0x2000ffc0
 8002d84:	431bde83 	.word	0x431bde83

08002d88 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8002d88:	4a02      	ldr	r2, [pc, #8]	; (8002d94 <XMC_SCU_INTERRUPT_EnableEvent+0xc>)
 8002d8a:	6893      	ldr	r3, [r2, #8]
 8002d8c:	4303      	orrs	r3, r0
 8002d8e:	6093      	str	r3, [r2, #8]
}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	50004074 	.word	0x50004074

08002d98 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8002d98:	4a02      	ldr	r2, [pc, #8]	; (8002da4 <XMC_SCU_INTERRUPT_DisableEvent+0xc>)
 8002d9a:	6893      	ldr	r3, [r2, #8]
 8002d9c:	ea23 0300 	bic.w	r3, r3, r0
 8002da0:	6093      	str	r3, [r2, #8]
}
 8002da2:	4770      	bx	lr
 8002da4:	50004074 	.word	0x50004074

08002da8 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8002da8:	4a02      	ldr	r2, [pc, #8]	; (8002db4 <XMC_SCU_INTERRUPT_TriggerEvent+0xc>)
 8002daa:	6913      	ldr	r3, [r2, #16]
 8002dac:	4303      	orrs	r3, r0
 8002dae:	6113      	str	r3, [r2, #16]
}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	50004074 	.word	0x50004074

08002db8 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8002db8:	4b01      	ldr	r3, [pc, #4]	; (8002dc0 <XMC_SCU_INTERUPT_GetEventStatus+0x8>)
 8002dba:	6858      	ldr	r0, [r3, #4]
}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	50004074 	.word	0x50004074

08002dc4 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8002dc4:	4b01      	ldr	r3, [pc, #4]	; (8002dcc <XMC_SCU_INTERRUPT_ClearEventStatus+0x8>)
 8002dc6:	60d8      	str	r0, [r3, #12]
}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	50004074 	.word	0x50004074

08002dd0 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8002dd0:	4b02      	ldr	r3, [pc, #8]	; (8002ddc <XMC_SCU_GetBootMode+0xc>)
 8002dd2:	6918      	ldr	r0, [r3, #16]
}
 8002dd4:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	50004000 	.word	0x50004000

08002de0 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8002de0:	4b01      	ldr	r3, [pc, #4]	; (8002de8 <XMC_SCU_SetBootMode+0x8>)
 8002de2:	6118      	str	r0, [r3, #16]
}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	50004000 	.word	0x50004000

08002dec <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
  return (SCU_GENERAL->GPR[index]);
 8002dec:	0080      	lsls	r0, r0, #2
 8002dee:	4b01      	ldr	r3, [pc, #4]	; (8002df4 <XMC_SCU_ReadGPR+0x8>)
 8002df0:	5818      	ldr	r0, [r3, r0]
}
 8002df2:	4770      	bx	lr
 8002df4:	5000402c 	.word	0x5000402c

08002df8 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
  SCU_GENERAL->GPR[index] = data;
 8002df8:	0080      	lsls	r0, r0, #2
 8002dfa:	4b01      	ldr	r3, [pc, #4]	; (8002e00 <XMC_SCU_WriteGPR+0x8>)
 8002dfc:	5019      	str	r1, [r3, r0]
}
 8002dfe:	4770      	bx	lr
 8002e00:	5000402c 	.word	0x5000402c

08002e04 <XMC_SCU_EnableOutOfRangeComparator>:
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8002e04:	0080      	lsls	r0, r0, #2
 8002e06:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 8002e0a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8002e0e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8002e12:	2301      	movs	r3, #1
 8002e14:	408b      	lsls	r3, r1
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
 8002e1c:	4770      	bx	lr

08002e1e <XMC_SCU_DisableOutOfRangeComparator>:
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 8002e1e:	0080      	lsls	r0, r0, #2
 8002e20:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 8002e24:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8002e28:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	408a      	lsls	r2, r1
 8002e30:	ea23 0302 	bic.w	r3, r3, r2
 8002e34:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
 8002e38:	4770      	bx	lr
	...

08002e3c <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8002e3c:	02c9      	lsls	r1, r1, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8002e3e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8002e42:	f441 0108 	orr.w	r1, r1, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8002e46:	4b02      	ldr	r3, [pc, #8]	; (8002e50 <XMC_SCU_CalibrateTemperatureSensor+0x14>)
 8002e48:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	50004000 	.word	0x50004000

08002e54 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8002e54:	4a03      	ldr	r2, [pc, #12]	; (8002e64 <XMC_SCU_EnableTemperatureSensor+0x10>)
 8002e56:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8002e62:	4770      	bx	lr
 8002e64:	50004000 	.word	0x50004000

08002e68 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8002e68:	4a03      	ldr	r2, [pc, #12]	; (8002e78 <XMC_SCU_DisableTemperatureSensor+0x10>)
 8002e6a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8002e76:	4770      	bx	lr
 8002e78:	50004000 	.word	0x50004000

08002e7c <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <XMC_SCU_IsTemperatureSensorEnabled+0x10>)
 8002e7e:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 8002e82:	f080 0001 	eor.w	r0, r0, #1
}
 8002e86:	f000 0001 	and.w	r0, r0, #1
 8002e8a:	4770      	bx	lr
 8002e8c:	50004000 	.word	0x50004000

08002e90 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8002e90:	4b02      	ldr	r3, [pc, #8]	; (8002e9c <XMC_SCU_IsTemperatureSensorReady+0xc>)
 8002e92:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002e96:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8002e9a:	4770      	bx	lr
 8002e9c:	50004000 	.word	0x50004000

08002ea0 <XMC_SCU_GetTemperatureMeasurement>:
  return (status);
}

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 8002ea0:	b508      	push	{r3, lr}
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8002ea2:	f7ff ffeb 	bl	8002e7c <XMC_SCU_IsTemperatureSensorEnabled>
 8002ea6:	b128      	cbz	r0, 8002eb4 <XMC_SCU_GetTemperatureMeasurement+0x14>
  {
    temperature = 0x7FFFFFFFUL;
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <XMC_SCU_GetTemperatureMeasurement+0x1c>)
 8002eaa:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8002eae:	f3c0 0009 	ubfx	r0, r0, #0, #10
  }
  
  return ((uint32_t)temperature);
}
 8002eb2:	bd08      	pop	{r3, pc}
    temperature = 0x7FFFFFFFUL;
 8002eb4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  return ((uint32_t)temperature);
 8002eb8:	e7fb      	b.n	8002eb2 <XMC_SCU_GetTemperatureMeasurement+0x12>
 8002eba:	bf00      	nop
 8002ebc:	50004000 	.word	0x50004000

08002ec0 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8002ec0:	4b02      	ldr	r3, [pc, #8]	; (8002ecc <XMC_SCU_IsTemperatureSensorBusy+0xc>)
 8002ec2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002ec6:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8002eca:	4770      	bx	lr
 8002ecc:	50004000 	.word	0x50004000

08002ed0 <XMC_SCU_StartTemperatureMeasurement>:
{
 8002ed0:	b510      	push	{r4, lr}
  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8002ed2:	f7ff ffd3 	bl	8002e7c <XMC_SCU_IsTemperatureSensorEnabled>
 8002ed6:	4604      	mov	r4, r0
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8002ed8:	f7ff fff2 	bl	8002ec0 <XMC_SCU_IsTemperatureSensorBusy>
 8002edc:	b950      	cbnz	r0, 8002ef4 <XMC_SCU_StartTemperatureMeasurement+0x24>
  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8002ede:	f084 0001 	eor.w	r0, r4, #1
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 8002ee2:	b2c0      	uxtb	r0, r0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <XMC_SCU_StartTemperatureMeasurement+0x28>)
 8002ee6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002eea:	f043 0302 	orr.w	r3, r3, #2
 8002eee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8002ef2:	bd10      	pop	{r4, pc}
    status = XMC_SCU_STATUS_BUSY;
 8002ef4:	2002      	movs	r0, #2
 8002ef6:	e7f5      	b.n	8002ee4 <XMC_SCU_StartTemperatureMeasurement+0x14>
 8002ef8:	50004000 	.word	0x50004000

08002efc <XMC_SCU_WriteToRetentionMemory>:
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8002efc:	0400      	lsls	r0, r0, #16
 8002efe:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8002f02:	f040 0001 	orr.w	r0, r0, #1
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <XMC_SCU_WriteToRetentionMemory+0x24>)
 8002f08:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8002f0c:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8002f10:	461a      	mov	r2, r3
 8002f12:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002f16:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002f1a:	d1fa      	bne.n	8002f12 <XMC_SCU_WriteToRetentionMemory+0x16>
  {
  }
}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	50004000 	.word	0x50004000

08002f24 <XMC_SCU_ReadFromRetentionMemory>:
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8002f24:	0400      	lsls	r0, r0, #16
 8002f26:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <XMC_SCU_ReadFromRetentionMemory+0x20>)
 8002f2c:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8002f30:	461a      	mov	r2, r3
 8002f32:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002f36:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002f3a:	d1fa      	bne.n	8002f32 <XMC_SCU_ReadFromRetentionMemory+0xe>
  {
  }

  return (SCU_GENERAL->RMDATA);
 8002f3c:	4b01      	ldr	r3, [pc, #4]	; (8002f44 <XMC_SCU_ReadFromRetentionMemory+0x20>)
 8002f3e:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
}
 8002f42:	4770      	bx	lr
 8002f44:	50004000 	.word	0x50004000

08002f48 <XMC_SCU_TRAP_Enable>:
}

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 8002f48:	4a02      	ldr	r2, [pc, #8]	; (8002f54 <XMC_SCU_TRAP_Enable+0xc>)
 8002f4a:	6893      	ldr	r3, [r2, #8]
 8002f4c:	ea23 0300 	bic.w	r3, r3, r0
 8002f50:	6093      	str	r3, [r2, #8]
}
 8002f52:	4770      	bx	lr
 8002f54:	50004160 	.word	0x50004160

08002f58 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 8002f58:	4a02      	ldr	r2, [pc, #8]	; (8002f64 <XMC_SCU_TRAP_Disable+0xc>)
 8002f5a:	6893      	ldr	r3, [r2, #8]
 8002f5c:	4303      	orrs	r3, r0
 8002f5e:	6093      	str	r3, [r2, #8]
}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	50004160 	.word	0x50004160

08002f68 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
  return (SCU_TRAP->TRAPRAW);
 8002f68:	4b01      	ldr	r3, [pc, #4]	; (8002f70 <XMC_SCU_TRAP_GetStatus+0x8>)
 8002f6a:	6858      	ldr	r0, [r3, #4]
}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	50004160 	.word	0x50004160

08002f74 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8002f74:	4b01      	ldr	r3, [pc, #4]	; (8002f7c <XMC_SCU_TRAP_Trigger+0x8>)
 8002f76:	6118      	str	r0, [r3, #16]
}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	50004160 	.word	0x50004160

08002f80 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8002f80:	4b01      	ldr	r3, [pc, #4]	; (8002f88 <XMC_SCU_TRAP_ClearStatus+0x8>)
 8002f82:	60d8      	str	r0, [r3, #12]
}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	50004160 	.word	0x50004160

08002f8c <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8002f8c:	4a02      	ldr	r2, [pc, #8]	; (8002f98 <XMC_SCU_PARITY_ClearStatus+0xc>)
 8002f8e:	6953      	ldr	r3, [r2, #20]
 8002f90:	4303      	orrs	r3, r0
 8002f92:	6153      	str	r3, [r2, #20]
}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	5000413c 	.word	0x5000413c

08002f9c <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
  return (SCU_PARITY->PEFLAG);
 8002f9c:	4b01      	ldr	r3, [pc, #4]	; (8002fa4 <XMC_SCU_PARITY_GetStatus+0x8>)
 8002f9e:	6958      	ldr	r0, [r3, #20]
} 
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	5000413c 	.word	0x5000413c

08002fa8 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8002fa8:	4a02      	ldr	r2, [pc, #8]	; (8002fb4 <XMC_SCU_PARITY_Enable+0xc>)
 8002faa:	6813      	ldr	r3, [r2, #0]
 8002fac:	4303      	orrs	r3, r0
 8002fae:	6013      	str	r3, [r2, #0]
}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	5000413c 	.word	0x5000413c

08002fb8 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8002fb8:	4a02      	ldr	r2, [pc, #8]	; (8002fc4 <XMC_SCU_PARITY_Disable+0xc>)
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	ea23 0300 	bic.w	r3, r3, r0
 8002fc0:	6013      	str	r3, [r2, #0]
}
 8002fc2:	4770      	bx	lr
 8002fc4:	5000413c 	.word	0x5000413c

08002fc8 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
  SCU_PARITY->PETE |= (uint32_t)memory; 
 8002fc8:	4a02      	ldr	r2, [pc, #8]	; (8002fd4 <XMC_SCU_PARITY_EnableTrapGeneration+0xc>)
 8002fca:	6893      	ldr	r3, [r2, #8]
 8002fcc:	4303      	orrs	r3, r0
 8002fce:	6093      	str	r3, [r2, #8]
}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	5000413c 	.word	0x5000413c

08002fd8 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8002fd8:	4a02      	ldr	r2, [pc, #8]	; (8002fe4 <XMC_SCU_PARITY_DisableTrapGeneration+0xc>)
 8002fda:	6893      	ldr	r3, [r2, #8]
 8002fdc:	ea23 0300 	bic.w	r3, r3, r0
 8002fe0:	6093      	str	r3, [r2, #8]
}
 8002fe2:	4770      	bx	lr
 8002fe4:	5000413c 	.word	0x5000413c

08002fe8 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8002fe8:	4a02      	ldr	r2, [pc, #8]	; (8002ff4 <XMC_SCU_INTERRUPT_EnableNmiRequest+0xc>)
 8002fea:	6953      	ldr	r3, [r2, #20]
 8002fec:	4303      	orrs	r3, r0
 8002fee:	6153      	str	r3, [r2, #20]
}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	50004074 	.word	0x50004074

08002ff8 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8002ff8:	4a02      	ldr	r2, [pc, #8]	; (8003004 <XMC_SCU_INTERRUPT_DisableNmiRequest+0xc>)
 8002ffa:	6953      	ldr	r3, [r2, #20]
 8002ffc:	ea23 0300 	bic.w	r3, r3, r0
 8003000:	6153      	str	r3, [r2, #20]
}
 8003002:	4770      	bx	lr
 8003004:	50004074 	.word	0x50004074

08003008 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8003008:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800300a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800300e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8003012:	4a02      	ldr	r2, [pc, #8]	; (800301c <XMC_SCU_RESET_AssertPeripheralReset+0x14>)
 8003014:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	50004410 	.word	0x50004410

08003020 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8003020:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8003022:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8003026:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800302a:	4a02      	ldr	r2, [pc, #8]	; (8003034 <XMC_SCU_RESET_DeassertPeripheralReset+0x14>)
 800302c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	50004414 	.word	0x50004414

08003038 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8003038:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800303a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800303e:	4a05      	ldr	r2, [pc, #20]	; (8003054 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x1c>)
 8003040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003044:	4018      	ands	r0, r3
 8003046:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
}
 800304a:	bf14      	ite	ne
 800304c:	2001      	movne	r0, #1
 800304e:	2000      	moveq	r0, #0
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	5000440c 	.word	0x5000440c

08003058 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 8003058:	b508      	push	{r3, lr}
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x18>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f013 0f01 	tst.w	r3, #1
 8003062:	d001      	beq.n	8003068 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x10>
  {
    clock_frequency = OSCHP_GetFrequency();
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 8003064:	4803      	ldr	r0, [pc, #12]	; (8003074 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1c>)
  }
  
  return (clock_frequency);
}
 8003066:	bd08      	pop	{r3, pc}
    clock_frequency = OSCHP_GetFrequency();
 8003068:	f001 f9fe 	bl	8004468 <OSCHP_GetFrequency>
 800306c:	e7fb      	b.n	8003066 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0xe>
 800306e:	bf00      	nop
 8003070:	50004710 	.word	0x50004710
 8003074:	016e3600 	.word	0x016e3600

08003078 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:
{
 8003078:	b508      	push	{r3, lr}
  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 800307a:	f7ff ffed 	bl	8003058 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 800307e:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x44>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f013 0f01 	tst.w	r3, #1
 8003086:	d007      	beq.n	8003098 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x20>
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x44>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003090:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8003092:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003096:	bd08      	pop	{r3, pc}
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x44>)
 800309a:	689a      	ldr	r2, [r3, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 800309c:	6899      	ldr	r1, [r3, #8]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 800309e:	689b      	ldr	r3, [r3, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 80030a0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 80030a4:	fb01 0000 	mla	r0, r1, r0, r0
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 80030a8:	f3c2 6203 	ubfx	r2, r2, #24, #4
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 80030ac:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80030b0:	3301      	adds	r3, #1
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 80030b2:	fb02 3303 	mla	r3, r2, r3, r3
 80030b6:	fbb0 f0f3 	udiv	r0, r0, r3
  return (clock_frequency);
 80030ba:	e7ec      	b.n	8003096 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x1e>
 80030bc:	50004710 	.word	0x50004710

080030c0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 80030c0:	b508      	push	{r3, lr}
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 80030c2:	f001 f9d1 	bl	8004468 <OSCHP_GetFrequency>
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x2c>)
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f013 0f01 	tst.w	r3, #1
 80030ce:	d10c      	bne.n	80030ea <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x2a>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x2c>)
 80030d2:	695a      	ldr	r2, [r3, #20]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 80030d4:	695b      	ldr	r3, [r3, #20]
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80030d6:	f3c2 2206 	ubfx	r2, r2, #8, #7
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 80030da:	fb02 0000 	mla	r0, r2, r0, r0
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 80030de:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80030e2:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fbb0 f0f3 	udiv	r0, r0, r3
  }
  return (clock_frequency);
}
 80030ea:	bd08      	pop	{r3, pc}
 80030ec:	50004710 	.word	0x50004710

080030f0 <XMC_SCU_CLOCK_GetCcuClockFrequency>:
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x18>)
 80030f2:	691a      	ldr	r2, [r3, #16]
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
  uint32_t frequency = 0UL;
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f002 0201 	and.w	r2, r2, #1
 80030fa:	4904      	ldr	r1, [pc, #16]	; (800310c <XMC_SCU_CLOCK_GetCcuClockFrequency+0x1c>)
 80030fc:	6808      	ldr	r0, [r1, #0]
 80030fe:	4090      	lsls	r0, r2
 8003100:	f003 0301 	and.w	r3, r3, #1
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8003104:	40d8      	lsrs	r0, r3
 8003106:	4770      	bx	lr
 8003108:	50004600 	.word	0x50004600
 800310c:	2000ffc0 	.word	0x2000ffc0

08003110 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8003110:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x28>)
 8003114:	699b      	ldr	r3, [r3, #24]
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8003116:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800311a:	d009      	beq.n	8003130 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800311c:	f7ff ffac 	bl	8003078 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x28>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8003128:	3301      	adds	r3, #1
}
 800312a:	fbb0 f0f3 	udiv	r0, r0, r3
 800312e:	bd08      	pop	{r3, pc}
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8003130:	f7ff ffc6 	bl	80030c0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8003134:	e7f4      	b.n	8003120 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x10>
 8003136:	bf00      	nop
 8003138:	50004600 	.word	0x50004600

0800313c <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 800313c:	b508      	push	{r3, lr}
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800313e:	f7ff ff9b 	bl	8003078 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8003142:	4b04      	ldr	r3, [pc, #16]	; (8003154 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x18>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 800314a:	3301      	adds	r3, #1
}
 800314c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003150:	bd08      	pop	{r3, pc}
 8003152:	bf00      	nop
 8003154:	50004600 	.word	0x50004600

08003158 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 8003158:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x38>)
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 8003162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003166:	d00d      	beq.n	8003184 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 8003168:	b17b      	cbz	r3, 800318a <XMC_SCU_CLOCK_GetWdtClockFrequency+0x32>
  {
    frequency = OFI_FREQUENCY;
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
  {
    frequency = OSI_FREQUENCY;
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	bf14      	ite	ne
 8003170:	2000      	movne	r0, #0
 8003172:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x38>)
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 800317c:	3301      	adds	r3, #1
}
 800317e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003182:	bd08      	pop	{r3, pc}
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8003184:	f7ff ff78 	bl	8003078 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8003188:	e7f5      	b.n	8003176 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x1e>
    frequency = OFI_FREQUENCY;
 800318a:	4802      	ldr	r0, [pc, #8]	; (8003194 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3c>)
 800318c:	e7f3      	b.n	8003176 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x1e>
 800318e:	bf00      	nop
 8003190:	50004600 	.word	0x50004600
 8003194:	016e3600 	.word	0x016e3600

08003198 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8003198:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	f003 0303 	and.w	r3, r3, #3
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d008      	beq.n	80031b8 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x20>
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 80031a6:	b98b      	cbnz	r3, 80031cc <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	4a0e      	ldr	r2, [pc, #56]	; (80031ec <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x54>)
 80031b2:	6810      	ldr	r0, [r2, #0]
 80031b4:	4098      	lsls	r0, r3
  {

  }

  return (frequency);
}
 80031b6:	bd08      	pop	{r3, pc}
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80031b8:	f7ff ff5e 	bl	8003078 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f3c3 4308 	ubfx	r3, r3, #16, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 80031c4:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80031c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80031ca:	e7f4      	b.n	80031b6 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x1e>
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d001      	beq.n	80031d4 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x3c>
  uint32_t frequency = 0UL;
 80031d0:	2000      	movs	r0, #0
  return (frequency);
 80031d2:	e7f0      	b.n	80031b6 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x1e>
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 80031d4:	f7ff ff74 	bl	80030c0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	f3c3 4308 	ubfx	r3, r3, #16, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 80031e0:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80031e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80031e6:	e7e6      	b.n	80031b6 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x1e>
 80031e8:	50004600 	.word	0x50004600
 80031ec:	2000ffc0 	.word	0x2000ffc0

080031f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80031f8:	4a02      	ldr	r2, [pc, #8]	; (8003204 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
 80031fa:	6810      	ldr	r0, [r2, #0]
}
 80031fc:	40d8      	lsrs	r0, r3
 80031fe:	4770      	bx	lr
 8003200:	50004600 	.word	0x50004600
 8003204:	2000ffc0 	.word	0x2000ffc0

08003208 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8003208:	4a03      	ldr	r2, [pc, #12]	; (8003218 <XMC_SCU_CLOCK_SetSystemClockSource+0x10>)
 800320a:	68d3      	ldr	r3, [r2, #12]
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	4303      	orrs	r3, r0
 8003212:	60d3      	str	r3, [r2, #12]
                      ((uint32_t)source);
}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	50004600 	.word	0x50004600

0800321c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 800321c:	4a03      	ldr	r2, [pc, #12]	; (800322c <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 800321e:	6993      	ldr	r3, [r2, #24]
 8003220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003224:	4303      	orrs	r3, r0
 8003226:	6193      	str	r3, [r2, #24]
                      ((uint32_t)source);
}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	50004600 	.word	0x50004600

08003230 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8003230:	4a03      	ldr	r2, [pc, #12]	; (8003240 <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 8003232:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003234:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003238:	4303      	orrs	r3, r0
 800323a:	6253      	str	r3, [r2, #36]	; 0x24
                      ((uint32_t)source);
}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	50004600 	.word	0x50004600

08003244 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8003244:	4a03      	ldr	r2, [pc, #12]	; (8003254 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x10>)
 8003246:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003248:	f023 0303 	bic.w	r3, r3, #3
 800324c:	4303      	orrs	r3, r0
 800324e:	6293      	str	r3, [r2, #40]	; 0x28
                      ((uint32_t)source);
}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	50004600 	.word	0x50004600

08003258 <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8003258:	b938      	cbnz	r0, 800326a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x12>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x24>)
 800325c:	68d3      	ldr	r3, [r2, #12]
 800325e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	60d3      	str	r3, [r2, #12]
 8003268:	4770      	bx	lr
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800326a:	4a04      	ldr	r2, [pc, #16]	; (800327c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x24>)
 800326c:	68d3      	ldr	r3, [r2, #12]
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	60d3      	str	r3, [r2, #12]
  }
}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	50004710 	.word	0x50004710

08003280 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003280:	4a06      	ldr	r2, [pc, #24]	; (800329c <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 8003282:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003286:	f013 0f08 	tst.w	r3, #8
 800328a:	d1fa      	bne.n	8003282 <XMC_SCU_HIB_SetRtcClockSource+0x2>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800328c:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <XMC_SCU_HIB_SetRtcClockSource+0x20>)
 800328e:	68d3      	ldr	r3, [r2, #12]
 8003290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003294:	4318      	orrs	r0, r3
 8003296:	60d0      	str	r0, [r2, #12]
                        ((uint32_t)source);
}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	50004000 	.word	0x50004000
 80032a0:	50004300 	.word	0x50004300

080032a4 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80032a4:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <XMC_SCU_HIB_SetStandbyClockSource+0x1c>)
 80032a6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80032aa:	f013 0f08 	tst.w	r3, #8
 80032ae:	d1fa      	bne.n	80032a6 <XMC_SCU_HIB_SetStandbyClockSource+0x2>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80032b0:	4a04      	ldr	r2, [pc, #16]	; (80032c4 <XMC_SCU_HIB_SetStandbyClockSource+0x20>)
 80032b2:	68d3      	ldr	r3, [r2, #12]
 80032b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b8:	4318      	orrs	r0, r3
 80032ba:	60d0      	str	r0, [r2, #12]
                        ((uint32_t)source);
}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	50004000 	.word	0x50004000
 80032c4:	50004300 	.word	0x50004300

080032c8 <XMC_SCU_CLOCK_SetSystemClockDivider>:
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80032c8:	4a03      	ldr	r2, [pc, #12]	; (80032d8 <XMC_SCU_CLOCK_SetSystemClockDivider+0x10>)
 80032ca:	68d3      	ldr	r3, [r2, #12]
 80032cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80032d0:	3801      	subs	r0, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80032d2:	4303      	orrs	r3, r0
 80032d4:	60d3      	str	r3, [r2, #12]
}
 80032d6:	4770      	bx	lr
 80032d8:	50004600 	.word	0x50004600

080032dc <XMC_SCU_CLOCK_SetCcuClockDivider>:
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80032dc:	4a03      	ldr	r2, [pc, #12]	; (80032ec <XMC_SCU_CLOCK_SetCcuClockDivider+0x10>)
 80032de:	6a13      	ldr	r3, [r2, #32]
 80032e0:	f023 0301 	bic.w	r3, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80032e4:	3801      	subs	r0, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80032e6:	4303      	orrs	r3, r0
 80032e8:	6213      	str	r3, [r2, #32]
}
 80032ea:	4770      	bx	lr
 80032ec:	50004600 	.word	0x50004600

080032f0 <XMC_SCU_CLOCK_SetCpuClockDivider>:
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80032f0:	4a03      	ldr	r2, [pc, #12]	; (8003300 <XMC_SCU_CLOCK_SetCpuClockDivider+0x10>)
 80032f2:	6913      	ldr	r3, [r2, #16]
 80032f4:	f023 0301 	bic.w	r3, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80032f8:	3801      	subs	r0, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80032fa:	4303      	orrs	r3, r0
 80032fc:	6113      	str	r3, [r2, #16]
}
 80032fe:	4770      	bx	lr
 8003300:	50004600 	.word	0x50004600

08003304 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8003304:	4a03      	ldr	r2, [pc, #12]	; (8003314 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x10>)
 8003306:	6953      	ldr	r3, [r2, #20]
 8003308:	f023 0301 	bic.w	r3, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800330c:	3801      	subs	r0, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800330e:	4303      	orrs	r3, r0
 8003310:	6153      	str	r3, [r2, #20]
}
 8003312:	4770      	bx	lr
 8003314:	50004600 	.word	0x50004600

08003318 <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8003318:	4a03      	ldr	r2, [pc, #12]	; (8003328 <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 800331a:	6993      	ldr	r3, [r2, #24]
 800331c:	f023 0307 	bic.w	r3, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8003320:	3801      	subs	r0, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8003322:	4303      	orrs	r3, r0
 8003324:	6193      	str	r3, [r2, #24]
}
 8003326:	4770      	bx	lr
 8003328:	50004600 	.word	0x50004600

0800332c <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800332c:	4a03      	ldr	r2, [pc, #12]	; (800333c <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 800332e:	69d3      	ldr	r3, [r2, #28]
 8003330:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8003334:	3801      	subs	r0, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8003336:	4303      	orrs	r3, r0
 8003338:	61d3      	str	r3, [r2, #28]
}
 800333a:	4770      	bx	lr
 800333c:	50004600 	.word	0x50004600

08003340 <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8003340:	4a03      	ldr	r2, [pc, #12]	; (8003350 <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 8003342:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003344:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8003348:	3801      	subs	r0, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800334a:	4303      	orrs	r3, r0
 800334c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800334e:	4770      	bx	lr
 8003350:	50004600 	.word	0x50004600

08003354 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8003354:	4a05      	ldr	r2, [pc, #20]	; (800336c <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x18>)
 8003356:	6a93      	ldr	r3, [r2, #40]	; 0x28
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8003358:	3801      	subs	r0, #1
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800335a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800335e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003362:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003366:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	50004600 	.word	0x50004600

08003370 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8003370:	4b01      	ldr	r3, [pc, #4]	; (8003378 <XMC_SCU_CLOCK_EnableClock+0x8>)
 8003372:	6058      	str	r0, [r3, #4]
}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	50004600 	.word	0x50004600

0800337c <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 800337c:	4b01      	ldr	r3, [pc, #4]	; (8003384 <XMC_SCU_CLOCK_DisableClock+0x8>)
 800337e:	6098      	str	r0, [r3, #8]
}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	50004600 	.word	0x50004600

08003388 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <XMC_SCU_CLOCK_IsClockEnabled+0x10>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4218      	tst	r0, r3
}
 800338e:	bf14      	ite	ne
 8003390:	2001      	movne	r0, #1
 8003392:	2000      	moveq	r0, #0
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	50004600 	.word	0x50004600

0800339c <XMC_SCU_POWER_GetEVR13Voltage>:
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <XMC_SCU_POWER_GetEVR13Voltage+0x1c>)
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80033aa:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80033bc <XMC_SCU_POWER_GetEVR13Voltage+0x20>
 80033ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033b2:	ee17 0a90 	vmov	r0, s15
 80033b6:	4770      	bx	lr
 80033b8:	50004200 	.word	0x50004200
 80033bc:	3bbe0ded 	.word	0x3bbe0ded

080033c0 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 80033c0:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <XMC_SCU_POWER_GetEVR33Voltage+0x20>)
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80033d0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80033e4 <XMC_SCU_POWER_GetEVR33Voltage+0x24>
 80033d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033d8:	ee17 0a90 	vmov	r0, s15
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	50004200 	.word	0x50004200
 80033e4:	3cb851ec 	.word	0x3cb851ec

080033e8 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80033e8:	4a03      	ldr	r2, [pc, #12]	; (80033f8 <XMC_SCU_CLOCK_EnableUsbPll+0x10>)
 80033ea:	6953      	ldr	r3, [r2, #20]
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	f023 0302 	bic.w	r3, r3, #2
 80033f4:	6153      	str	r3, [r2, #20]
}
 80033f6:	4770      	bx	lr
 80033f8:	50004710 	.word	0x50004710

080033fc <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80033fc:	4a03      	ldr	r2, [pc, #12]	; (800340c <XMC_SCU_CLOCK_DisableUsbPll+0x10>)
 80033fe:	6953      	ldr	r3, [r2, #20]
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6153      	str	r3, [r2, #20]
}
 800340a:	4770      	bx	lr
 800340c:	50004710 	.word	0x50004710

08003410 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8003410:	4b10      	ldr	r3, [pc, #64]	; (8003454 <XMC_SCU_CLOCK_StartUsbPll+0x44>)
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	615a      	str	r2, [r3, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	f042 0210 	orr.w	r2, r2, #16
 8003420:	615a      	str	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8003422:	1e4a      	subs	r2, r1, #1
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8003424:	1e41      	subs	r1, r0, #1
 8003426:	0609      	lsls	r1, r1, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8003428:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800342c:	6159      	str	r1, [r3, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003434:	615a      	str	r2, [r3, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	f022 0210 	bic.w	r2, r2, #16
 800343c:	615a      	str	r2, [r3, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003444:	615a      	str	r2, [r3, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8003446:	461a      	mov	r2, r3
 8003448:	6913      	ldr	r3, [r2, #16]
 800344a:	f013 0f04 	tst.w	r3, #4
 800344e:	d0fb      	beq.n	8003448 <XMC_SCU_CLOCK_StartUsbPll+0x38>
  {
    /* wait for PLL Lock */
  }

}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	50004710 	.word	0x50004710

08003458 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8003458:	4b01      	ldr	r3, [pc, #4]	; (8003460 <XMC_SCU_CLOCK_StopUsbPll+0x8>)
 800345a:	4a02      	ldr	r2, [pc, #8]	; (8003464 <XMC_SCU_CLOCK_StopUsbPll+0xc>)
 800345c:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 800345e:	4770      	bx	lr
 8003460:	50004710 	.word	0x50004710
 8003464:	00010003 	.word	0x00010003

08003468 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8003468:	b510      	push	{r4, lr}
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800346a:	4a0c      	ldr	r2, [pc, #48]	; (800349c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x34>)
 800346c:	6853      	ldr	r3, [r2, #4]
 800346e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003472:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8003474:	2801      	cmp	r0, #1
 8003476:	d003      	beq.n	8003480 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x18>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
  }

  XMC_SCU_lDelay(100UL);
 8003478:	2064      	movs	r0, #100	; 0x64
 800347a:	f7ff fc6d 	bl	8002d58 <XMC_SCU_lDelay>
}
 800347e:	bd10      	pop	{r4, pc}
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8003480:	4614      	mov	r4, r2
 8003482:	6853      	ldr	r3, [r2, #4]
 8003484:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003488:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 800348a:	2064      	movs	r0, #100	; 0x64
 800348c:	f7ff fc64 	bl	8002d58 <XMC_SCU_lDelay>
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003496:	6063      	str	r3, [r4, #4]
 8003498:	e7ee      	b.n	8003478 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x10>
 800349a:	bf00      	nop
 800349c:	50004710 	.word	0x50004710

080034a0 <XMC_SCU_POWER_EnableUsb>:

/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80034a0:	4b02      	ldr	r3, [pc, #8]	; (80034ac <XMC_SCU_POWER_EnableUsb+0xc>)
 80034a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034a6:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	50004200 	.word	0x50004200

080034b0 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80034b0:	4b02      	ldr	r3, [pc, #8]	; (80034bc <XMC_SCU_POWER_DisableUsb+0xc>)
 80034b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034b6:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	50004200 	.word	0x50004200

080034c0 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 80034c0:	4b02      	ldr	r3, [pc, #8]	; (80034cc <XMC_SCU_CLOCK_IsUsbPllLocked+0xc>)
 80034c2:	6918      	ldr	r0, [r3, #16]
}
 80034c4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	50004710 	.word	0x50004710

080034d0 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80034d0:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <XMC_SCU_HIB_EnableHibernateDomain+0x38>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f013 0f01 	tst.w	r3, #1
 80034d8:	d107      	bne.n	80034ea <XMC_SCU_HIB_EnableHibernateDomain+0x1a>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <XMC_SCU_HIB_EnableHibernateDomain+0x38>)
 80034dc:	2201      	movs	r2, #1
 80034de:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80034e0:	461a      	mov	r2, r3
 80034e2:	6813      	ldr	r3, [r2, #0]
 80034e4:	f013 0f01 	tst.w	r3, #1
 80034e8:	d0fb      	beq.n	80034e2 <XMC_SCU_HIB_EnableHibernateDomain+0x12>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <XMC_SCU_HIB_EnableHibernateDomain+0x3c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80034f2:	d008      	beq.n	8003506 <XMC_SCU_HIB_EnableHibernateDomain+0x36>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <XMC_SCU_HIB_EnableHibernateDomain+0x3c>)
 80034f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fa:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80034fc:	461a      	mov	r2, r3
 80034fe:	6813      	ldr	r3, [r2, #0]
 8003500:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003504:	d1fb      	bne.n	80034fe <XMC_SCU_HIB_EnableHibernateDomain+0x2e>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8003506:	4770      	bx	lr
 8003508:	50004200 	.word	0x50004200
 800350c:	50004400 	.word	0x50004400

08003510 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <XMC_SCU_HIB_DisableHibernateDomain+0x14>)
 8003512:	2201      	movs	r2, #1
 8003514:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8003516:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800351a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351e:	605a      	str	r2, [r3, #4]
}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	50004200 	.word	0x50004200

08003528 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x1c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f013 0f01 	tst.w	r3, #1
 8003530:	d006      	beq.n	8003540 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x18>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>)
 8003534:	6818      	ldr	r0, [r3, #0]
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8003536:	f480 7000 	eor.w	r0, r0, #512	; 0x200
 800353a:	f3c0 2040 	ubfx	r0, r0, #9, #1
 800353e:	4770      	bx	lr
 8003540:	2000      	movs	r0, #0
}
 8003542:	4770      	bx	lr
 8003544:	50004200 	.word	0x50004200
 8003548:	50004400 	.word	0x50004400

0800354c <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 800354c:	4a05      	ldr	r2, [pc, #20]	; (8003564 <XMC_SCU_HIB_EnableInternalSlowClock+0x18>)
 800354e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003552:	f013 0f20 	tst.w	r3, #32
 8003556:	d1fa      	bne.n	800354e <XMC_SCU_HIB_EnableInternalSlowClock+0x2>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8003558:	4a03      	ldr	r2, [pc, #12]	; (8003568 <XMC_SCU_HIB_EnableInternalSlowClock+0x1c>)
 800355a:	6953      	ldr	r3, [r2, #20]
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	6153      	str	r3, [r2, #20]
}
 8003562:	4770      	bx	lr
 8003564:	50004000 	.word	0x50004000
 8003568:	50004300 	.word	0x50004300

0800356c <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 800356c:	4a05      	ldr	r2, [pc, #20]	; (8003584 <XMC_SCU_HIB_DisableInternalSlowClock+0x18>)
 800356e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003572:	f013 0f20 	tst.w	r3, #32
 8003576:	d1fa      	bne.n	800356e <XMC_SCU_HIB_DisableInternalSlowClock+0x2>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8003578:	4a03      	ldr	r2, [pc, #12]	; (8003588 <XMC_SCU_HIB_DisableInternalSlowClock+0x1c>)
 800357a:	6953      	ldr	r3, [r2, #20]
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6153      	str	r3, [r2, #20]
}
 8003582:	4770      	bx	lr
 8003584:	50004000 	.word	0x50004000
 8003588:	50004300 	.word	0x50004300

0800358c <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 800358c:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <XMC_SCU_HIB_ClearEventStatus+0x14>)
 800358e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003592:	f013 0f02 	tst.w	r3, #2
 8003596:	d1fa      	bne.n	800358e <XMC_SCU_HIB_ClearEventStatus+0x2>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8003598:	4b02      	ldr	r3, [pc, #8]	; (80035a4 <XMC_SCU_HIB_ClearEventStatus+0x18>)
 800359a:	6058      	str	r0, [r3, #4]
}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	50004000 	.word	0x50004000
 80035a4:	50004300 	.word	0x50004300

080035a8 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80035a8:	4a04      	ldr	r2, [pc, #16]	; (80035bc <XMC_SCU_HIB_TriggerEvent+0x14>)
 80035aa:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80035ae:	f013 0f04 	tst.w	r3, #4
 80035b2:	d1fa      	bne.n	80035aa <XMC_SCU_HIB_TriggerEvent+0x2>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 80035b4:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <XMC_SCU_HIB_TriggerEvent+0x18>)
 80035b6:	6098      	str	r0, [r3, #8]
}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	50004000 	.word	0x50004000
 80035c0:	50004300 	.word	0x50004300

080035c4 <XMC_SCU_HIB_EnableEvent>:
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80035c4:	4a05      	ldr	r2, [pc, #20]	; (80035dc <XMC_SCU_HIB_EnableEvent+0x18>)
 80035c6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80035ca:	f013 0f08 	tst.w	r3, #8
 80035ce:	d1fa      	bne.n	80035c6 <XMC_SCU_HIB_EnableEvent+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <XMC_SCU_HIB_EnableEvent+0x1c>)
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	4310      	orrs	r0, r2
 80035d6:	60d8      	str	r0, [r3, #12]
}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	50004000 	.word	0x50004000
 80035e0:	50004300 	.word	0x50004300

080035e4 <XMC_SCU_HIB_DisableEvent>:
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80035e4:	4a05      	ldr	r2, [pc, #20]	; (80035fc <XMC_SCU_HIB_DisableEvent+0x18>)
 80035e6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80035ea:	f013 0f08 	tst.w	r3, #8
 80035ee:	d1fa      	bne.n	80035e6 <XMC_SCU_HIB_DisableEvent+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 80035f0:	4a03      	ldr	r2, [pc, #12]	; (8003600 <XMC_SCU_HIB_DisableEvent+0x1c>)
 80035f2:	68d3      	ldr	r3, [r2, #12]
 80035f4:	ea23 0000 	bic.w	r0, r3, r0
 80035f8:	60d0      	str	r0, [r2, #12]
}
 80035fa:	4770      	bx	lr
 80035fc:	50004000 	.word	0x50004000
 8003600:	50004300 	.word	0x50004300

08003604 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003604:	4a05      	ldr	r2, [pc, #20]	; (800361c <XMC_SCU_HIB_EnterHibernateState+0x18>)
 8003606:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800360a:	f013 0f08 	tst.w	r3, #8
 800360e:	d1fa      	bne.n	8003606 <XMC_SCU_HIB_EnterHibernateState+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8003610:	4a03      	ldr	r2, [pc, #12]	; (8003620 <XMC_SCU_HIB_EnterHibernateState+0x1c>)
 8003612:	68d3      	ldr	r3, [r2, #12]
 8003614:	f043 0310 	orr.w	r3, r3, #16
 8003618:	60d3      	str	r3, [r2, #12]
}
 800361a:	4770      	bx	lr
 800361c:	50004000 	.word	0x50004000
 8003620:	50004300 	.word	0x50004300

08003624 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8003624:	b100      	cbz	r0, 8003628 <XMC_SCU_HIB_EnterHibernateStateEx+0x4>
 8003626:	4770      	bx	lr
{
 8003628:	b508      	push	{r3, lr}
  {
    XMC_SCU_HIB_EnterHibernateState();
 800362a:	f7ff ffeb 	bl	8003604 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 800362e:	bd08      	pop	{r3, pc}

08003630 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003630:	4a09      	ldr	r2, [pc, #36]	; (8003658 <XMC_SCU_HIB_SetWakeupTriggerInput+0x28>)
 8003632:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003636:	f013 0f08 	tst.w	r3, #8
 800363a:	d1fa      	bne.n	8003632 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 800363c:	b928      	cbnz	r0, 800364a <XMC_SCU_HIB_SetWakeupTriggerInput+0x1a>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 800363e:	4a07      	ldr	r2, [pc, #28]	; (800365c <XMC_SCU_HIB_SetWakeupTriggerInput+0x2c>)
 8003640:	68d3      	ldr	r3, [r2, #12]
 8003642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003646:	60d3      	str	r3, [r2, #12]
 8003648:	4770      	bx	lr
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 800364a:	4a04      	ldr	r2, [pc, #16]	; (800365c <XMC_SCU_HIB_SetWakeupTriggerInput+0x2c>)
 800364c:	68d3      	ldr	r3, [r2, #12]
 800364e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003652:	60d3      	str	r3, [r2, #12]
  }
}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	50004000 	.word	0x50004000
 800365c:	50004300 	.word	0x50004300

08003660 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8003660:	b410      	push	{r4}
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <XMC_SCU_HIB_SetPinMode+0x2c>)
 8003664:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003668:	f013 0f08 	tst.w	r3, #8
 800366c:	d1fa      	bne.n	8003664 <XMC_SCU_HIB_SetPinMode+0x4>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 800366e:	4c08      	ldr	r4, [pc, #32]	; (8003690 <XMC_SCU_HIB_SetPinMode+0x30>)
 8003670:	68e3      	ldr	r3, [r4, #12]
 8003672:	0080      	lsls	r0, r0, #2
 8003674:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8003678:	4082      	lsls	r2, r0
 800367a:	ea23 0302 	bic.w	r3, r3, r2
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 800367e:	fa01 f000 	lsl.w	r0, r1, r0
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8003682:	4318      	orrs	r0, r3
 8003684:	60e0      	str	r0, [r4, #12]
}
 8003686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	50004000 	.word	0x50004000
 8003690:	50004300 	.word	0x50004300

08003694 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8003694:	b410      	push	{r4}
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <XMC_SCU_HIB_SetPinOutputLevel+0x28>)
 8003698:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800369c:	f013 0f08 	tst.w	r3, #8
 80036a0:	d1fa      	bne.n	8003698 <XMC_SCU_HIB_SetPinOutputLevel+0x4>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80036a2:	4c07      	ldr	r4, [pc, #28]	; (80036c0 <XMC_SCU_HIB_SetPinOutputLevel+0x2c>)
 80036a4:	68e3      	ldr	r3, [r4, #12]
 80036a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036aa:	4082      	lsls	r2, r0
 80036ac:	ea23 0302 	bic.w	r3, r3, r2
                        (level << pin);
 80036b0:	4081      	lsls	r1, r0
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80036b2:	430b      	orrs	r3, r1
 80036b4:	60e3      	str	r3, [r4, #12]
}
 80036b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	50004000 	.word	0x50004000
 80036c0:	50004300 	.word	0x50004300

080036c4 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80036c4:	4a09      	ldr	r2, [pc, #36]	; (80036ec <XMC_SCU_HIB_SetInput0+0x28>)
 80036c6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80036ca:	f013 0f08 	tst.w	r3, #8
 80036ce:	d1fa      	bne.n	80036c6 <XMC_SCU_HIB_SetInput0+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 80036d0:	b928      	cbnz	r0, 80036de <XMC_SCU_HIB_SetInput0+0x1a>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 80036d2:	4a07      	ldr	r2, [pc, #28]	; (80036f0 <XMC_SCU_HIB_SetInput0+0x2c>)
 80036d4:	68d3      	ldr	r3, [r2, #12]
 80036d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036da:	60d3      	str	r3, [r2, #12]
 80036dc:	4770      	bx	lr
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <XMC_SCU_HIB_SetInput0+0x2c>)
 80036e0:	68d3      	ldr	r3, [r2, #12]
 80036e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e6:	60d3      	str	r3, [r2, #12]
  }
}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	50004000 	.word	0x50004000
 80036f0:	50004300 	.word	0x50004300

080036f4 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80036f4:	4a06      	ldr	r2, [pc, #24]	; (8003710 <XMC_SCU_HIB_SetSR0Input+0x1c>)
 80036f6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80036fa:	f013 0f08 	tst.w	r3, #8
 80036fe:	d1fa      	bne.n	80036f6 <XMC_SCU_HIB_SetSR0Input+0x2>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <XMC_SCU_HIB_SetSR0Input+0x20>)
 8003702:	68d3      	ldr	r3, [r2, #12]
 8003704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003708:	4318      	orrs	r0, r3
 800370a:	60d0      	str	r0, [r2, #12]
#endif  
                        input;
}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	50004000 	.word	0x50004000
 8003714:	50004300 	.word	0x50004300

08003718 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x10>)
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	f080 0008 	eor.w	r0, r0, #8
}
 8003720:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	50004300 	.word	0x50004300

0800372c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 800372c:	4a13      	ldr	r2, [pc, #76]	; (800377c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x50>)
 800372e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003732:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003736:	d1fa      	bne.n	800372e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x2>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8003738:	4a11      	ldr	r2, [pc, #68]	; (8003780 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>)
 800373a:	69d3      	ldr	r3, [r2, #28]
 800373c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003740:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003742:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 8003746:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800374a:	f013 0f08 	tst.w	r3, #8
 800374e:	d1fa      	bne.n	8003746 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8003750:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>)
 8003752:	68d3      	ldr	r3, [r2, #12]
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 800375a:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 800375e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003762:	f013 0f04 	tst.w	r3, #4
 8003766:	d1fa      	bne.n	800375e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x32>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>)
 800376a:	2208      	movs	r2, #8
 800376c:	609a      	str	r2, [r3, #8]
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 800376e:	4a03      	ldr	r2, [pc, #12]	; (800377c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x50>)
 8003770:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4

  while (XMC_SCU_GetMirrorStatus() != 0)
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1fb      	bne.n	8003770 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	50004000 	.word	0x50004000
 8003780:	50004300 	.word	0x50004300

08003784 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8003784:	4a05      	ldr	r2, [pc, #20]	; (800379c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x18>)
 8003786:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800378a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800378e:	d1fa      	bne.n	8003786 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8003790:	4a03      	ldr	r2, [pc, #12]	; (80037a0 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x1c>)
 8003792:	69d3      	ldr	r3, [r2, #28]
 8003794:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003798:	61d3      	str	r3, [r2, #28]
}
 800379a:	4770      	bx	lr
 800379c:	50004000 	.word	0x50004000
 80037a0:	50004300 	.word	0x50004300

080037a4 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80037a4:	4a05      	ldr	r2, [pc, #20]	; (80037bc <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x18>)
 80037a6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80037aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037ae:	d1fa      	bne.n	80037a6 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80037b0:	4a03      	ldr	r2, [pc, #12]	; (80037c0 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x1c>)
 80037b2:	69d3      	ldr	r3, [r2, #28]
 80037b4:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 80037b8:	61d3      	str	r3, [r2, #28]
}
 80037ba:	4770      	bx	lr
 80037bc:	50004000 	.word	0x50004000
 80037c0:	50004300 	.word	0x50004300

080037c4 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80037c4:	4a06      	ldr	r2, [pc, #24]	; (80037e0 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x1c>)
 80037c6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80037ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037ce:	d1fa      	bne.n	80037c6 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x20>)
 80037d2:	69d3      	ldr	r3, [r2, #28]
 80037d4:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 80037d8:	f043 0320 	orr.w	r3, r3, #32
 80037dc:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 80037de:	4770      	bx	lr
 80037e0:	50004000 	.word	0x50004000
 80037e4:	50004300 	.word	0x50004300

080037e8 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 80037e8:	4b02      	ldr	r3, [pc, #8]	; (80037f4 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0xc>)
 80037ea:	6998      	ldr	r0, [r3, #24]
}
 80037ec:	f000 0001 	and.w	r0, r0, #1
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	50004300 	.word	0x50004300

080037f8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80037f8:	b570      	push	{r4, r5, r6, lr}
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80037fa:	4c0d      	ldr	r4, [pc, #52]	; (8003830 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x38>)
 80037fc:	6863      	ldr	r3, [r4, #4]
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003802:	6063      	str	r3, [r4, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8003804:	4d0b      	ldr	r5, [pc, #44]	; (8003834 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x3c>)
 8003806:	686e      	ldr	r6, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8003808:	f000 fe2e 	bl	8004468 <OSCHP_GetFrequency>
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x40>)
 800380e:	fba3 2300 	umull	r2, r3, r3, r0
 8003812:	0d1b      	lsrs	r3, r3, #20
 8003814:	3b01      	subs	r3, #1
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8003816:	f426 2270 	bic.w	r2, r6, #983040	; 0xf0000
 800381a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800381e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8003822:	606b      	str	r3, [r5, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8003824:	6863      	ldr	r3, [r4, #4]
 8003826:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800382a:	6063      	str	r3, [r4, #4]
}
 800382c:	bd70      	pop	{r4, r5, r6, pc}
 800382e:	bf00      	nop
 8003830:	50004710 	.word	0x50004710
 8003834:	50004700 	.word	0x50004700
 8003838:	6b5fca6b 	.word	0x6b5fca6b

0800383c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x14>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	f400 7060 	and.w	r0, r0, #896	; 0x380
}
 8003844:	f5b0 7f60 	cmp.w	r0, #896	; 0x380
 8003848:	bf14      	ite	ne
 800384a:	2000      	movne	r0, #0
 800384c:	2001      	moveq	r0, #1
 800384e:	4770      	bx	lr
 8003850:	50004710 	.word	0x50004710

08003854 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8003854:	4a02      	ldr	r2, [pc, #8]	; (8003860 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0xc>)
 8003856:	6853      	ldr	r3, [r2, #4]
 8003858:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800385c:	6053      	str	r3, [r2, #4]
}
 800385e:	4770      	bx	lr
 8003860:	50004700 	.word	0x50004700

08003864 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8003864:	4a02      	ldr	r2, [pc, #8]	; (8003870 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0xc>)
 8003866:	6853      	ldr	r3, [r2, #4]
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6053      	str	r3, [r2, #4]
}
 800386e:	4770      	bx	lr
 8003870:	50004700 	.word	0x50004700

08003874 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8003874:	4a02      	ldr	r2, [pc, #8]	; (8003880 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0xc>)
 8003876:	6853      	ldr	r3, [r2, #4]
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6053      	str	r3, [r2, #4]
}
 800387e:	4770      	bx	lr
 8003880:	50004700 	.word	0x50004700

08003884 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8003884:	4b02      	ldr	r3, [pc, #8]	; (8003890 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0xc>)
 8003886:	6818      	ldr	r0, [r3, #0]
}
 8003888:	f000 0001 	and.w	r0, r0, #1
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	50004700 	.word	0x50004700

08003894 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8003894:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <XMC_SCU_CLOCK_EnableSystemPll+0x10>)
 8003896:	6853      	ldr	r3, [r2, #4]
 8003898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389c:	f023 0302 	bic.w	r3, r3, #2
 80038a0:	6053      	str	r3, [r2, #4]
}
 80038a2:	4770      	bx	lr
 80038a4:	50004710 	.word	0x50004710

080038a8 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80038a8:	4a03      	ldr	r2, [pc, #12]	; (80038b8 <XMC_SCU_CLOCK_DisableSystemPll+0x10>)
 80038aa:	6853      	ldr	r3, [r2, #4]
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	6053      	str	r3, [r2, #4]
}
 80038b6:	4770      	bx	lr
 80038b8:	50004710 	.word	0x50004710

080038bc <XMC_SCU_CLOCK_StopSystemPll>:
}

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 80038bc:	4a02      	ldr	r2, [pc, #8]	; (80038c8 <XMC_SCU_CLOCK_StopSystemPll+0xc>)
 80038be:	6853      	ldr	r3, [r2, #4]
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	6053      	str	r3, [r2, #4]
}
 80038c6:	4770      	bx	lr
 80038c8:	50004710 	.word	0x50004710

080038cc <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 80038cc:	b508      	push	{r3, lr}
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80038ce:	4a06      	ldr	r2, [pc, #24]	; (80038e8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1c>)
 80038d0:	6893      	ldr	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80038d2:	3801      	subs	r0, #1
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80038d4:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80038d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80038dc:	6093      	str	r3, [r2, #8]

  XMC_SCU_lDelay(50U);
 80038de:	2032      	movs	r0, #50	; 0x32
 80038e0:	f7ff fa3a 	bl	8002d58 <XMC_SCU_lDelay>
}
 80038e4:	bd08      	pop	{r3, pc}
 80038e6:	bf00      	nop
 80038e8:	50004710 	.word	0x50004710

080038ec <XMC_SCU_CLOCK_StartSystemPll>:
{
 80038ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f0:	4680      	mov	r8, r0
 80038f2:	460c      	mov	r4, r1
 80038f4:	4616      	mov	r6, r2
 80038f6:	461d      	mov	r5, r3
 80038f8:	9f06      	ldr	r7, [sp, #24]
  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80038fa:	f7ff fcad 	bl	8003258 <XMC_SCU_CLOCK_SetSystemPllClockSource>
  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80038fe:	2c01      	cmp	r4, #1
 8003900:	d010      	beq.n	8003924 <XMC_SCU_CLOCK_StartSystemPll+0x38>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8003902:	4a37      	ldr	r2, [pc, #220]	; (80039e0 <XMC_SCU_CLOCK_StartSystemPll+0xf4>)
 8003904:	6893      	ldr	r3, [r2, #8]
 8003906:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 800390a:	3f01      	subs	r7, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800390c:	431f      	orrs	r7, r3
 800390e:	6097      	str	r7, [r2, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8003910:	6853      	ldr	r3, [r2, #4]
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8003918:	6813      	ldr	r3, [r2, #0]
 800391a:	f013 0f01 	tst.w	r3, #1
 800391e:	d0fb      	beq.n	8003918 <XMC_SCU_CLOCK_StartSystemPll+0x2c>
}
 8003920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8003924:	f1b8 0f00 	cmp.w	r8, #0
 8003928:	d04c      	beq.n	80039c4 <XMC_SCU_CLOCK_StartSystemPll+0xd8>
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 800392a:	f04f 64c0 	mov.w	r4, #100663296	; 0x6000000
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800392e:	fb05 f404 	mul.w	r4, r5, r4
 8003932:	fbb4 f4f6 	udiv	r4, r4, r6
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8003936:	492a      	ldr	r1, [pc, #168]	; (80039e0 <XMC_SCU_CLOCK_StartSystemPll+0xf4>)
 8003938:	684b      	ldr	r3, [r1, #4]
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8003940:	684b      	ldr	r3, [r1, #4]
 8003942:	f043 0310 	orr.w	r3, r3, #16
 8003946:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8003948:	688a      	ldr	r2, [r1, #8]
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 800394a:	3e01      	subs	r6, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800394c:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <XMC_SCU_CLOCK_StartSystemPll+0xf8>)
 800394e:	4013      	ands	r3, r2
 8003950:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003954:	3d01      	subs	r5, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8003956:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800395a:	4a23      	ldr	r2, [pc, #140]	; (80039e8 <XMC_SCU_CLOCK_StartSystemPll+0xfc>)
 800395c:	fba2 0204 	umull	r0, r2, r2, r4
 8003960:	0e92      	lsrs	r2, r2, #26
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8003962:	3a01      	subs	r2, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8003964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003968:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800396a:	684b      	ldr	r3, [r1, #4]
 800396c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003970:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8003972:	684b      	ldr	r3, [r1, #4]
 8003974:	f023 0310 	bic.w	r3, r3, #16
 8003978:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 800397a:	684b      	ldr	r3, [r1, #4]
 800397c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003980:	604b      	str	r3, [r1, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8003982:	460a      	mov	r2, r1
 8003984:	6813      	ldr	r3, [r2, #0]
 8003986:	f013 0f04 	tst.w	r3, #4
 800398a:	d0fb      	beq.n	8003984 <XMC_SCU_CLOCK_StartSystemPll+0x98>
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <XMC_SCU_CLOCK_StartSystemPll+0xf4>)
 800398e:	6853      	ldr	r3, [r2, #4]
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8003996:	6813      	ldr	r3, [r2, #0]
 8003998:	f013 0f01 	tst.w	r3, #1
 800399c:	d1fb      	bne.n	8003996 <XMC_SCU_CLOCK_StartSystemPll+0xaa>
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <XMC_SCU_CLOCK_StartSystemPll+0x100>)
 80039a0:	fba3 2304 	umull	r2, r3, r3, r4
 80039a4:	0ed8      	lsrs	r0, r3, #27
    if (kdiv < kdiv_temp)
 80039a6:	ebb7 6fd3 	cmp.w	r7, r3, lsr #27
 80039aa:	d313      	bcc.n	80039d4 <XMC_SCU_CLOCK_StartSystemPll+0xe8>
    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80039ac:	0864      	lsrs	r4, r4, #1
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <XMC_SCU_CLOCK_StartSystemPll+0x104>)
 80039b0:	fba3 3404 	umull	r3, r4, r3, r4
 80039b4:	0ee0      	lsrs	r0, r4, #27
    if (kdiv < kdiv_temp)
 80039b6:	ebb7 6fd4 	cmp.w	r7, r4, lsr #27
 80039ba:	d30e      	bcc.n	80039da <XMC_SCU_CLOCK_StartSystemPll+0xee>
    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80039bc:	4638      	mov	r0, r7
 80039be:	f7ff ff85 	bl	80038cc <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80039c2:	e7ad      	b.n	8003920 <XMC_SCU_CLOCK_StartSystemPll+0x34>
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80039c4:	f000 fd50 	bl	8004468 <OSCHP_GetFrequency>
 80039c8:	4c0a      	ldr	r4, [pc, #40]	; (80039f4 <XMC_SCU_CLOCK_StartSystemPll+0x108>)
 80039ca:	fba4 3400 	umull	r3, r4, r4, r0
 80039ce:	0ca4      	lsrs	r4, r4, #18
 80039d0:	05a4      	lsls	r4, r4, #22
 80039d2:	e7ac      	b.n	800392e <XMC_SCU_CLOCK_StartSystemPll+0x42>
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80039d4:	f7ff ff7a 	bl	80038cc <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80039d8:	e7e8      	b.n	80039ac <XMC_SCU_CLOCK_StartSystemPll+0xc0>
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80039da:	f7ff ff77 	bl	80038cc <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80039de:	e7ed      	b.n	80039bc <XMC_SCU_CLOCK_StartSystemPll+0xd0>
 80039e0:	50004710 	.word	0x50004710
 80039e4:	f08080ff 	.word	0xf08080ff
 80039e8:	aaaaaaab 	.word	0xaaaaaaab
 80039ec:	88888889 	.word	0x88888889
 80039f0:	b60b60b7 	.word	0xb60b60b7
 80039f4:	431bde83 	.word	0x431bde83

080039f8 <XMC_SCU_CLOCK_Init>:
{
 80039f8:	b510      	push	{r4, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	4604      	mov	r4, r0
  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80039fe:	2000      	movs	r0, #0
 8003a00:	f7ff fc02 	bl	8003208 <XMC_SCU_CLOCK_SetSystemClockSource>
  XMC_SCU_HIB_EnableHibernateDomain();
 8003a04:	f7ff fd64 	bl	80034d0 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 8003a08:	79e3      	ldrb	r3, [r4, #7]
 8003a0a:	bb23      	cbnz	r3, 8003a56 <XMC_SCU_CLOCK_Init+0x5e>
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8003a0c:	7a60      	ldrb	r0, [r4, #9]
 8003a0e:	f7ff fc49 	bl	80032a4 <XMC_SCU_HIB_SetStandbyClockSource>
 8003a12:	4a20      	ldr	r2, [pc, #128]	; (8003a94 <XMC_SCU_CLOCK_Init+0x9c>)
 8003a14:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
  while (XMC_SCU_GetMirrorStatus() != 0)
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1fb      	bne.n	8003a14 <XMC_SCU_CLOCK_Init+0x1c>
  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8003a1c:	7a20      	ldrb	r0, [r4, #8]
 8003a1e:	f7ff fd23 	bl	8003468 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>
  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8003a22:	7c20      	ldrb	r0, [r4, #16]
 8003a24:	f7ff fc50 	bl	80032c8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8003a28:	7c60      	ldrb	r0, [r4, #17]
 8003a2a:	f7ff fc61 	bl	80032f0 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8003a2e:	7ca0      	ldrb	r0, [r4, #18]
 8003a30:	f7ff fc54 	bl	80032dc <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8003a34:	7ce0      	ldrb	r0, [r4, #19]
 8003a36:	f7ff fc65 	bl	8003304 <XMC_SCU_CLOCK_SetPeripheralClockDivider>
  if (config->enable_oschp == true)
 8003a3a:	79a3      	ldrb	r3, [r4, #6]
 8003a3c:	b993      	cbnz	r3, 8003a64 <XMC_SCU_CLOCK_Init+0x6c>
  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8003a3e:	78e3      	ldrb	r3, [r4, #3]
 8003a40:	b9bb      	cbnz	r3, 8003a72 <XMC_SCU_CLOCK_Init+0x7a>
    XMC_SCU_CLOCK_DisableSystemPll();
 8003a42:	f7ff ff31 	bl	80038a8 <XMC_SCU_CLOCK_DisableSystemPll>
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8003a46:	68e3      	ldr	r3, [r4, #12]
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d01c      	beq.n	8003a88 <XMC_SCU_CLOCK_Init+0x90>
  SystemCoreClockUpdate();
 8003a4e:	f000 fd0f 	bl	8004470 <SystemCoreClockUpdate>
}
 8003a52:	b002      	add	sp, #8
 8003a54:	bd10      	pop	{r4, pc}
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8003a56:	f7ff fe69 	bl	800372c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8003a5a:	f7ff fe5d 	bl	8003718 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d0fb      	beq.n	8003a5a <XMC_SCU_CLOCK_Init+0x62>
 8003a62:	e7d3      	b.n	8003a0c <XMC_SCU_CLOCK_Init+0x14>
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8003a64:	f7ff fec8 	bl	80037f8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8003a68:	f7ff fee8 	bl	800383c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d0fb      	beq.n	8003a68 <XMC_SCU_CLOCK_Init+0x70>
 8003a70:	e7e5      	b.n	8003a3e <XMC_SCU_CLOCK_Init+0x46>
    XMC_SCU_CLOCK_EnableSystemPll();
 8003a72:	f7ff ff0f 	bl	8003894 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8003a76:	78a3      	ldrb	r3, [r4, #2]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	7823      	ldrb	r3, [r4, #0]
 8003a7c:	7862      	ldrb	r2, [r4, #1]
 8003a7e:	78e1      	ldrb	r1, [r4, #3]
 8003a80:	88a0      	ldrh	r0, [r4, #4]
 8003a82:	f7ff ff33 	bl	80038ec <XMC_SCU_CLOCK_StartSystemPll>
 8003a86:	e7de      	b.n	8003a46 <XMC_SCU_CLOCK_Init+0x4e>
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8003a88:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003a8c:	f7ff fbbc 	bl	8003208 <XMC_SCU_CLOCK_SetSystemClockSource>
 8003a90:	e7dd      	b.n	8003a4e <XMC_SCU_CLOCK_Init+0x56>
 8003a92:	bf00      	nop
 8003a94:	50004000 	.word	0x50004000

08003a98 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8003a98:	4b02      	ldr	r3, [pc, #8]	; (8003aa4 <XMC_SCU_CLOCK_IsSystemPllLocked+0xc>)
 8003a9a:	6818      	ldr	r0, [r3, #0]
}
 8003a9c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	50004710 	.word	0x50004710

08003aa8 <XMC_SCU_INTERRUPT_SetEventHandler>:
{
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8003aa8:	f010 0301 	ands.w	r3, r0, #1
 8003aac:	d110      	bne.n	8003ad0 <XMC_SCU_INTERRUPT_SetEventHandler+0x28>
  {
    index++;
 8003aae:	3301      	adds	r3, #1
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8003ab0:	fa20 f203 	lsr.w	r2, r0, r3
 8003ab4:	f012 0f01 	tst.w	r2, #1
 8003ab8:	d103      	bne.n	8003ac2 <XMC_SCU_INTERRUPT_SetEventHandler+0x1a>
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d1f7      	bne.n	8003aae <XMC_SCU_INTERRUPT_SetEventHandler+0x6>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
  {
    status = XMC_SCU_STATUS_ERROR;
 8003abe:	2001      	movs	r0, #1
 8003ac0:	4770      	bx	lr
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d006      	beq.n	8003ad4 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
  }
  else
  {
    event_handler_list[index] = handler;
 8003ac6:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <XMC_SCU_INTERRUPT_SetEventHandler+0x30>)
 8003ac8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8003acc:	2000      	movs	r0, #0
 8003ace:	4770      	bx	lr
  index = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e7f8      	b.n	8003ac6 <XMC_SCU_INTERRUPT_SetEventHandler+0x1e>
    status = XMC_SCU_STATUS_ERROR;
 8003ad4:	2001      	movs	r0, #1
  }
  
  return (status);
}
 8003ad6:	4770      	bx	lr
 8003ad8:	2000159c 	.word	0x2000159c

08003adc <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8003adc:	b510      	push	{r4, lr}
  return (SCU_INTERRUPT->SRRAW);
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <XMC_SCU_IRQHandler+0x38>)
 8003ae0:	685a      	ldr	r2, [r3, #4]
  
  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus();
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8003ae2:	f012 0f01 	tst.w	r2, #1
 8003ae6:	d109      	bne.n	8003afc <XMC_SCU_IRQHandler+0x20>
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
      
      break;
    }   
    index++;    
 8003ae8:	2401      	movs	r4, #1
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8003aea:	fa22 f304 	lsr.w	r3, r2, r4
 8003aee:	f013 0f01 	tst.w	r3, #1
 8003af2:	d104      	bne.n	8003afe <XMC_SCU_IRQHandler+0x22>
    index++;    
 8003af4:	3401      	adds	r4, #1
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8003af6:	2c20      	cmp	r4, #32
 8003af8:	d1f7      	bne.n	8003aea <XMC_SCU_IRQHandler+0xe>
 8003afa:	e00a      	b.n	8003b12 <XMC_SCU_IRQHandler+0x36>
  index = 0U;
 8003afc:	2400      	movs	r4, #0
      event_handler = event_handler_list[index];
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <XMC_SCU_IRQHandler+0x3c>)
 8003b00:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
      if (event_handler != NULL)
 8003b04:	b103      	cbz	r3, 8003b08 <XMC_SCU_IRQHandler+0x2c>
          (event_handler)();
 8003b06:	4798      	blx	r3
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 8003b08:	2301      	movs	r3, #1
 8003b0a:	fa03 f404 	lsl.w	r4, r3, r4
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8003b0e:	4b01      	ldr	r3, [pc, #4]	; (8003b14 <XMC_SCU_IRQHandler+0x38>)
 8003b10:	60dc      	str	r4, [r3, #12]
  }
}
 8003b12:	bd10      	pop	{r4, pc}
 8003b14:	50004074 	.word	0x50004074
 8003b18:	2000159c 	.word	0x2000159c

08003b1c <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 8003b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b20:	4680      	mov	r8, r0
 8003b22:	460d      	mov	r5, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003b24:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <Endpoint_Write_Stream_LE+0xac>)
 8003b26:	f893 a13c 	ldrb.w	sl, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
	if (BytesProcessed!=NULL) {
 8003b2a:	4691      	mov	r9, r2
 8003b2c:	b142      	cbz	r2, 8003b40 <Endpoint_Write_Stream_LE+0x24>
		Length -= *BytesProcessed;
 8003b2e:	8817      	ldrh	r7, [r2, #0]
 8003b30:	1bcd      	subs	r5, r1, r7
 8003b32:	b2ad      	uxth	r5, r5
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
			ep->InBytesAvailable += Bytes;
			BytesTransfered += Bytes;
			prev_length = Length;
			Length -= Bytes;
 8003b34:	2600      	movs	r6, #0
		if (ep->InInUse)
 8003b36:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <Endpoint_Write_Stream_LE+0xac>)
 8003b38:	242c      	movs	r4, #44	; 0x2c
 8003b3a:	fb04 340a 	mla	r4, r4, sl, r3
 8003b3e:	e00b      	b.n	8003b58 <Endpoint_Write_Stream_LE+0x3c>
	uint16_t BytesTransfered = 0;
 8003b40:	2700      	movs	r7, #0
 8003b42:	e7f7      	b.n	8003b34 <Endpoint_Write_Stream_LE+0x18>
		}
		else {
			Endpoint_ClearIN();
 8003b44:	f7fe ffec 	bl	8002b20 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8003b48:	f1b9 0f00 	cmp.w	r9, #0
 8003b4c:	d127      	bne.n	8003b9e <Endpoint_Write_Stream_LE+0x82>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003b4e:	f7fe ff69 	bl	8002a24 <Endpoint_WaitUntilReady>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d134      	bne.n	8003bc2 <Endpoint_Write_Stream_LE+0xa6>
	while (Length) {
 8003b58:	b32d      	cbz	r5, 8003ba6 <Endpoint_Write_Stream_LE+0x8a>
		if (ep->InInUse)
 8003b5a:	68a3      	ldr	r3, [r4, #8]
 8003b5c:	f013 0f10 	tst.w	r3, #16
 8003b60:	d1fa      	bne.n	8003b58 <Endpoint_Write_Stream_LE+0x3c>
		if (Endpoint_IsReadWriteAllowed()) {
 8003b62:	f7ff f839 	bl	8002bd8 <Endpoint_IsReadWriteAllowed>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d0ec      	beq.n	8003b44 <Endpoint_Write_Stream_LE+0x28>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003b6a:	69e3      	ldr	r3, [r4, #28]
 8003b6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003b6e:	1af6      	subs	r6, r6, r3
 8003b70:	42ae      	cmp	r6, r5
 8003b72:	bf28      	it	cs
 8003b74:	462e      	movcs	r6, r5
 8003b76:	fa1f fb86 	uxth.w	fp, r6
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8003b7a:	6a20      	ldr	r0, [r4, #32]
 8003b7c:	4632      	mov	r2, r6
 8003b7e:	eb08 0107 	add.w	r1, r8, r7
 8003b82:	4418      	add	r0, r3
 8003b84:	f000 f99c 	bl	8003ec0 <thumb2_memcpy>
			ep->InBytesAvailable += Bytes;
 8003b88:	69e3      	ldr	r3, [r4, #28]
 8003b8a:	441e      	add	r6, r3
 8003b8c:	61e6      	str	r6, [r4, #28]
			BytesTransfered += Bytes;
 8003b8e:	445f      	add	r7, fp
 8003b90:	b2bf      	uxth	r7, r7
			Length -= Bytes;
 8003b92:	eba5 0b0b 	sub.w	fp, r5, fp
			prev_length = Length;
 8003b96:	462e      	mov	r6, r5
			Length -= Bytes;
 8003b98:	fa1f f58b 	uxth.w	r5, fp
 8003b9c:	e7dc      	b.n	8003b58 <Endpoint_Write_Stream_LE+0x3c>
				*BytesProcessed = BytesTransfered;
 8003b9e:	f8a9 7000 	strh.w	r7, [r9]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003ba2:	2305      	movs	r3, #5
 8003ba4:	e00d      	b.n	8003bc2 <Endpoint_Write_Stream_LE+0xa6>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <Endpoint_Write_Stream_LE+0xac>)
 8003ba8:	222c      	movs	r2, #44	; 0x2c
 8003baa:	fb02 3a0a 	mla	sl, r2, sl, r3
 8003bae:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8003bb2:	f3c3 1386 	ubfx	r3, r3, #6, #7
 8003bb6:	42b3      	cmp	r3, r6
	{
	   zlp_flag = true;
 8003bb8:	bf02      	ittt	eq
 8003bba:	4b04      	ldreq	r3, [pc, #16]	; (8003bcc <Endpoint_Write_Stream_LE+0xb0>)
 8003bbc:	2201      	moveq	r2, #1
 8003bbe:	701a      	strbeq	r2, [r3, #0]
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc8:	20001244 	.word	0x20001244
 8003bcc:	20000ef4 	.word	0x20000ef4

08003bd0 <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
	uint32_t i = 0;
	while(i<Length) {
 8003bd0:	b16a      	cbz	r2, 8003bee <SwapCopy+0x1e>
void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
 8003bd2:	b410      	push	{r4}
 8003bd4:	1e4b      	subs	r3, r1, #1
 8003bd6:	4410      	add	r0, r2
 8003bd8:	4411      	add	r1, r2
 8003bda:	3901      	subs	r1, #1
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 8003bdc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8003be0:	f800 2d01 	strb.w	r2, [r0, #-1]!
	while(i<Length) {
 8003be4:	428b      	cmp	r3, r1
 8003be6:	d1f9      	bne.n	8003bdc <SwapCopy+0xc>
		i++;
	}
}
 8003be8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	4770      	bx	lr

08003bf0 <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf4:	4681      	mov	r9, r0
 8003bf6:	460d      	mov	r5, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003bf8:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <Endpoint_Write_Stream_BE+0x8c>)
 8003bfa:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003bfe:	4692      	mov	sl, r2
 8003c00:	b13a      	cbz	r2, 8003c12 <Endpoint_Write_Stream_BE+0x22>
		Length -= *BytesProcessed;
 8003c02:	8817      	ldrh	r7, [r2, #0]
 8003c04:	1bcd      	subs	r5, r1, r7
 8003c06:	b2ad      	uxth	r5, r5
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 8003c08:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <Endpoint_Write_Stream_BE+0x8c>)
 8003c0a:	222c      	movs	r2, #44	; 0x2c
 8003c0c:	fb02 3404 	mla	r4, r2, r4, r3
 8003c10:	e00a      	b.n	8003c28 <Endpoint_Write_Stream_BE+0x38>
	uint16_t BytesTransfered = 0;
 8003c12:	2700      	movs	r7, #0
 8003c14:	e7f8      	b.n	8003c08 <Endpoint_Write_Stream_BE+0x18>
			ep->InBytesAvailable += Bytes;
			BytesTransfered += Bytes;
			Length -= Bytes;
		}
		else {
			Endpoint_ClearIN();
 8003c16:	f7fe ff83 	bl	8002b20 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8003c1a:	f1ba 0f00 	cmp.w	sl, #0
 8003c1e:	d124      	bne.n	8003c6a <Endpoint_Write_Stream_BE+0x7a>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003c20:	f7fe ff00 	bl	8002a24 <Endpoint_WaitUntilReady>
 8003c24:	4603      	mov	r3, r0
 8003c26:	bb28      	cbnz	r0, 8003c74 <Endpoint_Write_Stream_BE+0x84>
	while (Length) {
 8003c28:	b31d      	cbz	r5, 8003c72 <Endpoint_Write_Stream_BE+0x82>
		if (ep->InInUse)
 8003c2a:	68a3      	ldr	r3, [r4, #8]
 8003c2c:	f013 0f10 	tst.w	r3, #16
 8003c30:	d1fa      	bne.n	8003c28 <Endpoint_Write_Stream_BE+0x38>
		if (Endpoint_IsReadWriteAllowed()) {
 8003c32:	f7fe ffd1 	bl	8002bd8 <Endpoint_IsReadWriteAllowed>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d0ed      	beq.n	8003c16 <Endpoint_Write_Stream_BE+0x26>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003c3a:	69e3      	ldr	r3, [r4, #28]
 8003c3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003c3e:	1af6      	subs	r6, r6, r3
 8003c40:	42ae      	cmp	r6, r5
 8003c42:	bf28      	it	cs
 8003c44:	462e      	movcs	r6, r5
 8003c46:	fa1f f886 	uxth.w	r8, r6
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8003c4a:	6a20      	ldr	r0, [r4, #32]
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	eb09 0107 	add.w	r1, r9, r7
 8003c52:	4418      	add	r0, r3
 8003c54:	f7ff ffbc 	bl	8003bd0 <SwapCopy>
			ep->InBytesAvailable += Bytes;
 8003c58:	69e3      	ldr	r3, [r4, #28]
 8003c5a:	441e      	add	r6, r3
 8003c5c:	61e6      	str	r6, [r4, #28]
			BytesTransfered += Bytes;
 8003c5e:	4447      	add	r7, r8
 8003c60:	b2bf      	uxth	r7, r7
			Length -= Bytes;
 8003c62:	eba5 0508 	sub.w	r5, r5, r8
 8003c66:	b2ad      	uxth	r5, r5
 8003c68:	e7de      	b.n	8003c28 <Endpoint_Write_Stream_BE+0x38>
				*BytesProcessed = BytesTransfered;
 8003c6a:	f8aa 7000 	strh.w	r7, [sl]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003c6e:	2305      	movs	r3, #5
 8003c70:	e000      	b.n	8003c74 <Endpoint_Write_Stream_BE+0x84>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20001244 	.word	0x20001244

08003c80 <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c84:	4681      	mov	r9, r0
 8003c86:	460d      	mov	r5, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003c88:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <Endpoint_Read_Stream_LE+0x90>)
 8003c8a:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003c8e:	4692      	mov	sl, r2
 8003c90:	b13a      	cbz	r2, 8003ca2 <Endpoint_Read_Stream_LE+0x22>
		Length -= *BytesProcessed;
 8003c92:	8817      	ldrh	r7, [r2, #0]
 8003c94:	1bcd      	subs	r5, r1, r7
 8003c96:	b2ad      	uxth	r5, r5
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->OutInUse)
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <Endpoint_Read_Stream_LE+0x90>)
 8003c9a:	222c      	movs	r2, #44	; 0x2c
 8003c9c:	fb02 3404 	mla	r4, r2, r4, r3
 8003ca0:	e00a      	b.n	8003cb8 <Endpoint_Read_Stream_LE+0x38>
	uint16_t BytesTransfered = 0;
 8003ca2:	2700      	movs	r7, #0
 8003ca4:	e7f8      	b.n	8003c98 <Endpoint_Read_Stream_LE+0x18>
			ep->OutOffset += Bytes;
			BytesTransfered += Bytes;
			Length -= Bytes;
		}
		else {
			Endpoint_ClearOUT();
 8003ca6:	f7fe ff0d 	bl	8002ac4 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8003caa:	f1ba 0f00 	cmp.w	sl, #0
 8003cae:	d126      	bne.n	8003cfe <Endpoint_Read_Stream_LE+0x7e>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003cb0:	f7fe feb8 	bl	8002a24 <Endpoint_WaitUntilReady>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	bb38      	cbnz	r0, 8003d08 <Endpoint_Read_Stream_LE+0x88>
	while (Length) {
 8003cb8:	b32d      	cbz	r5, 8003d06 <Endpoint_Read_Stream_LE+0x86>
		if (ep->OutInUse)
 8003cba:	68a3      	ldr	r3, [r4, #8]
 8003cbc:	f013 0f08 	tst.w	r3, #8
 8003cc0:	d1fa      	bne.n	8003cb8 <Endpoint_Read_Stream_LE+0x38>
		if (Endpoint_IsReadWriteAllowed()) {
 8003cc2:	f7fe ff89 	bl	8002bd8 <Endpoint_IsReadWriteAllowed>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d0ed      	beq.n	8003ca6 <Endpoint_Read_Stream_LE+0x26>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8003cca:	68e6      	ldr	r6, [r4, #12]
 8003ccc:	42ae      	cmp	r6, r5
 8003cce:	bf28      	it	cs
 8003cd0:	462e      	movcs	r6, r5
 8003cd2:	fa1f f886 	uxth.w	r8, r6
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003cd6:	6961      	ldr	r1, [r4, #20]
 8003cd8:	6923      	ldr	r3, [r4, #16]
 8003cda:	4632      	mov	r2, r6
 8003cdc:	4419      	add	r1, r3
 8003cde:	eb09 0007 	add.w	r0, r9, r7
 8003ce2:	f000 f8ed 	bl	8003ec0 <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
 8003ce6:	68e3      	ldr	r3, [r4, #12]
 8003ce8:	1b9b      	subs	r3, r3, r6
 8003cea:	60e3      	str	r3, [r4, #12]
			ep->OutOffset += Bytes;
 8003cec:	6923      	ldr	r3, [r4, #16]
 8003cee:	441e      	add	r6, r3
 8003cf0:	6126      	str	r6, [r4, #16]
			BytesTransfered += Bytes;
 8003cf2:	4447      	add	r7, r8
 8003cf4:	b2bf      	uxth	r7, r7
			Length -= Bytes;
 8003cf6:	eba5 0508 	sub.w	r5, r5, r8
 8003cfa:	b2ad      	uxth	r5, r5
 8003cfc:	e7dc      	b.n	8003cb8 <Endpoint_Read_Stream_LE+0x38>
				*BytesProcessed = BytesTransfered;
 8003cfe:	f8aa 7000 	strh.w	r7, [sl]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003d02:	2305      	movs	r3, #5
 8003d04:	e000      	b.n	8003d08 <Endpoint_Read_Stream_LE+0x88>
				return ErrorCode;
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0e:	bf00      	nop
 8003d10:	20001244 	.word	0x20001244

08003d14 <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d18:	4681      	mov	r9, r0
 8003d1a:	460d      	mov	r5, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003d1c:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <Endpoint_Read_Stream_BE+0x90>)
 8003d1e:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003d22:	4692      	mov	sl, r2
 8003d24:	b13a      	cbz	r2, 8003d36 <Endpoint_Read_Stream_BE+0x22>
		Length -= *BytesProcessed;
 8003d26:	8817      	ldrh	r7, [r2, #0]
 8003d28:	1bcd      	subs	r5, r1, r7
 8003d2a:	b2ad      	uxth	r5, r5
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <Endpoint_Read_Stream_BE+0x90>)
 8003d2e:	222c      	movs	r2, #44	; 0x2c
 8003d30:	fb02 3404 	mla	r4, r2, r4, r3
 8003d34:	e00a      	b.n	8003d4c <Endpoint_Read_Stream_BE+0x38>
	uint16_t BytesTransfered = 0;
 8003d36:	2700      	movs	r7, #0
 8003d38:	e7f8      	b.n	8003d2c <Endpoint_Read_Stream_BE+0x18>
			ep->OutOffset += Bytes;
			BytesTransfered += Bytes;
			Length -= Bytes;
		}
		else {
			Endpoint_ClearOUT();
 8003d3a:	f7fe fec3 	bl	8002ac4 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8003d3e:	f1ba 0f00 	cmp.w	sl, #0
 8003d42:	d126      	bne.n	8003d92 <Endpoint_Read_Stream_BE+0x7e>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003d44:	f7fe fe6e 	bl	8002a24 <Endpoint_WaitUntilReady>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	bb38      	cbnz	r0, 8003d9c <Endpoint_Read_Stream_BE+0x88>
	while (Length) {
 8003d4c:	b32d      	cbz	r5, 8003d9a <Endpoint_Read_Stream_BE+0x86>
		if (ep->InInUse)
 8003d4e:	68a3      	ldr	r3, [r4, #8]
 8003d50:	f013 0f10 	tst.w	r3, #16
 8003d54:	d1fa      	bne.n	8003d4c <Endpoint_Read_Stream_BE+0x38>
		if (Endpoint_IsReadWriteAllowed()) {
 8003d56:	f7fe ff3f 	bl	8002bd8 <Endpoint_IsReadWriteAllowed>
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d0ed      	beq.n	8003d3a <Endpoint_Read_Stream_BE+0x26>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8003d5e:	68e6      	ldr	r6, [r4, #12]
 8003d60:	42ae      	cmp	r6, r5
 8003d62:	bf28      	it	cs
 8003d64:	462e      	movcs	r6, r5
 8003d66:	fa1f f886 	uxth.w	r8, r6
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003d6a:	6961      	ldr	r1, [r4, #20]
 8003d6c:	6923      	ldr	r3, [r4, #16]
 8003d6e:	4632      	mov	r2, r6
 8003d70:	4419      	add	r1, r3
 8003d72:	eb09 0007 	add.w	r0, r9, r7
 8003d76:	f7ff ff2b 	bl	8003bd0 <SwapCopy>
			ep->OutBytesAvailable -= Bytes;
 8003d7a:	68e3      	ldr	r3, [r4, #12]
 8003d7c:	1b9b      	subs	r3, r3, r6
 8003d7e:	60e3      	str	r3, [r4, #12]
			ep->OutOffset += Bytes;
 8003d80:	6923      	ldr	r3, [r4, #16]
 8003d82:	441e      	add	r6, r3
 8003d84:	6126      	str	r6, [r4, #16]
			BytesTransfered += Bytes;
 8003d86:	4447      	add	r7, r8
 8003d88:	b2bf      	uxth	r7, r7
			Length -= Bytes;
 8003d8a:	eba5 0508 	sub.w	r5, r5, r8
 8003d8e:	b2ad      	uxth	r5, r5
 8003d90:	e7dc      	b.n	8003d4c <Endpoint_Read_Stream_BE+0x38>
				*BytesProcessed = BytesTransfered;
 8003d92:	f8aa 7000 	strh.w	r7, [sl]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003d96:	2305      	movs	r3, #5
 8003d98:	e000      	b.n	8003d9c <Endpoint_Read_Stream_BE+0x88>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da2:	bf00      	nop
 8003da4:	20001244 	.word	0x20001244

08003da8 <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	4607      	mov	r7, r0
 8003dac:	460c      	mov	r4, r1
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
	uint16_t Bytes;

	while (Length) {
		if (!EndPoint->InInUse) {
 8003dae:	4d0d      	ldr	r5, [pc, #52]	; (8003de4 <Endpoint_Write_Control_Stream_LE+0x3c>)
	while (Length) {
 8003db0:	b1ac      	cbz	r4, 8003dde <Endpoint_Write_Control_Stream_LE+0x36>
		if (!EndPoint->InInUse) {
 8003db2:	68ab      	ldr	r3, [r5, #8]
 8003db4:	f013 0f10 	tst.w	r3, #16
 8003db8:	d1fa      	bne.n	8003db0 <Endpoint_Write_Control_Stream_LE+0x8>
			if (EndPoint->InBufferLength > Length) {
 8003dba:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8003dbc:	42a6      	cmp	r6, r4
				Bytes = Length;
			} else {
				Bytes = EndPoint->InBufferLength;
 8003dbe:	bf94      	ite	ls
 8003dc0:	b2b6      	uxthls	r6, r6
				Bytes = Length;
 8003dc2:	4626      	movhi	r6, r4
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 8003dc4:	4632      	mov	r2, r6
 8003dc6:	4639      	mov	r1, r7
 8003dc8:	6a28      	ldr	r0, [r5, #32]
 8003dca:	f000 f879 	bl	8003ec0 <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 8003dce:	69eb      	ldr	r3, [r5, #28]
 8003dd0:	4433      	add	r3, r6
 8003dd2:	61eb      	str	r3, [r5, #28]
			Length -= Bytes;
 8003dd4:	1ba4      	subs	r4, r4, r6
 8003dd6:	b2a4      	uxth	r4, r4

			Endpoint_ClearIN();
 8003dd8:	f7fe fea2 	bl	8002b20 <Endpoint_ClearIN>
 8003ddc:	e7e8      	b.n	8003db0 <Endpoint_Write_Control_Stream_LE+0x8>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
}
 8003dde:	2000      	movs	r0, #0
 8003de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20001244 	.word	0x20001244

08003de8 <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 8003de8:	b508      	push	{r3, lr}
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 8003dea:	f7ff ffdd 	bl	8003da8 <Endpoint_Write_Control_Stream_LE>
}
 8003dee:	bd08      	pop	{r3, pc}

08003df0 <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	4607      	mov	r7, r0
 8003df4:	460c      	mov	r4, r1
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
	uint16_t Bytes;

	while (Length) {
		if (EndPoint->IsOutRecieved) {
 8003df6:	4d0c      	ldr	r5, [pc, #48]	; (8003e28 <Endpoint_Read_Control_Stream_LE+0x38>)
	while (Length) {
 8003df8:	b1a4      	cbz	r4, 8003e24 <Endpoint_Read_Control_Stream_LE+0x34>
		if (EndPoint->IsOutRecieved) {
 8003dfa:	68ab      	ldr	r3, [r5, #8]
 8003dfc:	f013 0f20 	tst.w	r3, #32
 8003e00:	d0fa      	beq.n	8003df8 <Endpoint_Read_Control_Stream_LE+0x8>
			Bytes = EndPoint->OutBytesAvailable > Length
					? Length : EndPoint->OutBytesAvailable;
 8003e02:	68ee      	ldr	r6, [r5, #12]
 8003e04:	42a6      	cmp	r6, r4
 8003e06:	bf28      	it	cs
 8003e08:	4626      	movcs	r6, r4
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 8003e0a:	4632      	mov	r2, r6
 8003e0c:	6969      	ldr	r1, [r5, #20]
 8003e0e:	4638      	mov	r0, r7
 8003e10:	f000 f856 	bl	8003ec0 <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 8003e14:	68eb      	ldr	r3, [r5, #12]
 8003e16:	1b9b      	subs	r3, r3, r6
 8003e18:	60eb      	str	r3, [r5, #12]
			Length -= Bytes;
 8003e1a:	1ba4      	subs	r4, r4, r6
 8003e1c:	b2a4      	uxth	r4, r4

			Endpoint_ClearOUT();
 8003e1e:	f7fe fe51 	bl	8002ac4 <Endpoint_ClearOUT>
 8003e22:	e7e9      	b.n	8003df8 <Endpoint_Read_Control_Stream_LE+0x8>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
}
 8003e24:	2000      	movs	r0, #0
 8003e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e28:	20001244 	.word	0x20001244

08003e2c <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 8003e2c:	b508      	push	{r3, lr}
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 8003e2e:	f7ff ffdf 	bl	8003df0 <Endpoint_Read_Control_Stream_LE>
}
 8003e32:	bd08      	pop	{r3, pc}

08003e34 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 8003e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e38:	4605      	mov	r5, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003e3a:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <Endpoint_Null_Stream+0x88>)
 8003e3c:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
		uint16_t Bytes = 0;
		uint16_t BytesTransfered = 0;
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 8003e40:	4688      	mov	r8, r1
 8003e42:	b139      	cbz	r1, 8003e54 <Endpoint_Null_Stream+0x20>
			Length -= *BytesProcessed;
 8003e44:	880f      	ldrh	r7, [r1, #0]
 8003e46:	1bc5      	subs	r5, r0, r7
 8003e48:	b2ad      	uxth	r5, r5
			BytesTransfered = *BytesProcessed;
		}

		while (Length) {
			if (ep->InInUse)
 8003e4a:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <Endpoint_Null_Stream+0x88>)
 8003e4c:	222c      	movs	r2, #44	; 0x2c
 8003e4e:	fb02 3404 	mla	r4, r2, r4, r3
 8003e52:	e00a      	b.n	8003e6a <Endpoint_Null_Stream+0x36>
		uint16_t BytesTransfered = 0;
 8003e54:	2700      	movs	r7, #0
 8003e56:	e7f8      	b.n	8003e4a <Endpoint_Null_Stream+0x16>
				ep->InBytesAvailable += Bytes;
				BytesTransfered += Bytes;
				Length -= Bytes;
			}
			else {
				Endpoint_ClearIN();
 8003e58:	f7fe fe62 	bl	8002b20 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 8003e5c:	f1b8 0f00 	cmp.w	r8, #0
 8003e60:	d123      	bne.n	8003eaa <Endpoint_Null_Stream+0x76>
					*BytesProcessed = BytesTransfered;
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
				}

				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003e62:	f7fe fddf 	bl	8002a24 <Endpoint_WaitUntilReady>
 8003e66:	4603      	mov	r3, r0
 8003e68:	bb20      	cbnz	r0, 8003eb4 <Endpoint_Null_Stream+0x80>
		while (Length) {
 8003e6a:	b315      	cbz	r5, 8003eb2 <Endpoint_Null_Stream+0x7e>
			if (ep->InInUse)
 8003e6c:	68a3      	ldr	r3, [r4, #8]
 8003e6e:	f013 0f10 	tst.w	r3, #16
 8003e72:	d1fa      	bne.n	8003e6a <Endpoint_Null_Stream+0x36>
			if (Endpoint_IsReadWriteAllowed()) {
 8003e74:	f7fe feb0 	bl	8002bd8 <Endpoint_IsReadWriteAllowed>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d0ed      	beq.n	8003e58 <Endpoint_Null_Stream+0x24>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003e7c:	69e3      	ldr	r3, [r4, #28]
 8003e7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003e80:	1af6      	subs	r6, r6, r3
 8003e82:	42ae      	cmp	r6, r5
 8003e84:	bf28      	it	cs
 8003e86:	462e      	movcs	r6, r5
 8003e88:	fa1f f986 	uxth.w	r9, r6
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 8003e8c:	6a20      	ldr	r0, [r4, #32]
 8003e8e:	4632      	mov	r2, r6
 8003e90:	2100      	movs	r1, #0
 8003e92:	4418      	add	r0, r3
 8003e94:	f006 fe72 	bl	800ab7c <memset>
				ep->InBytesAvailable += Bytes;
 8003e98:	69e3      	ldr	r3, [r4, #28]
 8003e9a:	441e      	add	r6, r3
 8003e9c:	61e6      	str	r6, [r4, #28]
				BytesTransfered += Bytes;
 8003e9e:	444f      	add	r7, r9
 8003ea0:	b2bf      	uxth	r7, r7
				Length -= Bytes;
 8003ea2:	eba5 0509 	sub.w	r5, r5, r9
 8003ea6:	b2ad      	uxth	r5, r5
 8003ea8:	e7df      	b.n	8003e6a <Endpoint_Null_Stream+0x36>
					*BytesProcessed = BytesTransfered;
 8003eaa:	f8a8 7000 	strh.w	r7, [r8]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003eae:	2305      	movs	r3, #5
 8003eb0:	e000      	b.n	8003eb4 <Endpoint_Null_Stream+0x80>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eba:	bf00      	nop
 8003ebc:	20001244 	.word	0x20001244

08003ec0 <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8003ec0:	0913      	lsrs	r3, r2, #4
 8003ec2:	d011      	beq.n	8003ee8 <thumb2_memcpy+0x28>
 8003ec4:	f851 cb04 	ldr.w	ip, [r1], #4
 8003ec8:	f840 cb04 	str.w	ip, [r0], #4
 8003ecc:	f851 cb04 	ldr.w	ip, [r1], #4
 8003ed0:	f840 cb04 	str.w	ip, [r0], #4
 8003ed4:	f851 cb04 	ldr.w	ip, [r1], #4
 8003ed8:	f840 cb04 	str.w	ip, [r0], #4
 8003edc:	f851 cb04 	ldr.w	ip, [r1], #4
 8003ee0:	f840 cb04 	str.w	ip, [r0], #4
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	d1ed      	bne.n	8003ec4 <thumb2_memcpy+0x4>
 8003ee8:	f012 030f 	ands.w	r3, r2, #15
 8003eec:	d005      	beq.n	8003efa <thumb2_memcpy+0x3a>
 8003eee:	f811 cb01 	ldrb.w	ip, [r1], #1
 8003ef2:	f800 cb01 	strb.w	ip, [r0], #1
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	d1f9      	bne.n	8003eee <thumb2_memcpy+0x2e>
 8003efa:	4770      	bx	lr

08003efc <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8003efc:	b410      	push	{r4}
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8003efe:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8003f02:	4418      	add	r0, r3
 8003f04:	6903      	ldr	r3, [r0, #16]
 8003f06:	f001 0103 	and.w	r1, r1, #3
 8003f0a:	00c9      	lsls	r1, r1, #3
 8003f0c:	24f8      	movs	r4, #248	; 0xf8
 8003f0e:	408c      	lsls	r4, r1
 8003f10:	ea23 0304 	bic.w	r3, r3, r4
 8003f14:	6103      	str	r3, [r0, #16]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8003f16:	6903      	ldr	r3, [r0, #16]
 8003f18:	fa02 f101 	lsl.w	r1, r2, r1
 8003f1c:	4319      	orrs	r1, r3
 8003f1e:	6101      	str	r1, [r0, #16]
}
 8003f20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8003f26:	b410      	push	{r4}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8003f28:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003f2a:	0049      	lsls	r1, r1, #1
 8003f2c:	2403      	movs	r4, #3
 8003f2e:	408c      	lsls	r4, r1
 8003f30:	ea23 0304 	bic.w	r3, r3, r4
 8003f34:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8003f36:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003f38:	408a      	lsls	r2, r1
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	6742      	str	r2, [r0, #116]	; 0x74
}
 8003f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8003f44:	b4f0      	push	{r4, r5, r6, r7}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8003f46:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8003f4a:	4403      	add	r3, r0
 8003f4c:	691d      	ldr	r5, [r3, #16]
 8003f4e:	f001 0403 	and.w	r4, r1, #3
 8003f52:	00e4      	lsls	r4, r4, #3
 8003f54:	26f8      	movs	r6, #248	; 0xf8
 8003f56:	40a6      	lsls	r6, r4
 8003f58:	ea25 0506 	bic.w	r5, r5, r6
 8003f5c:	611d      	str	r5, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8003f5e:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8003f60:	004f      	lsls	r7, r1, #1
 8003f62:	2603      	movs	r6, #3
 8003f64:	40be      	lsls	r6, r7
 8003f66:	ea25 0506 	bic.w	r5, r5, r6
 8003f6a:	6745      	str	r5, [r0, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8003f6c:	4d15      	ldr	r5, [pc, #84]	; (8003fc4 <XMC_GPIO_Init+0x80>)
 8003f6e:	42a8      	cmp	r0, r5
 8003f70:	d019      	beq.n	8003fa6 <XMC_GPIO_Init+0x62>
 8003f72:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8003f76:	42a8      	cmp	r0, r5
 8003f78:	d015      	beq.n	8003fa6 <XMC_GPIO_Init+0x62>
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8003f7a:	6855      	ldr	r5, [r2, #4]
 8003f7c:	408d      	lsls	r5, r1
 8003f7e:	6045      	str	r5, [r0, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8003f80:	08cd      	lsrs	r5, r1, #3
 8003f82:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8003f86:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003f88:	f001 0107 	and.w	r1, r1, #7
 8003f8c:	0089      	lsls	r1, r1, #2
 8003f8e:	2607      	movs	r6, #7
 8003f90:	408e      	lsls	r6, r1
 8003f92:	ea25 0506 	bic.w	r5, r5, r6
 8003f96:	6405      	str	r5, [r0, #64]	; 0x40
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8003f98:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003f9a:	7a15      	ldrb	r5, [r2, #8]
 8003f9c:	fa05 f101 	lsl.w	r1, r5, r1
 8003fa0:	4331      	orrs	r1, r6
 8003fa2:	6401      	str	r1, [r0, #64]	; 0x40
 8003fa4:	e006      	b.n	8003fb4 <XMC_GPIO_Init+0x70>
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8003fa6:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8003fa8:	2601      	movs	r6, #1
 8003faa:	fa06 f101 	lsl.w	r1, r6, r1
 8003fae:	ea25 0101 	bic.w	r1, r5, r1
 8003fb2:	6601      	str	r1, [r0, #96]	; 0x60
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8003fb4:	6919      	ldr	r1, [r3, #16]
 8003fb6:	7812      	ldrb	r2, [r2, #0]
 8003fb8:	40a2      	lsls	r2, r4
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	611a      	str	r2, [r3, #16]
}
 8003fbe:	bcf0      	pop	{r4, r5, r6, r7}
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	48028e00 	.word	0x48028e00

08003fc8 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8003fc8:	b410      	push	{r4}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8003fca:	08cb      	lsrs	r3, r1, #3
 8003fcc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003fd0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003fd2:	f001 0107 	and.w	r1, r1, #7
 8003fd6:	0089      	lsls	r1, r1, #2
 8003fd8:	2407      	movs	r4, #7
 8003fda:	408c      	lsls	r4, r1
 8003fdc:	ea23 0304 	bic.w	r3, r3, r4
 8003fe0:	6403      	str	r3, [r0, #64]	; 0x40
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8003fe2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003fe4:	fa02 f101 	lsl.w	r1, r2, r1
 8003fe8:	4319      	orrs	r1, r3
 8003fea:	6401      	str	r1, [r0, #64]	; 0x40
}
 8003fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8003ff8:	2010      	movs	r0, #16
 8003ffa:	f7ff f9b9 	bl	8003370 <XMC_SCU_CLOCK_EnableClock>
  if (module == CCU40)
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <XMC_CCU4_EnableModule+0x44>)
 8004000:	429c      	cmp	r4, r3
 8004002:	d009      	beq.n	8004018 <XMC_CCU4_EnableModule+0x24>
  else if (module == CCU41)
 8004004:	4b0d      	ldr	r3, [pc, #52]	; (800403c <XMC_CCU4_EnableModule+0x48>)
 8004006:	429c      	cmp	r4, r3
 8004008:	d00a      	beq.n	8004020 <XMC_CCU4_EnableModule+0x2c>
  else if (module == CCU42)
 800400a:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <XMC_CCU4_EnableModule+0x4c>)
 800400c:	429c      	cmp	r4, r3
 800400e:	d00b      	beq.n	8004028 <XMC_CCU4_EnableModule+0x34>
  else if (module == CCU43)
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <XMC_CCU4_EnableModule+0x50>)
 8004012:	429c      	cmp	r4, r3
 8004014:	d00c      	beq.n	8004030 <XMC_CCU4_EnableModule+0x3c>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
 8004016:	bd10      	pop	{r4, pc}
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8004018:	2004      	movs	r0, #4
 800401a:	f7ff f801 	bl	8003020 <XMC_SCU_RESET_DeassertPeripheralReset>
 800401e:	e7fa      	b.n	8004016 <XMC_CCU4_EnableModule+0x22>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8004020:	2008      	movs	r0, #8
 8004022:	f7fe fffd 	bl	8003020 <XMC_SCU_RESET_DeassertPeripheralReset>
 8004026:	e7f6      	b.n	8004016 <XMC_CCU4_EnableModule+0x22>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8004028:	2010      	movs	r0, #16
 800402a:	f7fe fff9 	bl	8003020 <XMC_SCU_RESET_DeassertPeripheralReset>
 800402e:	e7f2      	b.n	8004016 <XMC_CCU4_EnableModule+0x22>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8004030:	4805      	ldr	r0, [pc, #20]	; (8004048 <XMC_CCU4_EnableModule+0x54>)
 8004032:	f7fe fff5 	bl	8003020 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8004036:	e7ee      	b.n	8004016 <XMC_CCU4_EnableModule+0x22>
 8004038:	4000c000 	.word	0x4000c000
 800403c:	40010000 	.word	0x40010000
 8004040:	40014000 	.word	0x40014000
 8004044:	48004000 	.word	0x48004000
 8004048:	10000001 	.word	0x10000001

0800404c <XMC_CCU4_DisableModule>:

void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
{
 800404c:	b508      	push	{r3, lr}
  if (module == CCU40)
 800404e:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <XMC_CCU4_DisableModule+0x3c>)
 8004050:	4298      	cmp	r0, r3
 8004052:	d009      	beq.n	8004068 <XMC_CCU4_DisableModule+0x1c>
  else if (module == CCU41)
 8004054:	4b0d      	ldr	r3, [pc, #52]	; (800408c <XMC_CCU4_DisableModule+0x40>)
 8004056:	4298      	cmp	r0, r3
 8004058:	d00a      	beq.n	8004070 <XMC_CCU4_DisableModule+0x24>
  else if (module == CCU42)
 800405a:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <XMC_CCU4_DisableModule+0x44>)
 800405c:	4298      	cmp	r0, r3
 800405e:	d00b      	beq.n	8004078 <XMC_CCU4_DisableModule+0x2c>
  else if (module == CCU43)
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <XMC_CCU4_DisableModule+0x48>)
 8004062:	4298      	cmp	r0, r3
 8004064:	d00c      	beq.n	8004080 <XMC_CCU4_DisableModule+0x34>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lGateClock(module);
#endif
}
 8004066:	bd08      	pop	{r3, pc}
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8004068:	2004      	movs	r0, #4
 800406a:	f7fe ffcd 	bl	8003008 <XMC_SCU_RESET_AssertPeripheralReset>
 800406e:	e7fa      	b.n	8004066 <XMC_CCU4_DisableModule+0x1a>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8004070:	2008      	movs	r0, #8
 8004072:	f7fe ffc9 	bl	8003008 <XMC_SCU_RESET_AssertPeripheralReset>
 8004076:	e7f6      	b.n	8004066 <XMC_CCU4_DisableModule+0x1a>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8004078:	2010      	movs	r0, #16
 800407a:	f7fe ffc5 	bl	8003008 <XMC_SCU_RESET_AssertPeripheralReset>
 800407e:	e7f2      	b.n	8004066 <XMC_CCU4_DisableModule+0x1a>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8004080:	4805      	ldr	r0, [pc, #20]	; (8004098 <XMC_CCU4_DisableModule+0x4c>)
 8004082:	f7fe ffc1 	bl	8003008 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8004086:	e7ee      	b.n	8004066 <XMC_CCU4_DisableModule+0x1a>
 8004088:	4000c000 	.word	0x4000c000
 800408c:	40010000 	.word	0x40010000
 8004090:	40014000 	.word	0x40014000
 8004094:	48004000 	.word	0x48004000
 8004098:	10000001 	.word	0x10000001

0800409c <XMC_CCU4_Init>:

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4604      	mov	r4, r0
 80040a0:	460d      	mov	r5, r1
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80040a2:	f7ff ffa7 	bl	8003ff4 <XMC_CCU4_EnableModule>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80040a6:	68e3      	ldr	r3, [r4, #12]
 80040a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ac:	60e3      	str	r3, [r4, #12]
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 80040ae:	6823      	ldr	r3, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80040b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80040b4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  
  module->GCTRL = gctrl;
 80040b8:	6023      	str	r3, [r4, #0]
}
 80040ba:	bd38      	pop	{r3, r4, r5, pc}

080040bc <XMC_CCU4_SetModuleClock>:
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 80040bc:	6803      	ldr	r3, [r0, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 80040be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 80040c2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  
  module->GCTRL = gctrl;
 80040c6:	6003      	str	r3, [r0, #0]
}
 80040c8:	4770      	bx	lr

080040ca <XMC_CCU4_SetMultiChannelShadowTransferMode>:
{
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 80040ca:	6803      	ldr	r3, [r0, #0]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 80040cc:	ea23 4311 	bic.w	r3, r3, r1, lsr #16
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 80040d0:	b289      	uxth	r1, r1
 80040d2:	4319      	orrs	r1, r3
  module->GCTRL = gctrl;
 80040d4:	6001      	str	r1, [r0, #0]
}
 80040d6:	4770      	bx	lr

080040d8 <XMC_CCU4_SLICE_CompareInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80040d8:	680b      	ldr	r3, [r1, #0]
 80040da:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80040dc:	794b      	ldrb	r3, [r1, #5]
 80040de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80040e2:	051b      	lsls	r3, r3, #20
 80040e4:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80040e6:	790b      	ldrb	r3, [r1, #4]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80040ee:	794b      	ldrb	r3, [r1, #5]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	6203      	str	r3, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80040f6:	794b      	ldrb	r3, [r1, #5]
 80040f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80040fc:	6183      	str	r3, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80040fe:	790b      	ldrb	r3, [r1, #4]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004104:	4770      	bx	lr

08004106 <XMC_CCU4_SLICE_CaptureInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
 8004106:	680b      	ldr	r3, [r1, #0]
 8004108:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800410a:	794b      	ldrb	r3, [r1, #5]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	051b      	lsls	r3, r3, #20
 8004112:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
 8004114:	790b      	ldrb	r3, [r1, #4]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
 800411c:	790b      	ldrb	r3, [r1, #4]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004122:	4770      	bx	lr

08004124 <XMC_CCU4_SLICE_StartConfig>:
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8004124:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8004126:	f023 0303 	bic.w	r3, r3, #3
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 800412a:	4319      	orrs	r1, r3

  slice->CMC = cmc;
 800412c:	6041      	str	r1, [r0, #4]
  
  tc  = slice->TC;
 800412e:	6943      	ldr	r3, [r0, #20]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8004130:	2a01      	cmp	r2, #1
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8004132:	bf0c      	ite	eq
 8004134:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8004138:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
  }
  
  slice->TC = tc;
 800413c:	6143      	str	r3, [r0, #20]
}
 800413e:	4770      	bx	lr

08004140 <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 8004140:	b410      	push	{r4}
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8004142:	6844      	ldr	r4, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 8004144:	f024 040c 	bic.w	r4, r4, #12
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 8004148:	ea44 0481 	orr.w	r4, r4, r1, lsl #2

  slice->CMC = cmc;
 800414c:	6044      	str	r4, [r0, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 800414e:	6943      	ldr	r3, [r0, #20]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 8004150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 8004154:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  slice->TC = tc;
 8004158:	6143      	str	r3, [r0, #20]
}
 800415a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800415e:	4770      	bx	lr

08004160 <XMC_CCU4_SLICE_LoadConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 8004160:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 8004162:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 8004166:	ea43 3301 	orr.w	r3, r3, r1, lsl #12

  slice->CMC = cmc;
 800416a:	6043      	str	r3, [r0, #4]
}
 800416c:	4770      	bx	lr

0800416e <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 800416e:	b430      	push	{r4, r5}
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8004170:	6944      	ldr	r4, [r0, #20]
  cmc = slice->CMC;
 8004172:	6845      	ldr	r5, [r0, #4]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 8004174:	f425 2540 	bic.w	r5, r5, #786432	; 0xc0000
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 8004178:	ea45 4581 	orr.w	r5, r5, r1, lsl #18
  slice->CMC = cmc;
 800417c:	6045      	str	r5, [r0, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 800417e:	2a01      	cmp	r2, #1
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 8004180:	bf0c      	ite	eq
 8004182:	f044 7480 	orreq.w	r4, r4, #16777216	; 0x1000000
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 8004186:	f024 7480 	bicne.w	r4, r4, #16777216	; 0x1000000
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 800418a:	b123      	cbz	r3, 8004196 <XMC_CCU4_SLICE_ModulationConfig+0x28>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 800418c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
  }
  
  slice->TC = tc;
 8004190:	6144      	str	r4, [r0, #20]
}
 8004192:	bc30      	pop	{r4, r5}
 8004194:	4770      	bx	lr
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 8004196:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 800419a:	e7f9      	b.n	8004190 <XMC_CCU4_SLICE_ModulationConfig+0x22>

0800419c <XMC_CCU4_SLICE_CountConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 800419c:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 800419e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 80041a2:	ea43 3381 	orr.w	r3, r3, r1, lsl #14

  slice->CMC = cmc;
 80041a6:	6043      	str	r3, [r0, #4]
}
 80041a8:	4770      	bx	lr

080041aa <XMC_CCU4_SLICE_GateConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 80041aa:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 80041ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 80041b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  slice->CMC = cmc;
 80041b4:	6043      	str	r3, [r0, #4]
}
 80041b6:	4770      	bx	lr

080041b8 <XMC_CCU4_SLICE_Capture0Config>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 80041b8:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 80041ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 80041be:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  slice->CMC = cmc;
 80041c2:	6043      	str	r3, [r0, #4]
}
 80041c4:	4770      	bx	lr

080041c6 <XMC_CCU4_SLICE_Capture1Config>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 80041c6:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 80041c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 80041cc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6

  slice->CMC = cmc;
 80041d0:	6043      	str	r3, [r0, #4]
}
 80041d2:	4770      	bx	lr

080041d4 <XMC_CCU4_SLICE_DirectionConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 80041d4:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 80041d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 80041da:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
  
  slice->CMC = cmc;
 80041de:	6043      	str	r3, [r0, #4]
}
 80041e0:	4770      	bx	lr

080041e2 <XMC_CCU4_SLICE_StatusBitOverrideConfig>:
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 80041e2:	6843      	ldr	r3, [r0, #4]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000

  slice->CMC = cmc;
 80041e8:	6043      	str	r3, [r0, #4]
}
 80041ea:	4770      	bx	lr

080041ec <XMC_CCU4_SLICE_TrapConfig>:
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 80041ec:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  slice->CMC = cmc;
 80041f2:	6043      	str	r3, [r0, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 80041f4:	6943      	ldr	r3, [r0, #20]

  if (synch_with_pwm == (bool) true)
 80041f6:	b14a      	cbz	r2, 800420c <XMC_CCU4_SLICE_TrapConfig+0x20>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 80041f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 80041fc:	2901      	cmp	r1, #1
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 80041fe:	bf0c      	ite	eq
 8004200:	f443 0380 	orreq.w	r3, r3, #4194304	; 0x400000
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 8004204:	f423 0380 	bicne.w	r3, r3, #4194304	; 0x400000
  }
  
  slice->TC = tc;
 8004208:	6143      	str	r3, [r0, #20]
}
 800420a:	4770      	bx	lr
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 800420c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004210:	e7f4      	b.n	80041fc <XMC_CCU4_SLICE_TrapConfig+0x10>

08004212 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8004212:	b410      	push	{r4}
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 8004214:	6803      	ldr	r3, [r0, #0]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 8004216:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 800421a:	784c      	ldrb	r4, [r1, #1]
 800421c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 8004220:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 8004224:	7854      	ldrb	r4, [r2, #1]
 8004226:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 800422a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 800422e:	788c      	ldrb	r4, [r1, #2]
 8004230:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 8004234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 8004238:	7894      	ldrb	r4, [r2, #2]
 800423a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 800423e:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 8004242:	78cc      	ldrb	r4, [r1, #3]
 8004244:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 8004248:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 800424c:	78d4      	ldrb	r4, [r2, #3]
 800424e:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 8004252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 8004256:	7809      	ldrb	r1, [r1, #0]
 8004258:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 800425c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 8004260:	7812      	ldrb	r2, [r2, #0]
 8004262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  slice->INS = ins;
 8004266:	6003      	str	r3, [r0, #0]
#endif
}
 8004268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800426c:	4770      	bx	lr

0800426e <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 800426e:	b4f0      	push	{r4, r5, r6, r7}
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8004270:	1e4c      	subs	r4, r1, #1
 8004272:	b2e4      	uxtb	r4, r4
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8004274:	f8d0 c000 	ldr.w	ip, [r0]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8004278:	0065      	lsls	r5, r4, #1
 800427a:	b2ed      	uxtb	r5, r5
 800427c:	f105 0310 	add.w	r3, r5, #16
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8004280:	b2df      	uxtb	r7, r3
 8004282:	2603      	movs	r6, #3
 8004284:	fa06 f307 	lsl.w	r3, r6, r7
 8004288:	ea2c 0c03 	bic.w	ip, ip, r3
  ins |= ((uint32_t) config->edge) << pos;
 800428c:	7853      	ldrb	r3, [r2, #1]
 800428e:	40bb      	lsls	r3, r7
 8004290:	ea43 030c 	orr.w	r3, r3, ip
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8004294:	3115      	adds	r1, #21
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8004296:	b2cf      	uxtb	r7, r1
 8004298:	2101      	movs	r1, #1
 800429a:	40b9      	lsls	r1, r7
 800429c:	ea23 0301 	bic.w	r3, r3, r1
  ins |= ((uint32_t) config->level) << pos;
 80042a0:	7891      	ldrb	r1, [r2, #2]
 80042a2:	40b9      	lsls	r1, r7
 80042a4:	4319      	orrs	r1, r3
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 80042a6:	3519      	adds	r5, #25
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 80042a8:	b2ed      	uxtb	r5, r5
 80042aa:	fa06 f305 	lsl.w	r3, r6, r5
 80042ae:	ea21 0103 	bic.w	r1, r1, r3
  ins |= ((uint32_t) config->duration) << pos;
 80042b2:	78d3      	ldrb	r3, [r2, #3]
 80042b4:	40ab      	lsls	r3, r5
 80042b6:	430b      	orrs	r3, r1

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80042b8:	00a1      	lsls	r1, r4, #2
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80042ba:	b2c9      	uxtb	r1, r1
 80042bc:	240f      	movs	r4, #15
 80042be:	408c      	lsls	r4, r1
 80042c0:	ea23 0304 	bic.w	r3, r3, r4
  ins |= ((uint32_t) config->mapped_input) << pos;
 80042c4:	7812      	ldrb	r2, [r2, #0]
 80042c6:	fa02 f101 	lsl.w	r1, r2, r1
 80042ca:	430b      	orrs	r3, r1

  slice->INS = ins;
 80042cc:	6003      	str	r3, [r0, #0]
#endif
}
 80042ce:	bcf0      	pop	{r4, r5, r6, r7}
 80042d0:	4770      	bx	lr

080042d2 <XMC_CCU4_SLICE_SetInput>:

/* API to bind an input to a slice trigger event */
void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
                         const XMC_CCU4_SLICE_EVENT_t event,
                             const XMC_CCU4_SLICE_INPUT_t input)
{
 80042d2:	b410      	push	{r4}

  slice->INS1 = ins;
#else
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);

  ins = slice->INS;
 80042d4:	6803      	ldr	r3, [r0, #0]
  offset = ((uint8_t) event) - 1U;
 80042d6:	3901      	subs	r1, #1
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 80042d8:	0089      	lsls	r1, r1, #2
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80042da:	b2c9      	uxtb	r1, r1
 80042dc:	240f      	movs	r4, #15
 80042de:	408c      	lsls	r4, r1
 80042e0:	ea23 0304 	bic.w	r3, r3, r4
  ins |= ((uint32_t) input) << pos;
 80042e4:	408a      	lsls	r2, r1
 80042e6:	431a      	orrs	r2, r3

  slice->INS = ins;
 80042e8:	6002      	str	r2, [r0, #0]
#endif
}
 80042ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <XMC_CCU4_SLICE_SetTimerRepeatMode>:
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
             ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
          (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
  
  if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 80042f0:	b921      	cbnz	r1, 80042fc <XMC_CCU4_SLICE_SetTimerRepeatMode+0xc>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 80042f2:	6943      	ldr	r3, [r0, #20]
 80042f4:	f023 0302 	bic.w	r3, r3, #2
 80042f8:	6143      	str	r3, [r0, #20]
 80042fa:	4770      	bx	lr
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 80042fc:	6943      	ldr	r3, [r0, #20]
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	6143      	str	r3, [r0, #20]
  }
}
 8004304:	4770      	bx	lr

08004306 <XMC_CCU4_SLICE_SetTimerCountingMode>:
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA) ||\
                                                                              (mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA)));
  
  if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 8004306:	b921      	cbnz	r1, 8004312 <XMC_CCU4_SLICE_SetTimerCountingMode+0xc>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 8004308:	6943      	ldr	r3, [r0, #20]
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	6143      	str	r3, [r0, #20]
 8004310:	4770      	bx	lr
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 8004312:	6943      	ldr	r3, [r0, #20]
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6143      	str	r3, [r0, #20]
  }
}
 800431a:	4770      	bx	lr

0800431c <XMC_CCU4_SLICE_GetCaptureRegisterValue>:
/* Retrieves desired capture register value */
uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t reg_num)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
  return(slice->CV[reg_num]);
 800431c:	311c      	adds	r1, #28
 800431e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8004322:	6840      	ldr	r0, [r0, #4]
}
 8004324:	4770      	bx	lr

08004326 <XMC_CCU4_SLICE_GetLastCapturedTimerValue>:

/* @brief Retrieves the latest captured timer value */
XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
                                                           const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                           uint32_t *val_ptr)
{
 8004326:	b430      	push	{r4, r5}
                                                                               (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
  
  retval = XMC_CCU4_STATUS_ERROR;

  /* First check if extended capture mode is enabled */
  if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 8004328:	6943      	ldr	r3, [r0, #20]
 800432a:	f013 0f10 	tst.w	r3, #16
 800432e:	d11c      	bne.n	800436a <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x44>
      end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
    }
    else
    {
      start = 0U;
      end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 8004330:	2901      	cmp	r1, #1
 8004332:	bf0b      	itete	eq
 8004334:	2504      	moveq	r5, #4
 8004336:	2502      	movne	r5, #2
 8004338:	2302      	moveq	r3, #2
 800433a:	2300      	movne	r3, #0
    }
  }

  for(i=start; i < end; i++)
  {
    if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 800433c:	461c      	mov	r4, r3
 800433e:	f103 011c 	add.w	r1, r3, #28
 8004342:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004346:	6849      	ldr	r1, [r1, #4]
 8004348:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800434c:	d105      	bne.n	800435a <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x34>
  for(i=start; i < end; i++)
 800434e:	3301      	adds	r3, #1
 8004350:	b2d9      	uxtb	r1, r3
 8004352:	428d      	cmp	r5, r1
 8004354:	d8f2      	bhi.n	800433c <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x16>
  retval = XMC_CCU4_STATUS_ERROR;
 8004356:	2001      	movs	r0, #1
      retval = XMC_CCU4_STATUS_OK;
      break;
    }
  }

  return retval;
 8004358:	e005      	b.n	8004366 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
      *val_ptr = slice->CV[i];
 800435a:	341c      	adds	r4, #28
 800435c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8004360:	6843      	ldr	r3, [r0, #4]
 8004362:	6013      	str	r3, [r2, #0]
      retval = XMC_CCU4_STATUS_OK;
 8004364:	2000      	movs	r0, #0
}
 8004366:	bc30      	pop	{r4, r5}
 8004368:	4770      	bx	lr
    end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 800436a:	2504      	movs	r5, #4
    start = 0U;
 800436c:	2300      	movs	r3, #0
  for(i=start; i < end; i++)
 800436e:	e7e5      	b.n	800433c <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x16>

08004370 <XMC_CCU4_GetCapturedValueFromFifo>:
  uint32_t  extracted_slice;
  
  XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));

  /* First read the global fifo register */
  cap = (int32_t) module->ECRD;
 8004370:	6d00      	ldr	r0, [r0, #80]	; 0x50

  extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 8004372:	f3c0 5201 	ubfx	r2, r0, #20, #2
  {
    cap = -1;
  }

  return (cap);
}
 8004376:	4291      	cmp	r1, r2
 8004378:	bf18      	it	ne
 800437a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800437e:	4770      	bx	lr

08004380 <XMC_CCU4_SLICE_EnableDithering>:
/* Enables PWM dithering feature */
void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
                                    const bool period_dither,
                                    const bool duty_dither,
                                    const uint8_t spread)
{
 8004380:	b410      	push	{r4}
  uint32_t tc;

  XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  tc = slice->TC;
 8004382:	6944      	ldr	r4, [r0, #20]
  tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 8004384:	f424 44c0 	bic.w	r4, r4, #24576	; 0x6000

  if ((bool) true == period_dither)
 8004388:	b109      	cbz	r1, 800438e <XMC_CCU4_SLICE_EnableDithering+0xe>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 800438a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  }
  if ((bool) true == duty_dither)
 800438e:	b10a      	cbz	r2, 8004394 <XMC_CCU4_SLICE_EnableDithering+0x14>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 8004390:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
  }

  slice->TC = tc;
 8004394:	6144      	str	r4, [r0, #20]
 *  XMC_CCU4_SLICE_EnableDithering().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint8_t comp_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->DITS = comp_val;
 8004396:	6203      	str	r3, [r0, #32]
  
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}
 8004398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800439c:	4770      	bx	lr

0800439e <XMC_CCU4_SLICE_SetPrescaler>:
{
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 800439e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 80043a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 80043a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  slice->FPC = fpc;
 80043a8:	6283      	str	r3, [r0, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 80043aa:	6241      	str	r1, [r0, #36]	; 0x24
}
 80043ac:	4770      	bx	lr

080043ae <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 80043ae:	b410      	push	{r4}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 80043b0:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
  
  switch(event)
 80043b4:	2909      	cmp	r1, #9
 80043b6:	d811      	bhi.n	80043dc <XMC_CCU4_SLICE_SetInterruptNode+0x2e>
 80043b8:	e8df f001 	tbb	[pc, r1]
 80043bc:	05051414 	.word	0x05051414
 80043c0:	10101010 	.word	0x10101010
 80043c4:	0c08      	.short	0x0c08
  srs = slice->SRS;
 80043c6:	240c      	movs	r4, #12
 80043c8:	2102      	movs	r1, #2
 80043ca:	e00d      	b.n	80043e8 <XMC_CCU4_SLICE_SetInterruptNode+0x3a>
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
      pos  = CCU4_CC4_SRS_CMSR_Pos;
      break;

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80043cc:	f44f 7440 	mov.w	r4, #768	; 0x300
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80043d0:	2108      	movs	r1, #8
      break;
 80043d2:	e009      	b.n	80043e8 <XMC_CCU4_SLICE_SetInterruptNode+0x3a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80043d4:	f44f 6440 	mov.w	r4, #3072	; 0xc00
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80043d8:	210a      	movs	r1, #10
      break;
 80043da:	e005      	b.n	80043e8 <XMC_CCU4_SLICE_SetInterruptNode+0x3a>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80043dc:	f44f 5440 	mov.w	r4, #12288	; 0x3000
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80043e0:	210c      	movs	r1, #12
      break;
 80043e2:	e001      	b.n	80043e8 <XMC_CCU4_SLICE_SetInterruptNode+0x3a>
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 80043e4:	2403      	movs	r4, #3
      pos  = CCU4_CC4_SRS_POSR_Pos;
 80043e6:	2100      	movs	r1, #0
  }
  
  srs &= ~mask; 
 80043e8:	ea23 0304 	bic.w	r3, r3, r4
  srs |= (uint32_t)sr << pos;
 80043ec:	408a      	lsls	r2, r1
 80043ee:	431a      	orrs	r2, r3
  slice->SRS = srs;
 80043f0:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
 80043f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <XMC_CCU4_SLICE_SetPassiveLevel>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
                                                                      (level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
  
  psl = slice->PSL;
 80043fa:	6983      	ldr	r3, [r0, #24]
  psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 80043fc:	f023 0301 	bic.w	r3, r3, #1
  psl |= (uint32_t) level;
 8004400:	4319      	orrs	r1, r3
  
  /* Program CC4 slice output passive level */
  slice->PSL = psl;
 8004402:	6181      	str	r1, [r0, #24]
}
 8004404:	4770      	bx	lr

08004406 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8004406:	b082      	sub	sp, #8
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8004408:	2300      	movs	r3, #0
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	9b01      	ldr	r3, [sp, #4]
 800440e:	4298      	cmp	r0, r3
 8004410:	d906      	bls.n	8004420 <delay+0x1a>
  {
    __NOP();
 8004412:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8004414:	9b01      	ldr	r3, [sp, #4]
 8004416:	3301      	adds	r3, #1
 8004418:	9301      	str	r3, [sp, #4]
 800441a:	9b01      	ldr	r3, [sp, #4]
 800441c:	4283      	cmp	r3, r0
 800441e:	d3f8      	bcc.n	8004412 <delay+0xc>
  }
}
 8004420:	b002      	add	sp, #8
 8004422:	4770      	bx	lr

08004424 <SystemCoreSetup>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004424:	b672      	cpsid	i
{
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8004426:	4b0d      	ldr	r3, [pc, #52]	; (800445c <SystemCoreSetup+0x38>)
 8004428:	4a0d      	ldr	r2, [pc, #52]	; (8004460 <SystemCoreSetup+0x3c>)
 800442a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800442c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8004430:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8004432:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004436:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800443a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	f022 0208 	bic.w	r2, r2, #8
 8004444:	615a      	str	r2, [r3, #20]

  temp = FLASH0->FCON;
 8004446:	4907      	ldr	r1, [pc, #28]	; (8004464 <SystemCoreSetup+0x40>)
 8004448:	f241 0214 	movw	r2, #4116	; 0x1014
 800444c:	588b      	ldr	r3, [r1, r2]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800444e:	f023 030f 	bic.w	r3, r3, #15
  temp |= PMU_FLASH_WS;
 8004452:	f043 0303 	orr.w	r3, r3, #3
  FLASH0->FCON = temp;
 8004456:	508b      	str	r3, [r1, r2]
}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	e000ed00 	.word	0xe000ed00
 8004460:	08000000 	.word	0x08000000
 8004464:	58001000 	.word	0x58001000

08004468 <OSCHP_GetFrequency>:
}

__WEAK uint32_t OSCHP_GetFrequency(void)
{
  return OSCHP_FREQUENCY;
}
 8004468:	4800      	ldr	r0, [pc, #0]	; (800446c <OSCHP_GetFrequency+0x4>)
 800446a:	4770      	bx	lr
 800446c:	00b71b00 	.word	0x00b71b00

08004470 <SystemCoreClockUpdate>:
{
 8004470:	b510      	push	{r4, lr}
  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8004472:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <SystemCoreClockUpdate+0x7c>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800447a:	d027      	beq.n	80044cc <SystemCoreClockUpdate+0x5c>
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800447c:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <SystemCoreClockUpdate+0x80>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f013 0f01 	tst.w	r3, #1
 8004484:	d017      	beq.n	80044b6 <SystemCoreClockUpdate+0x46>
      temp = OFI_FREQUENCY;
 8004486:	481b      	ldr	r0, [pc, #108]	; (80044f4 <SystemCoreClockUpdate+0x84>)
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <SystemCoreClockUpdate+0x80>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f013 0f04 	tst.w	r3, #4
 8004490:	d014      	beq.n	80044bc <SystemCoreClockUpdate+0x4c>
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8004492:	4a17      	ldr	r2, [pc, #92]	; (80044f0 <SystemCoreClockUpdate+0x80>)
 8004494:	6894      	ldr	r4, [r2, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8004496:	6891      	ldr	r1, [r2, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8004498:	6892      	ldr	r2, [r2, #8]
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800449a:	f3c4 6403 	ubfx	r4, r4, #24, #4
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800449e:	f3c2 4206 	ubfx	r2, r2, #16, #7
 80044a2:	1c53      	adds	r3, r2, #1
      temp = (temp / (pdiv * kdiv)) * ndiv;
 80044a4:	fb04 3303 	mla	r3, r4, r3, r3
 80044a8:	fbb0 f3f3 	udiv	r3, r0, r3
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80044ac:	f3c1 2006 	ubfx	r0, r1, #8, #7
      temp = (temp / (pdiv * kdiv)) * ndiv;
 80044b0:	fb00 3303 	mla	r3, r0, r3, r3
 80044b4:	e00b      	b.n	80044ce <SystemCoreClockUpdate+0x5e>
      temp = OSCHP_GetFrequency();
 80044b6:	f7ff ffd7 	bl	8004468 <OSCHP_GetFrequency>
 80044ba:	e7e5      	b.n	8004488 <SystemCoreClockUpdate+0x18>
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <SystemCoreClockUpdate+0x80>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c4:	3301      	adds	r3, #1
      temp = (temp / kdiv);
 80044c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ca:	e000      	b.n	80044ce <SystemCoreClockUpdate+0x5e>
    temp = OFI_FREQUENCY;
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <SystemCoreClockUpdate+0x84>)
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80044ce:	4a07      	ldr	r2, [pc, #28]	; (80044ec <SystemCoreClockUpdate+0x7c>)
 80044d0:	68d0      	ldr	r0, [r2, #12]
 80044d2:	b2c0      	uxtb	r0, r0
 80044d4:	3001      	adds	r0, #1
 80044d6:	fbb3 f3f0 	udiv	r3, r3, r0
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80044da:	6912      	ldr	r2, [r2, #16]
 80044dc:	f002 0201 	and.w	r2, r2, #1
 80044e0:	3201      	adds	r2, #1
 80044e2:	fbb3 f3f2 	udiv	r3, r3, r2
  SystemCoreClock = temp;
 80044e6:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <SystemCoreClockUpdate+0x88>)
 80044e8:	6013      	str	r3, [r2, #0]
}
 80044ea:	bd10      	pop	{r4, pc}
 80044ec:	50004600 	.word	0x50004600
 80044f0:	50004710 	.word	0x50004710
 80044f4:	016e3600 	.word	0x016e3600
 80044f8:	2000ffc0 	.word	0x2000ffc0
{
 80044fc:	b510      	push	{r4, lr}
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80044fe:	4b5c      	ldr	r3, [pc, #368]	; (8004670 <SystemCoreClockUpdate+0x200>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f013 0f01 	tst.w	r3, #1
 8004506:	d108      	bne.n	800451a <SystemCoreClockUpdate+0xaa>
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8004508:	4a59      	ldr	r2, [pc, #356]	; (8004670 <SystemCoreClockUpdate+0x200>)
 800450a:	6853      	ldr	r3, [r2, #4]
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6053      	str	r3, [r2, #4]
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8004512:	6813      	ldr	r3, [r2, #0]
 8004514:	f013 0f01 	tst.w	r3, #1
 8004518:	d0fb      	beq.n	8004512 <SystemCoreClockUpdate+0xa2>
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800451a:	4b56      	ldr	r3, [pc, #344]	; (8004674 <SystemCoreClockUpdate+0x204>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004522:	d178      	bne.n	8004616 <SystemCoreClockUpdate+0x1a6>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8004524:	4c54      	ldr	r4, [pc, #336]	; (8004678 <SystemCoreClockUpdate+0x208>)
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800452c:	6063      	str	r3, [r4, #4]
  delay(DELAY_CNT_50US_50MHZ);
 800452e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004532:	f7ff ff68 	bl	8004406 <delay>
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8004536:	6863      	ldr	r3, [r4, #4]
 8004538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453c:	f023 0302 	bic.w	r3, r3, #2
 8004540:	6063      	str	r3, [r4, #4]
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8004542:	4b4e      	ldr	r3, [pc, #312]	; (800467c <SystemCoreClockUpdate+0x20c>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f013 0f30 	tst.w	r3, #48	; 0x30
 800454a:	d16e      	bne.n	800462a <SystemCoreClockUpdate+0x1ba>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800454c:	4b4a      	ldr	r3, [pc, #296]	; (8004678 <SystemCoreClockUpdate+0x208>)
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	f042 0210 	orr.w	r2, r2, #16
 800455c:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800455e:	4a48      	ldr	r2, [pc, #288]	; (8004680 <SystemCoreClockUpdate+0x210>)
 8004560:	609a      	str	r2, [r3, #8]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004568:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	f022 0210 	bic.w	r2, r2, #16
 8004570:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004578:	605a      	str	r2, [r3, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800457a:	461a      	mov	r2, r3
 800457c:	6813      	ldr	r3, [r2, #0]
 800457e:	f013 0f04 	tst.w	r3, #4
 8004582:	d0fb      	beq.n	800457c <SystemCoreClockUpdate+0x10c>
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8004584:	4a3c      	ldr	r2, [pc, #240]	; (8004678 <SystemCoreClockUpdate+0x208>)
 8004586:	6853      	ldr	r3, [r2, #4]
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800458e:	6813      	ldr	r3, [r2, #0]
 8004590:	f013 0f01 	tst.w	r3, #1
 8004594:	d1fb      	bne.n	800458e <SystemCoreClockUpdate+0x11e>
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8004596:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <SystemCoreClockUpdate+0x214>)
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800459e:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80045a0:	2200      	movs	r2, #0
 80045a2:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80045a4:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80045a6:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80045aa:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80045ac:	2203      	movs	r2, #3
 80045ae:	619a      	str	r2, [r3, #24]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80045b0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ba:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80045bc:	4a32      	ldr	r2, [pc, #200]	; (8004688 <SystemCoreClockUpdate+0x218>)
 80045be:	609a      	str	r2, [r3, #8]
  delay(DELAY_CNT_50US_60MHZ);
 80045c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80045c4:	f7ff ff1f 	bl	8004406 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80045c8:	4a2b      	ldr	r2, [pc, #172]	; (8004678 <SystemCoreClockUpdate+0x208>)
 80045ca:	6813      	ldr	r3, [r2, #0]
 80045cc:	f013 0f04 	tst.w	r3, #4
 80045d0:	d0fb      	beq.n	80045ca <SystemCoreClockUpdate+0x15a>
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80045d2:	4b29      	ldr	r3, [pc, #164]	; (8004678 <SystemCoreClockUpdate+0x208>)
 80045d4:	4a2d      	ldr	r2, [pc, #180]	; (800468c <SystemCoreClockUpdate+0x21c>)
 80045d6:	609a      	str	r2, [r3, #8]
  delay(DELAY_CNT_50US_90MHZ);
 80045d8:	f241 1094 	movw	r0, #4500	; 0x1194
 80045dc:	f7ff ff13 	bl	8004406 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80045e0:	4a25      	ldr	r2, [pc, #148]	; (8004678 <SystemCoreClockUpdate+0x208>)
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	f013 0f04 	tst.w	r3, #4
 80045e8:	d0fb      	beq.n	80045e2 <SystemCoreClockUpdate+0x172>
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <SystemCoreClockUpdate+0x208>)
 80045ec:	4a28      	ldr	r2, [pc, #160]	; (8004690 <SystemCoreClockUpdate+0x220>)
 80045ee:	609a      	str	r2, [r3, #8]
  delay(DELAY_CNT_50US_120MHZ);
 80045f0:	f241 7070 	movw	r0, #6000	; 0x1770
 80045f4:	f7ff ff07 	bl	8004406 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80045f8:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <SystemCoreClockUpdate+0x208>)
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	f013 0f04 	tst.w	r3, #4
 8004600:	d0fb      	beq.n	80045fa <SystemCoreClockUpdate+0x18a>
  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8004602:	4b24      	ldr	r3, [pc, #144]	; (8004694 <SystemCoreClockUpdate+0x224>)
 8004604:	2205      	movs	r2, #5
 8004606:	60da      	str	r2, [r3, #12]
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8004608:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800460c:	2200      	movs	r2, #0
 800460e:	605a      	str	r2, [r3, #4]
  SystemCoreClockUpdate();
 8004610:	f7ff ff2e 	bl	8004470 <SystemCoreClockUpdate>
}
 8004614:	bd10      	pop	{r4, pc}
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8004616:	4a17      	ldr	r2, [pc, #92]	; (8004674 <SystemCoreClockUpdate+0x204>)
 8004618:	6893      	ldr	r3, [r2, #8]
 800461a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800461e:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8004620:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8004624:	f7ff feef 	bl	8004406 <delay>
 8004628:	e77c      	b.n	8004524 <SystemCoreClockUpdate+0xb4>
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800462a:	3c10      	subs	r4, #16
 800462c:	6863      	ldr	r3, [r4, #4]
 800462e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004632:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004636:	6063      	str	r3, [r4, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8004638:	f7ff ff16 	bl	8004468 <OSCHP_GetFrequency>
 800463c:	6862      	ldr	r2, [r4, #4]
 800463e:	4b16      	ldr	r3, [pc, #88]	; (8004698 <SystemCoreClockUpdate+0x228>)
 8004640:	fba3 1300 	umull	r1, r3, r3, r0
 8004644:	0d1b      	lsrs	r3, r3, #20
 8004646:	3b01      	subs	r3, #1
 8004648:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800464c:	6063      	str	r3, [r4, #4]
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <SystemCoreClockUpdate+0x208>)
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	60da      	str	r2, [r3, #12]
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800465e:	605a      	str	r2, [r3, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8004660:	461a      	mov	r2, r3
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8004668:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800466c:	d1f9      	bne.n	8004662 <SystemCoreClockUpdate+0x1f2>
 800466e:	e76d      	b.n	800454c <SystemCoreClockUpdate+0xdc>
 8004670:	50004200 	.word	0x50004200
 8004674:	50004400 	.word	0x50004400
 8004678:	50004710 	.word	0x50004710
 800467c:	50004700 	.word	0x50004700
 8004680:	01134f00 	.word	0x01134f00
 8004684:	50004600 	.word	0x50004600
 8004688:	01074f00 	.word	0x01074f00
 800468c:	01044f00 	.word	0x01044f00
 8004690:	01034f00 	.word	0x01034f00
 8004694:	50004160 	.word	0x50004160
 8004698:	6b5fca6b 	.word	0x6b5fca6b

0800469c <SystemInit>:
{
 800469c:	b510      	push	{r4, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 800469e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80046a2:	4c04      	ldr	r4, [pc, #16]	; (80046b4 <SystemInit+0x18>)
 80046a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SystemCoreSetup();
 80046aa:	f7ff febb 	bl	8004424 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80046ae:	f7fb fe55 	bl	800035c <SystemCoreClockSetup>
}
 80046b2:	bd10      	pop	{r4, pc}
 80046b4:	2000ffc4 	.word	0x2000ffc4

080046b8 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80046b8:	b508      	push	{r3, lr}
 80046ba:	4603      	mov	r3, r0
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80046bc:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <_sbrk+0x38>)
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	b15a      	cbz	r2, 80046da <_sbrk+0x22>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
  }

  base = heap_ptr;
 80046c2:	4a0b      	ldr	r2, [pc, #44]	; (80046f0 <_sbrk+0x38>)
 80046c4:	6810      	ldr	r0, [r2, #0]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80046c6:	3303      	adds	r3, #3
 80046c8:	f023 0303 	bic.w	r3, r3, #3
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80046cc:	4403      	add	r3, r0
 80046ce:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <_sbrk+0x3c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d206      	bcs.n	80046e2 <_sbrk+0x2a>
  {
    heap_ptr += nbytes;
 80046d4:	4a06      	ldr	r2, [pc, #24]	; (80046f0 <_sbrk+0x38>)
 80046d6:	6013      	str	r3, [r2, #0]
  {
    /* Heap overflow */
    errno = ENOMEM;
    return ((caddr_t)-1);
  }
}
 80046d8:	bd08      	pop	{r3, pc}
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80046da:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <_sbrk+0x38>)
 80046dc:	4906      	ldr	r1, [pc, #24]	; (80046f8 <_sbrk+0x40>)
 80046de:	6011      	str	r1, [r2, #0]
 80046e0:	e7ef      	b.n	80046c2 <_sbrk+0xa>
    errno = ENOMEM;
 80046e2:	f005 fe39 	bl	800a358 <__errno>
 80046e6:	230c      	movs	r3, #12
 80046e8:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
 80046ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046ee:	e7f3      	b.n	80046d8 <_sbrk+0x20>
 80046f0:	20000ef8 	.word	0x20000ef8
 80046f4:	2000ffc0 	.word	0x2000ffc0
 80046f8:	20001620 	.word	0x20001620

080046fc <_init>:

/* Init */
void _init(void)
{}
 80046fc:	4770      	bx	lr

080046fe <crypto_generichash_bytes_min>:
 80046fe:	2010      	movs	r0, #16
 8004700:	4770      	bx	lr

08004702 <crypto_generichash_bytes_max>:
 8004702:	2040      	movs	r0, #64	; 0x40
 8004704:	4770      	bx	lr

08004706 <crypto_generichash_bytes>:
 8004706:	2020      	movs	r0, #32
 8004708:	4770      	bx	lr

0800470a <crypto_generichash_keybytes_min>:
 800470a:	2010      	movs	r0, #16
 800470c:	4770      	bx	lr

0800470e <crypto_generichash_keybytes_max>:
 800470e:	2040      	movs	r0, #64	; 0x40
 8004710:	4770      	bx	lr

08004712 <crypto_generichash_keybytes>:
 8004712:	2020      	movs	r0, #32
 8004714:	4770      	bx	lr
	...

08004718 <crypto_generichash_primitive>:
 8004718:	4801      	ldr	r0, [pc, #4]	; (8004720 <crypto_generichash_primitive+0x8>)
 800471a:	4478      	add	r0, pc
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	00009502 	.word	0x00009502

08004724 <crypto_generichash_statebytes>:
 8004724:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8004728:	4770      	bx	lr

0800472a <crypto_generichash>:
 800472a:	b430      	push	{r4, r5}
 800472c:	bc30      	pop	{r4, r5}
 800472e:	f000 b809 	b.w	8004744 <crypto_generichash_blake2b>

08004732 <crypto_generichash_init>:
 8004732:	f000 b835 	b.w	80047a0 <crypto_generichash_blake2b_init>

08004736 <crypto_generichash_update>:
 8004736:	f000 b870 	b.w	800481a <crypto_generichash_blake2b_update>

0800473a <crypto_generichash_final>:
 800473a:	f000 b871 	b.w	8004820 <crypto_generichash_blake2b_final>

0800473e <crypto_generichash_keygen>:
 800473e:	2120      	movs	r1, #32
 8004740:	f000 baa6 	b.w	8004c90 <randombytes_buf>

08004744 <crypto_generichash_blake2b>:
 8004744:	460b      	mov	r3, r1
 8004746:	b4f0      	push	{r4, r5, r6, r7}
 8004748:	1e5d      	subs	r5, r3, #1
 800474a:	2d3f      	cmp	r5, #63	; 0x3f
 800474c:	4611      	mov	r1, r2
 800474e:	9c07      	ldr	r4, [sp, #28]
 8004750:	9a06      	ldr	r2, [sp, #24]
 8004752:	d807      	bhi.n	8004764 <crypto_generichash_blake2b+0x20>
 8004754:	2c40      	cmp	r4, #64	; 0x40
 8004756:	d805      	bhi.n	8004764 <crypto_generichash_blake2b+0x20>
 8004758:	b2e4      	uxtb	r4, r4
 800475a:	9406      	str	r4, [sp, #24]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	bcf0      	pop	{r4, r5, r6, r7}
 8004760:	f001 bb36 	b.w	8005dd0 <crypto_generichash_blake2b__blake2b>
 8004764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004768:	bcf0      	pop	{r4, r5, r6, r7}
 800476a:	4770      	bx	lr

0800476c <crypto_generichash_blake2b_salt_personal>:
 800476c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476e:	460b      	mov	r3, r1
 8004770:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8004774:	4611      	mov	r1, r2
 8004776:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800477a:	aa07      	add	r2, sp, #28
 800477c:	e892 4034 	ldmia.w	r2, {r2, r4, r5, lr}
 8004780:	d80b      	bhi.n	800479a <crypto_generichash_blake2b_salt_personal+0x2e>
 8004782:	2c40      	cmp	r4, #64	; 0x40
 8004784:	d809      	bhi.n	800479a <crypto_generichash_blake2b_salt_personal+0x2e>
 8004786:	b2e4      	uxtb	r4, r4
 8004788:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800478c:	9508      	str	r5, [sp, #32]
 800478e:	9407      	str	r4, [sp, #28]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004796:	f001 bb56 	b.w	8005e46 <crypto_generichash_blake2b__blake2b_salt_personal>
 800479a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800479e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047a0 <crypto_generichash_blake2b_init>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	460c      	mov	r4, r1
 80047a4:	1e59      	subs	r1, r3, #1
 80047a6:	293f      	cmp	r1, #63	; 0x3f
 80047a8:	4605      	mov	r5, r0
 80047aa:	d811      	bhi.n	80047d0 <crypto_generichash_blake2b_init+0x30>
 80047ac:	2a40      	cmp	r2, #64	; 0x40
 80047ae:	d80f      	bhi.n	80047d0 <crypto_generichash_blake2b_init+0x30>
 80047b0:	b2d9      	uxtb	r1, r3
 80047b2:	b104      	cbz	r4, 80047b6 <crypto_generichash_blake2b_init+0x16>
 80047b4:	b93a      	cbnz	r2, 80047c6 <crypto_generichash_blake2b_init+0x26>
 80047b6:	4628      	mov	r0, r5
 80047b8:	f001 f8b8 	bl	800592c <crypto_generichash_blake2b__init>
 80047bc:	3000      	adds	r0, #0
 80047be:	bf18      	it	ne
 80047c0:	2001      	movne	r0, #1
 80047c2:	4240      	negs	r0, r0
 80047c4:	bd38      	pop	{r3, r4, r5, pc}
 80047c6:	b2d3      	uxtb	r3, r2
 80047c8:	4622      	mov	r2, r4
 80047ca:	f001 f99f 	bl	8005b0c <crypto_generichash_blake2b__init_key>
 80047ce:	e7f5      	b.n	80047bc <crypto_generichash_blake2b_init+0x1c>
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047d4:	bd38      	pop	{r3, r4, r5, pc}

080047d6 <crypto_generichash_blake2b_init_salt_personal>:
 80047d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047d8:	460c      	mov	r4, r1
 80047da:	1e59      	subs	r1, r3, #1
 80047dc:	293f      	cmp	r1, #63	; 0x3f
 80047de:	4607      	mov	r7, r0
 80047e0:	9d08      	ldr	r5, [sp, #32]
 80047e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80047e4:	d816      	bhi.n	8004814 <crypto_generichash_blake2b_init_salt_personal+0x3e>
 80047e6:	2a40      	cmp	r2, #64	; 0x40
 80047e8:	d814      	bhi.n	8004814 <crypto_generichash_blake2b_init_salt_personal+0x3e>
 80047ea:	b2d9      	uxtb	r1, r3
 80047ec:	b104      	cbz	r4, 80047f0 <crypto_generichash_blake2b_init_salt_personal+0x1a>
 80047ee:	b952      	cbnz	r2, 8004806 <crypto_generichash_blake2b_init_salt_personal+0x30>
 80047f0:	4633      	mov	r3, r6
 80047f2:	462a      	mov	r2, r5
 80047f4:	4638      	mov	r0, r7
 80047f6:	f001 f8cf 	bl	8005998 <crypto_generichash_blake2b__init_salt_personal>
 80047fa:	3000      	adds	r0, #0
 80047fc:	bf18      	it	ne
 80047fe:	2001      	movne	r0, #1
 8004800:	4240      	negs	r0, r0
 8004802:	b003      	add	sp, #12
 8004804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004806:	b2d3      	uxtb	r3, r2
 8004808:	e88d 0060 	stmia.w	sp, {r5, r6}
 800480c:	4622      	mov	r2, r4
 800480e:	f001 f9d4 	bl	8005bba <crypto_generichash_blake2b__init_key_salt_personal>
 8004812:	e7f2      	b.n	80047fa <crypto_generichash_blake2b_init_salt_personal+0x24>
 8004814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004818:	e7f3      	b.n	8004802 <crypto_generichash_blake2b_init_salt_personal+0x2c>

0800481a <crypto_generichash_blake2b_update>:
 800481a:	f001 b911 	b.w	8005a40 <crypto_generichash_blake2b__update>
	...

08004820 <crypto_generichash_blake2b_final>:
 8004820:	2aff      	cmp	r2, #255	; 0xff
 8004822:	b508      	push	{r3, lr}
 8004824:	d908      	bls.n	8004838 <crypto_generichash_blake2b_final+0x18>
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <crypto_generichash_blake2b_final+0x24>)
 8004828:	4a07      	ldr	r2, [pc, #28]	; (8004848 <crypto_generichash_blake2b_final+0x28>)
 800482a:	4808      	ldr	r0, [pc, #32]	; (800484c <crypto_generichash_blake2b_final+0x2c>)
 800482c:	447b      	add	r3, pc
 800482e:	447a      	add	r2, pc
 8004830:	2166      	movs	r1, #102	; 0x66
 8004832:	4478      	add	r0, pc
 8004834:	f005 fd34 	bl	800a2a0 <__assert_func>
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800483e:	f001 ba35 	b.w	8005cac <crypto_generichash_blake2b__final>
 8004842:	bf00      	nop
 8004844:	00009419 	.word	0x00009419
 8004848:	000093f6 	.word	0x000093f6
 800484c:	00009427 	.word	0x00009427

08004850 <_crypto_generichash_blake2b_pick_best_implementation>:
 8004850:	f001 bb3c 	b.w	8005ecc <crypto_generichash_blake2b__pick_best_implementation>

08004854 <crypto_secretbox_detached>:
 8004854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004858:	b0a3      	sub	sp, #140	; 0x8c
 800485a:	af06      	add	r7, sp, #24
 800485c:	4604      	mov	r4, r0
 800485e:	f8d7 80a0 	ldr.w	r8, [r7, #160]	; 0xa0
 8004862:	6039      	str	r1, [r7, #0]
 8004864:	4615      	mov	r5, r2
 8004866:	b0c4      	sub	sp, #272	; 0x110
 8004868:	2300      	movs	r3, #0
 800486a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800486e:	4641      	mov	r1, r8
 8004870:	f107 0010 	add.w	r0, r7, #16
 8004874:	f10d 0627 	add.w	r6, sp, #39	; 0x27
 8004878:	f000 fdfa 	bl	8005470 <crypto_core_hsalsa20>
 800487c:	42ac      	cmp	r4, r5
 800487e:	f026 060f 	bic.w	r6, r6, #15
 8004882:	d907      	bls.n	8004894 <crypto_secretbox_detached+0x40>
 8004884:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004888:	2300      	movs	r3, #0
 800488a:	1b62      	subs	r2, r4, r5
 800488c:	428b      	cmp	r3, r1
 800488e:	bf08      	it	eq
 8004890:	4282      	cmpeq	r2, r0
 8004892:	d309      	bcc.n	80048a8 <crypto_secretbox_detached+0x54>
 8004894:	42ac      	cmp	r4, r5
 8004896:	d20e      	bcs.n	80048b6 <crypto_secretbox_detached+0x62>
 8004898:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800489c:	2300      	movs	r3, #0
 800489e:	1b2a      	subs	r2, r5, r4
 80048a0:	428b      	cmp	r3, r1
 80048a2:	bf08      	it	eq
 80048a4:	4282      	cmpeq	r2, r0
 80048a6:	d206      	bcs.n	80048b6 <crypto_secretbox_detached+0x62>
 80048a8:	4629      	mov	r1, r5
 80048aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80048ae:	4620      	mov	r0, r4
 80048b0:	f006 f8fc 	bl	800aaac <memmove>
 80048b4:	4625      	mov	r5, r4
 80048b6:	2220      	movs	r2, #32
 80048b8:	2100      	movs	r1, #0
 80048ba:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80048be:	f006 f95d 	bl	800ab7c <memset>
 80048c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf08      	it	eq
 80048ca:	2a21      	cmpeq	r2, #33	; 0x21
 80048cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80048d0:	d303      	bcc.n	80048da <crypto_secretbox_detached+0x86>
 80048d2:	2220      	movs	r2, #32
 80048d4:	2300      	movs	r3, #0
 80048d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80048da:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80048de:	f107 094f 	add.w	r9, r7, #79	; 0x4f
 80048e2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80048e6:	1e6a      	subs	r2, r5, #1
 80048e8:	442b      	add	r3, r5
 80048ea:	4649      	mov	r1, r9
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d154      	bne.n	800499a <crypto_secretbox_detached+0x146>
 80048f0:	f108 0310 	add.w	r3, r8, #16
 80048f4:	f107 0a10 	add.w	sl, r7, #16
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	e88d 0408 	stmia.w	sp, {r3, sl}
 80048fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004902:	f107 0830 	add.w	r8, r7, #48	; 0x30
 8004906:	3220      	adds	r2, #32
 8004908:	f143 0300 	adc.w	r3, r3, #0
 800490c:	4641      	mov	r1, r8
 800490e:	4640      	mov	r0, r8
 8004910:	f000 f934 	bl	8004b7c <crypto_stream_salsa20_xor>
 8004914:	4641      	mov	r1, r8
 8004916:	4630      	mov	r0, r6
 8004918:	f001 fb00 	bl	8005f1c <crypto_onetimeauth_poly1305_init>
 800491c:	f10b 031f 	add.w	r3, fp, #31
 8004920:	1e62      	subs	r2, r4, #1
 8004922:	4443      	add	r3, r8
 8004924:	4599      	cmp	r9, r3
 8004926:	d13d      	bne.n	80049a4 <crypto_secretbox_detached+0x150>
 8004928:	2140      	movs	r1, #64	; 0x40
 800492a:	4640      	mov	r0, r8
 800492c:	f000 fa9b 	bl	8004e66 <sodium_memzero>
 8004930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004934:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004938:	428b      	cmp	r3, r1
 800493a:	bf08      	it	eq
 800493c:	4282      	cmpeq	r2, r0
 800493e:	d214      	bcs.n	800496a <crypto_secretbox_detached+0x116>
 8004940:	2201      	movs	r2, #1
 8004942:	2300      	movs	r3, #0
 8004944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004954:	1a12      	subs	r2, r2, r0
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	f8cd a010 	str.w	sl, [sp, #16]
 800495e:	eb05 010b 	add.w	r1, r5, fp
 8004962:	eb04 000b 	add.w	r0, r4, fp
 8004966:	f000 f8ff 	bl	8004b68 <crypto_stream_salsa20_xor_ic>
 800496a:	4650      	mov	r0, sl
 800496c:	2120      	movs	r1, #32
 800496e:	f000 fa7a 	bl	8004e66 <sodium_memzero>
 8004972:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004976:	4621      	mov	r1, r4
 8004978:	4630      	mov	r0, r6
 800497a:	f001 fad7 	bl	8005f2c <crypto_onetimeauth_poly1305_update>
 800497e:	6839      	ldr	r1, [r7, #0]
 8004980:	4630      	mov	r0, r6
 8004982:	f001 fadf 	bl	8005f44 <crypto_onetimeauth_poly1305_final>
 8004986:	4630      	mov	r0, r6
 8004988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800498c:	f000 fa6b 	bl	8004e66 <sodium_memzero>
 8004990:	2000      	movs	r0, #0
 8004992:	3774      	adds	r7, #116	; 0x74
 8004994:	46bd      	mov	sp, r7
 8004996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800499e:	f801 0f01 	strb.w	r0, [r1, #1]!
 80049a2:	e7a3      	b.n	80048ec <crypto_secretbox_detached+0x98>
 80049a4:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80049a8:	f802 1f01 	strb.w	r1, [r2, #1]!
 80049ac:	e7ba      	b.n	8004924 <crypto_secretbox_detached+0xd0>

080049ae <crypto_secretbox_easy>:
 80049ae:	b530      	push	{r4, r5, lr}
 80049b0:	2500      	movs	r5, #0
 80049b2:	f06f 0410 	mvn.w	r4, #16
 80049b6:	429d      	cmp	r5, r3
 80049b8:	bf08      	it	eq
 80049ba:	4294      	cmpeq	r4, r2
 80049bc:	b085      	sub	sp, #20
 80049be:	d201      	bcs.n	80049c4 <crypto_secretbox_easy+0x16>
 80049c0:	f000 f9e8 	bl	8004d94 <sodium_misuse>
 80049c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80049c6:	9403      	str	r4, [sp, #12]
 80049c8:	9c08      	ldr	r4, [sp, #32]
 80049ca:	9402      	str	r4, [sp, #8]
 80049cc:	e9cd 2300 	strd	r2, r3, [sp]
 80049d0:	460a      	mov	r2, r1
 80049d2:	4601      	mov	r1, r0
 80049d4:	3010      	adds	r0, #16
 80049d6:	f7ff ff3d 	bl	8004854 <crypto_secretbox_detached>
 80049da:	b005      	add	sp, #20
 80049dc:	bd30      	pop	{r4, r5, pc}

080049de <crypto_secretbox_open_detached>:
 80049de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e2:	b0a1      	sub	sp, #132	; 0x84
 80049e4:	f10d 0820 	add.w	r8, sp, #32
 80049e8:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 80049ea:	4691      	mov	r9, r2
 80049ec:	460c      	mov	r4, r1
 80049ee:	2300      	movs	r3, #0
 80049f0:	4639      	mov	r1, r7
 80049f2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80049f4:	ae10      	add	r6, sp, #64	; 0x40
 80049f6:	4605      	mov	r5, r0
 80049f8:	3710      	adds	r7, #16
 80049fa:	4640      	mov	r0, r8
 80049fc:	f000 fd38 	bl	8005470 <crypto_core_hsalsa20>
 8004a00:	2220      	movs	r2, #32
 8004a02:	2300      	movs	r3, #0
 8004a04:	e88d 0180 	stmia.w	sp, {r7, r8}
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f000 f8a3 	bl	8004b54 <crypto_stream_salsa20>
 8004a0e:	4648      	mov	r0, r9
 8004a10:	9600      	str	r6, [sp, #0]
 8004a12:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8004a16:	4621      	mov	r1, r4
 8004a18:	f001 fa74 	bl	8005f04 <crypto_onetimeauth_poly1305_verify>
 8004a1c:	4681      	mov	r9, r0
 8004a1e:	b148      	cbz	r0, 8004a34 <crypto_secretbox_open_detached+0x56>
 8004a20:	2120      	movs	r1, #32
 8004a22:	4640      	mov	r0, r8
 8004a24:	f000 fa1f 	bl	8004e66 <sodium_memzero>
 8004a28:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004a2c:	4648      	mov	r0, r9
 8004a2e:	b021      	add	sp, #132	; 0x84
 8004a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a34:	2d00      	cmp	r5, #0
 8004a36:	d0f9      	beq.n	8004a2c <crypto_secretbox_open_detached+0x4e>
 8004a38:	42ac      	cmp	r4, r5
 8004a3a:	d309      	bcc.n	8004a50 <crypto_secretbox_open_detached+0x72>
 8004a3c:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8004a40:	2300      	movs	r3, #0
 8004a42:	1b62      	subs	r2, r4, r5
 8004a44:	428b      	cmp	r3, r1
 8004a46:	bf08      	it	eq
 8004a48:	4282      	cmpeq	r2, r0
 8004a4a:	d309      	bcc.n	8004a60 <crypto_secretbox_open_detached+0x82>
 8004a4c:	42ac      	cmp	r4, r5
 8004a4e:	d80d      	bhi.n	8004a6c <crypto_secretbox_open_detached+0x8e>
 8004a50:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8004a54:	2300      	movs	r3, #0
 8004a56:	1b2a      	subs	r2, r5, r4
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	bf08      	it	eq
 8004a5c:	4282      	cmpeq	r2, r0
 8004a5e:	d205      	bcs.n	8004a6c <crypto_secretbox_open_detached+0x8e>
 8004a60:	4621      	mov	r1, r4
 8004a62:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8004a64:	4628      	mov	r0, r5
 8004a66:	f006 f821 	bl	800aaac <memmove>
 8004a6a:	462c      	mov	r4, r5
 8004a6c:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	bf08      	it	eq
 8004a74:	2a21      	cmpeq	r2, #33	; 0x21
 8004a76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a7a:	d303      	bcc.n	8004a84 <crypto_secretbox_open_detached+0xa6>
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a84:	f8dd b018 	ldr.w	fp, [sp, #24]
 8004a88:	f10d 085f 	add.w	r8, sp, #95	; 0x5f
 8004a8c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004a90:	1e62      	subs	r2, r4, #1
 8004a92:	4423      	add	r3, r4
 8004a94:	4641      	mov	r1, r8
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d134      	bne.n	8004b04 <crypto_secretbox_open_detached+0x126>
 8004a9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a9e:	ae10      	add	r6, sp, #64	; 0x40
 8004aa0:	3220      	adds	r2, #32
 8004aa2:	f10d 0a20 	add.w	sl, sp, #32
 8004aa6:	f143 0300 	adc.w	r3, r3, #0
 8004aaa:	4631      	mov	r1, r6
 8004aac:	4630      	mov	r0, r6
 8004aae:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004ab2:	f000 f863 	bl	8004b7c <crypto_stream_salsa20_xor>
 8004ab6:	f10b 021f 	add.w	r2, fp, #31
 8004aba:	1e6b      	subs	r3, r5, #1
 8004abc:	4416      	add	r6, r2
 8004abe:	45b0      	cmp	r8, r6
 8004ac0:	d125      	bne.n	8004b0e <crypto_secretbox_open_detached+0x130>
 8004ac2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ac6:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8004aca:	428b      	cmp	r3, r1
 8004acc:	bf08      	it	eq
 8004ace:	4282      	cmpeq	r2, r0
 8004ad0:	d213      	bcs.n	8004afa <crypto_secretbox_open_detached+0x11c>
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ae2:	1a12      	subs	r2, r2, r0
 8004ae4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ae8:	f8cd a010 	str.w	sl, [sp, #16]
 8004aec:	9700      	str	r7, [sp, #0]
 8004aee:	eb04 010b 	add.w	r1, r4, fp
 8004af2:	eb05 000b 	add.w	r0, r5, fp
 8004af6:	f000 f837 	bl	8004b68 <crypto_stream_salsa20_xor_ic>
 8004afa:	2120      	movs	r1, #32
 8004afc:	4650      	mov	r0, sl
 8004afe:	f000 f9b2 	bl	8004e66 <sodium_memzero>
 8004b02:	e793      	b.n	8004a2c <crypto_secretbox_open_detached+0x4e>
 8004b04:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8004b08:	f801 0f01 	strb.w	r0, [r1, #1]!
 8004b0c:	e7c3      	b.n	8004a96 <crypto_secretbox_open_detached+0xb8>
 8004b0e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8004b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b16:	e7d2      	b.n	8004abe <crypto_secretbox_open_detached+0xe0>

08004b18 <crypto_secretbox_open_easy>:
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf08      	it	eq
 8004b1c:	2a10      	cmpeq	r2, #16
 8004b1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b20:	d30e      	bcc.n	8004b40 <crypto_secretbox_open_easy+0x28>
 8004b22:	3a10      	subs	r2, #16
 8004b24:	9c07      	ldr	r4, [sp, #28]
 8004b26:	9403      	str	r4, [sp, #12]
 8004b28:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8004b2c:	9c06      	ldr	r4, [sp, #24]
 8004b2e:	9402      	str	r4, [sp, #8]
 8004b30:	e9cd 2300 	strd	r2, r3, [sp]
 8004b34:	460a      	mov	r2, r1
 8004b36:	3110      	adds	r1, #16
 8004b38:	f7ff ff51 	bl	80049de <crypto_secretbox_open_detached>
 8004b3c:	b004      	add	sp, #16
 8004b3e:	bd10      	pop	{r4, pc}
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b44:	e7fa      	b.n	8004b3c <crypto_secretbox_open_easy+0x24>

08004b46 <crypto_stream_salsa20_keybytes>:
 8004b46:	2020      	movs	r0, #32
 8004b48:	4770      	bx	lr

08004b4a <crypto_stream_salsa20_noncebytes>:
 8004b4a:	2008      	movs	r0, #8
 8004b4c:	4770      	bx	lr

08004b4e <crypto_stream_salsa20_messagebytes_max>:
 8004b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b52:	4770      	bx	lr

08004b54 <crypto_stream_salsa20>:
 8004b54:	b410      	push	{r4}
 8004b56:	4903      	ldr	r1, [pc, #12]	; (8004b64 <crypto_stream_salsa20+0x10>)
 8004b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b5c:	4479      	add	r1, pc
 8004b5e:	6809      	ldr	r1, [r1, #0]
 8004b60:	6809      	ldr	r1, [r1, #0]
 8004b62:	4708      	bx	r1
 8004b64:	17ffc2dc 	.word	0x17ffc2dc

08004b68 <crypto_stream_salsa20_xor_ic>:
 8004b68:	b4f0      	push	{r4, r5, r6, r7}
 8004b6a:	4c03      	ldr	r4, [pc, #12]	; (8004b78 <crypto_stream_salsa20_xor_ic+0x10>)
 8004b6c:	447c      	add	r4, pc
 8004b6e:	6824      	ldr	r4, [r4, #0]
 8004b70:	6864      	ldr	r4, [r4, #4]
 8004b72:	46a4      	mov	ip, r4
 8004b74:	bcf0      	pop	{r4, r5, r6, r7}
 8004b76:	4760      	bx	ip
 8004b78:	17ffc2cc 	.word	0x17ffc2cc

08004b7c <crypto_stream_salsa20_xor>:
 8004b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7e:	4c08      	ldr	r4, [pc, #32]	; (8004ba0 <crypto_stream_salsa20_xor+0x24>)
 8004b80:	b087      	sub	sp, #28
 8004b82:	447c      	add	r4, pc
 8004b84:	2600      	movs	r6, #0
 8004b86:	2700      	movs	r7, #0
 8004b88:	6824      	ldr	r4, [r4, #0]
 8004b8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004b8c:	9504      	str	r5, [sp, #16]
 8004b8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b94:	9500      	str	r5, [sp, #0]
 8004b96:	6864      	ldr	r4, [r4, #4]
 8004b98:	47a0      	blx	r4
 8004b9a:	b007      	add	sp, #28
 8004b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	17ffc2b6 	.word	0x17ffc2b6

08004ba4 <crypto_stream_salsa20_keygen>:
 8004ba4:	2120      	movs	r1, #32
 8004ba6:	f000 b873 	b.w	8004c90 <randombytes_buf>
	...

08004bac <_crypto_stream_salsa20_pick_best_implementation>:
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <_crypto_stream_salsa20_pick_best_implementation+0x14>)
 8004bae:	4a05      	ldr	r2, [pc, #20]	; (8004bc4 <_crypto_stream_salsa20_pick_best_implementation+0x18>)
 8004bb0:	447b      	add	r3, pc
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	589a      	ldr	r2, [r3, r2]
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <_crypto_stream_salsa20_pick_best_implementation+0x1c>)
 8004bb8:	447b      	add	r3, pc
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	17ffc2e8 	.word	0x17ffc2e8
 8004bc4:	00000000 	.word	0x00000000
 8004bc8:	17ffc280 	.word	0x17ffc280

08004bcc <randombytes_set_implementation>:
 8004bcc:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <randombytes_set_implementation+0xc>)
 8004bce:	447b      	add	r3, pc
 8004bd0:	6018      	str	r0, [r3, #0]
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	17ffc32e 	.word	0x17ffc32e

08004bdc <randombytes_stir>:
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	f000 f80b 	bl	8004bf8 <randombytes_init_if_needed>
 8004be2:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <randombytes_stir+0x18>)
 8004be4:	447b      	add	r3, pc
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	b113      	cbz	r3, 8004bf2 <randombytes_stir+0x16>
 8004bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf0:	4718      	bx	r3
 8004bf2:	bd10      	pop	{r4, pc}
 8004bf4:	17ffc318 	.word	0x17ffc318

08004bf8 <randombytes_init_if_needed>:
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <randombytes_init_if_needed+0x18>)
 8004bfa:	4a06      	ldr	r2, [pc, #24]	; (8004c14 <randombytes_init_if_needed+0x1c>)
 8004bfc:	447b      	add	r3, pc
 8004bfe:	447a      	add	r2, pc
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	b921      	cbnz	r1, 8004c0e <randombytes_init_if_needed+0x16>
 8004c04:	4904      	ldr	r1, [pc, #16]	; (8004c18 <randombytes_init_if_needed+0x20>)
 8004c06:	5852      	ldr	r2, [r2, r1]
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	f7ff bfe7 	b.w	8004bdc <randombytes_stir>
 8004c0e:	4770      	bx	lr
 8004c10:	17ffc300 	.word	0x17ffc300
 8004c14:	17ffc29a 	.word	0x17ffc29a
 8004c18:	0000000c 	.word	0x0000000c

08004c1c <randombytes_implementation_name>:
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	f7ff ffeb 	bl	8004bf8 <randombytes_init_if_needed>
 8004c22:	4b03      	ldr	r3, [pc, #12]	; (8004c30 <randombytes_implementation_name+0x14>)
 8004c24:	447b      	add	r3, pc
 8004c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4718      	bx	r3
 8004c30:	17ffc2d8 	.word	0x17ffc2d8

08004c34 <randombytes_random>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	f7ff ffdf 	bl	8004bf8 <randombytes_init_if_needed>
 8004c3a:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <randombytes_random+0x14>)
 8004c3c:	447b      	add	r3, pc
 8004c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4718      	bx	r3
 8004c48:	17ffc2c0 	.word	0x17ffc2c0

08004c4c <randombytes_uniform>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	4604      	mov	r4, r0
 8004c50:	f7ff ffd2 	bl	8004bf8 <randombytes_init_if_needed>
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <randombytes_uniform+0x40>)
 8004c56:	447b      	add	r3, pc
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	b11b      	cbz	r3, 8004c66 <randombytes_uniform+0x1a>
 8004c5e:	4620      	mov	r0, r4
 8004c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c64:	4718      	bx	r3
 8004c66:	2c01      	cmp	r4, #1
 8004c68:	d90d      	bls.n	8004c86 <randombytes_uniform+0x3a>
 8004c6a:	4263      	negs	r3, r4
 8004c6c:	fbb3 f5f4 	udiv	r5, r3, r4
 8004c70:	fb04 3515 	mls	r5, r4, r5, r3
 8004c74:	f7ff ffde 	bl	8004c34 <randombytes_random>
 8004c78:	4285      	cmp	r5, r0
 8004c7a:	d8fb      	bhi.n	8004c74 <randombytes_uniform+0x28>
 8004c7c:	fbb0 f3f4 	udiv	r3, r0, r4
 8004c80:	fb04 0013 	mls	r0, r4, r3, r0
 8004c84:	bd70      	pop	{r4, r5, r6, pc}
 8004c86:	4618      	mov	r0, r3
 8004c88:	bd70      	pop	{r4, r5, r6, pc}
 8004c8a:	bf00      	nop
 8004c8c:	17ffc2a6 	.word	0x17ffc2a6

08004c90 <randombytes_buf>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	460c      	mov	r4, r1
 8004c94:	4605      	mov	r5, r0
 8004c96:	f7ff ffaf 	bl	8004bf8 <randombytes_init_if_needed>
 8004c9a:	b144      	cbz	r4, 8004cae <randombytes_buf+0x1e>
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <randombytes_buf+0x20>)
 8004c9e:	447b      	add	r3, pc
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cac:	4718      	bx	r3
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	17ffc25e 	.word	0x17ffc25e

08004cb4 <randombytes_buf_deterministic>:
 8004cb4:	b507      	push	{r0, r1, r2, lr}
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <randombytes_buf_deterministic+0x18>)
 8004cb8:	9201      	str	r2, [sp, #4]
 8004cba:	447b      	add	r3, pc
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	460a      	mov	r2, r1
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f001 fc23 	bl	800650c <crypto_stream_chacha20_ietf>
 8004cc6:	b003      	add	sp, #12
 8004cc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ccc:	00008fd4 	.word	0x00008fd4

08004cd0 <randombytes_seedbytes>:
 8004cd0:	2020      	movs	r0, #32
 8004cd2:	4770      	bx	lr

08004cd4 <randombytes_close>:
 8004cd4:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <randombytes_close+0x14>)
 8004cd6:	447b      	add	r3, pc
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	b113      	cbz	r3, 8004ce2 <randombytes_close+0xe>
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	b103      	cbz	r3, 8004ce2 <randombytes_close+0xe>
 8004ce0:	4718      	bx	r3
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	17ffc226 	.word	0x17ffc226

08004cec <randombytes>:
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	bf08      	it	eq
 8004cf0:	2a00      	cmpeq	r2, #0
 8004cf2:	b508      	push	{r3, lr}
 8004cf4:	d309      	bcc.n	8004d0a <randombytes+0x1e>
 8004cf6:	4a07      	ldr	r2, [pc, #28]	; (8004d14 <randombytes+0x28>)
 8004cf8:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <randombytes+0x2c>)
 8004cfa:	4808      	ldr	r0, [pc, #32]	; (8004d1c <randombytes+0x30>)
 8004cfc:	447a      	add	r2, pc
 8004cfe:	447b      	add	r3, pc
 8004d00:	320c      	adds	r2, #12
 8004d02:	21cc      	movs	r1, #204	; 0xcc
 8004d04:	4478      	add	r0, pc
 8004d06:	f005 facb 	bl	800a2a0 <__assert_func>
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d10:	f7ff bfbe 	b.w	8004c90 <randombytes_buf>
 8004d14:	00008f92 	.word	0x00008f92
 8004d18:	00008fa8 	.word	0x00008fa8
 8004d1c:	00008fb6 	.word	0x00008fb6

08004d20 <sodium_crit_enter>:
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <sodium_crit_enter+0x1c>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	447b      	add	r3, pc
 8004d26:	e853 0f00 	ldrex	r0, [r3]
 8004d2a:	e843 2100 	strex	r1, r2, [r3]
 8004d2e:	2900      	cmp	r1, #0
 8004d30:	d1f9      	bne.n	8004d26 <sodium_crit_enter+0x6>
 8004d32:	f3bf 8f5b 	dmb	ish
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d1f5      	bne.n	8004d26 <sodium_crit_enter+0x6>
 8004d3a:	4770      	bx	lr
 8004d3c:	17ffc1dc 	.word	0x17ffc1dc

08004d40 <sodium_init>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	f7ff ffed 	bl	8004d20 <sodium_crit_enter>
 8004d46:	4604      	mov	r4, r0
 8004d48:	b9a8      	cbnz	r0, 8004d76 <sodium_init+0x36>
 8004d4a:	4d0c      	ldr	r5, [pc, #48]	; (8004d7c <sodium_init+0x3c>)
 8004d4c:	447d      	add	r5, pc
 8004d4e:	2601      	movs	r6, #1
 8004d50:	686b      	ldr	r3, [r5, #4]
 8004d52:	b12b      	cbz	r3, 8004d60 <sodium_init+0x20>
 8004d54:	f3bf 8f5b 	dmb	ish
 8004d58:	4634      	mov	r4, r6
 8004d5a:	6028      	str	r0, [r5, #0]
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	f000 f83a 	bl	8004dd8 <_sodium_runtime_get_cpu_features>
 8004d64:	f7ff ff3a 	bl	8004bdc <randombytes_stir>
 8004d68:	f000 f900 	bl	8004f6c <_sodium_alloc_init>
 8004d6c:	606e      	str	r6, [r5, #4]
 8004d6e:	f3bf 8f5b 	dmb	ish
 8004d72:	602c      	str	r4, [r5, #0]
 8004d74:	e7f2      	b.n	8004d5c <sodium_init+0x1c>
 8004d76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004d7a:	e7ef      	b.n	8004d5c <sodium_init+0x1c>
 8004d7c:	17ffc1b4 	.word	0x17ffc1b4

08004d80 <sodium_crit_leave>:
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <sodium_crit_leave+0x10>)
 8004d82:	f3bf 8f5b 	dmb	ish
 8004d86:	447b      	add	r3, pc
 8004d88:	2000      	movs	r0, #0
 8004d8a:	6018      	str	r0, [r3, #0]
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	17ffc17a 	.word	0x17ffc17a

08004d94 <sodium_misuse>:
 8004d94:	b508      	push	{r3, lr}
 8004d96:	f7ff ffc3 	bl	8004d20 <sodium_crit_enter>
 8004d9a:	b938      	cbnz	r0, 8004dac <sodium_misuse+0x18>
 8004d9c:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <sodium_misuse+0x1c>)
 8004d9e:	447a      	add	r2, pc
 8004da0:	6893      	ldr	r3, [r2, #8]
 8004da2:	f3bf 8f5b 	dmb	ish
 8004da6:	6010      	str	r0, [r2, #0]
 8004da8:	b103      	cbz	r3, 8004dac <sodium_misuse+0x18>
 8004daa:	4798      	blx	r3
 8004dac:	f005 fa70 	bl	800a290 <abort>
 8004db0:	17ffc162 	.word	0x17ffc162

08004db4 <sodium_set_misuse_handler>:
 8004db4:	b510      	push	{r4, lr}
 8004db6:	4604      	mov	r4, r0
 8004db8:	f7ff ffb2 	bl	8004d20 <sodium_crit_enter>
 8004dbc:	b930      	cbnz	r0, 8004dcc <sodium_set_misuse_handler+0x18>
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <sodium_set_misuse_handler+0x20>)
 8004dc0:	447b      	add	r3, pc
 8004dc2:	609c      	str	r4, [r3, #8]
 8004dc4:	f3bf 8f5b 	dmb	ish
 8004dc8:	6018      	str	r0, [r3, #0]
 8004dca:	bd10      	pop	{r4, pc}
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dd0:	bd10      	pop	{r4, pc}
 8004dd2:	bf00      	nop
 8004dd4:	17ffc140 	.word	0x17ffc140

08004dd8 <_sodium_runtime_get_cpu_features>:
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <_sodium_runtime_get_cpu_features+0x10>)
 8004dda:	447b      	add	r3, pc
 8004ddc:	2000      	movs	r0, #0
 8004dde:	2201      	movs	r2, #1
 8004de0:	6058      	str	r0, [r3, #4]
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	17ffc132 	.word	0x17ffc132

08004dec <sodium_runtime_has_neon>:
 8004dec:	4b01      	ldr	r3, [pc, #4]	; (8004df4 <sodium_runtime_has_neon+0x8>)
 8004dee:	447b      	add	r3, pc
 8004df0:	6858      	ldr	r0, [r3, #4]
 8004df2:	4770      	bx	lr
 8004df4:	17ffc11e 	.word	0x17ffc11e

08004df8 <sodium_runtime_has_sse2>:
 8004df8:	4b01      	ldr	r3, [pc, #4]	; (8004e00 <sodium_runtime_has_sse2+0x8>)
 8004dfa:	447b      	add	r3, pc
 8004dfc:	6898      	ldr	r0, [r3, #8]
 8004dfe:	4770      	bx	lr
 8004e00:	17ffc112 	.word	0x17ffc112

08004e04 <sodium_runtime_has_sse3>:
 8004e04:	4b01      	ldr	r3, [pc, #4]	; (8004e0c <sodium_runtime_has_sse3+0x8>)
 8004e06:	447b      	add	r3, pc
 8004e08:	68d8      	ldr	r0, [r3, #12]
 8004e0a:	4770      	bx	lr
 8004e0c:	17ffc106 	.word	0x17ffc106

08004e10 <sodium_runtime_has_ssse3>:
 8004e10:	4b01      	ldr	r3, [pc, #4]	; (8004e18 <sodium_runtime_has_ssse3+0x8>)
 8004e12:	447b      	add	r3, pc
 8004e14:	6918      	ldr	r0, [r3, #16]
 8004e16:	4770      	bx	lr
 8004e18:	17ffc0fa 	.word	0x17ffc0fa

08004e1c <sodium_runtime_has_sse41>:
 8004e1c:	4b01      	ldr	r3, [pc, #4]	; (8004e24 <sodium_runtime_has_sse41+0x8>)
 8004e1e:	447b      	add	r3, pc
 8004e20:	6958      	ldr	r0, [r3, #20]
 8004e22:	4770      	bx	lr
 8004e24:	17ffc0ee 	.word	0x17ffc0ee

08004e28 <sodium_runtime_has_avx>:
 8004e28:	4b01      	ldr	r3, [pc, #4]	; (8004e30 <sodium_runtime_has_avx+0x8>)
 8004e2a:	447b      	add	r3, pc
 8004e2c:	6998      	ldr	r0, [r3, #24]
 8004e2e:	4770      	bx	lr
 8004e30:	17ffc0e2 	.word	0x17ffc0e2

08004e34 <sodium_runtime_has_avx2>:
 8004e34:	4b01      	ldr	r3, [pc, #4]	; (8004e3c <sodium_runtime_has_avx2+0x8>)
 8004e36:	447b      	add	r3, pc
 8004e38:	69d8      	ldr	r0, [r3, #28]
 8004e3a:	4770      	bx	lr
 8004e3c:	17ffc0d6 	.word	0x17ffc0d6

08004e40 <sodium_runtime_has_avx512f>:
 8004e40:	4b01      	ldr	r3, [pc, #4]	; (8004e48 <sodium_runtime_has_avx512f+0x8>)
 8004e42:	447b      	add	r3, pc
 8004e44:	6a18      	ldr	r0, [r3, #32]
 8004e46:	4770      	bx	lr
 8004e48:	17ffc0ca 	.word	0x17ffc0ca

08004e4c <sodium_runtime_has_pclmul>:
 8004e4c:	4b01      	ldr	r3, [pc, #4]	; (8004e54 <sodium_runtime_has_pclmul+0x8>)
 8004e4e:	447b      	add	r3, pc
 8004e50:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004e52:	4770      	bx	lr
 8004e54:	17ffc0be 	.word	0x17ffc0be

08004e58 <sodium_runtime_has_aesni>:
 8004e58:	4b01      	ldr	r3, [pc, #4]	; (8004e60 <sodium_runtime_has_aesni+0x8>)
 8004e5a:	447b      	add	r3, pc
 8004e5c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004e5e:	4770      	bx	lr
 8004e60:	17ffc0b2 	.word	0x17ffc0b2

08004e64 <_sodium_dummy_symbol_to_prevent_memzero_lto>:
 8004e64:	4770      	bx	lr

08004e66 <sodium_memzero>:
 8004e66:	f005 ba7d 	b.w	800a364 <explicit_bzero>

08004e6a <_sodium_dummy_symbol_to_prevent_memcmp_lto>:
 8004e6a:	4770      	bx	lr

08004e6c <sodium_memcmp>:
 8004e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e6e:	2400      	movs	r4, #0
 8004e70:	4606      	mov	r6, r0
 8004e72:	460f      	mov	r7, r1
 8004e74:	4615      	mov	r5, r2
 8004e76:	f88d 4007 	strb.w	r4, [sp, #7]
 8004e7a:	f7ff fff6 	bl	8004e6a <_sodium_dummy_symbol_to_prevent_memcmp_lto>
 8004e7e:	4623      	mov	r3, r4
 8004e80:	42ab      	cmp	r3, r5
 8004e82:	d106      	bne.n	8004e92 <sodium_memcmp+0x26>
 8004e84:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004e88:	3801      	subs	r0, #1
 8004e8a:	0fc0      	lsrs	r0, r0, #31
 8004e8c:	3801      	subs	r0, #1
 8004e8e:	b003      	add	sp, #12
 8004e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e92:	5cf1      	ldrb	r1, [r6, r3]
 8004e94:	5cf8      	ldrb	r0, [r7, r3]
 8004e96:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004e9a:	4041      	eors	r1, r0
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	f88d 2007 	strb.w	r2, [sp, #7]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	e7ec      	b.n	8004e80 <sodium_memcmp+0x14>

08004ea6 <_sodium_dummy_symbol_to_prevent_compare_lto>:
 8004ea6:	4770      	bx	lr

08004ea8 <sodium_compare>:
 8004ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eaa:	2300      	movs	r3, #0
 8004eac:	4616      	mov	r6, r2
 8004eae:	f88d 3006 	strb.w	r3, [sp, #6]
 8004eb2:	4605      	mov	r5, r0
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f88d 3007 	strb.w	r3, [sp, #7]
 8004ebc:	f7ff fff3 	bl	8004ea6 <_sodium_dummy_symbol_to_prevent_compare_lto>
 8004ec0:	19aa      	adds	r2, r5, r6
 8004ec2:	19a1      	adds	r1, r4, r6
 8004ec4:	42aa      	cmp	r2, r5
 8004ec6:	d10a      	bne.n	8004ede <sodium_compare+0x36>
 8004ec8:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8004ecc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8004ed0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ed4:	4410      	add	r0, r2
 8004ed6:	4418      	add	r0, r3
 8004ed8:	3801      	subs	r0, #1
 8004eda:	b003      	add	sp, #12
 8004edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ede:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8004ee2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8004ee6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004eea:	f89d 6006 	ldrb.w	r6, [sp, #6]
 8004eee:	1ae7      	subs	r7, r4, r3
 8004ef0:	ea00 2027 	and.w	r0, r0, r7, asr #8
 8004ef4:	4330      	orrs	r0, r6
 8004ef6:	f88d 0006 	strb.w	r0, [sp, #6]
 8004efa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004efe:	4063      	eors	r3, r4
 8004f00:	3b01      	subs	r3, #1
 8004f02:	ea00 73e3 	and.w	r3, r0, r3, asr #31
 8004f06:	f88d 3007 	strb.w	r3, [sp, #7]
 8004f0a:	e7db      	b.n	8004ec4 <sodium_compare+0x1c>

08004f0c <sodium_is_zero>:
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f88d 3007 	strb.w	r3, [sp, #7]
 8004f14:	4401      	add	r1, r0
 8004f16:	4288      	cmp	r0, r1
 8004f18:	d105      	bne.n	8004f26 <sodium_is_zero+0x1a>
 8004f1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004f1e:	3801      	subs	r0, #1
 8004f20:	0fc0      	lsrs	r0, r0, #31
 8004f22:	b002      	add	sp, #8
 8004f24:	4770      	bx	lr
 8004f26:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004f2a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f88d 3007 	strb.w	r3, [sp, #7]
 8004f34:	e7ef      	b.n	8004f16 <sodium_is_zero+0xa>

08004f36 <sodium_increment>:
 8004f36:	4401      	add	r1, r0
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4288      	cmp	r0, r1
 8004f3c:	d100      	bne.n	8004f40 <sodium_increment+0xa>
 8004f3e:	4770      	bx	lr
 8004f40:	7802      	ldrb	r2, [r0, #0]
 8004f42:	4413      	add	r3, r2
 8004f44:	f800 3b01 	strb.w	r3, [r0], #1
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	e7f6      	b.n	8004f3a <sodium_increment+0x4>

08004f4c <sodium_add>:
 8004f4c:	b530      	push	{r4, r5, lr}
 8004f4e:	3901      	subs	r1, #1
 8004f50:	4402      	add	r2, r0
 8004f52:	2300      	movs	r3, #0
 8004f54:	4290      	cmp	r0, r2
 8004f56:	d100      	bne.n	8004f5a <sodium_add+0xe>
 8004f58:	bd30      	pop	{r4, r5, pc}
 8004f5a:	7804      	ldrb	r4, [r0, #0]
 8004f5c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8004f60:	442c      	add	r4, r5
 8004f62:	4423      	add	r3, r4
 8004f64:	f800 3b01 	strb.w	r3, [r0], #1
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	e7f3      	b.n	8004f54 <sodium_add+0x8>

08004f6c <_sodium_alloc_init>:
 8004f6c:	b508      	push	{r3, lr}
 8004f6e:	4803      	ldr	r0, [pc, #12]	; (8004f7c <_sodium_alloc_init+0x10>)
 8004f70:	2110      	movs	r1, #16
 8004f72:	4478      	add	r0, pc
 8004f74:	f7ff fe8c 	bl	8004c90 <randombytes_buf>
 8004f78:	2000      	movs	r0, #0
 8004f7a:	bd08      	pop	{r3, pc}
 8004f7c:	17ffbfc6 	.word	0x17ffbfc6

08004f80 <sodium_mlock>:
 8004f80:	b508      	push	{r3, lr}
 8004f82:	f005 f9e9 	bl	800a358 <__errno>
 8004f86:	2358      	movs	r3, #88	; 0x58
 8004f88:	6003      	str	r3, [r0, #0]
 8004f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f8e:	bd08      	pop	{r3, pc}

08004f90 <sodium_munlock>:
 8004f90:	b508      	push	{r3, lr}
 8004f92:	f005 f9e7 	bl	800a364 <explicit_bzero>
 8004f96:	f005 f9df 	bl	800a358 <__errno>
 8004f9a:	2358      	movs	r3, #88	; 0x58
 8004f9c:	6003      	str	r3, [r0, #0]
 8004f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fa2:	bd08      	pop	{r3, pc}

08004fa4 <sodium_malloc>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4605      	mov	r5, r0
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	bf08      	it	eq
 8004fac:	2001      	moveq	r0, #1
 8004fae:	f005 fa21 	bl	800a3f4 <malloc>
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	b118      	cbz	r0, 8004fbe <sodium_malloc+0x1a>
 8004fb6:	462a      	mov	r2, r5
 8004fb8:	21db      	movs	r1, #219	; 0xdb
 8004fba:	f005 fddf 	bl	800ab7c <memset>
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	bd38      	pop	{r3, r4, r5, pc}

08004fc2 <sodium_allocarray>:
 8004fc2:	b508      	push	{r3, lr}
 8004fc4:	b128      	cbz	r0, 8004fd2 <sodium_allocarray+0x10>
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fca:	fbb3 f3f0 	udiv	r3, r3, r0
 8004fce:	428b      	cmp	r3, r1
 8004fd0:	d904      	bls.n	8004fdc <sodium_allocarray+0x1a>
 8004fd2:	4348      	muls	r0, r1
 8004fd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004fd8:	f7ff bfe4 	b.w	8004fa4 <sodium_malloc>
 8004fdc:	f005 f9bc 	bl	800a358 <__errno>
 8004fe0:	230c      	movs	r3, #12
 8004fe2:	6003      	str	r3, [r0, #0]
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	bd08      	pop	{r3, pc}

08004fe8 <sodium_free>:
 8004fe8:	f005 ba0c 	b.w	800a404 <free>

08004fec <sodium_mprotect_noaccess>:
 8004fec:	b508      	push	{r3, lr}
 8004fee:	f005 f9b3 	bl	800a358 <__errno>
 8004ff2:	2358      	movs	r3, #88	; 0x58
 8004ff4:	6003      	str	r3, [r0, #0]
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ffa:	bd08      	pop	{r3, pc}

08004ffc <sodium_mprotect_readonly>:
 8004ffc:	b508      	push	{r3, lr}
 8004ffe:	f005 f9ab 	bl	800a358 <__errno>
 8005002:	2358      	movs	r3, #88	; 0x58
 8005004:	6003      	str	r3, [r0, #0]
 8005006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800500a:	bd08      	pop	{r3, pc}

0800500c <sodium_mprotect_readwrite>:
 800500c:	b508      	push	{r3, lr}
 800500e:	f005 f9a3 	bl	800a358 <__errno>
 8005012:	2358      	movs	r3, #88	; 0x58
 8005014:	6003      	str	r3, [r0, #0]
 8005016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800501a:	bd08      	pop	{r3, pc}

0800501c <sodium_pad>:
 800501c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800501e:	b393      	cbz	r3, 8005086 <sodium_pad+0x6a>
 8005020:	1e5c      	subs	r4, r3, #1
 8005022:	4223      	tst	r3, r4
 8005024:	ea6f 0602 	mvn.w	r6, r2
 8005028:	bf1b      	ittet	ne
 800502a:	fbb2 f5f3 	udivne	r5, r2, r3
 800502e:	fb03 2515 	mlsne	r5, r3, r5, r2
 8005032:	4034      	andeq	r4, r6
 8005034:	1b64      	subne	r4, r4, r5
 8005036:	42b4      	cmp	r4, r6
 8005038:	d301      	bcc.n	800503e <sodium_pad+0x22>
 800503a:	f7ff feab 	bl	8004d94 <sodium_misuse>
 800503e:	9d06      	ldr	r5, [sp, #24]
 8005040:	4422      	add	r2, r4
 8005042:	42aa      	cmp	r2, r5
 8005044:	d21f      	bcs.n	8005086 <sodium_pad+0x6a>
 8005046:	b108      	cbz	r0, 800504c <sodium_pad+0x30>
 8005048:	1c55      	adds	r5, r2, #1
 800504a:	6005      	str	r5, [r0, #0]
 800504c:	2500      	movs	r5, #0
 800504e:	f88d 5007 	strb.w	r5, [sp, #7]
 8005052:	440a      	add	r2, r1
 8005054:	ea84 0005 	eor.w	r0, r4, r5
 8005058:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800505c:	7816      	ldrb	r6, [r2, #0]
 800505e:	3801      	subs	r0, #1
 8005060:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8005064:	4031      	ands	r1, r6
 8005066:	f020 067f 	bic.w	r6, r0, #127	; 0x7f
 800506a:	4331      	orrs	r1, r6
 800506c:	f802 1901 	strb.w	r1, [r2], #-1
 8005070:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005074:	3501      	adds	r5, #1
 8005076:	4308      	orrs	r0, r1
 8005078:	42ab      	cmp	r3, r5
 800507a:	f88d 0007 	strb.w	r0, [sp, #7]
 800507e:	d1e9      	bne.n	8005054 <sodium_pad+0x38>
 8005080:	2000      	movs	r0, #0
 8005082:	b002      	add	sp, #8
 8005084:	bd70      	pop	{r4, r5, r6, pc}
 8005086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800508a:	e7fa      	b.n	8005082 <sodium_pad+0x66>

0800508c <sodium_unpad>:
 800508c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800508e:	429a      	cmp	r2, r3
 8005090:	f04f 0500 	mov.w	r5, #0
 8005094:	9501      	str	r5, [sp, #4]
 8005096:	d325      	bcc.n	80050e4 <sodium_unpad+0x58>
 8005098:	b323      	cbz	r3, 80050e4 <sodium_unpad+0x58>
 800509a:	4411      	add	r1, r2
 800509c:	462e      	mov	r6, r5
 800509e:	46ae      	mov	lr, r5
 80050a0:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 80050a4:	9f01      	ldr	r7, [sp, #4]
 80050a6:	f08c 0480 	eor.w	r4, ip, #128	; 0x80
 80050aa:	3f01      	subs	r7, #1
 80050ac:	3c01      	subs	r4, #1
 80050ae:	403c      	ands	r4, r7
 80050b0:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
 80050b4:	403c      	ands	r4, r7
 80050b6:	f3c4 2400 	ubfx	r4, r4, #8, #1
 80050ba:	ea4c 0e0e 	orr.w	lr, ip, lr
 80050be:	4267      	negs	r7, r4
 80050c0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80050c4:	402f      	ands	r7, r5
 80050c6:	3501      	adds	r5, #1
 80050c8:	ea47 070c 	orr.w	r7, r7, ip
 80050cc:	42ab      	cmp	r3, r5
 80050ce:	9701      	str	r7, [sp, #4]
 80050d0:	ea46 0604 	orr.w	r6, r6, r4
 80050d4:	d1e4      	bne.n	80050a0 <sodium_unpad+0x14>
 80050d6:	9b01      	ldr	r3, [sp, #4]
 80050d8:	43db      	mvns	r3, r3
 80050da:	441a      	add	r2, r3
 80050dc:	6002      	str	r2, [r0, #0]
 80050de:	1e70      	subs	r0, r6, #1
 80050e0:	b003      	add	sp, #12
 80050e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050e8:	e7fa      	b.n	80050e0 <sodium_unpad+0x54>
	...

080050ec <randombytes_sysrandom_implementation_name>:
 80050ec:	4801      	ldr	r0, [pc, #4]	; (80050f4 <randombytes_sysrandom_implementation_name+0x8>)
 80050ee:	4478      	add	r0, pc
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	00008bf0 	.word	0x00008bf0

080050f8 <randombytes_sysrandom_close>:
 80050f8:	b510      	push	{r4, lr}
 80050fa:	4c08      	ldr	r4, [pc, #32]	; (800511c <randombytes_sysrandom_close+0x24>)
 80050fc:	447c      	add	r4, pc
 80050fe:	6820      	ldr	r0, [r4, #0]
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d102      	bne.n	800510a <randombytes_sysrandom_close+0x12>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005108:	bd10      	pop	{r4, pc}
 800510a:	f005 ff07 	bl	800af1c <close>
 800510e:	2800      	cmp	r0, #0
 8005110:	d1f8      	bne.n	8005104 <randombytes_sysrandom_close+0xc>
 8005112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	6060      	str	r0, [r4, #4]
 800511a:	bd10      	pop	{r4, pc}
 800511c:	17ffb380 	.word	0x17ffb380

08005120 <randombytes_sysrandom_stir>:
 8005120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005122:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <randombytes_sysrandom_stir+0x94>)
 8005124:	447b      	add	r3, pc
 8005126:	b091      	sub	sp, #68	; 0x44
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d140      	bne.n	80051b0 <randombytes_sysrandom_stir+0x90>
 800512e:	f005 f913 	bl	800a358 <__errno>
 8005132:	4d21      	ldr	r5, [pc, #132]	; (80051b8 <randombytes_sysrandom_stir+0x98>)
 8005134:	6806      	ldr	r6, [r0, #0]
 8005136:	447d      	add	r5, pc
 8005138:	af01      	add	r7, sp, #4
 800513a:	2100      	movs	r1, #0
 800513c:	6828      	ldr	r0, [r5, #0]
 800513e:	f005 ff05 	bl	800af4c <open>
 8005142:	1c43      	adds	r3, r0, #1
 8005144:	4604      	mov	r4, r0
 8005146:	d01f      	beq.n	8005188 <randombytes_sysrandom_stir+0x68>
 8005148:	4639      	mov	r1, r7
 800514a:	f005 fef7 	bl	800af3c <fstat>
 800514e:	b9b0      	cbnz	r0, 800517e <randombytes_sysrandom_stir+0x5e>
 8005150:	9b02      	ldr	r3, [sp, #8]
 8005152:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515a:	d110      	bne.n	800517e <randombytes_sysrandom_stir+0x5e>
 800515c:	2101      	movs	r1, #1
 800515e:	4620      	mov	r0, r4
 8005160:	f005 fee4 	bl	800af2c <fcntl>
 8005164:	2102      	movs	r1, #2
 8005166:	f040 0201 	orr.w	r2, r0, #1
 800516a:	4620      	mov	r0, r4
 800516c:	f005 fede 	bl	800af2c <fcntl>
 8005170:	4d12      	ldr	r5, [pc, #72]	; (80051bc <randombytes_sysrandom_stir+0x9c>)
 8005172:	447d      	add	r5, pc
 8005174:	602c      	str	r4, [r5, #0]
 8005176:	3401      	adds	r4, #1
 8005178:	d115      	bne.n	80051a6 <randombytes_sysrandom_stir+0x86>
 800517a:	f7ff fe0b 	bl	8004d94 <sodium_misuse>
 800517e:	4620      	mov	r0, r4
 8005180:	f005 fecc 	bl	800af1c <close>
 8005184:	3504      	adds	r5, #4
 8005186:	e004      	b.n	8005192 <randombytes_sysrandom_stir+0x72>
 8005188:	f005 f8e6 	bl	800a358 <__errno>
 800518c:	6803      	ldr	r3, [r0, #0]
 800518e:	2b04      	cmp	r3, #4
 8005190:	d1f8      	bne.n	8005184 <randombytes_sysrandom_stir+0x64>
 8005192:	682b      	ldr	r3, [r5, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1d0      	bne.n	800513a <randombytes_sysrandom_stir+0x1a>
 8005198:	f005 f8de 	bl	800a358 <__errno>
 800519c:	2305      	movs	r3, #5
 800519e:	6003      	str	r3, [r0, #0]
 80051a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051a4:	e7e4      	b.n	8005170 <randombytes_sysrandom_stir+0x50>
 80051a6:	f005 f8d7 	bl	800a358 <__errno>
 80051aa:	2301      	movs	r3, #1
 80051ac:	6006      	str	r6, [r0, #0]
 80051ae:	606b      	str	r3, [r5, #4]
 80051b0:	b011      	add	sp, #68	; 0x44
 80051b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051b4:	17ffb358 	.word	0x17ffb358
 80051b8:	17ffbd06 	.word	0x17ffbd06
 80051bc:	17ffb30a 	.word	0x17ffb30a

080051c0 <randombytes_sysrandom_buf>:
 80051c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c4:	4b22      	ldr	r3, [pc, #136]	; (8005250 <randombytes_sysrandom_buf+0x90>)
 80051c6:	447b      	add	r3, pc
 80051c8:	4680      	mov	r8, r0
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	460e      	mov	r6, r1
 80051ce:	b90b      	cbnz	r3, 80051d4 <randombytes_sysrandom_buf+0x14>
 80051d0:	f7ff ffa6 	bl	8005120 <randombytes_sysrandom_stir>
 80051d4:	4b1f      	ldr	r3, [pc, #124]	; (8005254 <randombytes_sysrandom_buf+0x94>)
 80051d6:	447b      	add	r3, pc
 80051d8:	f8d3 9000 	ldr.w	r9, [r3]
 80051dc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80051e0:	d101      	bne.n	80051e6 <randombytes_sysrandom_buf+0x26>
 80051e2:	f7ff fdd7 	bl	8004d94 <sodium_misuse>
 80051e6:	b946      	cbnz	r6, 80051fa <randombytes_sysrandom_buf+0x3a>
 80051e8:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <randombytes_sysrandom_buf+0x98>)
 80051ea:	4a1c      	ldr	r2, [pc, #112]	; (800525c <randombytes_sysrandom_buf+0x9c>)
 80051ec:	481c      	ldr	r0, [pc, #112]	; (8005260 <randombytes_sysrandom_buf+0xa0>)
 80051ee:	447b      	add	r3, pc
 80051f0:	447a      	add	r2, pc
 80051f2:	2170      	movs	r1, #112	; 0x70
 80051f4:	4478      	add	r0, pc
 80051f6:	f005 f853 	bl	800a2a0 <__assert_func>
 80051fa:	4b14      	ldr	r3, [pc, #80]	; (800524c <randombytes_sysrandom_buf+0x8c>)
 80051fc:	429e      	cmp	r6, r3
 80051fe:	d816      	bhi.n	800522e <randombytes_sysrandom_buf+0x6e>
 8005200:	4645      	mov	r5, r8
 8005202:	4637      	mov	r7, r6
 8005204:	463a      	mov	r2, r7
 8005206:	4629      	mov	r1, r5
 8005208:	4648      	mov	r0, r9
 800520a:	f005 feb3 	bl	800af74 <read>
 800520e:	1e04      	subs	r4, r0, #0
 8005210:	da15      	bge.n	800523e <randombytes_sysrandom_buf+0x7e>
 8005212:	f005 f8a1 	bl	800a358 <__errno>
 8005216:	6803      	ldr	r3, [r0, #0]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d0f3      	beq.n	8005204 <randombytes_sysrandom_buf+0x44>
 800521c:	f005 f89c 	bl	800a358 <__errno>
 8005220:	6803      	ldr	r3, [r0, #0]
 8005222:	2b0b      	cmp	r3, #11
 8005224:	d0ee      	beq.n	8005204 <randombytes_sysrandom_buf+0x44>
 8005226:	42a6      	cmp	r6, r4
 8005228:	d1db      	bne.n	80051e2 <randombytes_sysrandom_buf+0x22>
 800522a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800522e:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <randombytes_sysrandom_buf+0xa4>)
 8005230:	4a0d      	ldr	r2, [pc, #52]	; (8005268 <randombytes_sysrandom_buf+0xa8>)
 8005232:	480e      	ldr	r0, [pc, #56]	; (800526c <randombytes_sysrandom_buf+0xac>)
 8005234:	447b      	add	r3, pc
 8005236:	447a      	add	r2, pc
 8005238:	2171      	movs	r1, #113	; 0x71
 800523a:	4478      	add	r0, pc
 800523c:	e7db      	b.n	80051f6 <randombytes_sysrandom_buf+0x36>
 800523e:	d002      	beq.n	8005246 <randombytes_sysrandom_buf+0x86>
 8005240:	1b3f      	subs	r7, r7, r4
 8005242:	4425      	add	r5, r4
 8005244:	d1de      	bne.n	8005204 <randombytes_sysrandom_buf+0x44>
 8005246:	eba5 0408 	sub.w	r4, r5, r8
 800524a:	e7ec      	b.n	8005226 <randombytes_sysrandom_buf+0x66>
 800524c:	7ffffffe 	.word	0x7ffffffe
 8005250:	17ffb2b6 	.word	0x17ffb2b6
 8005254:	17ffb2a6 	.word	0x17ffb2a6
 8005258:	00008afa 	.word	0x00008afa
 800525c:	00008ae4 	.word	0x00008ae4
 8005260:	00008b07 	.word	0x00008b07
 8005264:	00008af5 	.word	0x00008af5
 8005268:	00008a9e 	.word	0x00008a9e
 800526c:	00008ac1 	.word	0x00008ac1

08005270 <randombytes_sysrandom>:
 8005270:	b507      	push	{r0, r1, r2, lr}
 8005272:	2104      	movs	r1, #4
 8005274:	eb0d 0001 	add.w	r0, sp, r1
 8005278:	f7ff ffa2 	bl	80051c0 <randombytes_sysrandom_buf>
 800527c:	9801      	ldr	r0, [sp, #4]
 800527e:	b003      	add	sp, #12
 8005280:	f85d fb04 	ldr.w	pc, [sp], #4

08005284 <stream_ref_xor_ic>:
 8005284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	4614      	mov	r4, r2
 800528a:	b0a1      	sub	sp, #132	; 0x84
 800528c:	461d      	mov	r5, r3
 800528e:	ea54 0305 	orrs.w	r3, r4, r5
 8005292:	4682      	mov	sl, r0
 8005294:	4689      	mov	r9, r1
 8005296:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8005298:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800529a:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 800529c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800529e:	d043      	beq.n	8005328 <stream_ref_xor_ic+0xa4>
 80052a0:	2300      	movs	r3, #0
 80052a2:	f10d 0820 	add.w	r8, sp, #32
 80052a6:	5cc6      	ldrb	r6, [r0, r3]
 80052a8:	f803 6008 	strb.w	r6, [r3, r8]
 80052ac:	3301      	adds	r3, #1
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d1f9      	bne.n	80052a6 <stream_ref_xor_ic+0x22>
 80052b2:	2300      	movs	r3, #0
 80052b4:	ae04      	add	r6, sp, #16
 80052b6:	5cc8      	ldrb	r0, [r1, r3]
 80052b8:	5598      	strb	r0, [r3, r6]
 80052ba:	3301      	adds	r3, #1
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d1fa      	bne.n	80052b6 <stream_ref_xor_ic+0x32>
 80052c0:	54f2      	strb	r2, [r6, r3]
 80052c2:	3301      	adds	r3, #1
 80052c4:	0a12      	lsrs	r2, r2, #8
 80052c6:	2b10      	cmp	r3, #16
 80052c8:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 80052cc:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80052d0:	d1f6      	bne.n	80052c0 <stream_ref_xor_ic+0x3c>
 80052d2:	e9cd 4500 	strd	r4, r5, [sp]
 80052d6:	af10      	add	r7, sp, #64	; 0x40
 80052d8:	9b00      	ldr	r3, [sp, #0]
 80052da:	1ae3      	subs	r3, r4, r3
 80052dc:	eb0a 0b03 	add.w	fp, sl, r3
 80052e0:	444b      	add	r3, r9
 80052e2:	9303      	str	r3, [sp, #12]
 80052e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf08      	it	eq
 80052ec:	2a40      	cmpeq	r2, #64	; 0x40
 80052ee:	d21f      	bcs.n	8005330 <stream_ref_xor_ic+0xac>
 80052f0:	09a2      	lsrs	r2, r4, #6
 80052f2:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80052f6:	0193      	lsls	r3, r2, #6
 80052f8:	09a9      	lsrs	r1, r5, #6
 80052fa:	4250      	negs	r0, r2
 80052fc:	449a      	add	sl, r3
 80052fe:	4499      	add	r9, r3
 8005300:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8005304:	fb03 0101 	mla	r1, r3, r1, r0
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	440b      	add	r3, r1
 800530e:	18a4      	adds	r4, r4, r2
 8005310:	415d      	adcs	r5, r3
 8005312:	ea54 0305 	orrs.w	r3, r4, r5
 8005316:	d12d      	bne.n	8005374 <stream_ref_xor_ic+0xf0>
 8005318:	2140      	movs	r1, #64	; 0x40
 800531a:	4638      	mov	r0, r7
 800531c:	f7ff fda3 	bl	8004e66 <sodium_memzero>
 8005320:	2120      	movs	r1, #32
 8005322:	4640      	mov	r0, r8
 8005324:	f7ff fd9f 	bl	8004e66 <sodium_memzero>
 8005328:	2000      	movs	r0, #0
 800532a:	b021      	add	sp, #132	; 0x84
 800532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005330:	2300      	movs	r3, #0
 8005332:	4642      	mov	r2, r8
 8005334:	4631      	mov	r1, r6
 8005336:	4638      	mov	r0, r7
 8005338:	f000 fa98 	bl	800586c <crypto_core_salsa20>
 800533c:	2300      	movs	r3, #0
 800533e:	9a03      	ldr	r2, [sp, #12]
 8005340:	5cf9      	ldrb	r1, [r7, r3]
 8005342:	5cd2      	ldrb	r2, [r2, r3]
 8005344:	404a      	eors	r2, r1
 8005346:	f80b 2003 	strb.w	r2, [fp, r3]
 800534a:	3301      	adds	r3, #1
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	d1f6      	bne.n	800533e <stream_ref_xor_ic+0xba>
 8005350:	2308      	movs	r3, #8
 8005352:	2201      	movs	r2, #1
 8005354:	5cf1      	ldrb	r1, [r6, r3]
 8005356:	440a      	add	r2, r1
 8005358:	54f2      	strb	r2, [r6, r3]
 800535a:	3301      	adds	r3, #1
 800535c:	2b10      	cmp	r3, #16
 800535e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8005362:	d1f7      	bne.n	8005354 <stream_ref_xor_ic+0xd0>
 8005364:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005368:	3a40      	subs	r2, #64	; 0x40
 800536a:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800536e:	e9cd 2300 	strd	r2, r3, [sp]
 8005372:	e7b1      	b.n	80052d8 <stream_ref_xor_ic+0x54>
 8005374:	2300      	movs	r3, #0
 8005376:	4642      	mov	r2, r8
 8005378:	4631      	mov	r1, r6
 800537a:	4638      	mov	r0, r7
 800537c:	f000 fa76 	bl	800586c <crypto_core_salsa20>
 8005380:	2300      	movs	r3, #0
 8005382:	42a3      	cmp	r3, r4
 8005384:	d2c8      	bcs.n	8005318 <stream_ref_xor_ic+0x94>
 8005386:	f819 2003 	ldrb.w	r2, [r9, r3]
 800538a:	5cf9      	ldrb	r1, [r7, r3]
 800538c:	404a      	eors	r2, r1
 800538e:	f80a 2003 	strb.w	r2, [sl, r3]
 8005392:	3301      	adds	r3, #1
 8005394:	e7f5      	b.n	8005382 <stream_ref_xor_ic+0xfe>

08005396 <stream_ref>:
 8005396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800539a:	4614      	mov	r4, r2
 800539c:	b09c      	sub	sp, #112	; 0x70
 800539e:	461d      	mov	r5, r3
 80053a0:	ea54 0305 	orrs.w	r3, r4, r5
 80053a4:	4682      	mov	sl, r0
 80053a6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80053a8:	9825      	ldr	r0, [sp, #148]	; 0x94
 80053aa:	d03a      	beq.n	8005422 <stream_ref+0x8c>
 80053ac:	2300      	movs	r3, #0
 80053ae:	af04      	add	r7, sp, #16
 80053b0:	5cc2      	ldrb	r2, [r0, r3]
 80053b2:	55da      	strb	r2, [r3, r7]
 80053b4:	3301      	adds	r3, #1
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d1fa      	bne.n	80053b0 <stream_ref+0x1a>
 80053ba:	2300      	movs	r3, #0
 80053bc:	466e      	mov	r6, sp
 80053be:	5cca      	ldrb	r2, [r1, r3]
 80053c0:	559a      	strb	r2, [r3, r6]
 80053c2:	3301      	adds	r3, #1
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d1fa      	bne.n	80053be <stream_ref+0x28>
 80053c8:	2200      	movs	r2, #0
 80053ca:	54f2      	strb	r2, [r6, r3]
 80053cc:	3301      	adds	r3, #1
 80053ce:	2b10      	cmp	r3, #16
 80053d0:	d1fb      	bne.n	80053ca <stream_ref+0x34>
 80053d2:	46a0      	mov	r8, r4
 80053d4:	46a9      	mov	r9, r5
 80053d6:	f1b9 0f00 	cmp.w	r9, #0
 80053da:	eba4 0008 	sub.w	r0, r4, r8
 80053de:	bf08      	it	eq
 80053e0:	f1b8 0f40 	cmpeq.w	r8, #64	; 0x40
 80053e4:	4450      	add	r0, sl
 80053e6:	d220      	bcs.n	800542a <stream_ref+0x94>
 80053e8:	09a2      	lsrs	r2, r4, #6
 80053ea:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80053ee:	09a9      	lsrs	r1, r5, #6
 80053f0:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 80053f4:	4250      	negs	r0, r2
 80053f6:	fb03 0101 	mla	r1, r3, r1, r0
 80053fa:	eb0a 1a82 	add.w	sl, sl, r2, lsl #6
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	440b      	add	r3, r1
 8005404:	18a4      	adds	r4, r4, r2
 8005406:	415d      	adcs	r5, r3
 8005408:	ea54 0305 	orrs.w	r3, r4, r5
 800540c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005410:	d11f      	bne.n	8005452 <stream_ref+0xbc>
 8005412:	2140      	movs	r1, #64	; 0x40
 8005414:	4640      	mov	r0, r8
 8005416:	f7ff fd26 	bl	8004e66 <sodium_memzero>
 800541a:	2120      	movs	r1, #32
 800541c:	4638      	mov	r0, r7
 800541e:	f7ff fd22 	bl	8004e66 <sodium_memzero>
 8005422:	2000      	movs	r0, #0
 8005424:	b01c      	add	sp, #112	; 0x70
 8005426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542a:	2300      	movs	r3, #0
 800542c:	463a      	mov	r2, r7
 800542e:	4631      	mov	r1, r6
 8005430:	f000 fa1c 	bl	800586c <crypto_core_salsa20>
 8005434:	2308      	movs	r3, #8
 8005436:	2201      	movs	r2, #1
 8005438:	5cf1      	ldrb	r1, [r6, r3]
 800543a:	440a      	add	r2, r1
 800543c:	54f2      	strb	r2, [r6, r3]
 800543e:	3301      	adds	r3, #1
 8005440:	2b10      	cmp	r3, #16
 8005442:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8005446:	d1f7      	bne.n	8005438 <stream_ref+0xa2>
 8005448:	f1b8 0840 	subs.w	r8, r8, #64	; 0x40
 800544c:	f149 39ff 	adc.w	r9, r9, #4294967295	; 0xffffffff
 8005450:	e7c1      	b.n	80053d6 <stream_ref+0x40>
 8005452:	2300      	movs	r3, #0
 8005454:	463a      	mov	r2, r7
 8005456:	4631      	mov	r1, r6
 8005458:	4640      	mov	r0, r8
 800545a:	f000 fa07 	bl	800586c <crypto_core_salsa20>
 800545e:	2300      	movs	r3, #0
 8005460:	42a3      	cmp	r3, r4
 8005462:	d2d6      	bcs.n	8005412 <stream_ref+0x7c>
 8005464:	f818 2003 	ldrb.w	r2, [r8, r3]
 8005468:	f80a 2003 	strb.w	r2, [sl, r3]
 800546c:	3301      	adds	r3, #1
 800546e:	e7f7      	b.n	8005460 <stream_ref+0xca>

08005470 <crypto_core_hsalsa20>:
 8005470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	b08b      	sub	sp, #44	; 0x2c
 8005476:	9000      	str	r0, [sp, #0]
 8005478:	b36b      	cbz	r3, 80054d6 <crypto_core_hsalsa20+0x66>
 800547a:	68dc      	ldr	r4, [r3, #12]
 800547c:	689d      	ldr	r5, [r3, #8]
 800547e:	685e      	ldr	r6, [r3, #4]
 8005480:	681f      	ldr	r7, [r3, #0]
 8005482:	6913      	ldr	r3, [r2, #16]
 8005484:	6890      	ldr	r0, [r2, #8]
 8005486:	9302      	str	r3, [sp, #8]
 8005488:	9005      	str	r0, [sp, #20]
 800548a:	684b      	ldr	r3, [r1, #4]
 800548c:	6850      	ldr	r0, [r2, #4]
 800548e:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8005492:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8005496:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800549a:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800549e:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	9003      	str	r0, [sp, #12]
 80054a6:	680b      	ldr	r3, [r1, #0]
 80054a8:	68d1      	ldr	r1, [r2, #12]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	200b      	movs	r0, #11
 80054ae:	9008      	str	r0, [sp, #32]
 80054b0:	9808      	ldr	r0, [sp, #32]
 80054b2:	3801      	subs	r0, #1
 80054b4:	9008      	str	r0, [sp, #32]
 80054b6:	d113      	bne.n	80054e0 <crypto_core_hsalsa20+0x70>
 80054b8:	9a00      	ldr	r2, [sp, #0]
 80054ba:	6113      	str	r3, [r2, #16]
 80054bc:	9b01      	ldr	r3, [sp, #4]
 80054be:	6017      	str	r7, [r2, #0]
 80054c0:	6056      	str	r6, [r2, #4]
 80054c2:	6095      	str	r5, [r2, #8]
 80054c4:	60d4      	str	r4, [r2, #12]
 80054c6:	6153      	str	r3, [r2, #20]
 80054c8:	f8c2 e018 	str.w	lr, [r2, #24]
 80054cc:	f8c2 801c 	str.w	r8, [r2, #28]
 80054d0:	b00b      	add	sp, #44	; 0x2c
 80054d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d6:	4c4c      	ldr	r4, [pc, #304]	; (8005608 <crypto_core_hsalsa20+0x198>)
 80054d8:	4d4c      	ldr	r5, [pc, #304]	; (800560c <crypto_core_hsalsa20+0x19c>)
 80054da:	4e4d      	ldr	r6, [pc, #308]	; (8005610 <crypto_core_hsalsa20+0x1a0>)
 80054dc:	4f4d      	ldr	r7, [pc, #308]	; (8005614 <crypto_core_hsalsa20+0x1a4>)
 80054de:	e7d0      	b.n	8005482 <crypto_core_hsalsa20+0x12>
 80054e0:	eb07 0b0c 	add.w	fp, r7, ip
 80054e4:	ea81 6b7b 	eor.w	fp, r1, fp, ror #25
 80054e8:	eb07 010b 	add.w	r1, r7, fp
 80054ec:	ea8e 51f1 	eor.w	r1, lr, r1, ror #23
 80054f0:	9106      	str	r1, [sp, #24]
 80054f2:	4459      	add	r1, fp
 80054f4:	ea8c 41f1 	eor.w	r1, ip, r1, ror #19
 80054f8:	9109      	str	r1, [sp, #36]	; 0x24
 80054fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054fc:	9906      	ldr	r1, [sp, #24]
 80054fe:	4401      	add	r1, r0
 8005500:	ea87 37b1 	eor.w	r7, r7, r1, ror #14
 8005504:	1991      	adds	r1, r2, r6
 8005506:	ea88 6171 	eor.w	r1, r8, r1, ror #25
 800550a:	9104      	str	r1, [sp, #16]
 800550c:	1871      	adds	r1, r6, r1
 800550e:	ea89 51f1 	eor.w	r1, r9, r1, ror #23
 8005512:	9107      	str	r1, [sp, #28]
 8005514:	9807      	ldr	r0, [sp, #28]
 8005516:	9904      	ldr	r1, [sp, #16]
 8005518:	4401      	add	r1, r0
 800551a:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
 800551e:	4601      	mov	r1, r0
 8005520:	4411      	add	r1, r2
 8005522:	ea86 36b1 	eor.w	r6, r6, r1, ror #14
 8005526:	1959      	adds	r1, r3, r5
 8005528:	ea8a 6a71 	eor.w	sl, sl, r1, ror #25
 800552c:	9903      	ldr	r1, [sp, #12]
 800552e:	9801      	ldr	r0, [sp, #4]
 8005530:	eb05 0e0a 	add.w	lr, r5, sl
 8005534:	ea81 5efe 	eor.w	lr, r1, lr, ror #23
 8005538:	eb0a 010e 	add.w	r1, sl, lr
 800553c:	ea83 43f1 	eor.w	r3, r3, r1, ror #19
 8005540:	eb0e 0103 	add.w	r1, lr, r3
 8005544:	ea85 35b1 	eor.w	r5, r5, r1, ror #14
 8005548:	9902      	ldr	r1, [sp, #8]
 800554a:	eb01 0804 	add.w	r8, r1, r4
 800554e:	9905      	ldr	r1, [sp, #20]
 8005550:	ea81 6878 	eor.w	r8, r1, r8, ror #25
 8005554:	eb04 0108 	add.w	r1, r4, r8
 8005558:	ea80 51f1 	eor.w	r1, r0, r1, ror #23
 800555c:	9802      	ldr	r0, [sp, #8]
 800555e:	eb08 0c01 	add.w	ip, r8, r1
 8005562:	ea80 4cfc 	eor.w	ip, r0, ip, ror #19
 8005566:	eb01 090c 	add.w	r9, r1, ip
 800556a:	ea84 34b9 	eor.w	r4, r4, r9, ror #14
 800556e:	eb07 0908 	add.w	r9, r7, r8
 8005572:	ea82 6279 	eor.w	r2, r2, r9, ror #25
 8005576:	eb07 0902 	add.w	r9, r7, r2
 800557a:	ea8e 50f9 	eor.w	r0, lr, r9, ror #23
 800557e:	eb02 0e00 	add.w	lr, r2, r0
 8005582:	9003      	str	r0, [sp, #12]
 8005584:	ea88 40fe 	eor.w	r0, r8, lr, ror #19
 8005588:	9005      	str	r0, [sp, #20]
 800558a:	9803      	ldr	r0, [sp, #12]
 800558c:	4686      	mov	lr, r0
 800558e:	9805      	ldr	r0, [sp, #20]
 8005590:	4486      	add	lr, r0
 8005592:	ea87 37be 	eor.w	r7, r7, lr, ror #14
 8005596:	eb0b 0e06 	add.w	lr, fp, r6
 800559a:	ea83 637e 	eor.w	r3, r3, lr, ror #25
 800559e:	eb06 0e03 	add.w	lr, r6, r3
 80055a2:	ea81 51fe 	eor.w	r1, r1, lr, ror #23
 80055a6:	9101      	str	r1, [sp, #4]
 80055a8:	9801      	ldr	r0, [sp, #4]
 80055aa:	1859      	adds	r1, r3, r1
 80055ac:	ea8b 41f1 	eor.w	r1, fp, r1, ror #19
 80055b0:	eb00 0e01 	add.w	lr, r0, r1
 80055b4:	9804      	ldr	r0, [sp, #16]
 80055b6:	ea86 36be 	eor.w	r6, r6, lr, ror #14
 80055ba:	eb00 0e05 	add.w	lr, r0, r5
 80055be:	ea8c 607e 	eor.w	r0, ip, lr, ror #25
 80055c2:	eb05 0e00 	add.w	lr, r5, r0
 80055c6:	9002      	str	r0, [sp, #8]
 80055c8:	9806      	ldr	r0, [sp, #24]
 80055ca:	ea80 5efe 	eor.w	lr, r0, lr, ror #23
 80055ce:	9802      	ldr	r0, [sp, #8]
 80055d0:	eb00 080e 	add.w	r8, r0, lr
 80055d4:	9804      	ldr	r0, [sp, #16]
 80055d6:	ea80 48f8 	eor.w	r8, r0, r8, ror #19
 80055da:	eb0e 0c08 	add.w	ip, lr, r8
 80055de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055e0:	ea85 35bc 	eor.w	r5, r5, ip, ror #14
 80055e4:	eb0a 0c04 	add.w	ip, sl, r4
 80055e8:	ea80 6c7c 	eor.w	ip, r0, ip, ror #25
 80055ec:	9807      	ldr	r0, [sp, #28]
 80055ee:	eb04 090c 	add.w	r9, r4, ip
 80055f2:	ea80 59f9 	eor.w	r9, r0, r9, ror #23
 80055f6:	eb0c 0b09 	add.w	fp, ip, r9
 80055fa:	ea8a 4afb 	eor.w	sl, sl, fp, ror #19
 80055fe:	eb09 0b0a 	add.w	fp, r9, sl
 8005602:	ea84 34bb 	eor.w	r4, r4, fp, ror #14
 8005606:	e753      	b.n	80054b0 <crypto_core_hsalsa20+0x40>
 8005608:	6b206574 	.word	0x6b206574
 800560c:	79622d32 	.word	0x79622d32
 8005610:	3320646e 	.word	0x3320646e
 8005614:	61707865 	.word	0x61707865

08005618 <crypto_core_salsa>:
 8005618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	b09b      	sub	sp, #108	; 0x6c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d07a      	beq.n	8005718 <crypto_core_salsa+0x100>
 8005622:	68dc      	ldr	r4, [r3, #12]
 8005624:	940a      	str	r4, [sp, #40]	; 0x28
 8005626:	689c      	ldr	r4, [r3, #8]
 8005628:	9409      	str	r4, [sp, #36]	; 0x24
 800562a:	685c      	ldr	r4, [r3, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	9408      	str	r4, [sp, #32]
 8005630:	9307      	str	r3, [sp, #28]
 8005632:	6813      	ldr	r3, [r2, #0]
 8005634:	930e      	str	r3, [sp, #56]	; 0x38
 8005636:	6853      	ldr	r3, [r2, #4]
 8005638:	930f      	str	r3, [sp, #60]	; 0x3c
 800563a:	6893      	ldr	r3, [r2, #8]
 800563c:	9310      	str	r3, [sp, #64]	; 0x40
 800563e:	68d3      	ldr	r3, [r2, #12]
 8005640:	9311      	str	r3, [sp, #68]	; 0x44
 8005642:	6913      	ldr	r3, [r2, #16]
 8005644:	9312      	str	r3, [sp, #72]	; 0x48
 8005646:	6953      	ldr	r3, [r2, #20]
 8005648:	9313      	str	r3, [sp, #76]	; 0x4c
 800564a:	6993      	ldr	r3, [r2, #24]
 800564c:	9314      	str	r3, [sp, #80]	; 0x50
 800564e:	69d3      	ldr	r3, [r2, #28]
 8005650:	9315      	str	r3, [sp, #84]	; 0x54
 8005652:	680b      	ldr	r3, [r1, #0]
 8005654:	9316      	str	r3, [sp, #88]	; 0x58
 8005656:	684b      	ldr	r3, [r1, #4]
 8005658:	9317      	str	r3, [sp, #92]	; 0x5c
 800565a:	688b      	ldr	r3, [r1, #8]
 800565c:	9318      	str	r3, [sp, #96]	; 0x60
 800565e:	68cb      	ldr	r3, [r1, #12]
 8005660:	9319      	str	r3, [sp, #100]	; 0x64
 8005662:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005664:	9303      	str	r3, [sp, #12]
 8005666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005668:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800566a:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800566e:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8005672:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005674:	9302      	str	r3, [sp, #8]
 8005676:	ab17      	add	r3, sp, #92	; 0x5c
 8005678:	e893 0a08 	ldmia.w	r3, {r3, r9, fp}
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005680:	9304      	str	r3, [sp, #16]
 8005682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 800568a:	9f08      	ldr	r7, [sp, #32]
 800568c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800568e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005690:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005694:	2100      	movs	r1, #0
 8005696:	910b      	str	r1, [sp, #44]	; 0x2c
 8005698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800569a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800569c:	42b1      	cmp	r1, r6
 800569e:	db48      	blt.n	8005732 <crypto_core_salsa+0x11a>
 80056a0:	9907      	ldr	r1, [sp, #28]
 80056a2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80056a4:	4461      	add	r1, ip
 80056a6:	6001      	str	r1, [r0, #0]
 80056a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80056aa:	440b      	add	r3, r1
 80056ac:	6043      	str	r3, [r0, #4]
 80056ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80056b0:	9b00      	ldr	r3, [sp, #0]
 80056b2:	440b      	add	r3, r1
 80056b4:	6083      	str	r3, [r0, #8]
 80056b6:	9b04      	ldr	r3, [sp, #16]
 80056b8:	4433      	add	r3, r6
 80056ba:	60c3      	str	r3, [r0, #12]
 80056bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056be:	441a      	add	r2, r3
 80056c0:	9b08      	ldr	r3, [sp, #32]
 80056c2:	6102      	str	r2, [r0, #16]
 80056c4:	443b      	add	r3, r7
 80056c6:	6143      	str	r3, [r0, #20]
 80056c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80056cc:	449a      	add	sl, r3
 80056ce:	9b01      	ldr	r3, [sp, #4]
 80056d0:	f8c0 a018 	str.w	sl, [r0, #24]
 80056d4:	4413      	add	r3, r2
 80056d6:	61c3      	str	r3, [r0, #28]
 80056d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80056da:	9a02      	ldr	r2, [sp, #8]
 80056dc:	4499      	add	r9, r3
 80056de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80056e0:	f8c0 9020 	str.w	r9, [r0, #32]
 80056e4:	449b      	add	fp, r3
 80056e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e8:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
 80056ec:	4413      	add	r3, r2
 80056ee:	6283      	str	r3, [r0, #40]	; 0x28
 80056f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056f2:	9a03      	ldr	r2, [sp, #12]
 80056f4:	4423      	add	r3, r4
 80056f6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80056f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80056fa:	449e      	add	lr, r3
 80056fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056fe:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
 8005702:	441a      	add	r2, r3
 8005704:	6342      	str	r2, [r0, #52]	; 0x34
 8005706:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005708:	4443      	add	r3, r8
 800570a:	6383      	str	r3, [r0, #56]	; 0x38
 800570c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800570e:	442b      	add	r3, r5
 8005710:	63c3      	str	r3, [r0, #60]	; 0x3c
 8005712:	b01b      	add	sp, #108	; 0x6c
 8005714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005718:	4b51      	ldr	r3, [pc, #324]	; (8005860 <crypto_core_salsa+0x248>)
 800571a:	930a      	str	r3, [sp, #40]	; 0x28
 800571c:	f103 6364 	add.w	r3, r3, #239075328	; 0xe400000
 8005720:	f503 33e3 	add.w	r3, r3, #116224	; 0x1c600
 8005724:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005728:	9309      	str	r3, [sp, #36]	; 0x24
 800572a:	4b4e      	ldr	r3, [pc, #312]	; (8005864 <crypto_core_salsa+0x24c>)
 800572c:	9308      	str	r3, [sp, #32]
 800572e:	4b4e      	ldr	r3, [pc, #312]	; (8005868 <crypto_core_salsa+0x250>)
 8005730:	e77e      	b.n	8005630 <crypto_core_salsa+0x18>
 8005732:	eb0c 010e 	add.w	r1, ip, lr
 8005736:	ea82 6271 	eor.w	r2, r2, r1, ror #25
 800573a:	eb0c 0102 	add.w	r1, ip, r2
 800573e:	ea89 51f1 	eor.w	r1, r9, r1, ror #23
 8005742:	910c      	str	r1, [sp, #48]	; 0x30
 8005744:	1851      	adds	r1, r2, r1
 8005746:	ea8e 41f1 	eor.w	r1, lr, r1, ror #19
 800574a:	910d      	str	r1, [sp, #52]	; 0x34
 800574c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800574e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005750:	4431      	add	r1, r6
 8005752:	ea8c 3cb1 	eor.w	ip, ip, r1, ror #14
 8005756:	19d9      	adds	r1, r3, r7
 8005758:	9e03      	ldr	r6, [sp, #12]
 800575a:	ea8b 6171 	eor.w	r1, fp, r1, ror #25
 800575e:	9105      	str	r1, [sp, #20]
 8005760:	1879      	adds	r1, r7, r1
 8005762:	ea86 51f1 	eor.w	r1, r6, r1, ror #23
 8005766:	9103      	str	r1, [sp, #12]
 8005768:	9e03      	ldr	r6, [sp, #12]
 800576a:	9905      	ldr	r1, [sp, #20]
 800576c:	eb01 0b06 	add.w	fp, r1, r6
 8005770:	ea83 4bfb 	eor.w	fp, r3, fp, ror #19
 8005774:	4633      	mov	r3, r6
 8005776:	445b      	add	r3, fp
 8005778:	ea87 37b3 	eor.w	r7, r7, r3, ror #14
 800577c:	9b02      	ldr	r3, [sp, #8]
 800577e:	4453      	add	r3, sl
 8005780:	ea88 6373 	eor.w	r3, r8, r3, ror #25
 8005784:	9306      	str	r3, [sp, #24]
 8005786:	9906      	ldr	r1, [sp, #24]
 8005788:	9b02      	ldr	r3, [sp, #8]
 800578a:	eb03 0801 	add.w	r8, r3, r1
 800578e:	9b00      	ldr	r3, [sp, #0]
 8005790:	ea83 58f8 	eor.w	r8, r3, r8, ror #23
 8005794:	460b      	mov	r3, r1
 8005796:	4443      	add	r3, r8
 8005798:	ea8a 4af3 	eor.w	sl, sl, r3, ror #19
 800579c:	9b02      	ldr	r3, [sp, #8]
 800579e:	eb08 060a 	add.w	r6, r8, sl
 80057a2:	ea83 36b6 	eor.w	r6, r3, r6, ror #14
 80057a6:	9b04      	ldr	r3, [sp, #16]
 80057a8:	1961      	adds	r1, r4, r5
 80057aa:	ea83 6171 	eor.w	r1, r3, r1, ror #25
 80057ae:	9b01      	ldr	r3, [sp, #4]
 80057b0:	eb05 0e01 	add.w	lr, r5, r1
 80057b4:	ea83 5efe 	eor.w	lr, r3, lr, ror #23
 80057b8:	eb01 090e 	add.w	r9, r1, lr
 80057bc:	eb0c 0301 	add.w	r3, ip, r1
 80057c0:	ea84 49f9 	eor.w	r9, r4, r9, ror #19
 80057c4:	ea8b 6373 	eor.w	r3, fp, r3, ror #25
 80057c8:	eb0e 0409 	add.w	r4, lr, r9
 80057cc:	eb0c 0b03 	add.w	fp, ip, r3
 80057d0:	ea85 35b4 	eor.w	r5, r5, r4, ror #14
 80057d4:	ea88 54fb 	eor.w	r4, r8, fp, ror #23
 80057d8:	eb03 0804 	add.w	r8, r3, r4
 80057dc:	ea81 41f8 	eor.w	r1, r1, r8, ror #19
 80057e0:	9104      	str	r1, [sp, #16]
 80057e2:	9400      	str	r4, [sp, #0]
 80057e4:	4621      	mov	r1, r4
 80057e6:	9c04      	ldr	r4, [sp, #16]
 80057e8:	4421      	add	r1, r4
 80057ea:	ea8c 3cb1 	eor.w	ip, ip, r1, ror #14
 80057ee:	19d1      	adds	r1, r2, r7
 80057f0:	ea8a 6a71 	eor.w	sl, sl, r1, ror #25
 80057f4:	eb07 010a 	add.w	r1, r7, sl
 80057f8:	ea8e 51f1 	eor.w	r1, lr, r1, ror #23
 80057fc:	9101      	str	r1, [sp, #4]
 80057fe:	4451      	add	r1, sl
 8005800:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
 8005804:	9901      	ldr	r1, [sp, #4]
 8005806:	4411      	add	r1, r2
 8005808:	ea87 37b1 	eor.w	r7, r7, r1, ror #14
 800580c:	9905      	ldr	r1, [sp, #20]
 800580e:	4431      	add	r1, r6
 8005810:	ea89 6471 	eor.w	r4, r9, r1, ror #25
 8005814:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005816:	eb06 0904 	add.w	r9, r6, r4
 800581a:	ea81 59f9 	eor.w	r9, r1, r9, ror #23
 800581e:	9905      	ldr	r1, [sp, #20]
 8005820:	eb04 0b09 	add.w	fp, r4, r9
 8005824:	ea81 4bfb 	eor.w	fp, r1, fp, ror #19
 8005828:	eb09 010b 	add.w	r1, r9, fp
 800582c:	ea86 31b1 	eor.w	r1, r6, r1, ror #14
 8005830:	9102      	str	r1, [sp, #8]
 8005832:	9906      	ldr	r1, [sp, #24]
 8005834:	eb01 0e05 	add.w	lr, r1, r5
 8005838:	990d      	ldr	r1, [sp, #52]	; 0x34
 800583a:	ea81 6e7e 	eor.w	lr, r1, lr, ror #25
 800583e:	9903      	ldr	r1, [sp, #12]
 8005840:	eb05 060e 	add.w	r6, r5, lr
 8005844:	ea81 51f6 	eor.w	r1, r1, r6, ror #23
 8005848:	9e06      	ldr	r6, [sp, #24]
 800584a:	9103      	str	r1, [sp, #12]
 800584c:	4471      	add	r1, lr
 800584e:	ea86 48f1 	eor.w	r8, r6, r1, ror #19
 8005852:	9903      	ldr	r1, [sp, #12]
 8005854:	4441      	add	r1, r8
 8005856:	ea85 35b1 	eor.w	r5, r5, r1, ror #14
 800585a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800585c:	3102      	adds	r1, #2
 800585e:	e71a      	b.n	8005696 <crypto_core_salsa+0x7e>
 8005860:	6b206574 	.word	0x6b206574
 8005864:	3320646e 	.word	0x3320646e
 8005868:	61707865 	.word	0x61707865

0800586c <crypto_core_salsa20>:
 800586c:	b513      	push	{r0, r1, r4, lr}
 800586e:	2414      	movs	r4, #20
 8005870:	9400      	str	r4, [sp, #0]
 8005872:	f7ff fed1 	bl	8005618 <crypto_core_salsa>
 8005876:	2000      	movs	r0, #0
 8005878:	b002      	add	sp, #8
 800587a:	bd10      	pop	{r4, pc}

0800587c <crypto_core_salsa20_outputbytes>:
 800587c:	2040      	movs	r0, #64	; 0x40
 800587e:	4770      	bx	lr

08005880 <crypto_core_salsa20_inputbytes>:
 8005880:	2010      	movs	r0, #16
 8005882:	4770      	bx	lr

08005884 <crypto_core_salsa20_keybytes>:
 8005884:	2020      	movs	r0, #32
 8005886:	4770      	bx	lr

08005888 <crypto_core_salsa20_constbytes>:
 8005888:	2010      	movs	r0, #16
 800588a:	4770      	bx	lr

0800588c <crypto_core_salsa2012>:
 800588c:	b513      	push	{r0, r1, r4, lr}
 800588e:	240c      	movs	r4, #12
 8005890:	9400      	str	r4, [sp, #0]
 8005892:	f7ff fec1 	bl	8005618 <crypto_core_salsa>
 8005896:	2000      	movs	r0, #0
 8005898:	b002      	add	sp, #8
 800589a:	bd10      	pop	{r4, pc}

0800589c <crypto_core_salsa2012_outputbytes>:
 800589c:	2040      	movs	r0, #64	; 0x40
 800589e:	4770      	bx	lr

080058a0 <crypto_core_salsa2012_inputbytes>:
 80058a0:	2010      	movs	r0, #16
 80058a2:	4770      	bx	lr

080058a4 <crypto_core_salsa2012_keybytes>:
 80058a4:	2020      	movs	r0, #32
 80058a6:	4770      	bx	lr

080058a8 <crypto_core_salsa2012_constbytes>:
 80058a8:	2010      	movs	r0, #16
 80058aa:	4770      	bx	lr

080058ac <crypto_core_salsa208>:
 80058ac:	b513      	push	{r0, r1, r4, lr}
 80058ae:	2408      	movs	r4, #8
 80058b0:	9400      	str	r4, [sp, #0]
 80058b2:	f7ff feb1 	bl	8005618 <crypto_core_salsa>
 80058b6:	2000      	movs	r0, #0
 80058b8:	b002      	add	sp, #8
 80058ba:	bd10      	pop	{r4, pc}

080058bc <crypto_core_salsa208_outputbytes>:
 80058bc:	2040      	movs	r0, #64	; 0x40
 80058be:	4770      	bx	lr

080058c0 <crypto_core_salsa208_inputbytes>:
 80058c0:	2010      	movs	r0, #16
 80058c2:	4770      	bx	lr

080058c4 <crypto_core_salsa208_keybytes>:
 80058c4:	2020      	movs	r0, #32
 80058c6:	4770      	bx	lr

080058c8 <crypto_core_salsa208_constbytes>:
 80058c8:	2010      	movs	r0, #16
 80058ca:	4770      	bx	lr

080058cc <crypto_generichash_blake2b__init_param>:
 80058cc:	4b16      	ldr	r3, [pc, #88]	; (8005928 <crypto_generichash_blake2b__init_param+0x5c>)
 80058ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058d2:	447b      	add	r3, pc
 80058d4:	f1a0 0608 	sub.w	r6, r0, #8
 80058d8:	460c      	mov	r4, r1
 80058da:	3b08      	subs	r3, #8
 80058dc:	f100 0238 	add.w	r2, r0, #56	; 0x38
 80058e0:	4637      	mov	r7, r6
 80058e2:	e9f3 8902 	ldrd	r8, r9, [r3, #8]!
 80058e6:	e9e7 8902 	strd	r8, r9, [r7, #8]!
 80058ea:	4297      	cmp	r7, r2
 80058ec:	d1f9      	bne.n	80058e2 <crypto_generichash_blake2b__init_param+0x16>
 80058ee:	f240 1225 	movw	r2, #293	; 0x125
 80058f2:	2100      	movs	r1, #0
 80058f4:	3040      	adds	r0, #64	; 0x40
 80058f6:	f005 f941 	bl	800ab7c <memset>
 80058fa:	4623      	mov	r3, r4
 80058fc:	46ee      	mov	lr, sp
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	6859      	ldr	r1, [r3, #4]
 8005902:	4672      	mov	r2, lr
 8005904:	c203      	stmia	r2!, {r0, r1}
 8005906:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
 800590a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800590e:	4060      	eors	r0, r4
 8005910:	4069      	eors	r1, r5
 8005912:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8005916:	42be      	cmp	r6, r7
 8005918:	f103 0308 	add.w	r3, r3, #8
 800591c:	d1ef      	bne.n	80058fe <crypto_generichash_blake2b__init_param+0x32>
 800591e:	2000      	movs	r0, #0
 8005920:	b003      	add	sp, #12
 8005922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005926:	bf00      	nop
 8005928:	00008482 	.word	0x00008482

0800592c <crypto_generichash_blake2b__init>:
 800592c:	b530      	push	{r4, r5, lr}
 800592e:	1e4b      	subs	r3, r1, #1
 8005930:	2b3f      	cmp	r3, #63	; 0x3f
 8005932:	b093      	sub	sp, #76	; 0x4c
 8005934:	4605      	mov	r5, r0
 8005936:	d901      	bls.n	800593c <crypto_generichash_blake2b__init+0x10>
 8005938:	f7ff fa2c 	bl	8004d94 <sodium_misuse>
 800593c:	2301      	movs	r3, #1
 800593e:	f88d 300a 	strb.w	r3, [sp, #10]
 8005942:	f88d 300b 	strb.w	r3, [sp, #11]
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	e9cd 2300 	strd	r2, r3, [sp]
 800594e:	f88d 1008 	strb.w	r1, [sp, #8]
 8005952:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8005956:	2400      	movs	r4, #0
 8005958:	ab04      	add	r3, sp, #16
 800595a:	e883 0003 	stmia.w	r3, {r0, r1}
 800595e:	220e      	movs	r2, #14
 8005960:	4621      	mov	r1, r4
 8005962:	f10d 001a 	add.w	r0, sp, #26
 8005966:	f88d 4009 	strb.w	r4, [sp, #9]
 800596a:	9403      	str	r4, [sp, #12]
 800596c:	f88d 4018 	strb.w	r4, [sp, #24]
 8005970:	f88d 4019 	strb.w	r4, [sp, #25]
 8005974:	f005 f902 	bl	800ab7c <memset>
 8005978:	4621      	mov	r1, r4
 800597a:	2210      	movs	r2, #16
 800597c:	a80a      	add	r0, sp, #40	; 0x28
 800597e:	f005 f8fd 	bl	800ab7c <memset>
 8005982:	2210      	movs	r2, #16
 8005984:	4621      	mov	r1, r4
 8005986:	a80e      	add	r0, sp, #56	; 0x38
 8005988:	f005 f8f8 	bl	800ab7c <memset>
 800598c:	a902      	add	r1, sp, #8
 800598e:	4628      	mov	r0, r5
 8005990:	f7ff ff9c 	bl	80058cc <crypto_generichash_blake2b__init_param>
 8005994:	b013      	add	sp, #76	; 0x4c
 8005996:	bd30      	pop	{r4, r5, pc}

08005998 <crypto_generichash_blake2b__init_salt_personal>:
 8005998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599a:	461c      	mov	r4, r3
 800599c:	1e4b      	subs	r3, r1, #1
 800599e:	2b3f      	cmp	r3, #63	; 0x3f
 80059a0:	b093      	sub	sp, #76	; 0x4c
 80059a2:	4605      	mov	r5, r0
 80059a4:	4616      	mov	r6, r2
 80059a6:	d901      	bls.n	80059ac <crypto_generichash_blake2b__init_salt_personal+0x14>
 80059a8:	f7ff f9f4 	bl	8004d94 <sodium_misuse>
 80059ac:	f88d 1008 	strb.w	r1, [sp, #8]
 80059b0:	2000      	movs	r0, #0
 80059b2:	2100      	movs	r1, #0
 80059b4:	e9cd 0100 	strd	r0, r1, [sp]
 80059b8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80059bc:	2201      	movs	r2, #1
 80059be:	2300      	movs	r3, #0
 80059c0:	f88d 200a 	strb.w	r2, [sp, #10]
 80059c4:	f88d 200b 	strb.w	r2, [sp, #11]
 80059c8:	aa04      	add	r2, sp, #16
 80059ca:	e882 0003 	stmia.w	r2, {r0, r1}
 80059ce:	220e      	movs	r2, #14
 80059d0:	4619      	mov	r1, r3
 80059d2:	f10d 001a 	add.w	r0, sp, #26
 80059d6:	f88d 3009 	strb.w	r3, [sp, #9]
 80059da:	9303      	str	r3, [sp, #12]
 80059dc:	f88d 3018 	strb.w	r3, [sp, #24]
 80059e0:	f88d 3019 	strb.w	r3, [sp, #25]
 80059e4:	f005 f8ca 	bl	800ab7c <memset>
 80059e8:	a80a      	add	r0, sp, #40	; 0x28
 80059ea:	b1fe      	cbz	r6, 8005a2c <crypto_generichash_blake2b__init_salt_personal+0x94>
 80059ec:	4632      	mov	r2, r6
 80059ee:	4603      	mov	r3, r0
 80059f0:	f106 0710 	add.w	r7, r6, #16
 80059f4:	6810      	ldr	r0, [r2, #0]
 80059f6:	6851      	ldr	r1, [r2, #4]
 80059f8:	461e      	mov	r6, r3
 80059fa:	c603      	stmia	r6!, {r0, r1}
 80059fc:	3208      	adds	r2, #8
 80059fe:	42ba      	cmp	r2, r7
 8005a00:	4633      	mov	r3, r6
 8005a02:	d1f7      	bne.n	80059f4 <crypto_generichash_blake2b__init_salt_personal+0x5c>
 8005a04:	a80e      	add	r0, sp, #56	; 0x38
 8005a06:	b1b4      	cbz	r4, 8005a36 <crypto_generichash_blake2b__init_salt_personal+0x9e>
 8005a08:	4623      	mov	r3, r4
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	f104 0610 	add.w	r6, r4, #16
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	6859      	ldr	r1, [r3, #4]
 8005a14:	4614      	mov	r4, r2
 8005a16:	c403      	stmia	r4!, {r0, r1}
 8005a18:	3308      	adds	r3, #8
 8005a1a:	42b3      	cmp	r3, r6
 8005a1c:	4622      	mov	r2, r4
 8005a1e:	d1f7      	bne.n	8005a10 <crypto_generichash_blake2b__init_salt_personal+0x78>
 8005a20:	a902      	add	r1, sp, #8
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7ff ff52 	bl	80058cc <crypto_generichash_blake2b__init_param>
 8005a28:	b013      	add	sp, #76	; 0x4c
 8005a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2c:	2210      	movs	r2, #16
 8005a2e:	4631      	mov	r1, r6
 8005a30:	f005 f8a4 	bl	800ab7c <memset>
 8005a34:	e7e6      	b.n	8005a04 <crypto_generichash_blake2b__init_salt_personal+0x6c>
 8005a36:	2210      	movs	r2, #16
 8005a38:	4621      	mov	r1, r4
 8005a3a:	f005 f89f 	bl	800ab7c <memset>
 8005a3e:	e7ef      	b.n	8005a20 <crypto_generichash_blake2b__init_salt_personal+0x88>

08005a40 <crypto_generichash_blake2b__update>:
 8005a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8005b08 <crypto_generichash_blake2b__update+0xc8>
 8005a48:	4604      	mov	r4, r0
 8005a4a:	460d      	mov	r5, r1
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	461f      	mov	r7, r3
 8005a50:	f100 0860 	add.w	r8, r0, #96	; 0x60
 8005a54:	44fa      	add	sl, pc
 8005a56:	f100 0be0 	add.w	fp, r0, #224	; 0xe0
 8005a5a:	ea56 0307 	orrs.w	r3, r6, r7
 8005a5e:	d103      	bne.n	8005a68 <crypto_generichash_blake2b__update+0x28>
 8005a60:	2000      	movs	r0, #0
 8005a62:	b003      	add	sp, #12
 8005a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a68:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f5c0 7980 	rsb	r9, r0, #256	; 0x100
 8005a72:	42bb      	cmp	r3, r7
 8005a74:	464a      	mov	r2, r9
 8005a76:	bf08      	it	eq
 8005a78:	45b1      	cmpeq	r9, r6
 8005a7a:	e9cd 2300 	strd	r2, r3, [sp]
 8005a7e:	d235      	bcs.n	8005aec <crypto_generichash_blake2b__update+0xac>
 8005a80:	4629      	mov	r1, r5
 8005a82:	464a      	mov	r2, r9
 8005a84:	4440      	add	r0, r8
 8005a86:	f004 ff77 	bl	800a978 <memcpy>
 8005a8a:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8005a8e:	444b      	add	r3, r9
 8005a90:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8005a94:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 8005a98:	3280      	adds	r2, #128	; 0x80
 8005a9a:	f143 0300 	adc.w	r3, r3, #0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	bf08      	it	eq
 8005aa2:	2a80      	cmpeq	r2, #128	; 0x80
 8005aa4:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8005aa8:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8005aac:	bf34      	ite	cc
 8005aae:	2101      	movcc	r1, #1
 8005ab0:	2100      	movcs	r1, #0
 8005ab2:	1852      	adds	r2, r2, r1
 8005ab4:	f143 0300 	adc.w	r3, r3, #0
 8005ab8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005abc:	4641      	mov	r1, r8
 8005abe:	f8da 3000 	ldr.w	r3, [sl]
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	4798      	blx	r3
 8005ac6:	2280      	movs	r2, #128	; 0x80
 8005ac8:	4659      	mov	r1, fp
 8005aca:	4640      	mov	r0, r8
 8005acc:	f004 ff54 	bl	800a978 <memcpy>
 8005ad0:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8005ad4:	3b80      	subs	r3, #128	; 0x80
 8005ad6:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8005ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ade:	1ab2      	subs	r2, r6, r2
 8005ae0:	eb67 0303 	sbc.w	r3, r7, r3
 8005ae4:	444d      	add	r5, r9
 8005ae6:	4616      	mov	r6, r2
 8005ae8:	461f      	mov	r7, r3
 8005aea:	e7b6      	b.n	8005a5a <crypto_generichash_blake2b__update+0x1a>
 8005aec:	4632      	mov	r2, r6
 8005aee:	4629      	mov	r1, r5
 8005af0:	4440      	add	r0, r8
 8005af2:	f004 ff41 	bl	800a978 <memcpy>
 8005af6:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8005afa:	4433      	add	r3, r6
 8005afc:	4435      	add	r5, r6
 8005afe:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8005b02:	2600      	movs	r6, #0
 8005b04:	2700      	movs	r7, #0
 8005b06:	e7a8      	b.n	8005a5a <crypto_generichash_blake2b__update+0x1a>
 8005b08:	17ffb414 	.word	0x17ffb414

08005b0c <crypto_generichash_blake2b__init_key>:
 8005b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b10:	461e      	mov	r6, r3
 8005b12:	1e4b      	subs	r3, r1, #1
 8005b14:	2b3f      	cmp	r3, #63	; 0x3f
 8005b16:	b0b2      	sub	sp, #200	; 0xc8
 8005b18:	4607      	mov	r7, r0
 8005b1a:	4690      	mov	r8, r2
 8005b1c:	d901      	bls.n	8005b22 <crypto_generichash_blake2b__init_key+0x16>
 8005b1e:	f7ff f939 	bl	8004d94 <sodium_misuse>
 8005b22:	2a00      	cmp	r2, #0
 8005b24:	d0fb      	beq.n	8005b1e <crypto_generichash_blake2b__init_key+0x12>
 8005b26:	1e73      	subs	r3, r6, #1
 8005b28:	2b3f      	cmp	r3, #63	; 0x3f
 8005b2a:	d8f8      	bhi.n	8005b1e <crypto_generichash_blake2b__init_key+0x12>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f88d 300a 	strb.w	r3, [sp, #10]
 8005b32:	f88d 300b 	strb.w	r3, [sp, #11]
 8005b36:	2200      	movs	r2, #0
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e9cd 2300 	strd	r2, r3, [sp]
 8005b3e:	f88d 1008 	strb.w	r1, [sp, #8]
 8005b42:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8005b46:	2400      	movs	r4, #0
 8005b48:	aa04      	add	r2, sp, #16
 8005b4a:	e882 0003 	stmia.w	r2, {r0, r1}
 8005b4e:	220e      	movs	r2, #14
 8005b50:	4621      	mov	r1, r4
 8005b52:	f10d 001a 	add.w	r0, sp, #26
 8005b56:	f88d 6009 	strb.w	r6, [sp, #9]
 8005b5a:	9403      	str	r4, [sp, #12]
 8005b5c:	f88d 4018 	strb.w	r4, [sp, #24]
 8005b60:	f88d 4019 	strb.w	r4, [sp, #25]
 8005b64:	f005 f80a 	bl	800ab7c <memset>
 8005b68:	2210      	movs	r2, #16
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	a80a      	add	r0, sp, #40	; 0x28
 8005b6e:	f005 f805 	bl	800ab7c <memset>
 8005b72:	2210      	movs	r2, #16
 8005b74:	4621      	mov	r1, r4
 8005b76:	a80e      	add	r0, sp, #56	; 0x38
 8005b78:	f005 f800 	bl	800ab7c <memset>
 8005b7c:	a902      	add	r1, sp, #8
 8005b7e:	4638      	mov	r0, r7
 8005b80:	f7ff fea4 	bl	80058cc <crypto_generichash_blake2b__init_param>
 8005b84:	42a0      	cmp	r0, r4
 8005b86:	dbca      	blt.n	8005b1e <crypto_generichash_blake2b__init_key+0x12>
 8005b88:	ad12      	add	r5, sp, #72	; 0x48
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	2280      	movs	r2, #128	; 0x80
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f004 fff4 	bl	800ab7c <memset>
 8005b94:	4632      	mov	r2, r6
 8005b96:	4641      	mov	r1, r8
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f004 feed 	bl	800a978 <memcpy>
 8005b9e:	2280      	movs	r2, #128	; 0x80
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	4638      	mov	r0, r7
 8005ba6:	f7ff ff4b 	bl	8005a40 <crypto_generichash_blake2b__update>
 8005baa:	4628      	mov	r0, r5
 8005bac:	2180      	movs	r1, #128	; 0x80
 8005bae:	f7ff f95a 	bl	8004e66 <sodium_memzero>
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	b032      	add	sp, #200	; 0xc8
 8005bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005bba <crypto_generichash_blake2b__init_key_salt_personal>:
 8005bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbe:	461d      	mov	r5, r3
 8005bc0:	b0b2      	sub	sp, #200	; 0xc8
 8005bc2:	1e4b      	subs	r3, r1, #1
 8005bc4:	2b3f      	cmp	r3, #63	; 0x3f
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	4617      	mov	r7, r2
 8005bca:	f8dd 80e0 	ldr.w	r8, [sp, #224]	; 0xe0
 8005bce:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8005bd0:	d901      	bls.n	8005bd6 <crypto_generichash_blake2b__init_key_salt_personal+0x1c>
 8005bd2:	f7ff f8df 	bl	8004d94 <sodium_misuse>
 8005bd6:	2a00      	cmp	r2, #0
 8005bd8:	d0fb      	beq.n	8005bd2 <crypto_generichash_blake2b__init_key_salt_personal+0x18>
 8005bda:	1e6b      	subs	r3, r5, #1
 8005bdc:	2b3f      	cmp	r3, #63	; 0x3f
 8005bde:	d8f8      	bhi.n	8005bd2 <crypto_generichash_blake2b__init_key_salt_personal+0x18>
 8005be0:	f88d 1008 	strb.w	r1, [sp, #8]
 8005be4:	2000      	movs	r0, #0
 8005be6:	2100      	movs	r1, #0
 8005be8:	e9cd 0100 	strd	r0, r1, [sp]
 8005bec:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f88d 300a 	strb.w	r3, [sp, #10]
 8005bf6:	f88d 300b 	strb.w	r3, [sp, #11]
 8005bfa:	aa04      	add	r2, sp, #16
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c02:	220e      	movs	r2, #14
 8005c04:	4619      	mov	r1, r3
 8005c06:	f10d 001a 	add.w	r0, sp, #26
 8005c0a:	f88d 5009 	strb.w	r5, [sp, #9]
 8005c0e:	9303      	str	r3, [sp, #12]
 8005c10:	f88d 3018 	strb.w	r3, [sp, #24]
 8005c14:	f88d 3019 	strb.w	r3, [sp, #25]
 8005c18:	f004 ffb0 	bl	800ab7c <memset>
 8005c1c:	a80a      	add	r0, sp, #40	; 0x28
 8005c1e:	f1b8 0f00 	cmp.w	r8, #0
 8005c22:	d039      	beq.n	8005c98 <crypto_generichash_blake2b__init_key_salt_personal+0xde>
 8005c24:	4642      	mov	r2, r8
 8005c26:	4603      	mov	r3, r0
 8005c28:	f108 0c10 	add.w	ip, r8, #16
 8005c2c:	6810      	ldr	r0, [r2, #0]
 8005c2e:	6851      	ldr	r1, [r2, #4]
 8005c30:	469e      	mov	lr, r3
 8005c32:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8005c36:	3208      	adds	r2, #8
 8005c38:	4562      	cmp	r2, ip
 8005c3a:	4673      	mov	r3, lr
 8005c3c:	d1f6      	bne.n	8005c2c <crypto_generichash_blake2b__init_key_salt_personal+0x72>
 8005c3e:	a80e      	add	r0, sp, #56	; 0x38
 8005c40:	b37c      	cbz	r4, 8005ca2 <crypto_generichash_blake2b__init_key_salt_personal+0xe8>
 8005c42:	4622      	mov	r2, r4
 8005c44:	4603      	mov	r3, r0
 8005c46:	f104 0e10 	add.w	lr, r4, #16
 8005c4a:	6810      	ldr	r0, [r2, #0]
 8005c4c:	6851      	ldr	r1, [r2, #4]
 8005c4e:	461c      	mov	r4, r3
 8005c50:	c403      	stmia	r4!, {r0, r1}
 8005c52:	3208      	adds	r2, #8
 8005c54:	4572      	cmp	r2, lr
 8005c56:	4623      	mov	r3, r4
 8005c58:	d1f7      	bne.n	8005c4a <crypto_generichash_blake2b__init_key_salt_personal+0x90>
 8005c5a:	a902      	add	r1, sp, #8
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f7ff fe35 	bl	80058cc <crypto_generichash_blake2b__init_param>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	dbb5      	blt.n	8005bd2 <crypto_generichash_blake2b__init_key_salt_personal+0x18>
 8005c66:	ac12      	add	r4, sp, #72	; 0x48
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f004 ff85 	bl	800ab7c <memset>
 8005c72:	462a      	mov	r2, r5
 8005c74:	4639      	mov	r1, r7
 8005c76:	4620      	mov	r0, r4
 8005c78:	f004 fe7e 	bl	800a978 <memcpy>
 8005c7c:	2280      	movs	r2, #128	; 0x80
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4621      	mov	r1, r4
 8005c82:	4630      	mov	r0, r6
 8005c84:	f7ff fedc 	bl	8005a40 <crypto_generichash_blake2b__update>
 8005c88:	4620      	mov	r0, r4
 8005c8a:	2180      	movs	r1, #128	; 0x80
 8005c8c:	f7ff f8eb 	bl	8004e66 <sodium_memzero>
 8005c90:	2000      	movs	r0, #0
 8005c92:	b032      	add	sp, #200	; 0xc8
 8005c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c98:	2210      	movs	r2, #16
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	f004 ff6e 	bl	800ab7c <memset>
 8005ca0:	e7cd      	b.n	8005c3e <crypto_generichash_blake2b__init_key_salt_personal+0x84>
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	f004 ff69 	bl	800ab7c <memset>
 8005caa:	e7d6      	b.n	8005c5a <crypto_generichash_blake2b__init_key_salt_personal+0xa0>

08005cac <crypto_generichash_blake2b__final>:
 8005cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb0:	1e53      	subs	r3, r2, #1
 8005cb2:	2b3f      	cmp	r3, #63	; 0x3f
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	4616      	mov	r6, r2
 8005cba:	d901      	bls.n	8005cc0 <crypto_generichash_blake2b__final+0x14>
 8005cbc:	f7ff f86a 	bl	8004d94 <sodium_misuse>
 8005cc0:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	d175      	bne.n	8005db4 <crypto_generichash_blake2b__final+0x108>
 8005cc8:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8005ccc:	2b80      	cmp	r3, #128	; 0x80
 8005cce:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8005cd2:	d92f      	bls.n	8005d34 <crypto_generichash_blake2b__final+0x88>
 8005cd4:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 8005cd8:	3280      	adds	r2, #128	; 0x80
 8005cda:	f143 0300 	adc.w	r3, r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bf08      	it	eq
 8005ce2:	2a80      	cmpeq	r2, #128	; 0x80
 8005ce4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
 8005ce8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8005cec:	bf34      	ite	cc
 8005cee:	2101      	movcc	r1, #1
 8005cf0:	2100      	movcs	r1, #0
 8005cf2:	1852      	adds	r2, r2, r1
 8005cf4:	f143 0300 	adc.w	r3, r3, #0
 8005cf8:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8005cfc:	4b2f      	ldr	r3, [pc, #188]	; (8005dbc <crypto_generichash_blake2b__final+0x110>)
 8005cfe:	447b      	add	r3, pc
 8005d00:	4629      	mov	r1, r5
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4798      	blx	r3
 8005d06:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
 8005d0a:	3a80      	subs	r2, #128	; 0x80
 8005d0c:	2a80      	cmp	r2, #128	; 0x80
 8005d0e:	f8c4 2160 	str.w	r2, [r4, #352]	; 0x160
 8005d12:	d90a      	bls.n	8005d2a <crypto_generichash_blake2b__final+0x7e>
 8005d14:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <crypto_generichash_blake2b__final+0x114>)
 8005d16:	4b2b      	ldr	r3, [pc, #172]	; (8005dc4 <crypto_generichash_blake2b__final+0x118>)
 8005d18:	482b      	ldr	r0, [pc, #172]	; (8005dc8 <crypto_generichash_blake2b__final+0x11c>)
 8005d1a:	447a      	add	r2, pc
 8005d1c:	447b      	add	r3, pc
 8005d1e:	3240      	adds	r2, #64	; 0x40
 8005d20:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8005d24:	4478      	add	r0, pc
 8005d26:	f004 fabb 	bl	800a2a0 <__assert_func>
 8005d2a:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f004 fe22 	bl	800a978 <memcpy>
 8005d34:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 8005d38:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8005d3c:	f04f 0900 	mov.w	r9, #0
 8005d40:	1812      	adds	r2, r2, r0
 8005d42:	eb43 0309 	adc.w	r3, r3, r9
 8005d46:	454b      	cmp	r3, r9
 8005d48:	bf08      	it	eq
 8005d4a:	4282      	cmpeq	r2, r0
 8005d4c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8005d50:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8005d54:	bf34      	ite	cc
 8005d56:	2101      	movcc	r1, #1
 8005d58:	2100      	movcs	r1, #0
 8005d5a:	1852      	adds	r2, r2, r1
 8005d5c:	f894 1164 	ldrb.w	r1, [r4, #356]	; 0x164
 8005d60:	f143 0300 	adc.w	r3, r3, #0
 8005d64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d70:	b109      	cbz	r1, 8005d76 <crypto_generichash_blake2b__final+0xca>
 8005d72:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
 8005d76:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8005d80:	4428      	add	r0, r5
 8005d82:	f004 fefb 	bl	800ab7c <memset>
 8005d86:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <crypto_generichash_blake2b__final+0x120>)
 8005d88:	447b      	add	r3, pc
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4620      	mov	r0, r4
 8005d90:	4798      	blx	r3
 8005d92:	4632      	mov	r2, r6
 8005d94:	4621      	mov	r1, r4
 8005d96:	4638      	mov	r0, r7
 8005d98:	f004 fdee 	bl	800a978 <memcpy>
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	2140      	movs	r1, #64	; 0x40
 8005da0:	f7ff f861 	bl	8004e66 <sodium_memzero>
 8005da4:	4628      	mov	r0, r5
 8005da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005daa:	f7ff f85c 	bl	8004e66 <sodium_memzero>
 8005dae:	2000      	movs	r0, #0
 8005db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dbc:	17ffb16a 	.word	0x17ffb16a
 8005dc0:	0000803a 	.word	0x0000803a
 8005dc4:	0000809a 	.word	0x0000809a
 8005dc8:	000080b2 	.word	0x000080b2
 8005dcc:	17ffb0e0 	.word	0x17ffb0e0

08005dd0 <crypto_generichash_blake2b__blake2b>:
 8005dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	b0f0      	sub	sp, #448	; 0x1c0
 8005dd8:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8005ddc:	461d      	mov	r5, r3
 8005dde:	4606      	mov	r6, r0
 8005de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005de4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005de8:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8005dec:	468a      	mov	sl, r1
 8005dee:	b921      	cbnz	r1, 8005dfa <crypto_generichash_blake2b__blake2b+0x2a>
 8005df0:	ea58 0109 	orrs.w	r1, r8, r9
 8005df4:	d001      	beq.n	8005dfa <crypto_generichash_blake2b__blake2b+0x2a>
 8005df6:	f7fe ffcd 	bl	8004d94 <sodium_misuse>
 8005dfa:	2e00      	cmp	r6, #0
 8005dfc:	d0fb      	beq.n	8005df6 <crypto_generichash_blake2b__blake2b+0x26>
 8005dfe:	1e69      	subs	r1, r5, #1
 8005e00:	293f      	cmp	r1, #63	; 0x3f
 8005e02:	d8f8      	bhi.n	8005df6 <crypto_generichash_blake2b__blake2b+0x26>
 8005e04:	b932      	cbnz	r2, 8005e14 <crypto_generichash_blake2b__blake2b+0x44>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f5      	bne.n	8005df6 <crypto_generichash_blake2b__blake2b+0x26>
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f7ff fd8d 	bl	800592c <crypto_generichash_blake2b__init>
 8005e12:	e007      	b.n	8005e24 <crypto_generichash_blake2b__blake2b+0x54>
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	d8ee      	bhi.n	8005df6 <crypto_generichash_blake2b__blake2b+0x26>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f6      	beq.n	8005e0a <crypto_generichash_blake2b__blake2b+0x3a>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f7ff fe74 	bl	8005b0c <crypto_generichash_blake2b__init_key>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	dbe6      	blt.n	8005df6 <crypto_generichash_blake2b__blake2b+0x26>
 8005e28:	4642      	mov	r2, r8
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	4651      	mov	r1, sl
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7ff fe06 	bl	8005a40 <crypto_generichash_blake2b__update>
 8005e34:	462a      	mov	r2, r5
 8005e36:	4631      	mov	r1, r6
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7ff ff37 	bl	8005cac <crypto_generichash_blake2b__final>
 8005e3e:	2000      	movs	r0, #0
 8005e40:	46bd      	mov	sp, r7
 8005e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005e46 <crypto_generichash_blake2b__blake2b_salt_personal>:
 8005e46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	b0f0      	sub	sp, #448	; 0x1c0
 8005e50:	f10d 0447 	add.w	r4, sp, #71	; 0x47
 8005e54:	4606      	mov	r6, r0
 8005e56:	461d      	mov	r5, r3
 8005e58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e62:	f8d7 e030 	ldr.w	lr, [r7, #48]	; 0x30
 8005e66:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8005e6a:	468a      	mov	sl, r1
 8005e6c:	b921      	cbnz	r1, 8005e78 <crypto_generichash_blake2b__blake2b_salt_personal+0x32>
 8005e6e:	ea58 0109 	orrs.w	r1, r8, r9
 8005e72:	d001      	beq.n	8005e78 <crypto_generichash_blake2b__blake2b_salt_personal+0x32>
 8005e74:	f7fe ff8e 	bl	8004d94 <sodium_misuse>
 8005e78:	2e00      	cmp	r6, #0
 8005e7a:	d0fb      	beq.n	8005e74 <crypto_generichash_blake2b__blake2b_salt_personal+0x2e>
 8005e7c:	1e69      	subs	r1, r5, #1
 8005e7e:	293f      	cmp	r1, #63	; 0x3f
 8005e80:	d8f8      	bhi.n	8005e74 <crypto_generichash_blake2b__blake2b_salt_personal+0x2e>
 8005e82:	b942      	cbnz	r2, 8005e96 <crypto_generichash_blake2b__blake2b_salt_personal+0x50>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1f5      	bne.n	8005e74 <crypto_generichash_blake2b__blake2b_salt_personal+0x2e>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	4673      	mov	r3, lr
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f7ff fd82 	bl	8005998 <crypto_generichash_blake2b__init_salt_personal>
 8005e94:	e009      	b.n	8005eaa <crypto_generichash_blake2b__blake2b_salt_personal+0x64>
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d8ec      	bhi.n	8005e74 <crypto_generichash_blake2b__blake2b_salt_personal+0x2e>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f4      	beq.n	8005e88 <crypto_generichash_blake2b__blake2b_salt_personal+0x42>
 8005e9e:	e88d 4001 	stmia.w	sp, {r0, lr}
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff fe88 	bl	8005bba <crypto_generichash_blake2b__init_key_salt_personal>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	dbe2      	blt.n	8005e74 <crypto_generichash_blake2b__blake2b_salt_personal+0x2e>
 8005eae:	4642      	mov	r2, r8
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	4651      	mov	r1, sl
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7ff fdc3 	bl	8005a40 <crypto_generichash_blake2b__update>
 8005eba:	462a      	mov	r2, r5
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f7ff fef4 	bl	8005cac <crypto_generichash_blake2b__final>
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005ecc <crypto_generichash_blake2b__pick_best_implementation>:
 8005ecc:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <crypto_generichash_blake2b__pick_best_implementation+0x14>)
 8005ece:	4a05      	ldr	r2, [pc, #20]	; (8005ee4 <crypto_generichash_blake2b__pick_best_implementation+0x18>)
 8005ed0:	447b      	add	r3, pc
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	589a      	ldr	r2, [r3, r2]
 8005ed6:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <crypto_generichash_blake2b__pick_best_implementation+0x1c>)
 8005ed8:	447b      	add	r3, pc
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	17ffafc8 	.word	0x17ffafc8
 8005ee4:	00000004 	.word	0x00000004
 8005ee8:	17ffaf90 	.word	0x17ffaf90

08005eec <crypto_onetimeauth_poly1305>:
 8005eec:	b410      	push	{r4}
 8005eee:	4c04      	ldr	r4, [pc, #16]	; (8005f00 <crypto_onetimeauth_poly1305+0x14>)
 8005ef0:	447c      	add	r4, pc
 8005ef2:	6824      	ldr	r4, [r4, #0]
 8005ef4:	6824      	ldr	r4, [r4, #0]
 8005ef6:	46a4      	mov	ip, r4
 8005ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005efc:	4760      	bx	ip
 8005efe:	bf00      	nop
 8005f00:	17ffaf7c 	.word	0x17ffaf7c

08005f04 <crypto_onetimeauth_poly1305_verify>:
 8005f04:	b410      	push	{r4}
 8005f06:	4c04      	ldr	r4, [pc, #16]	; (8005f18 <crypto_onetimeauth_poly1305_verify+0x14>)
 8005f08:	447c      	add	r4, pc
 8005f0a:	6824      	ldr	r4, [r4, #0]
 8005f0c:	6864      	ldr	r4, [r4, #4]
 8005f0e:	46a4      	mov	ip, r4
 8005f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f14:	4760      	bx	ip
 8005f16:	bf00      	nop
 8005f18:	17ffaf64 	.word	0x17ffaf64

08005f1c <crypto_onetimeauth_poly1305_init>:
 8005f1c:	4b02      	ldr	r3, [pc, #8]	; (8005f28 <crypto_onetimeauth_poly1305_init+0xc>)
 8005f1e:	447b      	add	r3, pc
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4718      	bx	r3
 8005f26:	bf00      	nop
 8005f28:	17ffaf4e 	.word	0x17ffaf4e

08005f2c <crypto_onetimeauth_poly1305_update>:
 8005f2c:	b410      	push	{r4}
 8005f2e:	4c04      	ldr	r4, [pc, #16]	; (8005f40 <crypto_onetimeauth_poly1305_update+0x14>)
 8005f30:	447c      	add	r4, pc
 8005f32:	6824      	ldr	r4, [r4, #0]
 8005f34:	68e4      	ldr	r4, [r4, #12]
 8005f36:	46a4      	mov	ip, r4
 8005f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f3c:	4760      	bx	ip
 8005f3e:	bf00      	nop
 8005f40:	17ffaf3c 	.word	0x17ffaf3c

08005f44 <crypto_onetimeauth_poly1305_final>:
 8005f44:	4b02      	ldr	r3, [pc, #8]	; (8005f50 <crypto_onetimeauth_poly1305_final+0xc>)
 8005f46:	447b      	add	r3, pc
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	4718      	bx	r3
 8005f4e:	bf00      	nop
 8005f50:	17ffaf26 	.word	0x17ffaf26

08005f54 <crypto_onetimeauth_poly1305_bytes>:
 8005f54:	2010      	movs	r0, #16
 8005f56:	4770      	bx	lr

08005f58 <crypto_onetimeauth_poly1305_keybytes>:
 8005f58:	2020      	movs	r0, #32
 8005f5a:	4770      	bx	lr

08005f5c <crypto_onetimeauth_poly1305_statebytes>:
 8005f5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005f60:	4770      	bx	lr

08005f62 <crypto_onetimeauth_poly1305_keygen>:
 8005f62:	2120      	movs	r1, #32
 8005f64:	f7fe be94 	b.w	8004c90 <randombytes_buf>

08005f68 <_crypto_onetimeauth_poly1305_pick_best_implementation>:
 8005f68:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <_crypto_onetimeauth_poly1305_pick_best_implementation+0x14>)
 8005f6a:	4a05      	ldr	r2, [pc, #20]	; (8005f80 <_crypto_onetimeauth_poly1305_pick_best_implementation+0x18>)
 8005f6c:	447b      	add	r3, pc
 8005f6e:	2000      	movs	r0, #0
 8005f70:	589a      	ldr	r2, [r3, r2]
 8005f72:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <_crypto_onetimeauth_poly1305_pick_best_implementation+0x1c>)
 8005f74:	447b      	add	r3, pc
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	17ffaf2c 	.word	0x17ffaf2c
 8005f80:	00000008 	.word	0x00000008
 8005f84:	17ffaef8 	.word	0x17ffaef8

08005f88 <poly1305_blocks>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	b093      	sub	sp, #76	; 0x4c
 8005f8e:	e890 4400 	ldmia.w	r0, {sl, lr}
 8005f92:	9208      	str	r2, [sp, #32]
 8005f94:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8005f98:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8005f9c:	9111      	str	r1, [sp, #68]	; 0x44
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	bf14      	ite	ne
 8005fa2:	2200      	movne	r2, #0
 8005fa4:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 8005fa8:	9209      	str	r2, [sp, #36]	; 0x24
 8005faa:	68c2      	ldr	r2, [r0, #12]
 8005fac:	9204      	str	r2, [sp, #16]
 8005fae:	6902      	ldr	r2, [r0, #16]
 8005fb0:	9206      	str	r2, [sp, #24]
 8005fb2:	eb0e 028e 	add.w	r2, lr, lr, lsl #2
 8005fb6:	9210      	str	r2, [sp, #64]	; 0x40
 8005fb8:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 8005fbc:	9207      	str	r2, [sp, #28]
 8005fbe:	9a04      	ldr	r2, [sp, #16]
 8005fc0:	9c08      	ldr	r4, [sp, #32]
 8005fc2:	6945      	ldr	r5, [r0, #20]
 8005fc4:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8005fc8:	9400      	str	r4, [sp, #0]
 8005fca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005fce:	9205      	str	r2, [sp, #20]
 8005fd0:	9a06      	ldr	r2, [sp, #24]
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	f100 011c 	add.w	r1, r0, #28
 8005fd8:	eb02 0b82 	add.w	fp, r2, r2, lsl #2
 8005fdc:	c946      	ldmia	r1, {r1, r2, r6}
 8005fde:	9b08      	ldr	r3, [sp, #32]
 8005fe0:	9c00      	ldr	r4, [sp, #0]
 8005fe2:	1b1f      	subs	r7, r3, r4
 8005fe4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fe6:	441f      	add	r7, r3
 8005fe8:	e9dd 3400 	ldrd	r3, r4, [sp]
 8005fec:	2c00      	cmp	r4, #0
 8005fee:	bf08      	it	eq
 8005ff0:	2b10      	cmpeq	r3, #16
 8005ff2:	d208      	bcs.n	8006006 <poly1305_blocks+0x7e>
 8005ff4:	6145      	str	r5, [r0, #20]
 8005ff6:	f8c0 8018 	str.w	r8, [r0, #24]
 8005ffa:	61c1      	str	r1, [r0, #28]
 8005ffc:	6202      	str	r2, [r0, #32]
 8005ffe:	6246      	str	r6, [r0, #36]	; 0x24
 8006000:	b013      	add	sp, #76	; 0x4c
 8006002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006006:	f8d7 4006 	ldr.w	r4, [r7, #6]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	f3c4 1419 	ubfx	r4, r4, #4, #26
 8006010:	440c      	add	r4, r1
 8006012:	f8d7 1009 	ldr.w	r1, [r7, #9]
 8006016:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800601a:	441d      	add	r5, r3
 800601c:	eb02 1291 	add.w	r2, r2, r1, lsr #6
 8006020:	f8d7 3003 	ldr.w	r3, [r7, #3]
 8006024:	68f9      	ldr	r1, [r7, #12]
 8006026:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006028:	ea47 2111 	orr.w	r1, r7, r1, lsr #8
 800602c:	4431      	add	r1, r6
 800602e:	9e07      	ldr	r6, [sp, #28]
 8006030:	f3c3 0399 	ubfx	r3, r3, #2, #26
 8006034:	fba2 6706 	umull	r6, r7, r2, r6
 8006038:	4443      	add	r3, r8
 800603a:	fbea 6705 	umlal	r6, r7, sl, r5
 800603e:	9302      	str	r3, [sp, #8]
 8006040:	fbeb 6703 	umlal	r6, r7, fp, r3
 8006044:	9b05      	ldr	r3, [sp, #20]
 8006046:	fbe3 6704 	umlal	r6, r7, r3, r4
 800604a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800604c:	fbe3 6701 	umlal	r6, r7, r3, r1
 8006050:	9b05      	ldr	r3, [sp, #20]
 8006052:	46b0      	mov	r8, r6
 8006054:	46b9      	mov	r9, r7
 8006056:	fba2 6703 	umull	r6, r7, r2, r3
 800605a:	9b02      	ldr	r3, [sp, #8]
 800605c:	fbee 6705 	umlal	r6, r7, lr, r5
 8006060:	fbe3 670a 	umlal	r6, r7, r3, sl
 8006064:	9b07      	ldr	r3, [sp, #28]
 8006066:	fbe4 670b 	umlal	r6, r7, r4, fp
 800606a:	fbe1 6703 	umlal	r6, r7, r1, r3
 800606e:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8006072:	9b02      	ldr	r3, [sp, #8]
 8006074:	fbab 6702 	umull	r6, r7, fp, r2
 8006078:	fbec 6705 	umlal	r6, r7, ip, r5
 800607c:	fbee 6703 	umlal	r6, r7, lr, r3
 8006080:	9b05      	ldr	r3, [sp, #20]
 8006082:	fbe4 670a 	umlal	r6, r7, r4, sl
 8006086:	fbe1 6703 	umlal	r6, r7, r1, r3
 800608a:	9b04      	ldr	r3, [sp, #16]
 800608c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8006090:	fbaa 6702 	umull	r6, r7, sl, r2
 8006094:	fbe3 6705 	umlal	r6, r7, r3, r5
 8006098:	9b02      	ldr	r3, [sp, #8]
 800609a:	fbec 6703 	umlal	r6, r7, ip, r3
 800609e:	fbee 6704 	umlal	r6, r7, lr, r4
 80060a2:	fbe1 670b 	umlal	r6, r7, r1, fp
 80060a6:	9b06      	ldr	r3, [sp, #24]
 80060a8:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 80060ac:	fba2 670e 	umull	r6, r7, r2, lr
 80060b0:	fbe3 6705 	umlal	r6, r7, r3, r5
 80060b4:	9a02      	ldr	r2, [sp, #8]
 80060b6:	9b04      	ldr	r3, [sp, #16]
 80060b8:	fbe3 6702 	umlal	r6, r7, r3, r2
 80060bc:	fbec 6704 	umlal	r6, r7, ip, r4
 80060c0:	fbe1 670a 	umlal	r6, r7, r1, sl
 80060c4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80060c8:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80060cc:	ea4f 6398 	mov.w	r3, r8, lsr #26
 80060d0:	ea43 1389 	orr.w	r3, r3, r9, lsl #6
 80060d4:	18f6      	adds	r6, r6, r3
 80060d6:	f147 0700 	adc.w	r7, r7, #0
 80060da:	0eb3      	lsrs	r3, r6, #26
 80060dc:	f026 447c 	bic.w	r4, r6, #4227858432	; 0xfc000000
 80060e0:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 80060e4:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80060e8:	18f6      	adds	r6, r6, r3
 80060ea:	f147 0700 	adc.w	r7, r7, #0
 80060ee:	0eb3      	lsrs	r3, r6, #26
 80060f0:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 80060f4:	f026 417c 	bic.w	r1, r6, #4227858432	; 0xfc000000
 80060f8:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80060fc:	f028 457c 	bic.w	r5, r8, #4227858432	; 0xfc000000
 8006100:	18f6      	adds	r6, r6, r3
 8006102:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006106:	f147 0700 	adc.w	r7, r7, #0
 800610a:	0eb3      	lsrs	r3, r6, #26
 800610c:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8006110:	eb18 0803 	adds.w	r8, r8, r3
 8006114:	f149 0900 	adc.w	r9, r9, #0
 8006118:	ea4f 6398 	mov.w	r3, r8, lsr #26
 800611c:	ea43 1389 	orr.w	r3, r3, r9, lsl #6
 8006120:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006124:	442b      	add	r3, r5
 8006126:	f026 427c 	bic.w	r2, r6, #4227858432	; 0xfc000000
 800612a:	f023 457c 	bic.w	r5, r3, #4227858432	; 0xfc000000
 800612e:	f028 467c 	bic.w	r6, r8, #4227858432	; 0xfc000000
 8006132:	eb04 6893 	add.w	r8, r4, r3, lsr #26
 8006136:	e9dd 3400 	ldrd	r3, r4, [sp]
 800613a:	3b10      	subs	r3, #16
 800613c:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
 8006140:	e9cd 3400 	strd	r3, r4, [sp]
 8006144:	e74b      	b.n	8005fde <poly1305_blocks+0x56>

08006146 <poly1305_update>:
 8006146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800614a:	e9d0 890e 	ldrd	r8, r9, [r0, #56]	; 0x38
 800614e:	461d      	mov	r5, r3
 8006150:	ea58 0309 	orrs.w	r3, r8, r9
 8006154:	4607      	mov	r7, r0
 8006156:	460e      	mov	r6, r1
 8006158:	4614      	mov	r4, r2
 800615a:	d034      	beq.n	80061c6 <poly1305_update+0x80>
 800615c:	2010      	movs	r0, #16
 800615e:	ebb0 0008 	subs.w	r0, r0, r8
 8006162:	f04f 0100 	mov.w	r1, #0
 8006166:	eb61 0109 	sbc.w	r1, r1, r9
 800616a:	42a9      	cmp	r1, r5
 800616c:	bf08      	it	eq
 800616e:	4290      	cmpeq	r0, r2
 8006170:	bf38      	it	cc
 8006172:	4602      	movcc	r2, r0
 8006174:	462b      	mov	r3, r5
 8006176:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800617a:	bf38      	it	cc
 800617c:	460b      	movcc	r3, r1
 800617e:	f108 013f 	add.w	r1, r8, #63	; 0x3f
 8006182:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8006186:	4439      	add	r1, r7
 8006188:	4696      	mov	lr, r2
 800618a:	4430      	add	r0, r6
 800618c:	4584      	cmp	ip, r0
 800618e:	d143      	bne.n	8006218 <poly1305_update+0xd2>
 8006190:	eb18 0802 	adds.w	r8, r8, r2
 8006194:	eb49 0903 	adc.w	r9, r9, r3
 8006198:	f1b9 0f00 	cmp.w	r9, #0
 800619c:	bf08      	it	eq
 800619e:	f1b8 0f10 	cmpeq.w	r8, #16
 80061a2:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 80061a6:	d335      	bcc.n	8006214 <poly1305_update+0xce>
 80061a8:	1aa4      	subs	r4, r4, r2
 80061aa:	eb65 0503 	sbc.w	r5, r5, r3
 80061ae:	2210      	movs	r2, #16
 80061b0:	2300      	movs	r3, #0
 80061b2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80061b6:	4638      	mov	r0, r7
 80061b8:	4476      	add	r6, lr
 80061ba:	f7ff fee5 	bl	8005f88 <poly1305_blocks>
 80061be:	2200      	movs	r2, #0
 80061c0:	2300      	movs	r3, #0
 80061c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80061c6:	2d00      	cmp	r5, #0
 80061c8:	bf08      	it	eq
 80061ca:	2c10      	cmpeq	r4, #16
 80061cc:	d30c      	bcc.n	80061e8 <poly1305_update+0xa2>
 80061ce:	f024 080f 	bic.w	r8, r4, #15
 80061d2:	462b      	mov	r3, r5
 80061d4:	4631      	mov	r1, r6
 80061d6:	4642      	mov	r2, r8
 80061d8:	4638      	mov	r0, r7
 80061da:	f7ff fed5 	bl	8005f88 <poly1305_blocks>
 80061de:	ebb4 0408 	subs.w	r4, r4, r8
 80061e2:	4446      	add	r6, r8
 80061e4:	eb65 0505 	sbc.w	r5, r5, r5
 80061e8:	ea54 0305 	orrs.w	r3, r4, r5
 80061ec:	d012      	beq.n	8006214 <poly1305_update+0xce>
 80061ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80061f2:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 80061f6:	f100 033f 	add.w	r3, r0, #63	; 0x3f
 80061fa:	1e72      	subs	r2, r6, #1
 80061fc:	443b      	add	r3, r7
 80061fe:	4476      	add	r6, lr
 8006200:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 8006204:	f803 ef01 	strb.w	lr, [r3, #1]!
 8006208:	42b2      	cmp	r2, r6
 800620a:	d1f9      	bne.n	8006200 <poly1305_update+0xba>
 800620c:	1824      	adds	r4, r4, r0
 800620e:	414d      	adcs	r5, r1
 8006210:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8006214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006218:	f81c af01 	ldrb.w	sl, [ip, #1]!
 800621c:	f801 af01 	strb.w	sl, [r1, #1]!
 8006220:	e7b4      	b.n	800618c <poly1305_update+0x46>

08006222 <crypto_onetimeauth_poly1305_donna_update>:
 8006222:	b508      	push	{r3, lr}
 8006224:	f7ff ff8f 	bl	8006146 <poly1305_update>
 8006228:	2000      	movs	r0, #0
 800622a:	bd08      	pop	{r3, pc}

0800622c <poly1305_finish>:
 800622c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006230:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
 8006234:	460d      	mov	r5, r1
 8006236:	ea52 0103 	orrs.w	r1, r2, r3
 800623a:	b085      	sub	sp, #20
 800623c:	4604      	mov	r4, r0
 800623e:	d019      	beq.n	8006274 <poly1305_finish+0x48>
 8006240:	1881      	adds	r1, r0, r2
 8006242:	2001      	movs	r0, #1
 8006244:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
 8006248:	f102 0140 	add.w	r1, r2, #64	; 0x40
 800624c:	4421      	add	r1, r4
 800624e:	2000      	movs	r0, #0
 8006250:	3201      	adds	r2, #1
 8006252:	f143 0300 	adc.w	r3, r3, #0
 8006256:	2b00      	cmp	r3, #0
 8006258:	bf08      	it	eq
 800625a:	2a10      	cmpeq	r2, #16
 800625c:	f0c0 809b 	bcc.w	8006396 <poly1305_finish+0x16a>
 8006260:	2301      	movs	r3, #1
 8006262:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006266:	2210      	movs	r2, #16
 8006268:	2300      	movs	r3, #0
 800626a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800626e:	4620      	mov	r0, r4
 8006270:	f7ff fe8a 	bl	8005f88 <poly1305_blocks>
 8006274:	f104 0018 	add.w	r0, r4, #24
 8006278:	c80d      	ldmia	r0, {r0, r2, r3}
 800627a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800627c:	6966      	ldr	r6, [r4, #20]
 800627e:	eb02 6290 	add.w	r2, r2, r0, lsr #26
 8006282:	eb03 6392 	add.w	r3, r3, r2, lsr #26
 8006286:	eb01 6193 	add.w	r1, r1, r3, lsr #26
 800628a:	f021 477c 	bic.w	r7, r1, #4227858432	; 0xfc000000
 800628e:	0e89      	lsrs	r1, r1, #26
 8006290:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006294:	4431      	add	r1, r6
 8006296:	f020 487c 	bic.w	r8, r0, #4227858432	; 0xfc000000
 800629a:	f021 4b7c 	bic.w	fp, r1, #4227858432	; 0xfc000000
 800629e:	f023 407c 	bic.w	r0, r3, #4227858432	; 0xfc000000
 80062a2:	eb08 6191 	add.w	r1, r8, r1, lsr #26
 80062a6:	f10b 0305 	add.w	r3, fp, #5
 80062aa:	f022 497c 	bic.w	r9, r2, #4227858432	; 0xfc000000
 80062ae:	f023 4a7c 	bic.w	sl, r3, #4227858432	; 0xfc000000
 80062b2:	eb01 6393 	add.w	r3, r1, r3, lsr #26
 80062b6:	f023 487c 	bic.w	r8, r3, #4227858432	; 0xfc000000
 80062ba:	eb09 6393 	add.w	r3, r9, r3, lsr #26
 80062be:	f107 427c 	add.w	r2, r7, #4227858432	; 0xfc000000
 80062c2:	f023 4e7c 	bic.w	lr, r3, #4227858432	; 0xfc000000
 80062c6:	eb00 6393 	add.w	r3, r0, r3, lsr #26
 80062ca:	f023 4c7c 	bic.w	ip, r3, #4227858432	; 0xfc000000
 80062ce:	eb02 6393 	add.w	r3, r2, r3, lsr #26
 80062d2:	0fde      	lsrs	r6, r3, #31
 80062d4:	1e72      	subs	r2, r6, #1
 80062d6:	4276      	negs	r6, r6
 80062d8:	ea06 0b0b 	and.w	fp, r6, fp
 80062dc:	4031      	ands	r1, r6
 80062de:	4030      	ands	r0, r6
 80062e0:	ea0a 0a02 	and.w	sl, sl, r2
 80062e4:	ea08 0802 	and.w	r8, r8, r2
 80062e8:	ea0c 0c02 	and.w	ip, ip, r2
 80062ec:	ea4a 0a0b 	orr.w	sl, sl, fp
 80062f0:	ea48 0801 	orr.w	r8, r8, r1
 80062f4:	ea06 0909 	and.w	r9, r6, r9
 80062f8:	ea4c 0c00 	orr.w	ip, ip, r0
 80062fc:	ea0e 0e02 	and.w	lr, lr, r2
 8006300:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006302:	ea06 0107 	and.w	r1, r6, r7
 8006306:	ea4e 0e09 	orr.w	lr, lr, r9
 800630a:	ea4a 6688 	orr.w	r6, sl, r8, lsl #26
 800630e:	eb10 0a06 	adds.w	sl, r0, r6
 8006312:	ea4f 560e 	mov.w	r6, lr, lsl #20
 8006316:	ea46 1898 	orr.w	r8, r6, r8, lsr #6
 800631a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800631c:	9103      	str	r1, [sp, #12]
 800631e:	f04f 0100 	mov.w	r1, #0
 8006322:	f141 0b00 	adc.w	fp, r1, #0
 8006326:	2700      	movs	r7, #0
 8006328:	eb16 0608 	adds.w	r6, r6, r8
 800632c:	f04f 0100 	mov.w	r1, #0
 8006330:	f147 0700 	adc.w	r7, r7, #0
 8006334:	eb16 080b 	adds.w	r8, r6, fp
 8006338:	eb47 0901 	adc.w	r9, r7, r1
 800633c:	4013      	ands	r3, r2
 800633e:	9a03      	ldr	r2, [sp, #12]
 8006340:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8006342:	e9cd 8900 	strd	r8, r9, [sp]
 8006346:	ea4f 308c 	mov.w	r0, ip, lsl #14
 800634a:	ea40 3e1e 	orr.w	lr, r0, lr, lsr #12
 800634e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006352:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006354:	f8c5 a000 	str.w	sl, [r5]
 8006358:	4313      	orrs	r3, r2
 800635a:	eb16 060e 	adds.w	r6, r6, lr
 800635e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8006362:	f04f 0700 	mov.w	r7, #0
 8006366:	f147 0700 	adc.w	r7, r7, #0
 800636a:	ea43 4c9c 	orr.w	ip, r3, ip, lsr #18
 800636e:	eb18 0806 	adds.w	r8, r8, r6
 8006372:	eb41 0907 	adc.w	r9, r1, r7
 8006376:	9b00      	ldr	r3, [sp, #0]
 8006378:	606b      	str	r3, [r5, #4]
 800637a:	eb10 000c 	adds.w	r0, r0, ip
 800637e:	eb19 0600 	adds.w	r6, r9, r0
 8006382:	2158      	movs	r1, #88	; 0x58
 8006384:	4620      	mov	r0, r4
 8006386:	f8c5 8008 	str.w	r8, [r5, #8]
 800638a:	60ee      	str	r6, [r5, #12]
 800638c:	b005      	add	sp, #20
 800638e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006392:	f7fe bd68 	b.w	8004e66 <sodium_memzero>
 8006396:	f801 0f01 	strb.w	r0, [r1, #1]!
 800639a:	e759      	b.n	8006250 <poly1305_finish+0x24>

0800639c <crypto_onetimeauth_poly1305_donna_final>:
 800639c:	b508      	push	{r3, lr}
 800639e:	f7ff ff45 	bl	800622c <poly1305_finish>
 80063a2:	2000      	movs	r0, #0
 80063a4:	bd08      	pop	{r3, pc}
	...

080063a8 <crypto_onetimeauth_poly1305_donna>:
 80063a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4606      	mov	r6, r0
 80063b0:	6a38      	ldr	r0, [r7, #32]
 80063b2:	b0a6      	sub	sp, #152	; 0x98
 80063b4:	6805      	ldr	r5, [r0, #0]
 80063b6:	f8d0 e003 	ldr.w	lr, [r0, #3]
 80063ba:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 80063be:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 80063c2:	f025 457c 	bic.w	r5, r5, #4227858432	; 0xfc000000
 80063c6:	6025      	str	r5, [r4, #0]
 80063c8:	4d1d      	ldr	r5, [pc, #116]	; (8006440 <crypto_onetimeauth_poly1305_donna+0x98>)
 80063ca:	ea05 059e 	and.w	r5, r5, lr, lsr #2
 80063ce:	6065      	str	r5, [r4, #4]
 80063d0:	f8d0 e006 	ldr.w	lr, [r0, #6]
 80063d4:	4d1b      	ldr	r5, [pc, #108]	; (8006444 <crypto_onetimeauth_poly1305_donna+0x9c>)
 80063d6:	ea05 151e 	and.w	r5, r5, lr, lsr #4
 80063da:	60a5      	str	r5, [r4, #8]
 80063dc:	f8d0 e009 	ldr.w	lr, [r0, #9]
 80063e0:	4d19      	ldr	r5, [pc, #100]	; (8006448 <crypto_onetimeauth_poly1305_donna+0xa0>)
 80063e2:	ea05 159e 	and.w	r5, r5, lr, lsr #6
 80063e6:	60e5      	str	r5, [r4, #12]
 80063e8:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80063ec:	68c5      	ldr	r5, [r0, #12]
 80063ee:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
 80063f2:	f8d0 e014 	ldr.w	lr, [r0, #20]
 80063f6:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
 80063fa:	f3c5 2513 	ubfx	r5, r5, #8, #20
 80063fe:	f8d0 e018 	ldr.w	lr, [r0, #24]
 8006402:	69c0      	ldr	r0, [r0, #28]
 8006404:	6125      	str	r5, [r4, #16]
 8006406:	6360      	str	r0, [r4, #52]	; 0x34
 8006408:	2500      	movs	r5, #0
 800640a:	4620      	mov	r0, r4
 800640c:	f04f 0800 	mov.w	r8, #0
 8006410:	f04f 0900 	mov.w	r9, #0
 8006414:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 8006418:	6165      	str	r5, [r4, #20]
 800641a:	61a5      	str	r5, [r4, #24]
 800641c:	61e5      	str	r5, [r4, #28]
 800641e:	6225      	str	r5, [r4, #32]
 8006420:	6265      	str	r5, [r4, #36]	; 0x24
 8006422:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
 8006426:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800642a:	f7ff fe8c 	bl	8006146 <poly1305_update>
 800642e:	4620      	mov	r0, r4
 8006430:	4631      	mov	r1, r6
 8006432:	f7ff fefb 	bl	800622c <poly1305_finish>
 8006436:	4628      	mov	r0, r5
 8006438:	46bd      	mov	sp, r7
 800643a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800643e:	bf00      	nop
 8006440:	03ffff03 	.word	0x03ffff03
 8006444:	03ffc0ff 	.word	0x03ffc0ff
 8006448:	03f03fff 	.word	0x03f03fff

0800644c <crypto_onetimeauth_poly1305_donna_verify>:
 800644c:	b530      	push	{r4, r5, lr}
 800644e:	b087      	sub	sp, #28
 8006450:	4605      	mov	r5, r0
 8006452:	ac02      	add	r4, sp, #8
 8006454:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006456:	9000      	str	r0, [sp, #0]
 8006458:	4620      	mov	r0, r4
 800645a:	f7ff ffa5 	bl	80063a8 <crypto_onetimeauth_poly1305_donna>
 800645e:	4621      	mov	r1, r4
 8006460:	4628      	mov	r0, r5
 8006462:	f000 fb7f 	bl	8006b64 <crypto_verify_16>
 8006466:	b007      	add	sp, #28
 8006468:	bd30      	pop	{r4, r5, pc}
	...

0800646c <crypto_onetimeauth_poly1305_donna_init>:
 800646c:	680a      	ldr	r2, [r1, #0]
 800646e:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8006472:	b530      	push	{r4, r5, lr}
 8006474:	6002      	str	r2, [r0, #0]
 8006476:	4603      	mov	r3, r0
 8006478:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <crypto_onetimeauth_poly1305_donna_init+0x64>)
 800647a:	f8d1 0003 	ldr.w	r0, [r1, #3]
 800647e:	ea02 0290 	and.w	r2, r2, r0, lsr #2
 8006482:	605a      	str	r2, [r3, #4]
 8006484:	f8d1 0006 	ldr.w	r0, [r1, #6]
 8006488:	4a12      	ldr	r2, [pc, #72]	; (80064d4 <crypto_onetimeauth_poly1305_donna_init+0x68>)
 800648a:	ea02 1210 	and.w	r2, r2, r0, lsr #4
 800648e:	609a      	str	r2, [r3, #8]
 8006490:	f8d1 0009 	ldr.w	r0, [r1, #9]
 8006494:	4a10      	ldr	r2, [pc, #64]	; (80064d8 <crypto_onetimeauth_poly1305_donna_init+0x6c>)
 8006496:	ea02 1290 	and.w	r2, r2, r0, lsr #6
 800649a:	60da      	str	r2, [r3, #12]
 800649c:	68ca      	ldr	r2, [r1, #12]
 800649e:	2000      	movs	r0, #0
 80064a0:	f3c2 2213 	ubfx	r2, r2, #8, #20
 80064a4:	611a      	str	r2, [r3, #16]
 80064a6:	6158      	str	r0, [r3, #20]
 80064a8:	6198      	str	r0, [r3, #24]
 80064aa:	61d8      	str	r0, [r3, #28]
 80064ac:	6218      	str	r0, [r3, #32]
 80064ae:	6258      	str	r0, [r3, #36]	; 0x24
 80064b0:	690a      	ldr	r2, [r1, #16]
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28
 80064b4:	694a      	ldr	r2, [r1, #20]
 80064b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80064b8:	698a      	ldr	r2, [r1, #24]
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
 80064bc:	69ca      	ldr	r2, [r1, #28]
 80064be:	635a      	str	r2, [r3, #52]	; 0x34
 80064c0:	2400      	movs	r4, #0
 80064c2:	2500      	movs	r5, #0
 80064c4:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 80064c8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
 80064cc:	bd30      	pop	{r4, r5, pc}
 80064ce:	bf00      	nop
 80064d0:	03ffff03 	.word	0x03ffff03
 80064d4:	03ffc0ff 	.word	0x03ffc0ff
 80064d8:	03f03fff 	.word	0x03f03fff

080064dc <crypto_stream_chacha20_keybytes>:
 80064dc:	2020      	movs	r0, #32
 80064de:	4770      	bx	lr

080064e0 <crypto_stream_chacha20_noncebytes>:
 80064e0:	2008      	movs	r0, #8
 80064e2:	4770      	bx	lr

080064e4 <crypto_stream_chacha20_messagebytes_max>:
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064e8:	4770      	bx	lr

080064ea <crypto_stream_chacha20_ietf_keybytes>:
 80064ea:	2020      	movs	r0, #32
 80064ec:	4770      	bx	lr

080064ee <crypto_stream_chacha20_ietf_noncebytes>:
 80064ee:	200c      	movs	r0, #12
 80064f0:	4770      	bx	lr

080064f2 <crypto_stream_chacha20_ietf_messagebytes_max>:
 80064f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f6:	4770      	bx	lr

080064f8 <crypto_stream_chacha20>:
 80064f8:	b410      	push	{r4}
 80064fa:	4903      	ldr	r1, [pc, #12]	; (8006508 <crypto_stream_chacha20+0x10>)
 80064fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006500:	4479      	add	r1, pc
 8006502:	6809      	ldr	r1, [r1, #0]
 8006504:	6809      	ldr	r1, [r1, #0]
 8006506:	4708      	bx	r1
 8006508:	17ffa984 	.word	0x17ffa984

0800650c <crypto_stream_chacha20_ietf>:
 800650c:	b410      	push	{r4}
 800650e:	4903      	ldr	r1, [pc, #12]	; (800651c <crypto_stream_chacha20_ietf+0x10>)
 8006510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006514:	4479      	add	r1, pc
 8006516:	6809      	ldr	r1, [r1, #0]
 8006518:	6849      	ldr	r1, [r1, #4]
 800651a:	4708      	bx	r1
 800651c:	17ffa970 	.word	0x17ffa970

08006520 <crypto_stream_chacha20_xor_ic>:
 8006520:	b4f0      	push	{r4, r5, r6, r7}
 8006522:	4c03      	ldr	r4, [pc, #12]	; (8006530 <crypto_stream_chacha20_xor_ic+0x10>)
 8006524:	447c      	add	r4, pc
 8006526:	6824      	ldr	r4, [r4, #0]
 8006528:	68a4      	ldr	r4, [r4, #8]
 800652a:	46a4      	mov	ip, r4
 800652c:	bcf0      	pop	{r4, r5, r6, r7}
 800652e:	4760      	bx	ip
 8006530:	17ffa960 	.word	0x17ffa960

08006534 <crypto_stream_chacha20_ietf_xor_ic>:
 8006534:	b430      	push	{r4, r5}
 8006536:	4c03      	ldr	r4, [pc, #12]	; (8006544 <crypto_stream_chacha20_ietf_xor_ic+0x10>)
 8006538:	447c      	add	r4, pc
 800653a:	6824      	ldr	r4, [r4, #0]
 800653c:	68e4      	ldr	r4, [r4, #12]
 800653e:	46a4      	mov	ip, r4
 8006540:	bc30      	pop	{r4, r5}
 8006542:	4760      	bx	ip
 8006544:	17ffa94c 	.word	0x17ffa94c

08006548 <crypto_stream_chacha20_xor>:
 8006548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800654a:	4c08      	ldr	r4, [pc, #32]	; (800656c <crypto_stream_chacha20_xor+0x24>)
 800654c:	b087      	sub	sp, #28
 800654e:	447c      	add	r4, pc
 8006550:	2600      	movs	r6, #0
 8006552:	2700      	movs	r7, #0
 8006554:	6824      	ldr	r4, [r4, #0]
 8006556:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006558:	9504      	str	r5, [sp, #16]
 800655a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800655e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006560:	9500      	str	r5, [sp, #0]
 8006562:	68a4      	ldr	r4, [r4, #8]
 8006564:	47a0      	blx	r4
 8006566:	b007      	add	sp, #28
 8006568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800656a:	bf00      	nop
 800656c:	17ffa936 	.word	0x17ffa936

08006570 <crypto_stream_chacha20_ietf_xor>:
 8006570:	b530      	push	{r4, r5, lr}
 8006572:	4c07      	ldr	r4, [pc, #28]	; (8006590 <crypto_stream_chacha20_ietf_xor+0x20>)
 8006574:	b085      	sub	sp, #20
 8006576:	447c      	add	r4, pc
 8006578:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800657a:	6824      	ldr	r4, [r4, #0]
 800657c:	9502      	str	r5, [sp, #8]
 800657e:	2500      	movs	r5, #0
 8006580:	9501      	str	r5, [sp, #4]
 8006582:	9d08      	ldr	r5, [sp, #32]
 8006584:	9500      	str	r5, [sp, #0]
 8006586:	68e4      	ldr	r4, [r4, #12]
 8006588:	47a0      	blx	r4
 800658a:	b005      	add	sp, #20
 800658c:	bd30      	pop	{r4, r5, pc}
 800658e:	bf00      	nop
 8006590:	17ffa90e 	.word	0x17ffa90e

08006594 <crypto_stream_chacha20_keygen>:
 8006594:	2120      	movs	r1, #32
 8006596:	f7fe bb7b 	b.w	8004c90 <randombytes_buf>

0800659a <crypto_stream_chacha20_ietf_keygen>:
 800659a:	f7ff bffb 	b.w	8006594 <crypto_stream_chacha20_keygen>
	...

080065a0 <_crypto_stream_chacha20_pick_best_implementation>:
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <_crypto_stream_chacha20_pick_best_implementation+0x14>)
 80065a2:	4a05      	ldr	r2, [pc, #20]	; (80065b8 <_crypto_stream_chacha20_pick_best_implementation+0x18>)
 80065a4:	447b      	add	r3, pc
 80065a6:	2000      	movs	r0, #0
 80065a8:	589a      	ldr	r2, [r3, r2]
 80065aa:	4b04      	ldr	r3, [pc, #16]	; (80065bc <_crypto_stream_chacha20_pick_best_implementation+0x1c>)
 80065ac:	447b      	add	r3, pc
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	17ffa8f4 	.word	0x17ffa8f4
 80065b8:	00000010 	.word	0x00000010
 80065bc:	17ffa8d8 	.word	0x17ffa8d8

080065c0 <chacha_keysetup>:
 80065c0:	4b0e      	ldr	r3, [pc, #56]	; (80065fc <chacha_keysetup+0x3c>)
 80065c2:	4a0f      	ldr	r2, [pc, #60]	; (8006600 <chacha_keysetup+0x40>)
 80065c4:	e880 000c 	stmia.w	r0, {r2, r3}
 80065c8:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <chacha_keysetup+0x44>)
 80065ca:	6083      	str	r3, [r0, #8]
 80065cc:	f1a3 6364 	sub.w	r3, r3, #239075328	; 0xe400000
 80065d0:	f5a3 33e3 	sub.w	r3, r3, #116224	; 0x1c600
 80065d4:	f5a3 73df 	sub.w	r3, r3, #446	; 0x1be
 80065d8:	60c3      	str	r3, [r0, #12]
 80065da:	680b      	ldr	r3, [r1, #0]
 80065dc:	6103      	str	r3, [r0, #16]
 80065de:	684b      	ldr	r3, [r1, #4]
 80065e0:	6143      	str	r3, [r0, #20]
 80065e2:	688b      	ldr	r3, [r1, #8]
 80065e4:	6183      	str	r3, [r0, #24]
 80065e6:	68cb      	ldr	r3, [r1, #12]
 80065e8:	61c3      	str	r3, [r0, #28]
 80065ea:	690b      	ldr	r3, [r1, #16]
 80065ec:	6203      	str	r3, [r0, #32]
 80065ee:	694b      	ldr	r3, [r1, #20]
 80065f0:	6243      	str	r3, [r0, #36]	; 0x24
 80065f2:	698b      	ldr	r3, [r1, #24]
 80065f4:	6283      	str	r3, [r0, #40]	; 0x28
 80065f6:	69cb      	ldr	r3, [r1, #28]
 80065f8:	62c3      	str	r3, [r0, #44]	; 0x2c
 80065fa:	4770      	bx	lr
 80065fc:	3320646e 	.word	0x3320646e
 8006600:	61707865 	.word	0x61707865
 8006604:	79622d32 	.word	0x79622d32

08006608 <chacha20_encrypt_bytes.part.0>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	b0b1      	sub	sp, #196	; 0xc4
 800660e:	4614      	mov	r4, r2
 8006610:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 8006614:	2b01      	cmp	r3, #1
 8006616:	bf08      	it	eq
 8006618:	2a00      	cmpeq	r2, #0
 800661a:	9001      	str	r0, [sp, #4]
 800661c:	460d      	mov	r5, r1
 800661e:	d301      	bcc.n	8006624 <chacha20_encrypt_bytes.part.0+0x1c>
 8006620:	f7fe fbb8 	bl	8004d94 <sodium_misuse>
 8006624:	9b01      	ldr	r3, [sp, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	930a      	str	r3, [sp, #40]	; 0x28
 800662a:	9b01      	ldr	r3, [sp, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006630:	9b01      	ldr	r3, [sp, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	930c      	str	r3, [sp, #48]	; 0x30
 8006636:	9b01      	ldr	r3, [sp, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	930d      	str	r3, [sp, #52]	; 0x34
 800663c:	9b01      	ldr	r3, [sp, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	930e      	str	r3, [sp, #56]	; 0x38
 8006642:	9b01      	ldr	r3, [sp, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	930f      	str	r3, [sp, #60]	; 0x3c
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	9310      	str	r3, [sp, #64]	; 0x40
 800664e:	9b01      	ldr	r3, [sp, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	9311      	str	r3, [sp, #68]	; 0x44
 8006654:	9b01      	ldr	r3, [sp, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	9312      	str	r3, [sp, #72]	; 0x48
 800665a:	9b01      	ldr	r3, [sp, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006660:	9b01      	ldr	r3, [sp, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	9314      	str	r3, [sp, #80]	; 0x50
 8006666:	9b01      	ldr	r3, [sp, #4]
 8006668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666a:	9315      	str	r3, [sp, #84]	; 0x54
 800666c:	9b01      	ldr	r3, [sp, #4]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	9303      	str	r3, [sp, #12]
 8006672:	9b01      	ldr	r3, [sp, #4]
 8006674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006676:	9304      	str	r3, [sp, #16]
 8006678:	9b01      	ldr	r3, [sp, #4]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	9316      	str	r3, [sp, #88]	; 0x58
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006682:	9317      	str	r3, [sp, #92]	; 0x5c
 8006684:	2300      	movs	r3, #0
 8006686:	931d      	str	r3, [sp, #116]	; 0x74
 8006688:	ab20      	add	r3, sp, #128	; 0x80
 800668a:	931f      	str	r3, [sp, #124]	; 0x7c
 800668c:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 8006690:	2b00      	cmp	r3, #0
 8006692:	bf08      	it	eq
 8006694:	2a40      	cmpeq	r2, #64	; 0x40
 8006696:	d210      	bcs.n	80066ba <chacha20_encrypt_bytes.part.0+0xb2>
 8006698:	2240      	movs	r2, #64	; 0x40
 800669a:	2100      	movs	r1, #0
 800669c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800669e:	f004 fa6d 	bl	800ab7c <memset>
 80066a2:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80066a4:	3a01      	subs	r2, #1
 80066a6:	1e6b      	subs	r3, r5, #1
 80066a8:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 80066ac:	4415      	add	r5, r2
 80066ae:	429d      	cmp	r5, r3
 80066b0:	f040 80bb 	bne.w	800682a <chacha20_encrypt_bytes.part.0+0x222>
 80066b4:	941d      	str	r4, [sp, #116]	; 0x74
 80066b6:	ac20      	add	r4, sp, #128	; 0x80
 80066b8:	4625      	mov	r5, r4
 80066ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066bc:	9307      	str	r3, [sp, #28]
 80066be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80066c0:	9309      	str	r3, [sp, #36]	; 0x24
 80066c2:	9b04      	ldr	r3, [sp, #16]
 80066c4:	9308      	str	r3, [sp, #32]
 80066c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066c8:	9306      	str	r3, [sp, #24]
 80066ca:	aa10      	add	r2, sp, #64	; 0x40
 80066cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066ce:	9305      	str	r3, [sp, #20]
 80066d0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80066d4:	e892 060c 	ldmia.w	r2, {r2, r3, r9, sl}
 80066d8:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
 80066dc:	260b      	movs	r6, #11
 80066de:	9803      	ldr	r0, [sp, #12]
 80066e0:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80066e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80066e6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80066e8:	9602      	str	r6, [sp, #8]
 80066ea:	9e02      	ldr	r6, [sp, #8]
 80066ec:	3e01      	subs	r6, #1
 80066ee:	9602      	str	r6, [sp, #8]
 80066f0:	f040 80a0 	bne.w	8006834 <chacha20_encrypt_bytes.part.0+0x22c>
 80066f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80066f6:	44b0      	add	r8, r6
 80066f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80066fa:	44b4      	add	ip, r6
 80066fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80066fe:	44b6      	add	lr, r6
 8006700:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006702:	4437      	add	r7, r6
 8006704:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006706:	4431      	add	r1, r6
 8006708:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800670a:	44b3      	add	fp, r6
 800670c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800670e:	4432      	add	r2, r6
 8006710:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006712:	4433      	add	r3, r6
 8006714:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8006716:	9318      	str	r3, [sp, #96]	; 0x60
 8006718:	44b1      	add	r9, r6
 800671a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800671c:	44b2      	add	sl, r6
 800671e:	9e05      	ldr	r6, [sp, #20]
 8006720:	4633      	mov	r3, r6
 8006722:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006724:	4433      	add	r3, r6
 8006726:	9e06      	ldr	r6, [sp, #24]
 8006728:	9305      	str	r3, [sp, #20]
 800672a:	4633      	mov	r3, r6
 800672c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800672e:	4433      	add	r3, r6
 8006730:	9e03      	ldr	r6, [sp, #12]
 8006732:	9306      	str	r3, [sp, #24]
 8006734:	4430      	add	r0, r6
 8006736:	9019      	str	r0, [sp, #100]	; 0x64
 8006738:	9e04      	ldr	r6, [sp, #16]
 800673a:	9808      	ldr	r0, [sp, #32]
 800673c:	4430      	add	r0, r6
 800673e:	9008      	str	r0, [sp, #32]
 8006740:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8006742:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006744:	4430      	add	r0, r6
 8006746:	9009      	str	r0, [sp, #36]	; 0x24
 8006748:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800674a:	9807      	ldr	r0, [sp, #28]
 800674c:	4430      	add	r0, r6
 800674e:	4606      	mov	r6, r0
 8006750:	6828      	ldr	r0, [r5, #0]
 8006752:	ea80 0008 	eor.w	r0, r0, r8
 8006756:	9007      	str	r0, [sp, #28]
 8006758:	6868      	ldr	r0, [r5, #4]
 800675a:	ea80 000c 	eor.w	r0, r0, ip
 800675e:	901a      	str	r0, [sp, #104]	; 0x68
 8006760:	68a8      	ldr	r0, [r5, #8]
 8006762:	ea80 000e 	eor.w	r0, r0, lr
 8006766:	901b      	str	r0, [sp, #108]	; 0x6c
 8006768:	68e8      	ldr	r0, [r5, #12]
 800676a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800676c:	f8d5 c028 	ldr.w	ip, [r5, #40]	; 0x28
 8006770:	f8d5 e034 	ldr.w	lr, [r5, #52]	; 0x34
 8006774:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 8006778:	4078      	eors	r0, r7
 800677a:	901c      	str	r0, [sp, #112]	; 0x70
 800677c:	6928      	ldr	r0, [r5, #16]
 800677e:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8006780:	4041      	eors	r1, r0
 8006782:	911e      	str	r1, [sp, #120]	; 0x78
 8006784:	6969      	ldr	r1, [r5, #20]
 8006786:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8006788:	ea81 0b0b 	eor.w	fp, r1, fp
 800678c:	69a9      	ldr	r1, [r5, #24]
 800678e:	404a      	eors	r2, r1
 8006790:	69e9      	ldr	r1, [r5, #28]
 8006792:	404b      	eors	r3, r1
 8006794:	6a29      	ldr	r1, [r5, #32]
 8006796:	ea81 0909 	eor.w	r9, r1, r9
 800679a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800679c:	ea81 0a0a 	eor.w	sl, r1, sl
 80067a0:	9905      	ldr	r1, [sp, #20]
 80067a2:	ea8c 0c01 	eor.w	ip, ip, r1
 80067a6:	9906      	ldr	r1, [sp, #24]
 80067a8:	404f      	eors	r7, r1
 80067aa:	9919      	ldr	r1, [sp, #100]	; 0x64
 80067ac:	4048      	eors	r0, r1
 80067ae:	9908      	ldr	r1, [sp, #32]
 80067b0:	ea8e 0e01 	eor.w	lr, lr, r1
 80067b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067b6:	ea88 0801 	eor.w	r8, r8, r1
 80067ba:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80067bc:	4071      	eors	r1, r6
 80067be:	9e03      	ldr	r6, [sp, #12]
 80067c0:	3601      	adds	r6, #1
 80067c2:	9603      	str	r6, [sp, #12]
 80067c4:	bf02      	ittt	eq
 80067c6:	9e04      	ldreq	r6, [sp, #16]
 80067c8:	3601      	addeq	r6, #1
 80067ca:	9604      	streq	r6, [sp, #16]
 80067cc:	9e07      	ldr	r6, [sp, #28]
 80067ce:	6026      	str	r6, [r4, #0]
 80067d0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80067d2:	6066      	str	r6, [r4, #4]
 80067d4:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80067d6:	60a6      	str	r6, [r4, #8]
 80067d8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80067da:	60e6      	str	r6, [r4, #12]
 80067dc:	61a2      	str	r2, [r4, #24]
 80067de:	61e3      	str	r3, [r4, #28]
 80067e0:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80067e8:	6126      	str	r6, [r4, #16]
 80067ea:	bf08      	it	eq
 80067ec:	2a41      	cmpeq	r2, #65	; 0x41
 80067ee:	f8c4 b014 	str.w	fp, [r4, #20]
 80067f2:	f8c4 9020 	str.w	r9, [r4, #32]
 80067f6:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
 80067fa:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
 80067fe:	62e7      	str	r7, [r4, #44]	; 0x2c
 8006800:	6320      	str	r0, [r4, #48]	; 0x30
 8006802:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
 8006806:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800680a:	63e1      	str	r1, [r4, #60]	; 0x3c
 800680c:	f080 80da 	bcs.w	80069c4 <chacha20_encrypt_bytes.part.0+0x3bc>
 8006810:	2b00      	cmp	r3, #0
 8006812:	bf08      	it	eq
 8006814:	2a40      	cmpeq	r2, #64	; 0x40
 8006816:	f040 80d0 	bne.w	80069ba <chacha20_encrypt_bytes.part.0+0x3b2>
 800681a:	9a01      	ldr	r2, [sp, #4]
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	6313      	str	r3, [r2, #48]	; 0x30
 8006820:	9b04      	ldr	r3, [sp, #16]
 8006822:	6353      	str	r3, [r2, #52]	; 0x34
 8006824:	b031      	add	sp, #196	; 0xc4
 8006826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800682e:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006832:	e73c      	b.n	80066ae <chacha20_encrypt_bytes.part.0+0xa6>
 8006834:	4488      	add	r8, r1
 8006836:	ea88 0000 	eor.w	r0, r8, r0
 800683a:	ea4f 4030 	mov.w	r0, r0, ror #16
 800683e:	4481      	add	r9, r0
 8006840:	ea81 0109 	eor.w	r1, r1, r9
 8006844:	ea4f 5131 	mov.w	r1, r1, ror #20
 8006848:	4488      	add	r8, r1
 800684a:	ea80 0008 	eor.w	r0, r0, r8
 800684e:	ea4f 6030 	mov.w	r0, r0, ror #24
 8006852:	9018      	str	r0, [sp, #96]	; 0x60
 8006854:	4448      	add	r0, r9
 8006856:	4041      	eors	r1, r0
 8006858:	ea4f 6171 	mov.w	r1, r1, ror #25
 800685c:	911a      	str	r1, [sp, #104]	; 0x68
 800685e:	9908      	ldr	r1, [sp, #32]
 8006860:	9019      	str	r0, [sp, #100]	; 0x64
 8006862:	44dc      	add	ip, fp
 8006864:	ea8c 0101 	eor.w	r1, ip, r1
 8006868:	ea4f 4131 	mov.w	r1, r1, ror #16
 800686c:	448a      	add	sl, r1
 800686e:	ea8b 000a 	eor.w	r0, fp, sl
 8006872:	ea4f 5030 	mov.w	r0, r0, ror #20
 8006876:	eb0c 0b00 	add.w	fp, ip, r0
 800687a:	ea81 010b 	eor.w	r1, r1, fp
 800687e:	ea4f 6131 	mov.w	r1, r1, ror #24
 8006882:	9108      	str	r1, [sp, #32]
 8006884:	4451      	add	r1, sl
 8006886:	911b      	str	r1, [sp, #108]	; 0x6c
 8006888:	4048      	eors	r0, r1
 800688a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800688c:	9e06      	ldr	r6, [sp, #24]
 800688e:	4496      	add	lr, r2
 8006890:	ea8e 0a01 	eor.w	sl, lr, r1
 8006894:	9905      	ldr	r1, [sp, #20]
 8006896:	ea4f 4a3a 	mov.w	sl, sl, ror #16
 800689a:	4451      	add	r1, sl
 800689c:	468c      	mov	ip, r1
 800689e:	404a      	eors	r2, r1
 80068a0:	9907      	ldr	r1, [sp, #28]
 80068a2:	441f      	add	r7, r3
 80068a4:	4079      	eors	r1, r7
 80068a6:	ea4f 4131 	mov.w	r1, r1, ror #16
 80068aa:	440e      	add	r6, r1
 80068ac:	4073      	eors	r3, r6
 80068ae:	ea4f 5333 	mov.w	r3, r3, ror #20
 80068b2:	441f      	add	r7, r3
 80068b4:	ea4f 5232 	mov.w	r2, r2, ror #20
 80068b8:	4496      	add	lr, r2
 80068ba:	ea4f 6070 	mov.w	r0, r0, ror #25
 80068be:	4079      	eors	r1, r7
 80068c0:	4480      	add	r8, r0
 80068c2:	ea8a 0a0e 	eor.w	sl, sl, lr
 80068c6:	46b1      	mov	r9, r6
 80068c8:	ea4f 6131 	mov.w	r1, r1, ror #24
 80068cc:	ea4f 6a3a 	mov.w	sl, sl, ror #24
 80068d0:	4489      	add	r9, r1
 80068d2:	ea81 0108 	eor.w	r1, r1, r8
 80068d6:	44d4      	add	ip, sl
 80068d8:	ea4f 4131 	mov.w	r1, r1, ror #16
 80068dc:	ea82 020c 	eor.w	r2, r2, ip
 80068e0:	448c      	add	ip, r1
 80068e2:	ea80 000c 	eor.w	r0, r0, ip
 80068e6:	ea4f 5030 	mov.w	r0, r0, ror #20
 80068ea:	4480      	add	r8, r0
 80068ec:	ea81 0108 	eor.w	r1, r1, r8
 80068f0:	ea4f 6131 	mov.w	r1, r1, ror #24
 80068f4:	9107      	str	r1, [sp, #28]
 80068f6:	4461      	add	r1, ip
 80068f8:	ea4f 6272 	mov.w	r2, r2, ror #25
 80068fc:	9105      	str	r1, [sp, #20]
 80068fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006900:	901c      	str	r0, [sp, #112]	; 0x70
 8006902:	eb0b 0c02 	add.w	ip, fp, r2
 8006906:	ea81 000c 	eor.w	r0, r1, ip
 800690a:	ea4f 4030 	mov.w	r0, r0, ror #16
 800690e:	ea83 0309 	eor.w	r3, r3, r9
 8006912:	4481      	add	r9, r0
 8006914:	ea82 0209 	eor.w	r2, r2, r9
 8006918:	ea4f 5232 	mov.w	r2, r2, ror #20
 800691c:	4494      	add	ip, r2
 800691e:	ea80 000c 	eor.w	r0, r0, ip
 8006922:	ea4f 6030 	mov.w	r0, r0, ror #24
 8006926:	eb09 0100 	add.w	r1, r9, r0
 800692a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800692e:	9106      	str	r1, [sp, #24]
 8006930:	9908      	ldr	r1, [sp, #32]
 8006932:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006934:	449e      	add	lr, r3
 8006936:	ea81 010e 	eor.w	r1, r1, lr
 800693a:	ea4f 4131 	mov.w	r1, r1, ror #16
 800693e:	eb06 0901 	add.w	r9, r6, r1
 8006942:	ea83 0309 	eor.w	r3, r3, r9
 8006946:	ea4f 5333 	mov.w	r3, r3, ror #20
 800694a:	449e      	add	lr, r3
 800694c:	ea81 010e 	eor.w	r1, r1, lr
 8006950:	ea4f 6131 	mov.w	r1, r1, ror #24
 8006954:	4489      	add	r9, r1
 8006956:	9108      	str	r1, [sp, #32]
 8006958:	991a      	ldr	r1, [sp, #104]	; 0x68
 800695a:	440f      	add	r7, r1
 800695c:	ea8a 0b07 	eor.w	fp, sl, r7
 8006960:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006962:	ea4f 4b3b 	mov.w	fp, fp, ror #16
 8006966:	eb01 0a0b 	add.w	sl, r1, fp
 800696a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800696c:	ea81 010a 	eor.w	r1, r1, sl
 8006970:	ea4f 5131 	mov.w	r1, r1, ror #20
 8006974:	440f      	add	r7, r1
 8006976:	ea8b 0b07 	eor.w	fp, fp, r7
 800697a:	ea4f 663b 	mov.w	r6, fp, ror #24
 800697e:	44b2      	add	sl, r6
 8006980:	9609      	str	r6, [sp, #36]	; 0x24
 8006982:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8006984:	46b3      	mov	fp, r6
 8006986:	9e05      	ldr	r6, [sp, #20]
 8006988:	ea8b 0b06 	eor.w	fp, fp, r6
 800698c:	9e06      	ldr	r6, [sp, #24]
 800698e:	ea81 010a 	eor.w	r1, r1, sl
 8006992:	4072      	eors	r2, r6
 8006994:	ea83 0309 	eor.w	r3, r3, r9
 8006998:	ea4f 6171 	mov.w	r1, r1, ror #25
 800699c:	ea4f 6b7b 	mov.w	fp, fp, ror #25
 80069a0:	ea4f 6272 	mov.w	r2, r2, ror #25
 80069a4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80069a8:	e69f      	b.n	80066ea <chacha20_encrypt_bytes.part.0+0xe2>
 80069aa:	9b02      	ldr	r3, [sp, #8]
 80069ac:	9902      	ldr	r1, [sp, #8]
 80069ae:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80069b0:	5ce3      	ldrb	r3, [r4, r3]
 80069b2:	5453      	strb	r3, [r2, r1]
 80069b4:	460b      	mov	r3, r1
 80069b6:	3301      	adds	r3, #1
 80069b8:	9302      	str	r3, [sp, #8]
 80069ba:	9b02      	ldr	r3, [sp, #8]
 80069bc:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80069be:	4293      	cmp	r3, r2
 80069c0:	d3f3      	bcc.n	80069aa <chacha20_encrypt_bytes.part.0+0x3a2>
 80069c2:	e72a      	b.n	800681a <chacha20_encrypt_bytes.part.0+0x212>
 80069c4:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 80069c8:	3a40      	subs	r2, #64	; 0x40
 80069ca:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80069ce:	e9cd 233a 	strd	r2, r3, [sp, #232]	; 0xe8
 80069d2:	3440      	adds	r4, #64	; 0x40
 80069d4:	3540      	adds	r5, #64	; 0x40
 80069d6:	e659      	b.n	800668c <chacha20_encrypt_bytes.part.0+0x84>

080069d8 <stream_ietf_ref>:
 80069d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069dc:	4616      	mov	r6, r2
 80069de:	b092      	sub	sp, #72	; 0x48
 80069e0:	461f      	mov	r7, r3
 80069e2:	ea56 0307 	orrs.w	r3, r6, r7
 80069e6:	4680      	mov	r8, r0
 80069e8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80069ea:	d01b      	beq.n	8006a24 <stream_ietf_ref+0x4c>
 80069ec:	ac02      	add	r4, sp, #8
 80069ee:	9919      	ldr	r1, [sp, #100]	; 0x64
 80069f0:	4620      	mov	r0, r4
 80069f2:	f7ff fde5 	bl	80065c0 <chacha_keysetup>
 80069f6:	682b      	ldr	r3, [r5, #0]
 80069f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80069fa:	686b      	ldr	r3, [r5, #4]
 80069fc:	9310      	str	r3, [sp, #64]	; 0x40
 80069fe:	2100      	movs	r1, #0
 8006a00:	68ab      	ldr	r3, [r5, #8]
 8006a02:	910e      	str	r1, [sp, #56]	; 0x38
 8006a04:	4632      	mov	r2, r6
 8006a06:	4640      	mov	r0, r8
 8006a08:	9311      	str	r3, [sp, #68]	; 0x44
 8006a0a:	f004 f8b7 	bl	800ab7c <memset>
 8006a0e:	4641      	mov	r1, r8
 8006a10:	4620      	mov	r0, r4
 8006a12:	e9cd 6700 	strd	r6, r7, [sp]
 8006a16:	4642      	mov	r2, r8
 8006a18:	f7ff fdf6 	bl	8006608 <chacha20_encrypt_bytes.part.0>
 8006a1c:	2140      	movs	r1, #64	; 0x40
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7fe fa21 	bl	8004e66 <sodium_memzero>
 8006a24:	2000      	movs	r0, #0
 8006a26:	b012      	add	sp, #72	; 0x48
 8006a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a2c <stream_ref_xor_ic>:
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	4616      	mov	r6, r2
 8006a32:	b093      	sub	sp, #76	; 0x4c
 8006a34:	461f      	mov	r7, r3
 8006a36:	ea56 0307 	orrs.w	r3, r6, r7
 8006a3a:	4681      	mov	r9, r0
 8006a3c:	4688      	mov	r8, r1
 8006a3e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006a40:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8006a44:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8006a48:	d017      	beq.n	8006a7a <stream_ref_xor_ic+0x4e>
 8006a4a:	ac02      	add	r4, sp, #8
 8006a4c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f7ff fdb6 	bl	80065c0 <chacha_keysetup>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	9310      	str	r3, [sp, #64]	; 0x40
 8006a58:	4641      	mov	r1, r8
 8006a5a:	686b      	ldr	r3, [r5, #4]
 8006a5c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006a60:	4620      	mov	r0, r4
 8006a62:	e9cd 6700 	strd	r6, r7, [sp]
 8006a66:	464a      	mov	r2, r9
 8006a68:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8006a6c:	9311      	str	r3, [sp, #68]	; 0x44
 8006a6e:	f7ff fdcb 	bl	8006608 <chacha20_encrypt_bytes.part.0>
 8006a72:	2140      	movs	r1, #64	; 0x40
 8006a74:	4620      	mov	r0, r4
 8006a76:	f7fe f9f6 	bl	8004e66 <sodium_memzero>
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	b013      	add	sp, #76	; 0x4c
 8006a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a82 <stream_ietf_ref_xor_ic>:
 8006a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a86:	4616      	mov	r6, r2
 8006a88:	b093      	sub	sp, #76	; 0x4c
 8006a8a:	461f      	mov	r7, r3
 8006a8c:	ea56 0307 	orrs.w	r3, r6, r7
 8006a90:	4681      	mov	r9, r0
 8006a92:	4688      	mov	r8, r1
 8006a94:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006a96:	d017      	beq.n	8006ac8 <stream_ietf_ref_xor_ic+0x46>
 8006a98:	ac02      	add	r4, sp, #8
 8006a9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f7ff fd8f 	bl	80065c0 <chacha_keysetup>
 8006aa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006aa4:	930e      	str	r3, [sp, #56]	; 0x38
 8006aa6:	682b      	ldr	r3, [r5, #0]
 8006aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aaa:	686b      	ldr	r3, [r5, #4]
 8006aac:	9310      	str	r3, [sp, #64]	; 0x40
 8006aae:	4641      	mov	r1, r8
 8006ab0:	68ab      	ldr	r3, [r5, #8]
 8006ab2:	9311      	str	r3, [sp, #68]	; 0x44
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	e9cd 6700 	strd	r6, r7, [sp]
 8006aba:	464a      	mov	r2, r9
 8006abc:	f7ff fda4 	bl	8006608 <chacha20_encrypt_bytes.part.0>
 8006ac0:	2140      	movs	r1, #64	; 0x40
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f7fe f9cf 	bl	8004e66 <sodium_memzero>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	b013      	add	sp, #76	; 0x4c
 8006acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006ad0 <stream_ref>:
 8006ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	b092      	sub	sp, #72	; 0x48
 8006ad8:	461f      	mov	r7, r3
 8006ada:	ea56 0307 	orrs.w	r3, r6, r7
 8006ade:	4605      	mov	r5, r0
 8006ae0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ae4:	d01c      	beq.n	8006b20 <stream_ref+0x50>
 8006ae6:	ac02      	add	r4, sp, #8
 8006ae8:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7ff fd68 	bl	80065c0 <chacha_keysetup>
 8006af0:	f8d8 3000 	ldr.w	r3, [r8]
 8006af4:	9310      	str	r3, [sp, #64]	; 0x40
 8006af6:	2100      	movs	r1, #0
 8006af8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006afc:	910e      	str	r1, [sp, #56]	; 0x38
 8006afe:	4632      	mov	r2, r6
 8006b00:	4628      	mov	r0, r5
 8006b02:	910f      	str	r1, [sp, #60]	; 0x3c
 8006b04:	9311      	str	r3, [sp, #68]	; 0x44
 8006b06:	f004 f839 	bl	800ab7c <memset>
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	e9cd 6700 	strd	r6, r7, [sp]
 8006b12:	462a      	mov	r2, r5
 8006b14:	f7ff fd78 	bl	8006608 <chacha20_encrypt_bytes.part.0>
 8006b18:	2140      	movs	r1, #64	; 0x40
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f7fe f9a3 	bl	8004e66 <sodium_memzero>
 8006b20:	2000      	movs	r0, #0
 8006b22:	b012      	add	sp, #72	; 0x48
 8006b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b28 <crypto_verify_n>:
 8006b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9001      	str	r0, [sp, #4]
 8006b2e:	9102      	str	r1, [sp, #8]
 8006b30:	9303      	str	r3, [sp, #12]
 8006b32:	4293      	cmp	r3, r2
 8006b34:	db06      	blt.n	8006b44 <crypto_verify_n+0x1c>
 8006b36:	9803      	ldr	r0, [sp, #12]
 8006b38:	3801      	subs	r0, #1
 8006b3a:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8006b3e:	3801      	subs	r0, #1
 8006b40:	b004      	add	sp, #16
 8006b42:	bd10      	pop	{r4, pc}
 8006b44:	9901      	ldr	r1, [sp, #4]
 8006b46:	5cc9      	ldrb	r1, [r1, r3]
 8006b48:	9802      	ldr	r0, [sp, #8]
 8006b4a:	5cc4      	ldrb	r4, [r0, r3]
 8006b4c:	9803      	ldr	r0, [sp, #12]
 8006b4e:	4061      	eors	r1, r4
 8006b50:	4301      	orrs	r1, r0
 8006b52:	9103      	str	r1, [sp, #12]
 8006b54:	3301      	adds	r3, #1
 8006b56:	e7ec      	b.n	8006b32 <crypto_verify_n+0xa>

08006b58 <crypto_verify_16_bytes>:
 8006b58:	2010      	movs	r0, #16
 8006b5a:	4770      	bx	lr

08006b5c <crypto_verify_32_bytes>:
 8006b5c:	2020      	movs	r0, #32
 8006b5e:	4770      	bx	lr

08006b60 <crypto_verify_64_bytes>:
 8006b60:	2040      	movs	r0, #64	; 0x40
 8006b62:	4770      	bx	lr

08006b64 <crypto_verify_16>:
 8006b64:	2210      	movs	r2, #16
 8006b66:	f7ff bfdf 	b.w	8006b28 <crypto_verify_n>

08006b6a <crypto_verify_32>:
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f7ff bfdc 	b.w	8006b28 <crypto_verify_n>

08006b70 <crypto_verify_64>:
 8006b70:	2240      	movs	r2, #64	; 0x40
 8006b72:	f7ff bfd9 	b.w	8006b28 <crypto_verify_n>
	...

08006b78 <blake2b_compress_ref>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8006b80:	4602      	mov	r2, r0
 8006b82:	460f      	mov	r7, r1
 8006b84:	ad40      	add	r5, sp, #256	; 0x100
 8006b86:	2300      	movs	r3, #0
 8006b88:	ae62      	add	r6, sp, #392	; 0x188
 8006b8a:	18f9      	adds	r1, r7, r3
 8006b8c:	4634      	mov	r4, r6
 8006b8e:	6808      	ldr	r0, [r1, #0]
 8006b90:	6849      	ldr	r1, [r1, #4]
 8006b92:	c403      	stmia	r4!, {r0, r1}
 8006b94:	a962      	add	r1, sp, #392	; 0x188
 8006b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	2b80      	cmp	r3, #128	; 0x80
 8006b9e:	e9e5 0102 	strd	r0, r1, [r5, #8]!
 8006ba2:	d1f2      	bne.n	8006b8a <blake2b_compress_ref+0x12>
 8006ba4:	f1a2 0c08 	sub.w	ip, r2, #8
 8006ba8:	ab60      	add	r3, sp, #384	; 0x180
 8006baa:	9330      	str	r3, [sp, #192]	; 0xc0
 8006bac:	f102 0438 	add.w	r4, r2, #56	; 0x38
 8006bb0:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
 8006bb4:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8006bb6:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8006bba:	42a5      	cmp	r5, r4
 8006bbc:	9531      	str	r5, [sp, #196]	; 0xc4
 8006bbe:	e9e3 0102 	strd	r0, r1, [r3, #8]!
 8006bc2:	d1f7      	bne.n	8006bb4 <blake2b_compress_ref+0x3c>
 8006bc4:	ab6a      	add	r3, sp, #424	; 0x1a8
 8006bc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bca:	ab42      	add	r3, sp, #264	; 0x108
 8006bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bd0:	e9cd 0100 	strd	r0, r1, [sp]
 8006bd4:	a962      	add	r1, sp, #392	; 0x188
 8006bd6:	e9d1 6700 	ldrd	r6, r7, [r1]
 8006bda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bde:	eb16 0608 	adds.w	r6, r6, r8
 8006be2:	eb47 0709 	adc.w	r7, r7, r9
 8006be6:	1980      	adds	r0, r0, r6
 8006be8:	4179      	adcs	r1, r7
 8006bea:	4606      	mov	r6, r0
 8006bec:	460f      	mov	r7, r1
 8006bee:	f60f 3148 	addw	r1, pc, #2888	; 0xb48
 8006bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bf6:	e9d2 4510 	ldrd	r4, r5, [r2, #64]	; 0x40
 8006bfa:	f60f 3b44 	addw	fp, pc, #2884	; 0xb44
 8006bfe:	e9db ab00 	ldrd	sl, fp, [fp]
 8006c02:	4079      	eors	r1, r7
 8006c04:	4069      	eors	r1, r5
 8006c06:	4070      	eors	r0, r6
 8006c08:	eb1a 0a01 	adds.w	sl, sl, r1
 8006c0c:	ea80 0004 	eor.w	r0, r0, r4
 8006c10:	eb4b 0b00 	adc.w	fp, fp, r0
 8006c14:	ea88 080a 	eor.w	r8, r8, sl
 8006c18:	ea89 090b 	eor.w	r9, r9, fp
 8006c1c:	ea4f 6e18 	mov.w	lr, r8, lsr #24
 8006c20:	4605      	mov	r5, r0
 8006c22:	ea4e 2009 	orr.w	r0, lr, r9, lsl #8
 8006c26:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	ea4e 2108 	orr.w	r1, lr, r8, lsl #8
 8006c30:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006c34:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006c38:	eb18 0806 	adds.w	r8, r8, r6
 8006c3c:	eb49 0907 	adc.w	r9, r9, r7
 8006c40:	eb18 0800 	adds.w	r8, r8, r0
 8006c44:	eb49 0901 	adc.w	r9, r9, r1
 8006c48:	4646      	mov	r6, r8
 8006c4a:	464f      	mov	r7, r9
 8006c4c:	406f      	eors	r7, r5
 8006c4e:	4066      	eors	r6, r4
 8006c50:	0c3d      	lsrs	r5, r7, #16
 8006c52:	4634      	mov	r4, r6
 8006c54:	0c36      	lsrs	r6, r6, #16
 8006c56:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8006c5a:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8006c5e:	9616      	str	r6, [sp, #88]	; 0x58
 8006c60:	9417      	str	r4, [sp, #92]	; 0x5c
 8006c62:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8006c66:	eb14 040a 	adds.w	r4, r4, sl
 8006c6a:	eb45 050b 	adc.w	r5, r5, fp
 8006c6e:	e9cd 452a 	strd	r4, r5, [sp, #168]	; 0xa8
 8006c72:	404d      	eors	r5, r1
 8006c74:	4044      	eors	r4, r0
 8006c76:	4620      	mov	r0, r4
 8006c78:	006c      	lsls	r4, r5, #1
 8006c7a:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006c7e:	0040      	lsls	r0, r0, #1
 8006c80:	ea40 71d5 	orr.w	r1, r0, r5, lsr #31
 8006c84:	911e      	str	r1, [sp, #120]	; 0x78
 8006c86:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006c8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c8e:	a964      	add	r1, sp, #400	; 0x190
 8006c90:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006c94:	e9d1 8900 	ldrd	r8, r9, [r1]
 8006c98:	a96c      	add	r1, sp, #432	; 0x1b0
 8006c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c9e:	eb10 0008 	adds.w	r0, r0, r8
 8006ca2:	eb41 0109 	adc.w	r1, r1, r9
 8006ca6:	4680      	mov	r8, r0
 8006ca8:	4689      	mov	r9, r1
 8006caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cae:	eb10 0008 	adds.w	r0, r0, r8
 8006cb2:	eb41 0109 	adc.w	r1, r1, r9
 8006cb6:	4680      	mov	r8, r0
 8006cb8:	4689      	mov	r9, r1
 8006cba:	f60f 218c 	addw	r1, pc, #2700	; 0xa8c
 8006cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cc2:	941f      	str	r4, [sp, #124]	; 0x7c
 8006cc4:	e9d2 4512 	ldrd	r4, r5, [r2, #72]	; 0x48
 8006cc8:	f60f 2784 	addw	r7, pc, #2692	; 0xa84
 8006ccc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006cd0:	ea81 0109 	eor.w	r1, r1, r9
 8006cd4:	4069      	eors	r1, r5
 8006cd6:	ea80 0008 	eor.w	r0, r0, r8
 8006cda:	1876      	adds	r6, r6, r1
 8006cdc:	ea80 0004 	eor.w	r0, r0, r4
 8006ce0:	468a      	mov	sl, r1
 8006ce2:	a96c      	add	r1, sp, #432	; 0x1b0
 8006ce4:	4147      	adcs	r7, r0
 8006ce6:	4683      	mov	fp, r0
 8006ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cec:	4070      	eors	r0, r6
 8006cee:	4079      	eors	r1, r7
 8006cf0:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8006cf4:	ea4e 2401 	orr.w	r4, lr, r1, lsl #8
 8006cf8:	0e09      	lsrs	r1, r1, #24
 8006cfa:	ea41 2500 	orr.w	r5, r1, r0, lsl #8
 8006cfe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006d02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d06:	eb10 0008 	adds.w	r0, r0, r8
 8006d0a:	eb41 0109 	adc.w	r1, r1, r9
 8006d0e:	1900      	adds	r0, r0, r4
 8006d10:	4169      	adcs	r1, r5
 8006d12:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
 8006d16:	ea80 000a 	eor.w	r0, r0, sl
 8006d1a:	ea81 010b 	eor.w	r1, r1, fp
 8006d1e:	468b      	mov	fp, r1
 8006d20:	0c01      	lsrs	r1, r0, #16
 8006d22:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 8006d26:	911a      	str	r1, [sp, #104]	; 0x68
 8006d28:	ea4f 411b 	mov.w	r1, fp, lsr #16
 8006d2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006d30:	911b      	str	r1, [sp, #108]	; 0x6c
 8006d32:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8006d36:	1980      	adds	r0, r0, r6
 8006d38:	4179      	adcs	r1, r7
 8006d3a:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
 8006d3e:	4069      	eors	r1, r5
 8006d40:	4060      	eors	r0, r4
 8006d42:	460d      	mov	r5, r1
 8006d44:	0049      	lsls	r1, r1, #1
 8006d46:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8006d4a:	9113      	str	r1, [sp, #76]	; 0x4c
 8006d4c:	0041      	lsls	r1, r0, #1
 8006d4e:	ea41 71d5 	orr.w	r1, r1, r5, lsr #31
 8006d52:	9112      	str	r1, [sp, #72]	; 0x48
 8006d54:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006d58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d5c:	a966      	add	r1, sp, #408	; 0x198
 8006d5e:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8006d62:	a96e      	add	r1, sp, #440	; 0x1b8
 8006d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d68:	eb10 000a 	adds.w	r0, r0, sl
 8006d6c:	eb41 010b 	adc.w	r1, r1, fp
 8006d70:	4682      	mov	sl, r0
 8006d72:	468b      	mov	fp, r1
 8006d74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d78:	eb10 000a 	adds.w	r0, r0, sl
 8006d7c:	eb41 010b 	adc.w	r1, r1, fp
 8006d80:	4682      	mov	sl, r0
 8006d82:	468b      	mov	fp, r1
 8006d84:	f60f 11d0 	addw	r1, pc, #2512	; 0x9d0
 8006d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d8c:	e9d2 4514 	ldrd	r4, r5, [r2, #80]	; 0x50
 8006d90:	f60f 19cc 	addw	r9, pc, #2508	; 0x9cc
 8006d94:	e9d9 8900 	ldrd	r8, r9, [r9]
 8006d98:	ea81 010b 	eor.w	r1, r1, fp
 8006d9c:	4069      	eors	r1, r5
 8006d9e:	eb18 0801 	adds.w	r8, r8, r1
 8006da2:	460e      	mov	r6, r1
 8006da4:	ea80 000a 	eor.w	r0, r0, sl
 8006da8:	a96e      	add	r1, sp, #440	; 0x1b8
 8006daa:	ea80 0004 	eor.w	r0, r0, r4
 8006dae:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006db2:	eb49 0900 	adc.w	r9, r9, r0
 8006db6:	ea84 0408 	eor.w	r4, r4, r8
 8006dba:	ea85 0509 	eor.w	r5, r5, r9
 8006dbe:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8006dc2:	4607      	mov	r7, r0
 8006dc4:	ea4e 2005 	orr.w	r0, lr, r5, lsl #8
 8006dc8:	0e2d      	lsrs	r5, r5, #24
 8006dca:	ea45 2104 	orr.w	r1, r5, r4, lsl #8
 8006dce:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8006dd2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8006dd6:	eb14 040a 	adds.w	r4, r4, sl
 8006dda:	eb45 050b 	adc.w	r5, r5, fp
 8006dde:	1824      	adds	r4, r4, r0
 8006de0:	414d      	adcs	r5, r1
 8006de2:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8006de6:	4074      	eors	r4, r6
 8006de8:	407d      	eors	r5, r7
 8006dea:	4626      	mov	r6, r4
 8006dec:	0c24      	lsrs	r4, r4, #16
 8006dee:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006df2:	9420      	str	r4, [sp, #128]	; 0x80
 8006df4:	0c2c      	lsrs	r4, r5, #16
 8006df6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8006dfa:	9421      	str	r4, [sp, #132]	; 0x84
 8006dfc:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 8006e00:	eb14 0408 	adds.w	r4, r4, r8
 8006e04:	eb45 0509 	adc.w	r5, r5, r9
 8006e08:	e9cd 4522 	strd	r4, r5, [sp, #136]	; 0x88
 8006e0c:	404d      	eors	r5, r1
 8006e0e:	4044      	eors	r4, r0
 8006e10:	4620      	mov	r0, r4
 8006e12:	006c      	lsls	r4, r5, #1
 8006e14:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006e18:	0040      	lsls	r0, r0, #1
 8006e1a:	ea40 71d5 	orr.w	r1, r0, r5, lsr #31
 8006e1e:	9118      	str	r1, [sp, #96]	; 0x60
 8006e20:	a970      	add	r1, sp, #448	; 0x1c0
 8006e22:	e9d1 8900 	ldrd	r8, r9, [r1]
 8006e26:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006e2a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006e2e:	a968      	add	r1, sp, #416	; 0x1a0
 8006e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e34:	9419      	str	r4, [sp, #100]	; 0x64
 8006e36:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8006e3a:	eb10 0008 	adds.w	r0, r0, r8
 8006e3e:	eb41 0109 	adc.w	r1, r1, r9
 8006e42:	1824      	adds	r4, r4, r0
 8006e44:	414d      	adcs	r5, r1
 8006e46:	4620      	mov	r0, r4
 8006e48:	4629      	mov	r1, r5
 8006e4a:	f60f 151c 	addw	r5, pc, #2332	; 0x91c
 8006e4e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e52:	e9d2 6716 	ldrd	r6, r7, [r2, #88]	; 0x58
 8006e56:	4044      	eors	r4, r0
 8006e58:	404d      	eors	r5, r1
 8006e5a:	4074      	eors	r4, r6
 8006e5c:	407d      	eors	r5, r7
 8006e5e:	f60f 1710 	addw	r7, pc, #2320	; 0x910
 8006e62:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006e66:	1976      	adds	r6, r6, r5
 8006e68:	4167      	adcs	r7, r4
 8006e6a:	ea88 0806 	eor.w	r8, r8, r6
 8006e6e:	ea89 0907 	eor.w	r9, r9, r7
 8006e72:	ea4f 6218 	mov.w	r2, r8, lsr #24
 8006e76:	46a3      	mov	fp, r4
 8006e78:	ea42 2409 	orr.w	r4, r2, r9, lsl #8
 8006e7c:	ea4f 6219 	mov.w	r2, r9, lsr #24
 8006e80:	46aa      	mov	sl, r5
 8006e82:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
 8006e86:	e9d3 890e 	ldrd	r8, r9, [r3, #56]	; 0x38
 8006e8a:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006e8e:	eb18 0800 	adds.w	r8, r8, r0
 8006e92:	eb49 0901 	adc.w	r9, r9, r1
 8006e96:	eb18 0804 	adds.w	r8, r8, r4
 8006e9a:	eb49 0905 	adc.w	r9, r9, r5
 8006e9e:	ea88 010a 	eor.w	r1, r8, sl
 8006ea2:	ea89 020b 	eor.w	r2, r9, fp
 8006ea6:	4693      	mov	fp, r2
 8006ea8:	0c0a      	lsrs	r2, r1, #16
 8006eaa:	ea42 400b 	orr.w	r0, r2, fp, lsl #16
 8006eae:	ea4f 421b 	mov.w	r2, fp, lsr #16
 8006eb2:	e9cd 8932 	strd	r8, r9, [sp, #200]	; 0xc8
 8006eb6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8006eba:	eb16 0800 	adds.w	r8, r6, r0
 8006ebe:	eb47 0901 	adc.w	r9, r7, r1
 8006ec2:	464f      	mov	r7, r9
 8006ec4:	406f      	eors	r7, r5
 8006ec6:	4646      	mov	r6, r8
 8006ec8:	4066      	eors	r6, r4
 8006eca:	007a      	lsls	r2, r7, #1
 8006ecc:	ea42 72d6 	orr.w	r2, r2, r6, lsr #31
 8006ed0:	921d      	str	r2, [sp, #116]	; 0x74
 8006ed2:	0072      	lsls	r2, r6, #1
 8006ed4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006ed8:	ea42 72d7 	orr.w	r2, r2, r7, lsr #31
 8006edc:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 8006ee0:	1936      	adds	r6, r6, r4
 8006ee2:	416f      	adcs	r7, r5
 8006ee4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8006ee8:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8006eec:	19a4      	adds	r4, r4, r6
 8006eee:	417d      	adcs	r5, r7
 8006ef0:	e9cd 8928 	strd	r8, r9, [sp, #160]	; 0xa0
 8006ef4:	e9dd 8922 	ldrd	r8, r9, [sp, #136]	; 0x88
 8006ef8:	4060      	eors	r0, r4
 8006efa:	4069      	eors	r1, r5
 8006efc:	4626      	mov	r6, r4
 8006efe:	462f      	mov	r7, r5
 8006f00:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8006f04:	eb18 0801 	adds.w	r8, r8, r1
 8006f08:	eb49 0900 	adc.w	r9, r9, r0
 8006f0c:	ea84 0408 	eor.w	r4, r4, r8
 8006f10:	ea85 0509 	eor.w	r5, r5, r9
 8006f14:	921c      	str	r2, [sp, #112]	; 0x70
 8006f16:	0e22      	lsrs	r2, r4, #24
 8006f18:	4683      	mov	fp, r0
 8006f1a:	ea42 2005 	orr.w	r0, r2, r5, lsl #8
 8006f1e:	0e2a      	lsrs	r2, r5, #24
 8006f20:	468a      	mov	sl, r1
 8006f22:	ea42 2104 	orr.w	r1, r2, r4, lsl #8
 8006f26:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8006f2a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8006f2e:	19a4      	adds	r4, r4, r6
 8006f30:	417d      	adcs	r5, r7
 8006f32:	1824      	adds	r4, r4, r0
 8006f34:	414d      	adcs	r5, r1
 8006f36:	e9cd 4534 	strd	r4, r5, [sp, #208]	; 0xd0
 8006f3a:	ea84 040a 	eor.w	r4, r4, sl
 8006f3e:	ea85 050b 	eor.w	r5, r5, fp
 8006f42:	0c22      	lsrs	r2, r4, #16
 8006f44:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006f48:	9222      	str	r2, [sp, #136]	; 0x88
 8006f4a:	0c2a      	lsrs	r2, r5, #16
 8006f4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f50:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f52:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8006f56:	eb14 0408 	adds.w	r4, r4, r8
 8006f5a:	eb45 0509 	adc.w	r5, r5, r9
 8006f5e:	e9cd 4536 	strd	r4, r5, [sp, #216]	; 0xd8
 8006f62:	404d      	eors	r5, r1
 8006f64:	4044      	eors	r4, r0
 8006f66:	006a      	lsls	r2, r5, #1
 8006f68:	ea42 72d4 	orr.w	r2, r2, r4, lsr #31
 8006f6c:	9225      	str	r2, [sp, #148]	; 0x94
 8006f6e:	0062      	lsls	r2, r4, #1
 8006f70:	ea42 72d5 	orr.w	r2, r2, r5, lsr #31
 8006f74:	9224      	str	r2, [sp, #144]	; 0x90
 8006f76:	e9d3 1214 	ldrd	r1, r2, [r3, #80]	; 0x50
 8006f7a:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
 8006f7e:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8006f82:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8006f86:	1900      	adds	r0, r0, r4
 8006f88:	4169      	adcs	r1, r5
 8006f8a:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 8006f8e:	1824      	adds	r4, r4, r0
 8006f90:	414d      	adcs	r5, r1
 8006f92:	4620      	mov	r0, r4
 8006f94:	4629      	mov	r1, r5
 8006f96:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8006f9a:	e9dd 6728 	ldrd	r6, r7, [sp, #160]	; 0xa0
 8006f9e:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006fa2:	404d      	eors	r5, r1
 8006fa4:	1976      	adds	r6, r6, r5
 8006fa6:	ea84 0400 	eor.w	r4, r4, r0
 8006faa:	4167      	adcs	r7, r4
 8006fac:	ea88 0806 	eor.w	r8, r8, r6
 8006fb0:	ea89 0907 	eor.w	r9, r9, r7
 8006fb4:	ea4f 6218 	mov.w	r2, r8, lsr #24
 8006fb8:	46a3      	mov	fp, r4
 8006fba:	ea42 2409 	orr.w	r4, r2, r9, lsl #8
 8006fbe:	ea4f 6219 	mov.w	r2, r9, lsr #24
 8006fc2:	46aa      	mov	sl, r5
 8006fc4:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
 8006fc8:	e9d3 8916 	ldrd	r8, r9, [r3, #88]	; 0x58
 8006fcc:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8006fd0:	eb18 0800 	adds.w	r8, r8, r0
 8006fd4:	eb49 0901 	adc.w	r9, r9, r1
 8006fd8:	eb18 0804 	adds.w	r8, r8, r4
 8006fdc:	eb49 0905 	adc.w	r9, r9, r5
 8006fe0:	ea88 010a 	eor.w	r1, r8, sl
 8006fe4:	ea89 020b 	eor.w	r2, r9, fp
 8006fe8:	4693      	mov	fp, r2
 8006fea:	0c0a      	lsrs	r2, r1, #16
 8006fec:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8006ff0:	9226      	str	r2, [sp, #152]	; 0x98
 8006ff2:	ea4f 421b 	mov.w	r2, fp, lsr #16
 8006ff6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006ffa:	9227      	str	r2, [sp, #156]	; 0x9c
 8006ffc:	e9dd 1226 	ldrd	r1, r2, [sp, #152]	; 0x98
 8007000:	1989      	adds	r1, r1, r6
 8007002:	417a      	adcs	r2, r7
 8007004:	e9cd 123a 	strd	r1, r2, [sp, #232]	; 0xe8
 8007008:	406a      	eors	r2, r5
 800700a:	4061      	eors	r1, r4
 800700c:	4615      	mov	r5, r2
 800700e:	0052      	lsls	r2, r2, #1
 8007010:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
 8007014:	9229      	str	r2, [sp, #164]	; 0xa4
 8007016:	004a      	lsls	r2, r1, #1
 8007018:	ea42 72d5 	orr.w	r2, r2, r5, lsr #31
 800701c:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 8007020:	9228      	str	r2, [sp, #160]	; 0xa0
 8007022:	e9d3 1218 	ldrd	r1, r2, [r3, #96]	; 0x60
 8007026:	1876      	adds	r6, r6, r1
 8007028:	4157      	adcs	r7, r2
 800702a:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
 800702e:	e9dd 121c 	ldrd	r1, r2, [sp, #112]	; 0x70
 8007032:	1989      	adds	r1, r1, r6
 8007034:	460e      	mov	r6, r1
 8007036:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800703a:	417a      	adcs	r2, r7
 800703c:	4070      	eors	r0, r6
 800703e:	4051      	eors	r1, r2
 8007040:	468a      	mov	sl, r1
 8007042:	4683      	mov	fp, r0
 8007044:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8007048:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
 800704c:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007050:	eb10 000a 	adds.w	r0, r0, sl
 8007054:	eb41 010b 	adc.w	r1, r1, fp
 8007058:	ea88 0800 	eor.w	r8, r8, r0
 800705c:	ea89 0901 	eor.w	r9, r9, r1
 8007060:	4617      	mov	r7, r2
 8007062:	ea4f 6218 	mov.w	r2, r8, lsr #24
 8007066:	ea42 2409 	orr.w	r4, r2, r9, lsl #8
 800706a:	ea4f 6219 	mov.w	r2, r9, lsr #24
 800706e:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
 8007072:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8007076:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 800707a:	eb18 0806 	adds.w	r8, r8, r6
 800707e:	eb49 0907 	adc.w	r9, r9, r7
 8007082:	eb18 0804 	adds.w	r8, r8, r4
 8007086:	eb49 0905 	adc.w	r9, r9, r5
 800708a:	ea88 060a 	eor.w	r6, r8, sl
 800708e:	ea89 070b 	eor.w	r7, r9, fp
 8007092:	0c32      	lsrs	r2, r6, #16
 8007094:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8007098:	922a      	str	r2, [sp, #168]	; 0xa8
 800709a:	0c3a      	lsrs	r2, r7, #16
 800709c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80070a0:	922b      	str	r2, [sp, #172]	; 0xac
 80070a2:	e9dd 672a 	ldrd	r6, r7, [sp, #168]	; 0xa8
 80070a6:	1836      	adds	r6, r6, r0
 80070a8:	414f      	adcs	r7, r1
 80070aa:	463a      	mov	r2, r7
 80070ac:	4631      	mov	r1, r6
 80070ae:	406a      	eors	r2, r5
 80070b0:	4061      	eors	r1, r4
 80070b2:	4615      	mov	r5, r2
 80070b4:	0052      	lsls	r2, r2, #1
 80070b6:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
 80070ba:	922d      	str	r2, [sp, #180]	; 0xb4
 80070bc:	004a      	lsls	r2, r1, #1
 80070be:	ea42 72d5 	orr.w	r2, r2, r5, lsr #31
 80070c2:	922c      	str	r2, [sp, #176]	; 0xb0
 80070c4:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 80070c8:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
 80070cc:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 80070d0:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 80070d4:	1900      	adds	r0, r0, r4
 80070d6:	4169      	adcs	r1, r5
 80070d8:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 80070dc:	1824      	adds	r4, r4, r0
 80070de:	414d      	adcs	r5, r1
 80070e0:	4620      	mov	r0, r4
 80070e2:	4629      	mov	r1, r5
 80070e4:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 80070e8:	e9cd 673e 	strd	r6, r7, [sp, #248]	; 0xf8
 80070ec:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 80070f0:	e9cd 893c 	strd	r8, r9, [sp, #240]	; 0xf0
 80070f4:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80070f8:	404d      	eors	r5, r1
 80070fa:	1976      	adds	r6, r6, r5
 80070fc:	ea84 0400 	eor.w	r4, r4, r0
 8007100:	4167      	adcs	r7, r4
 8007102:	ea88 0806 	eor.w	r8, r8, r6
 8007106:	ea89 0907 	eor.w	r9, r9, r7
 800710a:	ea4f 6218 	mov.w	r2, r8, lsr #24
 800710e:	46a3      	mov	fp, r4
 8007110:	ea42 2409 	orr.w	r4, r2, r9, lsl #8
 8007114:	ea4f 6219 	mov.w	r2, r9, lsr #24
 8007118:	46aa      	mov	sl, r5
 800711a:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
 800711e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007122:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8007126:	1812      	adds	r2, r2, r0
 8007128:	414b      	adcs	r3, r1
 800712a:	1912      	adds	r2, r2, r4
 800712c:	416b      	adcs	r3, r5
 800712e:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 8007132:	ea82 020a 	eor.w	r2, r2, sl
 8007136:	ea83 030b 	eor.w	r3, r3, fp
 800713a:	469b      	mov	fp, r3
 800713c:	0c13      	lsrs	r3, r2, #16
 800713e:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 8007142:	9320      	str	r3, [sp, #128]	; 0x80
 8007144:	ea4f 431b 	mov.w	r3, fp, lsr #16
 8007148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800714c:	9321      	str	r3, [sp, #132]	; 0x84
 800714e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007152:	eb1a 0a06 	adds.w	sl, sl, r6
 8007156:	eb4b 0b07 	adc.w	fp, fp, r7
 800715a:	ea85 050b 	eor.w	r5, r5, fp
 800715e:	ea84 040a 	eor.w	r4, r4, sl
 8007162:	006b      	lsls	r3, r5, #1
 8007164:	ea43 77d4 	orr.w	r7, r3, r4, lsr #31
 8007168:	0063      	lsls	r3, r4, #1
 800716a:	ea43 76d5 	orr.w	r6, r3, r5, lsr #31
 800716e:	e9dd 4534 	ldrd	r4, r5, [sp, #208]	; 0xd0
 8007172:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8007176:	18a4      	adds	r4, r4, r2
 8007178:	415d      	adcs	r5, r3
 800717a:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800717e:	19a4      	adds	r4, r4, r6
 8007180:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 8007184:	417d      	adcs	r5, r7
 8007186:	406b      	eors	r3, r5
 8007188:	18c0      	adds	r0, r0, r3
 800718a:	ea82 0204 	eor.w	r2, r2, r4
 800718e:	4151      	adcs	r1, r2
 8007190:	4046      	eors	r6, r0
 8007192:	404f      	eors	r7, r1
 8007194:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8007198:	4691      	mov	r9, r2
 800719a:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 800719e:	0e3f      	lsrs	r7, r7, #24
 80071a0:	4698      	mov	r8, r3
 80071a2:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 80071a6:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80071aa:	1936      	adds	r6, r6, r4
 80071ac:	416f      	adcs	r7, r5
 80071ae:	18b6      	adds	r6, r6, r2
 80071b0:	415f      	adcs	r7, r3
 80071b2:	ea86 0408 	eor.w	r4, r6, r8
 80071b6:	ea87 0509 	eor.w	r5, r7, r9
 80071ba:	46a0      	mov	r8, r4
 80071bc:	0c24      	lsrs	r4, r4, #16
 80071be:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80071c2:	9426      	str	r4, [sp, #152]	; 0x98
 80071c4:	0c2c      	lsrs	r4, r5, #16
 80071c6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80071ca:	9427      	str	r4, [sp, #156]	; 0x9c
 80071cc:	e9cd 6734 	strd	r6, r7, [sp, #208]	; 0xd0
 80071d0:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 80071d4:	1824      	adds	r4, r4, r0
 80071d6:	414d      	adcs	r5, r1
 80071d8:	4620      	mov	r0, r4
 80071da:	4629      	mov	r1, r5
 80071dc:	4050      	eors	r0, r2
 80071de:	4059      	eors	r1, r3
 80071e0:	0042      	lsls	r2, r0, #1
 80071e2:	460b      	mov	r3, r1
 80071e4:	0049      	lsls	r1, r1, #1
 80071e6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80071ea:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80071ee:	e9cd 453e 	strd	r4, r5, [sp, #248]	; 0xf8
 80071f2:	912f      	str	r1, [sp, #188]	; 0xbc
 80071f4:	932e      	str	r3, [sp, #184]	; 0xb8
 80071f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071fa:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 80071fe:	18c0      	adds	r0, r0, r3
 8007200:	4161      	adcs	r1, r4
 8007202:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8007206:	181b      	adds	r3, r3, r0
 8007208:	4618      	mov	r0, r3
 800720a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 800720e:	414c      	adcs	r4, r1
 8007210:	4063      	eors	r3, r4
 8007212:	4621      	mov	r1, r4
 8007214:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8007218:	eb1a 0a03 	adds.w	sl, sl, r3
 800721c:	ea82 0200 	eor.w	r2, r2, r0
 8007220:	eb4b 0b02 	adc.w	fp, fp, r2
 8007224:	ea84 040a 	eor.w	r4, r4, sl
 8007228:	ea85 050b 	eor.w	r5, r5, fp
 800722c:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007230:	4691      	mov	r9, r2
 8007232:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007236:	0e2d      	lsrs	r5, r5, #24
 8007238:	4698      	mov	r8, r3
 800723a:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 800723e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8007242:	1824      	adds	r4, r4, r0
 8007244:	414d      	adcs	r5, r1
 8007246:	18a4      	adds	r4, r4, r2
 8007248:	415d      	adcs	r5, r3
 800724a:	ea84 0008 	eor.w	r0, r4, r8
 800724e:	ea85 0109 	eor.w	r1, r5, r9
 8007252:	4689      	mov	r9, r1
 8007254:	0c01      	lsrs	r1, r0, #16
 8007256:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800725a:	9124      	str	r1, [sp, #144]	; 0x90
 800725c:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007260:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007264:	9125      	str	r1, [sp, #148]	; 0x94
 8007266:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800726a:	eb10 000a 	adds.w	r0, r0, sl
 800726e:	eb41 010b 	adc.w	r1, r1, fp
 8007272:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8007276:	ac40      	add	r4, sp, #256	; 0x100
 8007278:	e9c4 0100 	strd	r0, r1, [r4]
 800727c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007280:	4050      	eors	r0, r2
 8007282:	4059      	eors	r1, r3
 8007284:	0042      	lsls	r2, r0, #1
 8007286:	460b      	mov	r3, r1
 8007288:	0049      	lsls	r1, r1, #1
 800728a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800728e:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007292:	912b      	str	r1, [sp, #172]	; 0xac
 8007294:	932a      	str	r3, [sp, #168]	; 0xa8
 8007296:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800729a:	e9dd 343c 	ldrd	r3, r4, [sp, #240]	; 0xf0
 800729e:	18c0      	adds	r0, r0, r3
 80072a0:	4161      	adcs	r1, r4
 80072a2:	e9dd 3428 	ldrd	r3, r4, [sp, #160]	; 0xa0
 80072a6:	181b      	adds	r3, r3, r0
 80072a8:	4618      	mov	r0, r3
 80072aa:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80072ae:	414c      	adcs	r4, r1
 80072b0:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 80072b4:	4063      	eors	r3, r4
 80072b6:	4621      	mov	r1, r4
 80072b8:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 80072bc:	18f6      	adds	r6, r6, r3
 80072be:	ea82 0200 	eor.w	r2, r2, r0
 80072c2:	4157      	adcs	r7, r2
 80072c4:	4074      	eors	r4, r6
 80072c6:	407d      	eors	r5, r7
 80072c8:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80072cc:	4691      	mov	r9, r2
 80072ce:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80072d2:	0e2d      	lsrs	r5, r5, #24
 80072d4:	4698      	mov	r8, r3
 80072d6:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80072da:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 80072de:	1824      	adds	r4, r4, r0
 80072e0:	414d      	adcs	r5, r1
 80072e2:	18a4      	adds	r4, r4, r2
 80072e4:	415d      	adcs	r5, r3
 80072e6:	ea84 0008 	eor.w	r0, r4, r8
 80072ea:	ea85 0109 	eor.w	r1, r5, r9
 80072ee:	4689      	mov	r9, r1
 80072f0:	0c01      	lsrs	r1, r0, #16
 80072f2:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80072f6:	9120      	str	r1, [sp, #128]	; 0x80
 80072f8:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80072fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007300:	9121      	str	r1, [sp, #132]	; 0x84
 8007302:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8007306:	1980      	adds	r0, r0, r6
 8007308:	4179      	adcs	r1, r7
 800730a:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 800730e:	4050      	eors	r0, r2
 8007310:	4059      	eors	r1, r3
 8007312:	460b      	mov	r3, r1
 8007314:	0042      	lsls	r2, r0, #1
 8007316:	0049      	lsls	r1, r1, #1
 8007318:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 800731c:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8007320:	e9cd 4536 	strd	r4, r5, [sp, #216]	; 0xd8
 8007324:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8007328:	e9dd 3432 	ldrd	r3, r4, [sp, #200]	; 0xc8
 800732c:	18c0      	adds	r0, r0, r3
 800732e:	4161      	adcs	r1, r4
 8007330:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8007334:	181b      	adds	r3, r3, r0
 8007336:	4618      	mov	r0, r3
 8007338:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800733c:	414c      	adcs	r4, r1
 800733e:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8007342:	4063      	eors	r3, r4
 8007344:	4621      	mov	r1, r4
 8007346:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 800734a:	18f6      	adds	r6, r6, r3
 800734c:	ea82 0200 	eor.w	r2, r2, r0
 8007350:	4157      	adcs	r7, r2
 8007352:	4074      	eors	r4, r6
 8007354:	407d      	eors	r5, r7
 8007356:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800735a:	4691      	mov	r9, r2
 800735c:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007360:	0e2d      	lsrs	r5, r5, #24
 8007362:	4698      	mov	r8, r3
 8007364:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007368:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 800736c:	1824      	adds	r4, r4, r0
 800736e:	414d      	adcs	r5, r1
 8007370:	18a4      	adds	r4, r4, r2
 8007372:	415d      	adcs	r5, r3
 8007374:	ea84 0008 	eor.w	r0, r4, r8
 8007378:	ea85 0109 	eor.w	r1, r5, r9
 800737c:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8007380:	0c04      	lsrs	r4, r0, #16
 8007382:	4680      	mov	r8, r0
 8007384:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8007388:	0c0c      	lsrs	r4, r1, #16
 800738a:	1836      	adds	r6, r6, r0
 800738c:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8007390:	414f      	adcs	r7, r1
 8007392:	407b      	eors	r3, r7
 8007394:	4072      	eors	r2, r6
 8007396:	005c      	lsls	r4, r3, #1
 8007398:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 800739c:	0052      	lsls	r2, r2, #1
 800739e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80073a2:	9423      	str	r4, [sp, #140]	; 0x8c
 80073a4:	9322      	str	r3, [sp, #136]	; 0x88
 80073a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80073aa:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80073ae:	18a4      	adds	r4, r4, r2
 80073b0:	415d      	adcs	r5, r3
 80073b2:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80073b6:	1912      	adds	r2, r2, r4
 80073b8:	416b      	adcs	r3, r5
 80073ba:	4050      	eors	r0, r2
 80073bc:	4059      	eors	r1, r3
 80073be:	4614      	mov	r4, r2
 80073c0:	461d      	mov	r5, r3
 80073c2:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 80073c6:	1852      	adds	r2, r2, r1
 80073c8:	4143      	adcs	r3, r0
 80073ca:	4688      	mov	r8, r1
 80073cc:	4681      	mov	r9, r0
 80073ce:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 80073d2:	4050      	eors	r0, r2
 80073d4:	4059      	eors	r1, r3
 80073d6:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 80073da:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 80073de:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 80073e2:	0e09      	lsrs	r1, r1, #24
 80073e4:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 80073e8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80073ec:	1900      	adds	r0, r0, r4
 80073ee:	4169      	adcs	r1, r5
 80073f0:	1880      	adds	r0, r0, r2
 80073f2:	4159      	adcs	r1, r3
 80073f4:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 80073f8:	ea80 0008 	eor.w	r0, r0, r8
 80073fc:	ea81 0109 	eor.w	r1, r1, r9
 8007400:	4689      	mov	r9, r1
 8007402:	0c01      	lsrs	r1, r0, #16
 8007404:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007408:	9128      	str	r1, [sp, #160]	; 0xa0
 800740a:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800740e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007412:	9129      	str	r1, [sp, #164]	; 0xa4
 8007414:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8007418:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 800741c:	1900      	adds	r0, r0, r4
 800741e:	4169      	adcs	r1, r5
 8007420:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 8007424:	4050      	eors	r0, r2
 8007426:	4059      	eors	r1, r3
 8007428:	0042      	lsls	r2, r0, #1
 800742a:	460b      	mov	r3, r1
 800742c:	0049      	lsls	r1, r1, #1
 800742e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007432:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007436:	912b      	str	r1, [sp, #172]	; 0xac
 8007438:	932a      	str	r3, [sp, #168]	; 0xa8
 800743a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800743e:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8007442:	18c0      	adds	r0, r0, r3
 8007444:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8007448:	4161      	adcs	r1, r4
 800744a:	eb10 000a 	adds.w	r0, r0, sl
 800744e:	eb41 010b 	adc.w	r1, r1, fp
 8007452:	404b      	eors	r3, r1
 8007454:	18f6      	adds	r6, r6, r3
 8007456:	ea82 0200 	eor.w	r2, r2, r0
 800745a:	4157      	adcs	r7, r2
 800745c:	ea8a 0406 	eor.w	r4, sl, r6
 8007460:	ea8b 0507 	eor.w	r5, fp, r7
 8007464:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007468:	4691      	mov	r9, r2
 800746a:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800746e:	0e2d      	lsrs	r5, r5, #24
 8007470:	4698      	mov	r8, r3
 8007472:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007476:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800747a:	1824      	adds	r4, r4, r0
 800747c:	414d      	adcs	r5, r1
 800747e:	18a4      	adds	r4, r4, r2
 8007480:	415d      	adcs	r5, r3
 8007482:	ea84 0008 	eor.w	r0, r4, r8
 8007486:	ea85 0109 	eor.w	r1, r5, r9
 800748a:	4689      	mov	r9, r1
 800748c:	0c01      	lsrs	r1, r0, #16
 800748e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007492:	9126      	str	r1, [sp, #152]	; 0x98
 8007494:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800749c:	9127      	str	r1, [sp, #156]	; 0x9c
 800749e:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80074a2:	1980      	adds	r0, r0, r6
 80074a4:	4179      	adcs	r1, r7
 80074a6:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 80074aa:	4050      	eors	r0, r2
 80074ac:	4059      	eors	r1, r3
 80074ae:	460b      	mov	r3, r1
 80074b0:	0042      	lsls	r2, r0, #1
 80074b2:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 80074b6:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 80074ba:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 80074be:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 80074c2:	18a4      	adds	r4, r4, r2
 80074c4:	415d      	adcs	r5, r3
 80074c6:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 80074ca:	1912      	adds	r2, r2, r4
 80074cc:	416b      	adcs	r3, r5
 80074ce:	4614      	mov	r4, r2
 80074d0:	461d      	mov	r5, r3
 80074d2:	0049      	lsls	r1, r1, #1
 80074d4:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 80074d8:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 80074dc:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 80074e0:	e9dd 6722 	ldrd	r6, r7, [sp, #136]	; 0x88
 80074e4:	406b      	eors	r3, r5
 80074e6:	18c0      	adds	r0, r0, r3
 80074e8:	ea82 0204 	eor.w	r2, r2, r4
 80074ec:	4151      	adcs	r1, r2
 80074ee:	4046      	eors	r6, r0
 80074f0:	404f      	eors	r7, r1
 80074f2:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 80074f6:	4691      	mov	r9, r2
 80074f8:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 80074fc:	0e3f      	lsrs	r7, r7, #24
 80074fe:	4698      	mov	r8, r3
 8007500:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8007504:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8007508:	1936      	adds	r6, r6, r4
 800750a:	416f      	adcs	r7, r5
 800750c:	18b6      	adds	r6, r6, r2
 800750e:	415f      	adcs	r7, r3
 8007510:	ea86 0408 	eor.w	r4, r6, r8
 8007514:	ea87 0509 	eor.w	r5, r7, r9
 8007518:	46a0      	mov	r8, r4
 800751a:	0c24      	lsrs	r4, r4, #16
 800751c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007520:	9422      	str	r4, [sp, #136]	; 0x88
 8007522:	0c2c      	lsrs	r4, r5, #16
 8007524:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007528:	9423      	str	r4, [sp, #140]	; 0x8c
 800752a:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 800752e:	1824      	adds	r4, r4, r0
 8007530:	414d      	adcs	r5, r1
 8007532:	4620      	mov	r0, r4
 8007534:	4629      	mov	r1, r5
 8007536:	4050      	eors	r0, r2
 8007538:	4059      	eors	r1, r3
 800753a:	0042      	lsls	r2, r0, #1
 800753c:	460b      	mov	r3, r1
 800753e:	0049      	lsls	r1, r1, #1
 8007540:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007544:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007548:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 800754c:	9125      	str	r1, [sp, #148]	; 0x94
 800754e:	9324      	str	r3, [sp, #144]	; 0x90
 8007550:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007554:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8007558:	18c0      	adds	r0, r0, r3
 800755a:	4161      	adcs	r1, r4
 800755c:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8007560:	181b      	adds	r3, r3, r0
 8007562:	4618      	mov	r0, r3
 8007564:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8007568:	414c      	adcs	r4, r1
 800756a:	4063      	eors	r3, r4
 800756c:	4698      	mov	r8, r3
 800756e:	ab40      	add	r3, sp, #256	; 0x100
 8007570:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 8007574:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007578:	4621      	mov	r1, r4
 800757a:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
 800757e:	eb16 0608 	adds.w	r6, r6, r8
 8007582:	ea82 0200 	eor.w	r2, r2, r0
 8007586:	4157      	adcs	r7, r2
 8007588:	4074      	eors	r4, r6
 800758a:	407d      	eors	r5, r7
 800758c:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007590:	4691      	mov	r9, r2
 8007592:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007596:	0e2d      	lsrs	r5, r5, #24
 8007598:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 800759c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80075a0:	1824      	adds	r4, r4, r0
 80075a2:	414d      	adcs	r5, r1
 80075a4:	18a4      	adds	r4, r4, r2
 80075a6:	415d      	adcs	r5, r3
 80075a8:	ea84 0008 	eor.w	r0, r4, r8
 80075ac:	ea85 0109 	eor.w	r1, r5, r9
 80075b0:	4689      	mov	r9, r1
 80075b2:	0c01      	lsrs	r1, r0, #16
 80075b4:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80075b8:	9120      	str	r1, [sp, #128]	; 0x80
 80075ba:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80075be:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80075c2:	9121      	str	r1, [sp, #132]	; 0x84
 80075c4:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80075c8:	1980      	adds	r0, r0, r6
 80075ca:	4179      	adcs	r1, r7
 80075cc:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 80075d0:	4050      	eors	r0, r2
 80075d2:	4059      	eors	r1, r3
 80075d4:	460b      	mov	r3, r1
 80075d6:	0042      	lsls	r2, r0, #1
 80075d8:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 80075dc:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 80075e0:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80075e4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 80075e8:	18a4      	adds	r4, r4, r2
 80075ea:	415d      	adcs	r5, r3
 80075ec:	0049      	lsls	r1, r1, #1
 80075ee:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80075f2:	19a4      	adds	r4, r4, r6
 80075f4:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 80075f8:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 80075fc:	417d      	adcs	r5, r7
 80075fe:	406b      	eors	r3, r5
 8007600:	18c0      	adds	r0, r0, r3
 8007602:	ea82 0204 	eor.w	r2, r2, r4
 8007606:	4151      	adcs	r1, r2
 8007608:	4046      	eors	r6, r0
 800760a:	404f      	eors	r7, r1
 800760c:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8007610:	4691      	mov	r9, r2
 8007612:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8007616:	0e3f      	lsrs	r7, r7, #24
 8007618:	4698      	mov	r8, r3
 800761a:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 800761e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007622:	1936      	adds	r6, r6, r4
 8007624:	416f      	adcs	r7, r5
 8007626:	18b6      	adds	r6, r6, r2
 8007628:	415f      	adcs	r7, r3
 800762a:	ea86 0408 	eor.w	r4, r6, r8
 800762e:	ea87 0509 	eor.w	r5, r7, r9
 8007632:	46a0      	mov	r8, r4
 8007634:	0c24      	lsrs	r4, r4, #16
 8007636:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800763a:	e9cd 6734 	strd	r6, r7, [sp, #208]	; 0xd0
 800763e:	9426      	str	r4, [sp, #152]	; 0x98
 8007640:	0c2c      	lsrs	r4, r5, #16
 8007642:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007646:	9427      	str	r4, [sp, #156]	; 0x9c
 8007648:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 800764c:	1824      	adds	r4, r4, r0
 800764e:	414d      	adcs	r5, r1
 8007650:	4620      	mov	r0, r4
 8007652:	4629      	mov	r1, r5
 8007654:	4050      	eors	r0, r2
 8007656:	4059      	eors	r1, r3
 8007658:	0042      	lsls	r2, r0, #1
 800765a:	460b      	mov	r3, r1
 800765c:	0049      	lsls	r1, r1, #1
 800765e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007662:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007666:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 800766a:	912d      	str	r1, [sp, #180]	; 0xb4
 800766c:	932c      	str	r3, [sp, #176]	; 0xb0
 800766e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8007672:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8007676:	18c0      	adds	r0, r0, r3
 8007678:	4161      	adcs	r1, r4
 800767a:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 800767e:	181b      	adds	r3, r3, r0
 8007680:	4618      	mov	r0, r3
 8007682:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8007686:	414c      	adcs	r4, r1
 8007688:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 800768c:	4063      	eors	r3, r4
 800768e:	4621      	mov	r1, r4
 8007690:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8007694:	18f6      	adds	r6, r6, r3
 8007696:	ea82 0200 	eor.w	r2, r2, r0
 800769a:	4157      	adcs	r7, r2
 800769c:	4074      	eors	r4, r6
 800769e:	407d      	eors	r5, r7
 80076a0:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80076a4:	4691      	mov	r9, r2
 80076a6:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80076aa:	0e2d      	lsrs	r5, r5, #24
 80076ac:	4698      	mov	r8, r3
 80076ae:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80076b2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80076b6:	1824      	adds	r4, r4, r0
 80076b8:	414d      	adcs	r5, r1
 80076ba:	18a4      	adds	r4, r4, r2
 80076bc:	415d      	adcs	r5, r3
 80076be:	ea84 0008 	eor.w	r0, r4, r8
 80076c2:	ea85 0109 	eor.w	r1, r5, r9
 80076c6:	4689      	mov	r9, r1
 80076c8:	0c01      	lsrs	r1, r0, #16
 80076ca:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80076ce:	9122      	str	r1, [sp, #136]	; 0x88
 80076d0:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80076d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80076d8:	9123      	str	r1, [sp, #140]	; 0x8c
 80076da:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 80076de:	1980      	adds	r0, r0, r6
 80076e0:	4179      	adcs	r1, r7
 80076e2:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 80076e6:	4050      	eors	r0, r2
 80076e8:	4059      	eors	r1, r3
 80076ea:	0042      	lsls	r2, r0, #1
 80076ec:	460b      	mov	r3, r1
 80076ee:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80076f2:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 80076f6:	932a      	str	r3, [sp, #168]	; 0xa8
 80076f8:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80076fc:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8007700:	18a4      	adds	r4, r4, r2
 8007702:	415d      	adcs	r5, r3
 8007704:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8007708:	eb14 040a 	adds.w	r4, r4, sl
 800770c:	e9dd 6732 	ldrd	r6, r7, [sp, #200]	; 0xc8
 8007710:	eb45 050b 	adc.w	r5, r5, fp
 8007714:	406b      	eors	r3, r5
 8007716:	18f6      	adds	r6, r6, r3
 8007718:	ea82 0204 	eor.w	r2, r2, r4
 800771c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007720:	4157      	adcs	r7, r2
 8007722:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007726:	ea8a 0006 	eor.w	r0, sl, r6
 800772a:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 800772e:	912b      	str	r1, [sp, #172]	; 0xac
 8007730:	ea8b 0107 	eor.w	r1, fp, r7
 8007734:	4691      	mov	r9, r2
 8007736:	e01f      	b.n	8007778 <blake2b_compress_ref+0xc00>
 8007738:	ade682d1 	.word	0xade682d1
 800773c:	510e527f 	.word	0x510e527f
 8007740:	f3bcc908 	.word	0xf3bcc908
 8007744:	6a09e667 	.word	0x6a09e667
 8007748:	2b3e6c1f 	.word	0x2b3e6c1f
 800774c:	9b05688c 	.word	0x9b05688c
 8007750:	84caa73b 	.word	0x84caa73b
 8007754:	bb67ae85 	.word	0xbb67ae85
 8007758:	fb41bd6b 	.word	0xfb41bd6b
 800775c:	1f83d9ab 	.word	0x1f83d9ab
 8007760:	fe94f82b 	.word	0xfe94f82b
 8007764:	3c6ef372 	.word	0x3c6ef372
 8007768:	137e2179 	.word	0x137e2179
 800776c:	5be0cd19 	.word	0x5be0cd19
 8007770:	5f1d36f1 	.word	0x5f1d36f1
 8007774:	a54ff53a 	.word	0xa54ff53a
 8007778:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 800777c:	0e09      	lsrs	r1, r1, #24
 800777e:	4698      	mov	r8, r3
 8007780:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8007784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007788:	1900      	adds	r0, r0, r4
 800778a:	4169      	adcs	r1, r5
 800778c:	1880      	adds	r0, r0, r2
 800778e:	4159      	adcs	r1, r3
 8007790:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 8007794:	ea80 0008 	eor.w	r0, r0, r8
 8007798:	ea81 0109 	eor.w	r1, r1, r9
 800779c:	4689      	mov	r9, r1
 800779e:	0c01      	lsrs	r1, r0, #16
 80077a0:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80077a4:	9120      	str	r1, [sp, #128]	; 0x80
 80077a6:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80077aa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077ae:	9121      	str	r1, [sp, #132]	; 0x84
 80077b0:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80077b4:	1980      	adds	r0, r0, r6
 80077b6:	4179      	adcs	r1, r7
 80077b8:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 80077bc:	4050      	eors	r0, r2
 80077be:	4059      	eors	r1, r3
 80077c0:	460b      	mov	r3, r1
 80077c2:	0042      	lsls	r2, r0, #1
 80077c4:	0049      	lsls	r1, r1, #1
 80077c6:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 80077ca:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 80077ce:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 80077d2:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 80077d6:	18c0      	adds	r0, r0, r3
 80077d8:	4161      	adcs	r1, r4
 80077da:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 80077de:	181b      	adds	r3, r3, r0
 80077e0:	4618      	mov	r0, r3
 80077e2:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 80077e6:	414c      	adcs	r4, r1
 80077e8:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 80077ec:	4063      	eors	r3, r4
 80077ee:	4621      	mov	r1, r4
 80077f0:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 80077f4:	18f6      	adds	r6, r6, r3
 80077f6:	ea82 0200 	eor.w	r2, r2, r0
 80077fa:	4157      	adcs	r7, r2
 80077fc:	4074      	eors	r4, r6
 80077fe:	407d      	eors	r5, r7
 8007800:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007804:	4691      	mov	r9, r2
 8007806:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800780a:	0e2d      	lsrs	r5, r5, #24
 800780c:	4698      	mov	r8, r3
 800780e:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007812:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8007816:	1824      	adds	r4, r4, r0
 8007818:	414d      	adcs	r5, r1
 800781a:	18a4      	adds	r4, r4, r2
 800781c:	415d      	adcs	r5, r3
 800781e:	ea84 0008 	eor.w	r0, r4, r8
 8007822:	ea85 0109 	eor.w	r1, r5, r9
 8007826:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 800782a:	0c04      	lsrs	r4, r0, #16
 800782c:	4680      	mov	r8, r0
 800782e:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8007832:	0c0c      	lsrs	r4, r1, #16
 8007834:	1836      	adds	r6, r6, r0
 8007836:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 800783a:	414f      	adcs	r7, r1
 800783c:	407b      	eors	r3, r7
 800783e:	4072      	eors	r2, r6
 8007840:	005c      	lsls	r4, r3, #1
 8007842:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8007846:	0052      	lsls	r2, r2, #1
 8007848:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800784c:	9425      	str	r4, [sp, #148]	; 0x94
 800784e:	9324      	str	r3, [sp, #144]	; 0x90
 8007850:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8007854:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8007858:	18a4      	adds	r4, r4, r2
 800785a:	415d      	adcs	r5, r3
 800785c:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8007860:	1912      	adds	r2, r2, r4
 8007862:	416b      	adcs	r3, r5
 8007864:	4050      	eors	r0, r2
 8007866:	4059      	eors	r1, r3
 8007868:	4614      	mov	r4, r2
 800786a:	461d      	mov	r5, r3
 800786c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8007870:	1852      	adds	r2, r2, r1
 8007872:	4143      	adcs	r3, r0
 8007874:	4688      	mov	r8, r1
 8007876:	4681      	mov	r9, r0
 8007878:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800787c:	4050      	eors	r0, r2
 800787e:	4059      	eors	r1, r3
 8007880:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8007884:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8007888:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 800788c:	0e09      	lsrs	r1, r1, #24
 800788e:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8007892:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8007896:	1900      	adds	r0, r0, r4
 8007898:	4169      	adcs	r1, r5
 800789a:	1880      	adds	r0, r0, r2
 800789c:	4159      	adcs	r1, r3
 800789e:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 80078a2:	ea80 0008 	eor.w	r0, r0, r8
 80078a6:	ea81 0109 	eor.w	r1, r1, r9
 80078aa:	4689      	mov	r9, r1
 80078ac:	0c01      	lsrs	r1, r0, #16
 80078ae:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80078b2:	9128      	str	r1, [sp, #160]	; 0xa0
 80078b4:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80078b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078bc:	9129      	str	r1, [sp, #164]	; 0xa4
 80078be:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 80078c2:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 80078c6:	1900      	adds	r0, r0, r4
 80078c8:	4169      	adcs	r1, r5
 80078ca:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 80078ce:	4050      	eors	r0, r2
 80078d0:	4059      	eors	r1, r3
 80078d2:	0042      	lsls	r2, r0, #1
 80078d4:	460b      	mov	r3, r1
 80078d6:	0049      	lsls	r1, r1, #1
 80078d8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80078dc:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80078e0:	912b      	str	r1, [sp, #172]	; 0xac
 80078e2:	932a      	str	r3, [sp, #168]	; 0xa8
 80078e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078e8:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 80078ec:	18c0      	adds	r0, r0, r3
 80078ee:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80078f2:	4161      	adcs	r1, r4
 80078f4:	eb10 000a 	adds.w	r0, r0, sl
 80078f8:	eb41 010b 	adc.w	r1, r1, fp
 80078fc:	404b      	eors	r3, r1
 80078fe:	18f6      	adds	r6, r6, r3
 8007900:	ea82 0200 	eor.w	r2, r2, r0
 8007904:	4157      	adcs	r7, r2
 8007906:	ea8a 0406 	eor.w	r4, sl, r6
 800790a:	ea8b 0507 	eor.w	r5, fp, r7
 800790e:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007912:	4691      	mov	r9, r2
 8007914:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007918:	0e2d      	lsrs	r5, r5, #24
 800791a:	4698      	mov	r8, r3
 800791c:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007920:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8007924:	1824      	adds	r4, r4, r0
 8007926:	414d      	adcs	r5, r1
 8007928:	18a4      	adds	r4, r4, r2
 800792a:	415d      	adcs	r5, r3
 800792c:	ea84 0008 	eor.w	r0, r4, r8
 8007930:	ea85 0109 	eor.w	r1, r5, r9
 8007934:	4689      	mov	r9, r1
 8007936:	0c01      	lsrs	r1, r0, #16
 8007938:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800793c:	9126      	str	r1, [sp, #152]	; 0x98
 800793e:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007942:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007946:	9127      	str	r1, [sp, #156]	; 0x9c
 8007948:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800794c:	1980      	adds	r0, r0, r6
 800794e:	4179      	adcs	r1, r7
 8007950:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8007954:	4050      	eors	r0, r2
 8007956:	4059      	eors	r1, r3
 8007958:	460b      	mov	r3, r1
 800795a:	0042      	lsls	r2, r0, #1
 800795c:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8007960:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8007964:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8007968:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 800796c:	18a4      	adds	r4, r4, r2
 800796e:	415d      	adcs	r5, r3
 8007970:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8007974:	1912      	adds	r2, r2, r4
 8007976:	416b      	adcs	r3, r5
 8007978:	4614      	mov	r4, r2
 800797a:	461d      	mov	r5, r3
 800797c:	0049      	lsls	r1, r1, #1
 800797e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8007982:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8007986:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 800798a:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 800798e:	406b      	eors	r3, r5
 8007990:	18c0      	adds	r0, r0, r3
 8007992:	ea82 0204 	eor.w	r2, r2, r4
 8007996:	4151      	adcs	r1, r2
 8007998:	4046      	eors	r6, r0
 800799a:	404f      	eors	r7, r1
 800799c:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 80079a0:	4691      	mov	r9, r2
 80079a2:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 80079a6:	0e3f      	lsrs	r7, r7, #24
 80079a8:	4698      	mov	r8, r3
 80079aa:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 80079ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079b2:	1936      	adds	r6, r6, r4
 80079b4:	416f      	adcs	r7, r5
 80079b6:	18b6      	adds	r6, r6, r2
 80079b8:	415f      	adcs	r7, r3
 80079ba:	ea86 0408 	eor.w	r4, r6, r8
 80079be:	ea87 0509 	eor.w	r5, r7, r9
 80079c2:	46a0      	mov	r8, r4
 80079c4:	0c24      	lsrs	r4, r4, #16
 80079c6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80079ca:	9422      	str	r4, [sp, #136]	; 0x88
 80079cc:	0c2c      	lsrs	r4, r5, #16
 80079ce:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80079d2:	9423      	str	r4, [sp, #140]	; 0x8c
 80079d4:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 80079d8:	1824      	adds	r4, r4, r0
 80079da:	414d      	adcs	r5, r1
 80079dc:	4620      	mov	r0, r4
 80079de:	4629      	mov	r1, r5
 80079e0:	4050      	eors	r0, r2
 80079e2:	4059      	eors	r1, r3
 80079e4:	0042      	lsls	r2, r0, #1
 80079e6:	460b      	mov	r3, r1
 80079e8:	0049      	lsls	r1, r1, #1
 80079ea:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80079ee:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80079f2:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 80079f6:	9125      	str	r1, [sp, #148]	; 0x94
 80079f8:	9324      	str	r3, [sp, #144]	; 0x90
 80079fa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80079fe:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8007a02:	18c0      	adds	r0, r0, r3
 8007a04:	4161      	adcs	r1, r4
 8007a06:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8007a0a:	181b      	adds	r3, r3, r0
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8007a12:	414c      	adcs	r4, r1
 8007a14:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8007a18:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8007a1c:	4063      	eors	r3, r4
 8007a1e:	4621      	mov	r1, r4
 8007a20:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 8007a24:	18f6      	adds	r6, r6, r3
 8007a26:	ea82 0200 	eor.w	r2, r2, r0
 8007a2a:	4157      	adcs	r7, r2
 8007a2c:	4074      	eors	r4, r6
 8007a2e:	407d      	eors	r5, r7
 8007a30:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007a34:	4691      	mov	r9, r2
 8007a36:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007a3a:	0e2d      	lsrs	r5, r5, #24
 8007a3c:	4698      	mov	r8, r3
 8007a3e:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007a42:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8007a46:	1824      	adds	r4, r4, r0
 8007a48:	414d      	adcs	r5, r1
 8007a4a:	18a4      	adds	r4, r4, r2
 8007a4c:	415d      	adcs	r5, r3
 8007a4e:	ea84 0008 	eor.w	r0, r4, r8
 8007a52:	ea85 0109 	eor.w	r1, r5, r9
 8007a56:	4689      	mov	r9, r1
 8007a58:	0c01      	lsrs	r1, r0, #16
 8007a5a:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007a5e:	9120      	str	r1, [sp, #128]	; 0x80
 8007a60:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007a64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a68:	9121      	str	r1, [sp, #132]	; 0x84
 8007a6a:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8007a6e:	1980      	adds	r0, r0, r6
 8007a70:	4179      	adcs	r1, r7
 8007a72:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8007a76:	4050      	eors	r0, r2
 8007a78:	4059      	eors	r1, r3
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	0042      	lsls	r2, r0, #1
 8007a7e:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8007a82:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8007a86:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8007a8a:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8007a8e:	18a4      	adds	r4, r4, r2
 8007a90:	415d      	adcs	r5, r3
 8007a92:	0049      	lsls	r1, r1, #1
 8007a94:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8007a98:	19a4      	adds	r4, r4, r6
 8007a9a:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8007a9e:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8007aa2:	417d      	adcs	r5, r7
 8007aa4:	406b      	eors	r3, r5
 8007aa6:	18c0      	adds	r0, r0, r3
 8007aa8:	ea82 0204 	eor.w	r2, r2, r4
 8007aac:	4151      	adcs	r1, r2
 8007aae:	4046      	eors	r6, r0
 8007ab0:	404f      	eors	r7, r1
 8007ab2:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8007ab6:	4691      	mov	r9, r2
 8007ab8:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8007abc:	0e3f      	lsrs	r7, r7, #24
 8007abe:	4698      	mov	r8, r3
 8007ac0:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8007ac4:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007ac8:	1936      	adds	r6, r6, r4
 8007aca:	416f      	adcs	r7, r5
 8007acc:	18b6      	adds	r6, r6, r2
 8007ace:	415f      	adcs	r7, r3
 8007ad0:	ea86 0408 	eor.w	r4, r6, r8
 8007ad4:	ea87 0509 	eor.w	r5, r7, r9
 8007ad8:	46a0      	mov	r8, r4
 8007ada:	0c24      	lsrs	r4, r4, #16
 8007adc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007ae0:	9426      	str	r4, [sp, #152]	; 0x98
 8007ae2:	0c2c      	lsrs	r4, r5, #16
 8007ae4:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007ae8:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 8007aec:	9427      	str	r4, [sp, #156]	; 0x9c
 8007aee:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 8007af2:	1824      	adds	r4, r4, r0
 8007af4:	414d      	adcs	r5, r1
 8007af6:	4620      	mov	r0, r4
 8007af8:	4629      	mov	r1, r5
 8007afa:	4050      	eors	r0, r2
 8007afc:	4059      	eors	r1, r3
 8007afe:	0042      	lsls	r2, r0, #1
 8007b00:	460b      	mov	r3, r1
 8007b02:	0049      	lsls	r1, r1, #1
 8007b04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007b08:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007b0c:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8007b10:	912d      	str	r1, [sp, #180]	; 0xb4
 8007b12:	932c      	str	r3, [sp, #176]	; 0xb0
 8007b14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b18:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8007b1c:	18c0      	adds	r0, r0, r3
 8007b1e:	4161      	adcs	r1, r4
 8007b20:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8007b24:	181b      	adds	r3, r3, r0
 8007b26:	4618      	mov	r0, r3
 8007b28:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8007b2c:	414c      	adcs	r4, r1
 8007b2e:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8007b32:	4063      	eors	r3, r4
 8007b34:	4621      	mov	r1, r4
 8007b36:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8007b3a:	18f6      	adds	r6, r6, r3
 8007b3c:	ea82 0200 	eor.w	r2, r2, r0
 8007b40:	4157      	adcs	r7, r2
 8007b42:	4074      	eors	r4, r6
 8007b44:	407d      	eors	r5, r7
 8007b46:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007b4a:	4691      	mov	r9, r2
 8007b4c:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007b50:	0e2d      	lsrs	r5, r5, #24
 8007b52:	4698      	mov	r8, r3
 8007b54:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007b58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b5c:	1824      	adds	r4, r4, r0
 8007b5e:	414d      	adcs	r5, r1
 8007b60:	18a4      	adds	r4, r4, r2
 8007b62:	415d      	adcs	r5, r3
 8007b64:	ea84 0008 	eor.w	r0, r4, r8
 8007b68:	ea85 0109 	eor.w	r1, r5, r9
 8007b6c:	4689      	mov	r9, r1
 8007b6e:	0c01      	lsrs	r1, r0, #16
 8007b70:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007b74:	9122      	str	r1, [sp, #136]	; 0x88
 8007b76:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007b7a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b7e:	9123      	str	r1, [sp, #140]	; 0x8c
 8007b80:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8007b84:	1980      	adds	r0, r0, r6
 8007b86:	4179      	adcs	r1, r7
 8007b88:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8007b8c:	4050      	eors	r0, r2
 8007b8e:	4059      	eors	r1, r3
 8007b90:	0042      	lsls	r2, r0, #1
 8007b92:	460b      	mov	r3, r1
 8007b94:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007b98:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8007b9c:	932a      	str	r3, [sp, #168]	; 0xa8
 8007b9e:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8007ba2:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8007ba6:	18a4      	adds	r4, r4, r2
 8007ba8:	415d      	adcs	r5, r3
 8007baa:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8007bae:	eb14 040a 	adds.w	r4, r4, sl
 8007bb2:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 8007bb6:	eb45 050b 	adc.w	r5, r5, fp
 8007bba:	406b      	eors	r3, r5
 8007bbc:	18f6      	adds	r6, r6, r3
 8007bbe:	ea82 0204 	eor.w	r2, r2, r4
 8007bc2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007bc6:	4157      	adcs	r7, r2
 8007bc8:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007bcc:	ea8a 0006 	eor.w	r0, sl, r6
 8007bd0:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8007bd4:	912b      	str	r1, [sp, #172]	; 0xac
 8007bd6:	ea8b 0107 	eor.w	r1, fp, r7
 8007bda:	4691      	mov	r9, r2
 8007bdc:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8007be0:	0e09      	lsrs	r1, r1, #24
 8007be2:	4698      	mov	r8, r3
 8007be4:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8007be8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8007bec:	1900      	adds	r0, r0, r4
 8007bee:	4169      	adcs	r1, r5
 8007bf0:	1880      	adds	r0, r0, r2
 8007bf2:	4159      	adcs	r1, r3
 8007bf4:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 8007bf8:	ea80 0008 	eor.w	r0, r0, r8
 8007bfc:	ea81 0109 	eor.w	r1, r1, r9
 8007c00:	4689      	mov	r9, r1
 8007c02:	0c01      	lsrs	r1, r0, #16
 8007c04:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007c08:	9120      	str	r1, [sp, #128]	; 0x80
 8007c0a:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007c0e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c12:	9121      	str	r1, [sp, #132]	; 0x84
 8007c14:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8007c18:	1980      	adds	r0, r0, r6
 8007c1a:	4179      	adcs	r1, r7
 8007c1c:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8007c20:	4050      	eors	r0, r2
 8007c22:	4059      	eors	r1, r3
 8007c24:	460b      	mov	r3, r1
 8007c26:	0042      	lsls	r2, r0, #1
 8007c28:	0049      	lsls	r1, r1, #1
 8007c2a:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8007c2e:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8007c32:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8007c36:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8007c3a:	18c0      	adds	r0, r0, r3
 8007c3c:	4161      	adcs	r1, r4
 8007c3e:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8007c42:	181b      	adds	r3, r3, r0
 8007c44:	4618      	mov	r0, r3
 8007c46:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8007c4a:	414c      	adcs	r4, r1
 8007c4c:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8007c50:	4063      	eors	r3, r4
 8007c52:	4621      	mov	r1, r4
 8007c54:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8007c58:	18f6      	adds	r6, r6, r3
 8007c5a:	ea82 0200 	eor.w	r2, r2, r0
 8007c5e:	4157      	adcs	r7, r2
 8007c60:	4074      	eors	r4, r6
 8007c62:	407d      	eors	r5, r7
 8007c64:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007c68:	4691      	mov	r9, r2
 8007c6a:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007c6e:	0e2d      	lsrs	r5, r5, #24
 8007c70:	4698      	mov	r8, r3
 8007c72:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007c76:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8007c7a:	1824      	adds	r4, r4, r0
 8007c7c:	414d      	adcs	r5, r1
 8007c7e:	18a4      	adds	r4, r4, r2
 8007c80:	415d      	adcs	r5, r3
 8007c82:	ea84 0008 	eor.w	r0, r4, r8
 8007c86:	ea85 0109 	eor.w	r1, r5, r9
 8007c8a:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8007c8e:	0c04      	lsrs	r4, r0, #16
 8007c90:	4680      	mov	r8, r0
 8007c92:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8007c96:	0c0c      	lsrs	r4, r1, #16
 8007c98:	1836      	adds	r6, r6, r0
 8007c9a:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8007c9e:	414f      	adcs	r7, r1
 8007ca0:	407b      	eors	r3, r7
 8007ca2:	4072      	eors	r2, r6
 8007ca4:	005c      	lsls	r4, r3, #1
 8007ca6:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8007caa:	0052      	lsls	r2, r2, #1
 8007cac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007cb0:	9425      	str	r4, [sp, #148]	; 0x94
 8007cb2:	9324      	str	r3, [sp, #144]	; 0x90
 8007cb4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007cb8:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8007cbc:	18a4      	adds	r4, r4, r2
 8007cbe:	415d      	adcs	r5, r3
 8007cc0:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8007cc4:	1912      	adds	r2, r2, r4
 8007cc6:	416b      	adcs	r3, r5
 8007cc8:	4050      	eors	r0, r2
 8007cca:	4059      	eors	r1, r3
 8007ccc:	4614      	mov	r4, r2
 8007cce:	461d      	mov	r5, r3
 8007cd0:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8007cd4:	1852      	adds	r2, r2, r1
 8007cd6:	4143      	adcs	r3, r0
 8007cd8:	4688      	mov	r8, r1
 8007cda:	4681      	mov	r9, r0
 8007cdc:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8007ce0:	4050      	eors	r0, r2
 8007ce2:	4059      	eors	r1, r3
 8007ce4:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8007ce8:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8007cec:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8007cf0:	0e09      	lsrs	r1, r1, #24
 8007cf2:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8007cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cfa:	1900      	adds	r0, r0, r4
 8007cfc:	4169      	adcs	r1, r5
 8007cfe:	1880      	adds	r0, r0, r2
 8007d00:	4159      	adcs	r1, r3
 8007d02:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8007d06:	ea80 0008 	eor.w	r0, r0, r8
 8007d0a:	ea81 0109 	eor.w	r1, r1, r9
 8007d0e:	4689      	mov	r9, r1
 8007d10:	0c01      	lsrs	r1, r0, #16
 8007d12:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007d16:	9128      	str	r1, [sp, #160]	; 0xa0
 8007d18:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007d1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d20:	9129      	str	r1, [sp, #164]	; 0xa4
 8007d22:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8007d26:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8007d2a:	1900      	adds	r0, r0, r4
 8007d2c:	4169      	adcs	r1, r5
 8007d2e:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8007d32:	4050      	eors	r0, r2
 8007d34:	4059      	eors	r1, r3
 8007d36:	0042      	lsls	r2, r0, #1
 8007d38:	460b      	mov	r3, r1
 8007d3a:	0049      	lsls	r1, r1, #1
 8007d3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007d40:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007d44:	912b      	str	r1, [sp, #172]	; 0xac
 8007d46:	932a      	str	r3, [sp, #168]	; 0xa8
 8007d48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d4c:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8007d50:	18c0      	adds	r0, r0, r3
 8007d52:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8007d56:	4161      	adcs	r1, r4
 8007d58:	eb10 000a 	adds.w	r0, r0, sl
 8007d5c:	eb41 010b 	adc.w	r1, r1, fp
 8007d60:	404b      	eors	r3, r1
 8007d62:	18f6      	adds	r6, r6, r3
 8007d64:	ea82 0200 	eor.w	r2, r2, r0
 8007d68:	4157      	adcs	r7, r2
 8007d6a:	ea8a 0406 	eor.w	r4, sl, r6
 8007d6e:	ea8b 0507 	eor.w	r5, fp, r7
 8007d72:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007d76:	4691      	mov	r9, r2
 8007d78:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007d7c:	0e2d      	lsrs	r5, r5, #24
 8007d7e:	4698      	mov	r8, r3
 8007d80:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007d84:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8007d88:	1824      	adds	r4, r4, r0
 8007d8a:	414d      	adcs	r5, r1
 8007d8c:	18a4      	adds	r4, r4, r2
 8007d8e:	415d      	adcs	r5, r3
 8007d90:	ea84 0008 	eor.w	r0, r4, r8
 8007d94:	ea85 0109 	eor.w	r1, r5, r9
 8007d98:	4689      	mov	r9, r1
 8007d9a:	0c01      	lsrs	r1, r0, #16
 8007d9c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007da0:	9126      	str	r1, [sp, #152]	; 0x98
 8007da2:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007da6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007daa:	9127      	str	r1, [sp, #156]	; 0x9c
 8007dac:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8007db0:	1980      	adds	r0, r0, r6
 8007db2:	4179      	adcs	r1, r7
 8007db4:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8007db8:	4050      	eors	r0, r2
 8007dba:	4059      	eors	r1, r3
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	0042      	lsls	r2, r0, #1
 8007dc0:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8007dc4:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8007dc8:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8007dcc:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8007dd0:	18a4      	adds	r4, r4, r2
 8007dd2:	415d      	adcs	r5, r3
 8007dd4:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8007dd8:	1912      	adds	r2, r2, r4
 8007dda:	416b      	adcs	r3, r5
 8007ddc:	4614      	mov	r4, r2
 8007dde:	461d      	mov	r5, r3
 8007de0:	0049      	lsls	r1, r1, #1
 8007de2:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8007de6:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8007dea:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8007dee:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8007df2:	406b      	eors	r3, r5
 8007df4:	18c0      	adds	r0, r0, r3
 8007df6:	ea82 0204 	eor.w	r2, r2, r4
 8007dfa:	4151      	adcs	r1, r2
 8007dfc:	4046      	eors	r6, r0
 8007dfe:	404f      	eors	r7, r1
 8007e00:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8007e04:	4691      	mov	r9, r2
 8007e06:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8007e0a:	0e3f      	lsrs	r7, r7, #24
 8007e0c:	4698      	mov	r8, r3
 8007e0e:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8007e12:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e16:	1936      	adds	r6, r6, r4
 8007e18:	416f      	adcs	r7, r5
 8007e1a:	18b6      	adds	r6, r6, r2
 8007e1c:	415f      	adcs	r7, r3
 8007e1e:	ea86 0408 	eor.w	r4, r6, r8
 8007e22:	ea87 0509 	eor.w	r5, r7, r9
 8007e26:	46a0      	mov	r8, r4
 8007e28:	0c24      	lsrs	r4, r4, #16
 8007e2a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007e2e:	9422      	str	r4, [sp, #136]	; 0x88
 8007e30:	0c2c      	lsrs	r4, r5, #16
 8007e32:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007e36:	9423      	str	r4, [sp, #140]	; 0x8c
 8007e38:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8007e3c:	1824      	adds	r4, r4, r0
 8007e3e:	414d      	adcs	r5, r1
 8007e40:	4620      	mov	r0, r4
 8007e42:	4629      	mov	r1, r5
 8007e44:	4050      	eors	r0, r2
 8007e46:	4059      	eors	r1, r3
 8007e48:	0042      	lsls	r2, r0, #1
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	0049      	lsls	r1, r1, #1
 8007e4e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007e52:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007e56:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8007e5a:	9125      	str	r1, [sp, #148]	; 0x94
 8007e5c:	9324      	str	r3, [sp, #144]	; 0x90
 8007e5e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8007e62:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8007e66:	18c0      	adds	r0, r0, r3
 8007e68:	4161      	adcs	r1, r4
 8007e6a:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8007e6e:	181b      	adds	r3, r3, r0
 8007e70:	4618      	mov	r0, r3
 8007e72:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8007e76:	414c      	adcs	r4, r1
 8007e78:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8007e7c:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8007e80:	4063      	eors	r3, r4
 8007e82:	4621      	mov	r1, r4
 8007e84:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 8007e88:	18f6      	adds	r6, r6, r3
 8007e8a:	ea82 0200 	eor.w	r2, r2, r0
 8007e8e:	4157      	adcs	r7, r2
 8007e90:	4074      	eors	r4, r6
 8007e92:	407d      	eors	r5, r7
 8007e94:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007e98:	4691      	mov	r9, r2
 8007e9a:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007e9e:	0e2d      	lsrs	r5, r5, #24
 8007ea0:	4698      	mov	r8, r3
 8007ea2:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007ea6:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8007eaa:	1824      	adds	r4, r4, r0
 8007eac:	414d      	adcs	r5, r1
 8007eae:	18a4      	adds	r4, r4, r2
 8007eb0:	415d      	adcs	r5, r3
 8007eb2:	ea84 0008 	eor.w	r0, r4, r8
 8007eb6:	ea85 0109 	eor.w	r1, r5, r9
 8007eba:	4689      	mov	r9, r1
 8007ebc:	0c01      	lsrs	r1, r0, #16
 8007ebe:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007ec2:	9120      	str	r1, [sp, #128]	; 0x80
 8007ec4:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ecc:	9121      	str	r1, [sp, #132]	; 0x84
 8007ece:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8007ed2:	1980      	adds	r0, r0, r6
 8007ed4:	4179      	adcs	r1, r7
 8007ed6:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8007eda:	4050      	eors	r0, r2
 8007edc:	4059      	eors	r1, r3
 8007ede:	460b      	mov	r3, r1
 8007ee0:	0042      	lsls	r2, r0, #1
 8007ee2:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8007ee6:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8007eea:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8007eee:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8007ef2:	18a4      	adds	r4, r4, r2
 8007ef4:	415d      	adcs	r5, r3
 8007ef6:	0049      	lsls	r1, r1, #1
 8007ef8:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8007efc:	19a4      	adds	r4, r4, r6
 8007efe:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8007f02:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8007f06:	417d      	adcs	r5, r7
 8007f08:	406b      	eors	r3, r5
 8007f0a:	18c0      	adds	r0, r0, r3
 8007f0c:	ea82 0204 	eor.w	r2, r2, r4
 8007f10:	4151      	adcs	r1, r2
 8007f12:	4046      	eors	r6, r0
 8007f14:	404f      	eors	r7, r1
 8007f16:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8007f1a:	4691      	mov	r9, r2
 8007f1c:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8007f20:	0e3f      	lsrs	r7, r7, #24
 8007f22:	4698      	mov	r8, r3
 8007f24:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8007f28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007f2c:	1936      	adds	r6, r6, r4
 8007f2e:	416f      	adcs	r7, r5
 8007f30:	18b6      	adds	r6, r6, r2
 8007f32:	415f      	adcs	r7, r3
 8007f34:	ea86 0408 	eor.w	r4, r6, r8
 8007f38:	ea87 0509 	eor.w	r5, r7, r9
 8007f3c:	46a0      	mov	r8, r4
 8007f3e:	0c24      	lsrs	r4, r4, #16
 8007f40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007f44:	9426      	str	r4, [sp, #152]	; 0x98
 8007f46:	0c2c      	lsrs	r4, r5, #16
 8007f48:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007f4c:	9427      	str	r4, [sp, #156]	; 0x9c
 8007f4e:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 8007f52:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 8007f56:	1824      	adds	r4, r4, r0
 8007f58:	414d      	adcs	r5, r1
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	4050      	eors	r0, r2
 8007f60:	4059      	eors	r1, r3
 8007f62:	0042      	lsls	r2, r0, #1
 8007f64:	460b      	mov	r3, r1
 8007f66:	0049      	lsls	r1, r1, #1
 8007f68:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007f6c:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007f70:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8007f74:	912d      	str	r1, [sp, #180]	; 0xb4
 8007f76:	932c      	str	r3, [sp, #176]	; 0xb0
 8007f78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f7c:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8007f80:	18c0      	adds	r0, r0, r3
 8007f82:	4161      	adcs	r1, r4
 8007f84:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8007f88:	181b      	adds	r3, r3, r0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8007f90:	414c      	adcs	r4, r1
 8007f92:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8007f96:	4063      	eors	r3, r4
 8007f98:	4621      	mov	r1, r4
 8007f9a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8007f9e:	18f6      	adds	r6, r6, r3
 8007fa0:	ea82 0200 	eor.w	r2, r2, r0
 8007fa4:	4157      	adcs	r7, r2
 8007fa6:	4074      	eors	r4, r6
 8007fa8:	407d      	eors	r5, r7
 8007faa:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007fae:	4691      	mov	r9, r2
 8007fb0:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007fb4:	0e2d      	lsrs	r5, r5, #24
 8007fb6:	4698      	mov	r8, r3
 8007fb8:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007fbc:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8007fc0:	1824      	adds	r4, r4, r0
 8007fc2:	414d      	adcs	r5, r1
 8007fc4:	18a4      	adds	r4, r4, r2
 8007fc6:	415d      	adcs	r5, r3
 8007fc8:	ea84 0008 	eor.w	r0, r4, r8
 8007fcc:	ea85 0109 	eor.w	r1, r5, r9
 8007fd0:	4689      	mov	r9, r1
 8007fd2:	0c01      	lsrs	r1, r0, #16
 8007fd4:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007fd8:	9122      	str	r1, [sp, #136]	; 0x88
 8007fda:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007fde:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007fe2:	9123      	str	r1, [sp, #140]	; 0x8c
 8007fe4:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8007fe8:	1980      	adds	r0, r0, r6
 8007fea:	4179      	adcs	r1, r7
 8007fec:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8007ff0:	4050      	eors	r0, r2
 8007ff2:	4059      	eors	r1, r3
 8007ff4:	0042      	lsls	r2, r0, #1
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007ffc:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008000:	932a      	str	r3, [sp, #168]	; 0xa8
 8008002:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008006:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 800800a:	18a4      	adds	r4, r4, r2
 800800c:	415d      	adcs	r5, r3
 800800e:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8008012:	eb14 040a 	adds.w	r4, r4, sl
 8008016:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 800801a:	eb45 050b 	adc.w	r5, r5, fp
 800801e:	406b      	eors	r3, r5
 8008020:	18f6      	adds	r6, r6, r3
 8008022:	ea82 0204 	eor.w	r2, r2, r4
 8008026:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800802a:	4157      	adcs	r7, r2
 800802c:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008030:	ea8a 0006 	eor.w	r0, sl, r6
 8008034:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8008038:	912b      	str	r1, [sp, #172]	; 0xac
 800803a:	ea8b 0107 	eor.w	r1, fp, r7
 800803e:	4691      	mov	r9, r2
 8008040:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8008044:	0e09      	lsrs	r1, r1, #24
 8008046:	4698      	mov	r8, r3
 8008048:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800804c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008050:	1900      	adds	r0, r0, r4
 8008052:	4169      	adcs	r1, r5
 8008054:	1880      	adds	r0, r0, r2
 8008056:	4159      	adcs	r1, r3
 8008058:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 800805c:	ea80 0008 	eor.w	r0, r0, r8
 8008060:	ea81 0109 	eor.w	r1, r1, r9
 8008064:	4689      	mov	r9, r1
 8008066:	0c01      	lsrs	r1, r0, #16
 8008068:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800806c:	9120      	str	r1, [sp, #128]	; 0x80
 800806e:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008072:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008076:	9121      	str	r1, [sp, #132]	; 0x84
 8008078:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800807c:	1980      	adds	r0, r0, r6
 800807e:	4179      	adcs	r1, r7
 8008080:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8008084:	4050      	eors	r0, r2
 8008086:	4059      	eors	r1, r3
 8008088:	460b      	mov	r3, r1
 800808a:	0042      	lsls	r2, r0, #1
 800808c:	0049      	lsls	r1, r1, #1
 800808e:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8008092:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8008096:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 800809a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800809e:	18c0      	adds	r0, r0, r3
 80080a0:	4161      	adcs	r1, r4
 80080a2:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 80080a6:	181b      	adds	r3, r3, r0
 80080a8:	4618      	mov	r0, r3
 80080aa:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 80080ae:	414c      	adcs	r4, r1
 80080b0:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 80080b4:	4063      	eors	r3, r4
 80080b6:	4621      	mov	r1, r4
 80080b8:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 80080bc:	18f6      	adds	r6, r6, r3
 80080be:	ea82 0200 	eor.w	r2, r2, r0
 80080c2:	4157      	adcs	r7, r2
 80080c4:	4074      	eors	r4, r6
 80080c6:	407d      	eors	r5, r7
 80080c8:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80080cc:	4691      	mov	r9, r2
 80080ce:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80080d2:	0e2d      	lsrs	r5, r5, #24
 80080d4:	4698      	mov	r8, r3
 80080d6:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80080da:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 80080de:	1824      	adds	r4, r4, r0
 80080e0:	414d      	adcs	r5, r1
 80080e2:	18a4      	adds	r4, r4, r2
 80080e4:	415d      	adcs	r5, r3
 80080e6:	ea84 0008 	eor.w	r0, r4, r8
 80080ea:	ea85 0109 	eor.w	r1, r5, r9
 80080ee:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 80080f2:	0c04      	lsrs	r4, r0, #16
 80080f4:	4680      	mov	r8, r0
 80080f6:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 80080fa:	0c0c      	lsrs	r4, r1, #16
 80080fc:	1836      	adds	r6, r6, r0
 80080fe:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8008102:	414f      	adcs	r7, r1
 8008104:	407b      	eors	r3, r7
 8008106:	4072      	eors	r2, r6
 8008108:	005c      	lsls	r4, r3, #1
 800810a:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 800810e:	0052      	lsls	r2, r2, #1
 8008110:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008114:	9425      	str	r4, [sp, #148]	; 0x94
 8008116:	9324      	str	r3, [sp, #144]	; 0x90
 8008118:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 800811c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8008120:	18a4      	adds	r4, r4, r2
 8008122:	415d      	adcs	r5, r3
 8008124:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8008128:	1912      	adds	r2, r2, r4
 800812a:	416b      	adcs	r3, r5
 800812c:	4050      	eors	r0, r2
 800812e:	4059      	eors	r1, r3
 8008130:	4614      	mov	r4, r2
 8008132:	461d      	mov	r5, r3
 8008134:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8008138:	1852      	adds	r2, r2, r1
 800813a:	4143      	adcs	r3, r0
 800813c:	4688      	mov	r8, r1
 800813e:	4681      	mov	r9, r0
 8008140:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8008144:	4050      	eors	r0, r2
 8008146:	4059      	eors	r1, r3
 8008148:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 800814c:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8008150:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8008154:	0e09      	lsrs	r1, r1, #24
 8008156:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800815a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800815e:	1900      	adds	r0, r0, r4
 8008160:	4169      	adcs	r1, r5
 8008162:	1880      	adds	r0, r0, r2
 8008164:	4159      	adcs	r1, r3
 8008166:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 800816a:	ea80 0008 	eor.w	r0, r0, r8
 800816e:	ea81 0109 	eor.w	r1, r1, r9
 8008172:	4689      	mov	r9, r1
 8008174:	0c01      	lsrs	r1, r0, #16
 8008176:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800817a:	9128      	str	r1, [sp, #160]	; 0xa0
 800817c:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008180:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008184:	9129      	str	r1, [sp, #164]	; 0xa4
 8008186:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 800818a:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 800818e:	1900      	adds	r0, r0, r4
 8008190:	4169      	adcs	r1, r5
 8008192:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8008196:	4050      	eors	r0, r2
 8008198:	4059      	eors	r1, r3
 800819a:	0042      	lsls	r2, r0, #1
 800819c:	460b      	mov	r3, r1
 800819e:	0049      	lsls	r1, r1, #1
 80081a0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80081a4:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80081a8:	912b      	str	r1, [sp, #172]	; 0xac
 80081aa:	932a      	str	r3, [sp, #168]	; 0xa8
 80081ac:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80081b0:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 80081b4:	18c0      	adds	r0, r0, r3
 80081b6:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80081ba:	4161      	adcs	r1, r4
 80081bc:	eb10 000a 	adds.w	r0, r0, sl
 80081c0:	eb41 010b 	adc.w	r1, r1, fp
 80081c4:	404b      	eors	r3, r1
 80081c6:	18f6      	adds	r6, r6, r3
 80081c8:	ea82 0200 	eor.w	r2, r2, r0
 80081cc:	4157      	adcs	r7, r2
 80081ce:	ea8a 0406 	eor.w	r4, sl, r6
 80081d2:	ea8b 0507 	eor.w	r5, fp, r7
 80081d6:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80081da:	4691      	mov	r9, r2
 80081dc:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80081e0:	0e2d      	lsrs	r5, r5, #24
 80081e2:	4698      	mov	r8, r3
 80081e4:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80081e8:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 80081ec:	1824      	adds	r4, r4, r0
 80081ee:	414d      	adcs	r5, r1
 80081f0:	18a4      	adds	r4, r4, r2
 80081f2:	415d      	adcs	r5, r3
 80081f4:	ea84 0008 	eor.w	r0, r4, r8
 80081f8:	ea85 0109 	eor.w	r1, r5, r9
 80081fc:	4689      	mov	r9, r1
 80081fe:	0c01      	lsrs	r1, r0, #16
 8008200:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008204:	9126      	str	r1, [sp, #152]	; 0x98
 8008206:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800820a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800820e:	9127      	str	r1, [sp, #156]	; 0x9c
 8008210:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8008214:	1980      	adds	r0, r0, r6
 8008216:	4179      	adcs	r1, r7
 8008218:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 800821c:	4050      	eors	r0, r2
 800821e:	4059      	eors	r1, r3
 8008220:	460b      	mov	r3, r1
 8008222:	0042      	lsls	r2, r0, #1
 8008224:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8008228:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 800822c:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8008230:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8008234:	18a4      	adds	r4, r4, r2
 8008236:	415d      	adcs	r5, r3
 8008238:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800823c:	1912      	adds	r2, r2, r4
 800823e:	416b      	adcs	r3, r5
 8008240:	4614      	mov	r4, r2
 8008242:	461d      	mov	r5, r3
 8008244:	0049      	lsls	r1, r1, #1
 8008246:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800824a:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 800824e:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8008252:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8008256:	406b      	eors	r3, r5
 8008258:	18c0      	adds	r0, r0, r3
 800825a:	ea82 0204 	eor.w	r2, r2, r4
 800825e:	4151      	adcs	r1, r2
 8008260:	4046      	eors	r6, r0
 8008262:	404f      	eors	r7, r1
 8008264:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8008268:	4691      	mov	r9, r2
 800826a:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 800826e:	0e3f      	lsrs	r7, r7, #24
 8008270:	4698      	mov	r8, r3
 8008272:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8008276:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800827a:	1936      	adds	r6, r6, r4
 800827c:	416f      	adcs	r7, r5
 800827e:	18b6      	adds	r6, r6, r2
 8008280:	415f      	adcs	r7, r3
 8008282:	ea86 0408 	eor.w	r4, r6, r8
 8008286:	ea87 0509 	eor.w	r5, r7, r9
 800828a:	46a0      	mov	r8, r4
 800828c:	0c24      	lsrs	r4, r4, #16
 800828e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008292:	9422      	str	r4, [sp, #136]	; 0x88
 8008294:	0c2c      	lsrs	r4, r5, #16
 8008296:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800829a:	9423      	str	r4, [sp, #140]	; 0x8c
 800829c:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 80082a0:	1824      	adds	r4, r4, r0
 80082a2:	414d      	adcs	r5, r1
 80082a4:	4620      	mov	r0, r4
 80082a6:	4629      	mov	r1, r5
 80082a8:	4050      	eors	r0, r2
 80082aa:	4059      	eors	r1, r3
 80082ac:	0042      	lsls	r2, r0, #1
 80082ae:	460b      	mov	r3, r1
 80082b0:	0049      	lsls	r1, r1, #1
 80082b2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80082b6:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80082ba:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 80082be:	9125      	str	r1, [sp, #148]	; 0x94
 80082c0:	9324      	str	r3, [sp, #144]	; 0x90
 80082c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082c6:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 80082ca:	18c0      	adds	r0, r0, r3
 80082cc:	4161      	adcs	r1, r4
 80082ce:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 80082d2:	181b      	adds	r3, r3, r0
 80082d4:	4618      	mov	r0, r3
 80082d6:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80082da:	414c      	adcs	r4, r1
 80082dc:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 80082e0:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 80082e4:	4063      	eors	r3, r4
 80082e6:	4621      	mov	r1, r4
 80082e8:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 80082ec:	18f6      	adds	r6, r6, r3
 80082ee:	ea82 0200 	eor.w	r2, r2, r0
 80082f2:	4157      	adcs	r7, r2
 80082f4:	4074      	eors	r4, r6
 80082f6:	407d      	eors	r5, r7
 80082f8:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80082fc:	4691      	mov	r9, r2
 80082fe:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008302:	0e2d      	lsrs	r5, r5, #24
 8008304:	4698      	mov	r8, r3
 8008306:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 800830a:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 800830e:	1824      	adds	r4, r4, r0
 8008310:	414d      	adcs	r5, r1
 8008312:	18a4      	adds	r4, r4, r2
 8008314:	415d      	adcs	r5, r3
 8008316:	ea84 0008 	eor.w	r0, r4, r8
 800831a:	ea85 0109 	eor.w	r1, r5, r9
 800831e:	4689      	mov	r9, r1
 8008320:	0c01      	lsrs	r1, r0, #16
 8008322:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008326:	9120      	str	r1, [sp, #128]	; 0x80
 8008328:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800832c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008330:	9121      	str	r1, [sp, #132]	; 0x84
 8008332:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8008336:	1980      	adds	r0, r0, r6
 8008338:	4179      	adcs	r1, r7
 800833a:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 800833e:	4050      	eors	r0, r2
 8008340:	4059      	eors	r1, r3
 8008342:	460b      	mov	r3, r1
 8008344:	0042      	lsls	r2, r0, #1
 8008346:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 800834a:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 800834e:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8008352:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008356:	18a4      	adds	r4, r4, r2
 8008358:	415d      	adcs	r5, r3
 800835a:	0049      	lsls	r1, r1, #1
 800835c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8008360:	19a4      	adds	r4, r4, r6
 8008362:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8008366:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 800836a:	417d      	adcs	r5, r7
 800836c:	406b      	eors	r3, r5
 800836e:	18c0      	adds	r0, r0, r3
 8008370:	ea82 0204 	eor.w	r2, r2, r4
 8008374:	4151      	adcs	r1, r2
 8008376:	4046      	eors	r6, r0
 8008378:	404f      	eors	r7, r1
 800837a:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 800837e:	4691      	mov	r9, r2
 8008380:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8008384:	0e3f      	lsrs	r7, r7, #24
 8008386:	4698      	mov	r8, r3
 8008388:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 800838c:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008390:	1936      	adds	r6, r6, r4
 8008392:	416f      	adcs	r7, r5
 8008394:	18b6      	adds	r6, r6, r2
 8008396:	415f      	adcs	r7, r3
 8008398:	ea86 0408 	eor.w	r4, r6, r8
 800839c:	ea87 0509 	eor.w	r5, r7, r9
 80083a0:	46a0      	mov	r8, r4
 80083a2:	0c24      	lsrs	r4, r4, #16
 80083a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80083a8:	9426      	str	r4, [sp, #152]	; 0x98
 80083aa:	0c2c      	lsrs	r4, r5, #16
 80083ac:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80083b0:	9427      	str	r4, [sp, #156]	; 0x9c
 80083b2:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 80083b6:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 80083ba:	1824      	adds	r4, r4, r0
 80083bc:	414d      	adcs	r5, r1
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	4050      	eors	r0, r2
 80083c4:	4059      	eors	r1, r3
 80083c6:	0042      	lsls	r2, r0, #1
 80083c8:	460b      	mov	r3, r1
 80083ca:	0049      	lsls	r1, r1, #1
 80083cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80083d0:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80083d4:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 80083d8:	912d      	str	r1, [sp, #180]	; 0xb4
 80083da:	932c      	str	r3, [sp, #176]	; 0xb0
 80083dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083e0:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 80083e4:	18c0      	adds	r0, r0, r3
 80083e6:	4161      	adcs	r1, r4
 80083e8:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 80083ec:	181b      	adds	r3, r3, r0
 80083ee:	4618      	mov	r0, r3
 80083f0:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 80083f4:	414c      	adcs	r4, r1
 80083f6:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 80083fa:	4063      	eors	r3, r4
 80083fc:	4621      	mov	r1, r4
 80083fe:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8008402:	18f6      	adds	r6, r6, r3
 8008404:	ea82 0200 	eor.w	r2, r2, r0
 8008408:	4157      	adcs	r7, r2
 800840a:	4074      	eors	r4, r6
 800840c:	407d      	eors	r5, r7
 800840e:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008412:	4691      	mov	r9, r2
 8008414:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008418:	0e2d      	lsrs	r5, r5, #24
 800841a:	4698      	mov	r8, r3
 800841c:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008420:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8008424:	1824      	adds	r4, r4, r0
 8008426:	414d      	adcs	r5, r1
 8008428:	18a4      	adds	r4, r4, r2
 800842a:	415d      	adcs	r5, r3
 800842c:	ea84 0008 	eor.w	r0, r4, r8
 8008430:	ea85 0109 	eor.w	r1, r5, r9
 8008434:	4689      	mov	r9, r1
 8008436:	0c01      	lsrs	r1, r0, #16
 8008438:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800843c:	9122      	str	r1, [sp, #136]	; 0x88
 800843e:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008442:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008446:	9123      	str	r1, [sp, #140]	; 0x8c
 8008448:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800844c:	1980      	adds	r0, r0, r6
 800844e:	4179      	adcs	r1, r7
 8008450:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8008454:	4050      	eors	r0, r2
 8008456:	4059      	eors	r1, r3
 8008458:	0042      	lsls	r2, r0, #1
 800845a:	460b      	mov	r3, r1
 800845c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008460:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008464:	932a      	str	r3, [sp, #168]	; 0xa8
 8008466:	e9dd 4500 	ldrd	r4, r5, [sp]
 800846a:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 800846e:	18a4      	adds	r4, r4, r2
 8008470:	415d      	adcs	r5, r3
 8008472:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8008476:	eb14 040a 	adds.w	r4, r4, sl
 800847a:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 800847e:	eb45 050b 	adc.w	r5, r5, fp
 8008482:	406b      	eors	r3, r5
 8008484:	18f6      	adds	r6, r6, r3
 8008486:	ea82 0204 	eor.w	r2, r2, r4
 800848a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800848e:	4157      	adcs	r7, r2
 8008490:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008494:	ea8a 0006 	eor.w	r0, sl, r6
 8008498:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 800849c:	912b      	str	r1, [sp, #172]	; 0xac
 800849e:	ea8b 0107 	eor.w	r1, fp, r7
 80084a2:	4691      	mov	r9, r2
 80084a4:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 80084a8:	0e09      	lsrs	r1, r1, #24
 80084aa:	4698      	mov	r8, r3
 80084ac:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 80084b0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80084b4:	1900      	adds	r0, r0, r4
 80084b6:	4169      	adcs	r1, r5
 80084b8:	1880      	adds	r0, r0, r2
 80084ba:	4159      	adcs	r1, r3
 80084bc:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 80084c0:	ea80 0008 	eor.w	r0, r0, r8
 80084c4:	ea81 0109 	eor.w	r1, r1, r9
 80084c8:	4689      	mov	r9, r1
 80084ca:	0c01      	lsrs	r1, r0, #16
 80084cc:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80084d0:	9120      	str	r1, [sp, #128]	; 0x80
 80084d2:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80084d6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80084da:	9121      	str	r1, [sp, #132]	; 0x84
 80084dc:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80084e0:	1980      	adds	r0, r0, r6
 80084e2:	4179      	adcs	r1, r7
 80084e4:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 80084e8:	4050      	eors	r0, r2
 80084ea:	4059      	eors	r1, r3
 80084ec:	460b      	mov	r3, r1
 80084ee:	0042      	lsls	r2, r0, #1
 80084f0:	0049      	lsls	r1, r1, #1
 80084f2:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 80084f6:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 80084fa:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 80084fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008502:	18c0      	adds	r0, r0, r3
 8008504:	4161      	adcs	r1, r4
 8008506:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 800850a:	181b      	adds	r3, r3, r0
 800850c:	4618      	mov	r0, r3
 800850e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8008512:	414c      	adcs	r4, r1
 8008514:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8008518:	4063      	eors	r3, r4
 800851a:	4621      	mov	r1, r4
 800851c:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8008520:	18f6      	adds	r6, r6, r3
 8008522:	ea82 0200 	eor.w	r2, r2, r0
 8008526:	4157      	adcs	r7, r2
 8008528:	4074      	eors	r4, r6
 800852a:	407d      	eors	r5, r7
 800852c:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008530:	4691      	mov	r9, r2
 8008532:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008536:	0e2d      	lsrs	r5, r5, #24
 8008538:	4698      	mov	r8, r3
 800853a:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 800853e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008542:	1824      	adds	r4, r4, r0
 8008544:	414d      	adcs	r5, r1
 8008546:	18a4      	adds	r4, r4, r2
 8008548:	415d      	adcs	r5, r3
 800854a:	ea84 0008 	eor.w	r0, r4, r8
 800854e:	ea85 0109 	eor.w	r1, r5, r9
 8008552:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8008556:	0c04      	lsrs	r4, r0, #16
 8008558:	4680      	mov	r8, r0
 800855a:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 800855e:	0c0c      	lsrs	r4, r1, #16
 8008560:	1836      	adds	r6, r6, r0
 8008562:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8008566:	414f      	adcs	r7, r1
 8008568:	407b      	eors	r3, r7
 800856a:	4072      	eors	r2, r6
 800856c:	005c      	lsls	r4, r3, #1
 800856e:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8008572:	0052      	lsls	r2, r2, #1
 8008574:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008578:	9425      	str	r4, [sp, #148]	; 0x94
 800857a:	9324      	str	r3, [sp, #144]	; 0x90
 800857c:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8008580:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8008584:	18a4      	adds	r4, r4, r2
 8008586:	415d      	adcs	r5, r3
 8008588:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 800858c:	1912      	adds	r2, r2, r4
 800858e:	416b      	adcs	r3, r5
 8008590:	4050      	eors	r0, r2
 8008592:	4059      	eors	r1, r3
 8008594:	4614      	mov	r4, r2
 8008596:	461d      	mov	r5, r3
 8008598:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 800859c:	1852      	adds	r2, r2, r1
 800859e:	4143      	adcs	r3, r0
 80085a0:	4688      	mov	r8, r1
 80085a2:	4681      	mov	r9, r0
 80085a4:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 80085a8:	4050      	eors	r0, r2
 80085aa:	4059      	eors	r1, r3
 80085ac:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 80085b0:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 80085b4:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 80085b8:	0e09      	lsrs	r1, r1, #24
 80085ba:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 80085be:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80085c2:	1900      	adds	r0, r0, r4
 80085c4:	4169      	adcs	r1, r5
 80085c6:	1880      	adds	r0, r0, r2
 80085c8:	4159      	adcs	r1, r3
 80085ca:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 80085ce:	ea80 0008 	eor.w	r0, r0, r8
 80085d2:	ea81 0109 	eor.w	r1, r1, r9
 80085d6:	4689      	mov	r9, r1
 80085d8:	0c01      	lsrs	r1, r0, #16
 80085da:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80085de:	9128      	str	r1, [sp, #160]	; 0xa0
 80085e0:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80085e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085e8:	9129      	str	r1, [sp, #164]	; 0xa4
 80085ea:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 80085ee:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 80085f2:	1900      	adds	r0, r0, r4
 80085f4:	4169      	adcs	r1, r5
 80085f6:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 80085fa:	4050      	eors	r0, r2
 80085fc:	4059      	eors	r1, r3
 80085fe:	0042      	lsls	r2, r0, #1
 8008600:	460b      	mov	r3, r1
 8008602:	0049      	lsls	r1, r1, #1
 8008604:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008608:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800860c:	912b      	str	r1, [sp, #172]	; 0xac
 800860e:	932a      	str	r3, [sp, #168]	; 0xa8
 8008610:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008614:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8008618:	18c0      	adds	r0, r0, r3
 800861a:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800861e:	4161      	adcs	r1, r4
 8008620:	eb10 000a 	adds.w	r0, r0, sl
 8008624:	eb41 010b 	adc.w	r1, r1, fp
 8008628:	404b      	eors	r3, r1
 800862a:	18f6      	adds	r6, r6, r3
 800862c:	ea82 0200 	eor.w	r2, r2, r0
 8008630:	4157      	adcs	r7, r2
 8008632:	ea8a 0406 	eor.w	r4, sl, r6
 8008636:	ea8b 0507 	eor.w	r5, fp, r7
 800863a:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800863e:	4691      	mov	r9, r2
 8008640:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008644:	0e2d      	lsrs	r5, r5, #24
 8008646:	4698      	mov	r8, r3
 8008648:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 800864c:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8008650:	1824      	adds	r4, r4, r0
 8008652:	414d      	adcs	r5, r1
 8008654:	18a4      	adds	r4, r4, r2
 8008656:	415d      	adcs	r5, r3
 8008658:	ea84 0008 	eor.w	r0, r4, r8
 800865c:	ea85 0109 	eor.w	r1, r5, r9
 8008660:	4689      	mov	r9, r1
 8008662:	0c01      	lsrs	r1, r0, #16
 8008664:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008668:	9126      	str	r1, [sp, #152]	; 0x98
 800866a:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800866e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008672:	9127      	str	r1, [sp, #156]	; 0x9c
 8008674:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8008678:	1980      	adds	r0, r0, r6
 800867a:	4179      	adcs	r1, r7
 800867c:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8008680:	4050      	eors	r0, r2
 8008682:	4059      	eors	r1, r3
 8008684:	460b      	mov	r3, r1
 8008686:	0042      	lsls	r2, r0, #1
 8008688:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 800868c:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008690:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8008694:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8008698:	18a4      	adds	r4, r4, r2
 800869a:	415d      	adcs	r5, r3
 800869c:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 80086a0:	1912      	adds	r2, r2, r4
 80086a2:	416b      	adcs	r3, r5
 80086a4:	4614      	mov	r4, r2
 80086a6:	461d      	mov	r5, r3
 80086a8:	0049      	lsls	r1, r1, #1
 80086aa:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 80086ae:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 80086b2:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 80086b6:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 80086ba:	406b      	eors	r3, r5
 80086bc:	18c0      	adds	r0, r0, r3
 80086be:	ea82 0204 	eor.w	r2, r2, r4
 80086c2:	4151      	adcs	r1, r2
 80086c4:	4046      	eors	r6, r0
 80086c6:	404f      	eors	r7, r1
 80086c8:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 80086cc:	4691      	mov	r9, r2
 80086ce:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 80086d2:	0e3f      	lsrs	r7, r7, #24
 80086d4:	4698      	mov	r8, r3
 80086d6:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 80086da:	e9dd 671c 	ldrd	r6, r7, [sp, #112]	; 0x70
 80086de:	1936      	adds	r6, r6, r4
 80086e0:	416f      	adcs	r7, r5
 80086e2:	18b6      	adds	r6, r6, r2
 80086e4:	415f      	adcs	r7, r3
 80086e6:	ea86 0408 	eor.w	r4, r6, r8
 80086ea:	ea87 0509 	eor.w	r5, r7, r9
 80086ee:	46a0      	mov	r8, r4
 80086f0:	0c24      	lsrs	r4, r4, #16
 80086f2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80086f6:	9422      	str	r4, [sp, #136]	; 0x88
 80086f8:	0c2c      	lsrs	r4, r5, #16
 80086fa:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80086fe:	9423      	str	r4, [sp, #140]	; 0x8c
 8008700:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8008704:	1824      	adds	r4, r4, r0
 8008706:	414d      	adcs	r5, r1
 8008708:	4620      	mov	r0, r4
 800870a:	4629      	mov	r1, r5
 800870c:	4050      	eors	r0, r2
 800870e:	4059      	eors	r1, r3
 8008710:	0042      	lsls	r2, r0, #1
 8008712:	460b      	mov	r3, r1
 8008714:	0049      	lsls	r1, r1, #1
 8008716:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800871a:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800871e:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8008722:	9125      	str	r1, [sp, #148]	; 0x94
 8008724:	9324      	str	r3, [sp, #144]	; 0x90
 8008726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800872a:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 800872e:	18c0      	adds	r0, r0, r3
 8008730:	4161      	adcs	r1, r4
 8008732:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8008736:	181b      	adds	r3, r3, r0
 8008738:	4618      	mov	r0, r3
 800873a:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800873e:	414c      	adcs	r4, r1
 8008740:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8008744:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8008748:	4063      	eors	r3, r4
 800874a:	4621      	mov	r1, r4
 800874c:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 8008750:	18f6      	adds	r6, r6, r3
 8008752:	ea82 0200 	eor.w	r2, r2, r0
 8008756:	4157      	adcs	r7, r2
 8008758:	4074      	eors	r4, r6
 800875a:	407d      	eors	r5, r7
 800875c:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008760:	4691      	mov	r9, r2
 8008762:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008766:	0e2d      	lsrs	r5, r5, #24
 8008768:	4698      	mov	r8, r3
 800876a:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 800876e:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8008772:	1824      	adds	r4, r4, r0
 8008774:	414d      	adcs	r5, r1
 8008776:	18a4      	adds	r4, r4, r2
 8008778:	415d      	adcs	r5, r3
 800877a:	ea84 0008 	eor.w	r0, r4, r8
 800877e:	ea85 0109 	eor.w	r1, r5, r9
 8008782:	4689      	mov	r9, r1
 8008784:	0c01      	lsrs	r1, r0, #16
 8008786:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800878a:	9120      	str	r1, [sp, #128]	; 0x80
 800878c:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008790:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008794:	9121      	str	r1, [sp, #132]	; 0x84
 8008796:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800879a:	1980      	adds	r0, r0, r6
 800879c:	4179      	adcs	r1, r7
 800879e:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 80087a2:	4050      	eors	r0, r2
 80087a4:	4059      	eors	r1, r3
 80087a6:	460b      	mov	r3, r1
 80087a8:	0042      	lsls	r2, r0, #1
 80087aa:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 80087ae:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 80087b2:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 80087b6:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 80087ba:	18a4      	adds	r4, r4, r2
 80087bc:	415d      	adcs	r5, r3
 80087be:	0049      	lsls	r1, r1, #1
 80087c0:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80087c4:	19a4      	adds	r4, r4, r6
 80087c6:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 80087ca:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 80087ce:	417d      	adcs	r5, r7
 80087d0:	406b      	eors	r3, r5
 80087d2:	18c0      	adds	r0, r0, r3
 80087d4:	ea82 0204 	eor.w	r2, r2, r4
 80087d8:	4151      	adcs	r1, r2
 80087da:	4046      	eors	r6, r0
 80087dc:	404f      	eors	r7, r1
 80087de:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 80087e2:	4691      	mov	r9, r2
 80087e4:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 80087e8:	0e3f      	lsrs	r7, r7, #24
 80087ea:	4698      	mov	r8, r3
 80087ec:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 80087f0:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80087f4:	1936      	adds	r6, r6, r4
 80087f6:	416f      	adcs	r7, r5
 80087f8:	18b6      	adds	r6, r6, r2
 80087fa:	415f      	adcs	r7, r3
 80087fc:	ea86 0408 	eor.w	r4, r6, r8
 8008800:	ea87 0509 	eor.w	r5, r7, r9
 8008804:	46a0      	mov	r8, r4
 8008806:	0c24      	lsrs	r4, r4, #16
 8008808:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800880c:	9426      	str	r4, [sp, #152]	; 0x98
 800880e:	0c2c      	lsrs	r4, r5, #16
 8008810:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8008814:	9427      	str	r4, [sp, #156]	; 0x9c
 8008816:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 800881a:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 800881e:	1824      	adds	r4, r4, r0
 8008820:	414d      	adcs	r5, r1
 8008822:	4620      	mov	r0, r4
 8008824:	4629      	mov	r1, r5
 8008826:	4050      	eors	r0, r2
 8008828:	4059      	eors	r1, r3
 800882a:	0042      	lsls	r2, r0, #1
 800882c:	460b      	mov	r3, r1
 800882e:	0049      	lsls	r1, r1, #1
 8008830:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008834:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008838:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 800883c:	912d      	str	r1, [sp, #180]	; 0xb4
 800883e:	932c      	str	r3, [sp, #176]	; 0xb0
 8008840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008844:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8008848:	18c0      	adds	r0, r0, r3
 800884a:	4161      	adcs	r1, r4
 800884c:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8008850:	181b      	adds	r3, r3, r0
 8008852:	4618      	mov	r0, r3
 8008854:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8008858:	414c      	adcs	r4, r1
 800885a:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 800885e:	4063      	eors	r3, r4
 8008860:	4621      	mov	r1, r4
 8008862:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8008866:	18f6      	adds	r6, r6, r3
 8008868:	ea82 0200 	eor.w	r2, r2, r0
 800886c:	4157      	adcs	r7, r2
 800886e:	4074      	eors	r4, r6
 8008870:	407d      	eors	r5, r7
 8008872:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008876:	4691      	mov	r9, r2
 8008878:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800887c:	0e2d      	lsrs	r5, r5, #24
 800887e:	4698      	mov	r8, r3
 8008880:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008884:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8008888:	1824      	adds	r4, r4, r0
 800888a:	414d      	adcs	r5, r1
 800888c:	18a4      	adds	r4, r4, r2
 800888e:	415d      	adcs	r5, r3
 8008890:	ea84 0008 	eor.w	r0, r4, r8
 8008894:	ea85 0109 	eor.w	r1, r5, r9
 8008898:	4689      	mov	r9, r1
 800889a:	0c01      	lsrs	r1, r0, #16
 800889c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80088a0:	9122      	str	r1, [sp, #136]	; 0x88
 80088a2:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80088a6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80088aa:	9123      	str	r1, [sp, #140]	; 0x8c
 80088ac:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 80088b0:	1980      	adds	r0, r0, r6
 80088b2:	4179      	adcs	r1, r7
 80088b4:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 80088b8:	4050      	eors	r0, r2
 80088ba:	4059      	eors	r1, r3
 80088bc:	0042      	lsls	r2, r0, #1
 80088be:	460b      	mov	r3, r1
 80088c0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80088c4:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 80088c8:	932a      	str	r3, [sp, #168]	; 0xa8
 80088ca:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 80088ce:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 80088d2:	18a4      	adds	r4, r4, r2
 80088d4:	415d      	adcs	r5, r3
 80088d6:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80088da:	eb14 040a 	adds.w	r4, r4, sl
 80088de:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 80088e2:	eb45 050b 	adc.w	r5, r5, fp
 80088e6:	406b      	eors	r3, r5
 80088e8:	18f6      	adds	r6, r6, r3
 80088ea:	ea82 0204 	eor.w	r2, r2, r4
 80088ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80088f2:	4157      	adcs	r7, r2
 80088f4:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80088f8:	ea8a 0006 	eor.w	r0, sl, r6
 80088fc:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8008900:	912b      	str	r1, [sp, #172]	; 0xac
 8008902:	ea8b 0107 	eor.w	r1, fp, r7
 8008906:	4691      	mov	r9, r2
 8008908:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 800890c:	0e09      	lsrs	r1, r1, #24
 800890e:	4698      	mov	r8, r3
 8008910:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8008914:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8008918:	1900      	adds	r0, r0, r4
 800891a:	4169      	adcs	r1, r5
 800891c:	1880      	adds	r0, r0, r2
 800891e:	4159      	adcs	r1, r3
 8008920:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 8008924:	ea80 0008 	eor.w	r0, r0, r8
 8008928:	ea81 0109 	eor.w	r1, r1, r9
 800892c:	4689      	mov	r9, r1
 800892e:	0c01      	lsrs	r1, r0, #16
 8008930:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008934:	9120      	str	r1, [sp, #128]	; 0x80
 8008936:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800893a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800893e:	9121      	str	r1, [sp, #132]	; 0x84
 8008940:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8008944:	1980      	adds	r0, r0, r6
 8008946:	4179      	adcs	r1, r7
 8008948:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 800894c:	4050      	eors	r0, r2
 800894e:	4059      	eors	r1, r3
 8008950:	460b      	mov	r3, r1
 8008952:	0042      	lsls	r2, r0, #1
 8008954:	0049      	lsls	r1, r1, #1
 8008956:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 800895a:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 800895e:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8008962:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008966:	18c0      	adds	r0, r0, r3
 8008968:	4161      	adcs	r1, r4
 800896a:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 800896e:	181b      	adds	r3, r3, r0
 8008970:	4618      	mov	r0, r3
 8008972:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8008976:	414c      	adcs	r4, r1
 8008978:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 800897c:	4063      	eors	r3, r4
 800897e:	4621      	mov	r1, r4
 8008980:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8008984:	18f6      	adds	r6, r6, r3
 8008986:	ea82 0200 	eor.w	r2, r2, r0
 800898a:	4157      	adcs	r7, r2
 800898c:	4074      	eors	r4, r6
 800898e:	407d      	eors	r5, r7
 8008990:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008994:	4691      	mov	r9, r2
 8008996:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800899a:	0e2d      	lsrs	r5, r5, #24
 800899c:	4698      	mov	r8, r3
 800899e:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80089a2:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 80089a6:	1824      	adds	r4, r4, r0
 80089a8:	414d      	adcs	r5, r1
 80089aa:	18a4      	adds	r4, r4, r2
 80089ac:	415d      	adcs	r5, r3
 80089ae:	ea84 0008 	eor.w	r0, r4, r8
 80089b2:	ea85 0109 	eor.w	r1, r5, r9
 80089b6:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 80089ba:	0c04      	lsrs	r4, r0, #16
 80089bc:	4680      	mov	r8, r0
 80089be:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 80089c2:	0c0c      	lsrs	r4, r1, #16
 80089c4:	1836      	adds	r6, r6, r0
 80089c6:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 80089ca:	414f      	adcs	r7, r1
 80089cc:	407b      	eors	r3, r7
 80089ce:	4072      	eors	r2, r6
 80089d0:	005c      	lsls	r4, r3, #1
 80089d2:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 80089d6:	0052      	lsls	r2, r2, #1
 80089d8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80089dc:	9425      	str	r4, [sp, #148]	; 0x94
 80089de:	9324      	str	r3, [sp, #144]	; 0x90
 80089e0:	e9dd 4500 	ldrd	r4, r5, [sp]
 80089e4:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 80089e8:	18a4      	adds	r4, r4, r2
 80089ea:	415d      	adcs	r5, r3
 80089ec:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80089f0:	1912      	adds	r2, r2, r4
 80089f2:	416b      	adcs	r3, r5
 80089f4:	4050      	eors	r0, r2
 80089f6:	4059      	eors	r1, r3
 80089f8:	4614      	mov	r4, r2
 80089fa:	461d      	mov	r5, r3
 80089fc:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8008a00:	1852      	adds	r2, r2, r1
 8008a02:	4143      	adcs	r3, r0
 8008a04:	4688      	mov	r8, r1
 8008a06:	4681      	mov	r9, r0
 8008a08:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8008a0c:	4050      	eors	r0, r2
 8008a0e:	4059      	eors	r1, r3
 8008a10:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8008a14:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8008a18:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8008a1c:	0e09      	lsrs	r1, r1, #24
 8008a1e:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8008a22:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008a26:	1900      	adds	r0, r0, r4
 8008a28:	4169      	adcs	r1, r5
 8008a2a:	1880      	adds	r0, r0, r2
 8008a2c:	4159      	adcs	r1, r3
 8008a2e:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8008a32:	ea80 0008 	eor.w	r0, r0, r8
 8008a36:	ea81 0109 	eor.w	r1, r1, r9
 8008a3a:	4689      	mov	r9, r1
 8008a3c:	0c01      	lsrs	r1, r0, #16
 8008a3e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008a42:	9128      	str	r1, [sp, #160]	; 0xa0
 8008a44:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008a48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a4c:	9129      	str	r1, [sp, #164]	; 0xa4
 8008a4e:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8008a52:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8008a56:	1900      	adds	r0, r0, r4
 8008a58:	4169      	adcs	r1, r5
 8008a5a:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8008a5e:	4050      	eors	r0, r2
 8008a60:	4059      	eors	r1, r3
 8008a62:	0042      	lsls	r2, r0, #1
 8008a64:	460b      	mov	r3, r1
 8008a66:	0049      	lsls	r1, r1, #1
 8008a68:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008a6c:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008a70:	912b      	str	r1, [sp, #172]	; 0xac
 8008a72:	932a      	str	r3, [sp, #168]	; 0xa8
 8008a74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a78:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8008a7c:	18c0      	adds	r0, r0, r3
 8008a7e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8008a82:	4161      	adcs	r1, r4
 8008a84:	eb10 000a 	adds.w	r0, r0, sl
 8008a88:	eb41 010b 	adc.w	r1, r1, fp
 8008a8c:	404b      	eors	r3, r1
 8008a8e:	18f6      	adds	r6, r6, r3
 8008a90:	ea82 0200 	eor.w	r2, r2, r0
 8008a94:	4157      	adcs	r7, r2
 8008a96:	ea8a 0406 	eor.w	r4, sl, r6
 8008a9a:	ea8b 0507 	eor.w	r5, fp, r7
 8008a9e:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008aa2:	4691      	mov	r9, r2
 8008aa4:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008aa8:	0e2d      	lsrs	r5, r5, #24
 8008aaa:	4698      	mov	r8, r3
 8008aac:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008ab0:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008ab4:	1824      	adds	r4, r4, r0
 8008ab6:	414d      	adcs	r5, r1
 8008ab8:	18a4      	adds	r4, r4, r2
 8008aba:	415d      	adcs	r5, r3
 8008abc:	ea84 0008 	eor.w	r0, r4, r8
 8008ac0:	ea85 0109 	eor.w	r1, r5, r9
 8008ac4:	4689      	mov	r9, r1
 8008ac6:	0c01      	lsrs	r1, r0, #16
 8008ac8:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008acc:	9126      	str	r1, [sp, #152]	; 0x98
 8008ace:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008ad2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ad6:	9127      	str	r1, [sp, #156]	; 0x9c
 8008ad8:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8008adc:	1980      	adds	r0, r0, r6
 8008ade:	4179      	adcs	r1, r7
 8008ae0:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8008ae4:	4050      	eors	r0, r2
 8008ae6:	4059      	eors	r1, r3
 8008ae8:	460b      	mov	r3, r1
 8008aea:	0042      	lsls	r2, r0, #1
 8008aec:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8008af0:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008af4:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8008af8:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8008afc:	18a4      	adds	r4, r4, r2
 8008afe:	415d      	adcs	r5, r3
 8008b00:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8008b04:	1912      	adds	r2, r2, r4
 8008b06:	416b      	adcs	r3, r5
 8008b08:	4614      	mov	r4, r2
 8008b0a:	461d      	mov	r5, r3
 8008b0c:	0049      	lsls	r1, r1, #1
 8008b0e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8008b12:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8008b16:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8008b1a:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8008b1e:	406b      	eors	r3, r5
 8008b20:	18c0      	adds	r0, r0, r3
 8008b22:	ea82 0204 	eor.w	r2, r2, r4
 8008b26:	4151      	adcs	r1, r2
 8008b28:	4046      	eors	r6, r0
 8008b2a:	404f      	eors	r7, r1
 8008b2c:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8008b30:	4691      	mov	r9, r2
 8008b32:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8008b36:	0e3f      	lsrs	r7, r7, #24
 8008b38:	4698      	mov	r8, r3
 8008b3a:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8008b3e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8008b42:	1936      	adds	r6, r6, r4
 8008b44:	416f      	adcs	r7, r5
 8008b46:	18b6      	adds	r6, r6, r2
 8008b48:	415f      	adcs	r7, r3
 8008b4a:	ea86 0408 	eor.w	r4, r6, r8
 8008b4e:	ea87 0509 	eor.w	r5, r7, r9
 8008b52:	46a0      	mov	r8, r4
 8008b54:	0c24      	lsrs	r4, r4, #16
 8008b56:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008b5a:	9422      	str	r4, [sp, #136]	; 0x88
 8008b5c:	0c2c      	lsrs	r4, r5, #16
 8008b5e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8008b62:	9423      	str	r4, [sp, #140]	; 0x8c
 8008b64:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8008b68:	1824      	adds	r4, r4, r0
 8008b6a:	414d      	adcs	r5, r1
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	4629      	mov	r1, r5
 8008b70:	4050      	eors	r0, r2
 8008b72:	4059      	eors	r1, r3
 8008b74:	0042      	lsls	r2, r0, #1
 8008b76:	460b      	mov	r3, r1
 8008b78:	0049      	lsls	r1, r1, #1
 8008b7a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008b7e:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008b82:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8008b86:	9125      	str	r1, [sp, #148]	; 0x94
 8008b88:	9324      	str	r3, [sp, #144]	; 0x90
 8008b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b8e:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8008b92:	18c0      	adds	r0, r0, r3
 8008b94:	4161      	adcs	r1, r4
 8008b96:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8008b9a:	181b      	adds	r3, r3, r0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8008ba2:	414c      	adcs	r4, r1
 8008ba4:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8008ba8:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8008bac:	4063      	eors	r3, r4
 8008bae:	4621      	mov	r1, r4
 8008bb0:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 8008bb4:	18f6      	adds	r6, r6, r3
 8008bb6:	ea82 0200 	eor.w	r2, r2, r0
 8008bba:	4157      	adcs	r7, r2
 8008bbc:	4074      	eors	r4, r6
 8008bbe:	407d      	eors	r5, r7
 8008bc0:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008bc4:	4691      	mov	r9, r2
 8008bc6:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008bca:	0e2d      	lsrs	r5, r5, #24
 8008bcc:	4698      	mov	r8, r3
 8008bce:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008bd2:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8008bd6:	1824      	adds	r4, r4, r0
 8008bd8:	414d      	adcs	r5, r1
 8008bda:	18a4      	adds	r4, r4, r2
 8008bdc:	415d      	adcs	r5, r3
 8008bde:	ea84 0008 	eor.w	r0, r4, r8
 8008be2:	ea85 0109 	eor.w	r1, r5, r9
 8008be6:	4689      	mov	r9, r1
 8008be8:	0c01      	lsrs	r1, r0, #16
 8008bea:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008bee:	9120      	str	r1, [sp, #128]	; 0x80
 8008bf0:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008bf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008bf8:	9121      	str	r1, [sp, #132]	; 0x84
 8008bfa:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8008bfe:	1980      	adds	r0, r0, r6
 8008c00:	4179      	adcs	r1, r7
 8008c02:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8008c06:	4050      	eors	r0, r2
 8008c08:	4059      	eors	r1, r3
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	0042      	lsls	r2, r0, #1
 8008c0e:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8008c12:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8008c16:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8008c1a:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8008c1e:	18a4      	adds	r4, r4, r2
 8008c20:	415d      	adcs	r5, r3
 8008c22:	0049      	lsls	r1, r1, #1
 8008c24:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8008c28:	19a4      	adds	r4, r4, r6
 8008c2a:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8008c2e:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8008c32:	417d      	adcs	r5, r7
 8008c34:	406b      	eors	r3, r5
 8008c36:	18c0      	adds	r0, r0, r3
 8008c38:	ea82 0204 	eor.w	r2, r2, r4
 8008c3c:	4151      	adcs	r1, r2
 8008c3e:	4046      	eors	r6, r0
 8008c40:	404f      	eors	r7, r1
 8008c42:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8008c46:	4691      	mov	r9, r2
 8008c48:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8008c4c:	0e3f      	lsrs	r7, r7, #24
 8008c4e:	4698      	mov	r8, r3
 8008c50:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8008c54:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008c58:	1936      	adds	r6, r6, r4
 8008c5a:	416f      	adcs	r7, r5
 8008c5c:	18b6      	adds	r6, r6, r2
 8008c5e:	415f      	adcs	r7, r3
 8008c60:	ea86 0408 	eor.w	r4, r6, r8
 8008c64:	ea87 0509 	eor.w	r5, r7, r9
 8008c68:	46a0      	mov	r8, r4
 8008c6a:	0c24      	lsrs	r4, r4, #16
 8008c6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008c70:	9426      	str	r4, [sp, #152]	; 0x98
 8008c72:	0c2c      	lsrs	r4, r5, #16
 8008c74:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8008c78:	9427      	str	r4, [sp, #156]	; 0x9c
 8008c7a:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 8008c7e:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 8008c82:	1824      	adds	r4, r4, r0
 8008c84:	414d      	adcs	r5, r1
 8008c86:	4620      	mov	r0, r4
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4050      	eors	r0, r2
 8008c8c:	4059      	eors	r1, r3
 8008c8e:	0042      	lsls	r2, r0, #1
 8008c90:	460b      	mov	r3, r1
 8008c92:	0049      	lsls	r1, r1, #1
 8008c94:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008c98:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008c9c:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8008ca0:	912d      	str	r1, [sp, #180]	; 0xb4
 8008ca2:	932c      	str	r3, [sp, #176]	; 0xb0
 8008ca4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ca8:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8008cac:	18c0      	adds	r0, r0, r3
 8008cae:	4161      	adcs	r1, r4
 8008cb0:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8008cb4:	181b      	adds	r3, r3, r0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8008cbc:	414c      	adcs	r4, r1
 8008cbe:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8008cc2:	4063      	eors	r3, r4
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8008cca:	18f6      	adds	r6, r6, r3
 8008ccc:	ea82 0200 	eor.w	r2, r2, r0
 8008cd0:	4157      	adcs	r7, r2
 8008cd2:	4074      	eors	r4, r6
 8008cd4:	407d      	eors	r5, r7
 8008cd6:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008cda:	4691      	mov	r9, r2
 8008cdc:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008ce0:	0e2d      	lsrs	r5, r5, #24
 8008ce2:	4698      	mov	r8, r3
 8008ce4:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008ce8:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8008cec:	1824      	adds	r4, r4, r0
 8008cee:	414d      	adcs	r5, r1
 8008cf0:	18a4      	adds	r4, r4, r2
 8008cf2:	415d      	adcs	r5, r3
 8008cf4:	ea84 0008 	eor.w	r0, r4, r8
 8008cf8:	ea85 0109 	eor.w	r1, r5, r9
 8008cfc:	4689      	mov	r9, r1
 8008cfe:	0c01      	lsrs	r1, r0, #16
 8008d00:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008d04:	9122      	str	r1, [sp, #136]	; 0x88
 8008d06:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008d0a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d0e:	9123      	str	r1, [sp, #140]	; 0x8c
 8008d10:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8008d14:	1980      	adds	r0, r0, r6
 8008d16:	4179      	adcs	r1, r7
 8008d18:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8008d1c:	4050      	eors	r0, r2
 8008d1e:	4059      	eors	r1, r3
 8008d20:	0042      	lsls	r2, r0, #1
 8008d22:	460b      	mov	r3, r1
 8008d24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008d28:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008d2c:	932a      	str	r3, [sp, #168]	; 0xa8
 8008d2e:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 8008d32:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8008d36:	18a4      	adds	r4, r4, r2
 8008d38:	415d      	adcs	r5, r3
 8008d3a:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8008d3e:	eb14 040a 	adds.w	r4, r4, sl
 8008d42:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 8008d46:	eb45 050b 	adc.w	r5, r5, fp
 8008d4a:	406b      	eors	r3, r5
 8008d4c:	18f6      	adds	r6, r6, r3
 8008d4e:	ea82 0204 	eor.w	r2, r2, r4
 8008d52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d56:	4157      	adcs	r7, r2
 8008d58:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008d5c:	ea8a 0006 	eor.w	r0, sl, r6
 8008d60:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8008d64:	912b      	str	r1, [sp, #172]	; 0xac
 8008d66:	ea8b 0107 	eor.w	r1, fp, r7
 8008d6a:	4691      	mov	r9, r2
 8008d6c:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8008d70:	0e09      	lsrs	r1, r1, #24
 8008d72:	4698      	mov	r8, r3
 8008d74:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8008d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d7c:	1900      	adds	r0, r0, r4
 8008d7e:	4169      	adcs	r1, r5
 8008d80:	1880      	adds	r0, r0, r2
 8008d82:	4159      	adcs	r1, r3
 8008d84:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 8008d88:	ea80 0008 	eor.w	r0, r0, r8
 8008d8c:	ea81 0109 	eor.w	r1, r1, r9
 8008d90:	4689      	mov	r9, r1
 8008d92:	0c01      	lsrs	r1, r0, #16
 8008d94:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008d98:	9120      	str	r1, [sp, #128]	; 0x80
 8008d9a:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008d9e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008da2:	9121      	str	r1, [sp, #132]	; 0x84
 8008da4:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8008da8:	1980      	adds	r0, r0, r6
 8008daa:	4179      	adcs	r1, r7
 8008dac:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8008db0:	4050      	eors	r0, r2
 8008db2:	4059      	eors	r1, r3
 8008db4:	460b      	mov	r3, r1
 8008db6:	0042      	lsls	r2, r0, #1
 8008db8:	0049      	lsls	r1, r1, #1
 8008dba:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8008dbe:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8008dc2:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8008dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dca:	18c0      	adds	r0, r0, r3
 8008dcc:	4161      	adcs	r1, r4
 8008dce:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8008dd2:	181b      	adds	r3, r3, r0
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8008dda:	414c      	adcs	r4, r1
 8008ddc:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8008de0:	4063      	eors	r3, r4
 8008de2:	4621      	mov	r1, r4
 8008de4:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8008de8:	18f6      	adds	r6, r6, r3
 8008dea:	ea82 0200 	eor.w	r2, r2, r0
 8008dee:	4157      	adcs	r7, r2
 8008df0:	4074      	eors	r4, r6
 8008df2:	407d      	eors	r5, r7
 8008df4:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008df8:	4691      	mov	r9, r2
 8008dfa:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008dfe:	0e2d      	lsrs	r5, r5, #24
 8008e00:	4698      	mov	r8, r3
 8008e02:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008e06:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8008e0a:	1824      	adds	r4, r4, r0
 8008e0c:	414d      	adcs	r5, r1
 8008e0e:	18a4      	adds	r4, r4, r2
 8008e10:	415d      	adcs	r5, r3
 8008e12:	ea84 0008 	eor.w	r0, r4, r8
 8008e16:	ea85 0109 	eor.w	r1, r5, r9
 8008e1a:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8008e1e:	0c04      	lsrs	r4, r0, #16
 8008e20:	4680      	mov	r8, r0
 8008e22:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8008e26:	0c0c      	lsrs	r4, r1, #16
 8008e28:	1836      	adds	r6, r6, r0
 8008e2a:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8008e2e:	414f      	adcs	r7, r1
 8008e30:	407b      	eors	r3, r7
 8008e32:	4072      	eors	r2, r6
 8008e34:	005c      	lsls	r4, r3, #1
 8008e36:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8008e3a:	0052      	lsls	r2, r2, #1
 8008e3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008e40:	9425      	str	r4, [sp, #148]	; 0x94
 8008e42:	9324      	str	r3, [sp, #144]	; 0x90
 8008e44:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8008e48:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8008e4c:	18a4      	adds	r4, r4, r2
 8008e4e:	415d      	adcs	r5, r3
 8008e50:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8008e54:	1912      	adds	r2, r2, r4
 8008e56:	416b      	adcs	r3, r5
 8008e58:	4050      	eors	r0, r2
 8008e5a:	4059      	eors	r1, r3
 8008e5c:	4614      	mov	r4, r2
 8008e5e:	461d      	mov	r5, r3
 8008e60:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8008e64:	1852      	adds	r2, r2, r1
 8008e66:	4143      	adcs	r3, r0
 8008e68:	4688      	mov	r8, r1
 8008e6a:	4681      	mov	r9, r0
 8008e6c:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8008e70:	4050      	eors	r0, r2
 8008e72:	4059      	eors	r1, r3
 8008e74:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8008e78:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8008e7c:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8008e80:	0e09      	lsrs	r1, r1, #24
 8008e82:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8008e86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e8a:	1900      	adds	r0, r0, r4
 8008e8c:	4169      	adcs	r1, r5
 8008e8e:	1880      	adds	r0, r0, r2
 8008e90:	4159      	adcs	r1, r3
 8008e92:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8008e96:	ea80 0008 	eor.w	r0, r0, r8
 8008e9a:	ea81 0109 	eor.w	r1, r1, r9
 8008e9e:	4689      	mov	r9, r1
 8008ea0:	0c01      	lsrs	r1, r0, #16
 8008ea2:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008ea6:	9128      	str	r1, [sp, #160]	; 0xa0
 8008ea8:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008eac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008eb0:	9129      	str	r1, [sp, #164]	; 0xa4
 8008eb2:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8008eb6:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8008eba:	1900      	adds	r0, r0, r4
 8008ebc:	4169      	adcs	r1, r5
 8008ebe:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8008ec2:	4050      	eors	r0, r2
 8008ec4:	4059      	eors	r1, r3
 8008ec6:	0042      	lsls	r2, r0, #1
 8008ec8:	460b      	mov	r3, r1
 8008eca:	0049      	lsls	r1, r1, #1
 8008ecc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008ed0:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008ed4:	912b      	str	r1, [sp, #172]	; 0xac
 8008ed6:	932a      	str	r3, [sp, #168]	; 0xa8
 8008ed8:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8008edc:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8008ee0:	18c0      	adds	r0, r0, r3
 8008ee2:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8008ee6:	4161      	adcs	r1, r4
 8008ee8:	eb10 000a 	adds.w	r0, r0, sl
 8008eec:	eb41 010b 	adc.w	r1, r1, fp
 8008ef0:	404b      	eors	r3, r1
 8008ef2:	18f6      	adds	r6, r6, r3
 8008ef4:	ea82 0200 	eor.w	r2, r2, r0
 8008ef8:	4157      	adcs	r7, r2
 8008efa:	ea8a 0406 	eor.w	r4, sl, r6
 8008efe:	ea8b 0507 	eor.w	r5, fp, r7
 8008f02:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008f06:	4691      	mov	r9, r2
 8008f08:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008f0c:	0e2d      	lsrs	r5, r5, #24
 8008f0e:	4698      	mov	r8, r3
 8008f10:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008f14:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8008f18:	1824      	adds	r4, r4, r0
 8008f1a:	414d      	adcs	r5, r1
 8008f1c:	18a4      	adds	r4, r4, r2
 8008f1e:	415d      	adcs	r5, r3
 8008f20:	ea84 0008 	eor.w	r0, r4, r8
 8008f24:	ea85 0109 	eor.w	r1, r5, r9
 8008f28:	4689      	mov	r9, r1
 8008f2a:	0c01      	lsrs	r1, r0, #16
 8008f2c:	ea41 4a09 	orr.w	sl, r1, r9, lsl #16
 8008f30:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008f34:	ea41 4b00 	orr.w	fp, r1, r0, lsl #16
 8008f38:	eb16 000a 	adds.w	r0, r6, sl
 8008f3c:	eb47 010b 	adc.w	r1, r7, fp
 8008f40:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8008f44:	4050      	eors	r0, r2
 8008f46:	4059      	eors	r1, r3
 8008f48:	0042      	lsls	r2, r0, #1
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008f50:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008f54:	9326      	str	r3, [sp, #152]	; 0x98
 8008f56:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8008f5a:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8008f5e:	18a4      	adds	r4, r4, r2
 8008f60:	415d      	adcs	r5, r3
 8008f62:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8008f66:	0049      	lsls	r1, r1, #1
 8008f68:	1912      	adds	r2, r2, r4
 8008f6a:	416b      	adcs	r3, r5
 8008f6c:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008f70:	4614      	mov	r4, r2
 8008f72:	461d      	mov	r5, r3
 8008f74:	9127      	str	r1, [sp, #156]	; 0x9c
 8008f76:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8008f7a:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8008f7e:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8008f82:	406b      	eors	r3, r5
 8008f84:	18c0      	adds	r0, r0, r3
 8008f86:	ea82 0204 	eor.w	r2, r2, r4
 8008f8a:	4151      	adcs	r1, r2
 8008f8c:	4046      	eors	r6, r0
 8008f8e:	404f      	eors	r7, r1
 8008f90:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8008f94:	4691      	mov	r9, r2
 8008f96:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8008f9a:	0e3f      	lsrs	r7, r7, #24
 8008f9c:	4698      	mov	r8, r3
 8008f9e:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8008fa2:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8008fa6:	1936      	adds	r6, r6, r4
 8008fa8:	416f      	adcs	r7, r5
 8008faa:	18b6      	adds	r6, r6, r2
 8008fac:	415f      	adcs	r7, r3
 8008fae:	ea86 0408 	eor.w	r4, r6, r8
 8008fb2:	ea87 0509 	eor.w	r5, r7, r9
 8008fb6:	46a0      	mov	r8, r4
 8008fb8:	0c24      	lsrs	r4, r4, #16
 8008fba:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008fbe:	9422      	str	r4, [sp, #136]	; 0x88
 8008fc0:	0c2c      	lsrs	r4, r5, #16
 8008fc2:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8008fc6:	9423      	str	r4, [sp, #140]	; 0x8c
 8008fc8:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8008fcc:	1824      	adds	r4, r4, r0
 8008fce:	414d      	adcs	r5, r1
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	4050      	eors	r0, r2
 8008fd6:	4059      	eors	r1, r3
 8008fd8:	0042      	lsls	r2, r0, #1
 8008fda:	460b      	mov	r3, r1
 8008fdc:	0049      	lsls	r1, r1, #1
 8008fde:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008fe2:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008fe6:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8008fea:	9125      	str	r1, [sp, #148]	; 0x94
 8008fec:	9324      	str	r3, [sp, #144]	; 0x90
 8008fee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ff2:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8008ff6:	18c0      	adds	r0, r0, r3
 8008ff8:	4161      	adcs	r1, r4
 8008ffa:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8008ffe:	181b      	adds	r3, r3, r0
 8009000:	4618      	mov	r0, r3
 8009002:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8009006:	414c      	adcs	r4, r1
 8009008:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 800900c:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8009010:	4063      	eors	r3, r4
 8009012:	4621      	mov	r1, r4
 8009014:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 8009018:	18f6      	adds	r6, r6, r3
 800901a:	ea82 0200 	eor.w	r2, r2, r0
 800901e:	4157      	adcs	r7, r2
 8009020:	4074      	eors	r4, r6
 8009022:	407d      	eors	r5, r7
 8009024:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009028:	4691      	mov	r9, r2
 800902a:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800902e:	0e2d      	lsrs	r5, r5, #24
 8009030:	4698      	mov	r8, r3
 8009032:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009036:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 800903a:	1824      	adds	r4, r4, r0
 800903c:	414d      	adcs	r5, r1
 800903e:	18a4      	adds	r4, r4, r2
 8009040:	415d      	adcs	r5, r3
 8009042:	ea84 0008 	eor.w	r0, r4, r8
 8009046:	ea85 0109 	eor.w	r1, r5, r9
 800904a:	4689      	mov	r9, r1
 800904c:	0c01      	lsrs	r1, r0, #16
 800904e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009052:	9120      	str	r1, [sp, #128]	; 0x80
 8009054:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009058:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800905c:	9121      	str	r1, [sp, #132]	; 0x84
 800905e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8009062:	1980      	adds	r0, r0, r6
 8009064:	4179      	adcs	r1, r7
 8009066:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 800906a:	4050      	eors	r0, r2
 800906c:	4059      	eors	r1, r3
 800906e:	460b      	mov	r3, r1
 8009070:	0042      	lsls	r2, r0, #1
 8009072:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8009076:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 800907a:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 800907e:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8009082:	0049      	lsls	r1, r1, #1
 8009084:	18a4      	adds	r4, r4, r2
 8009086:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 800908a:	415d      	adcs	r5, r3
 800908c:	19a4      	adds	r4, r4, r6
 800908e:	417d      	adcs	r5, r7
 8009090:	ea8a 0204 	eor.w	r2, sl, r4
 8009094:	ea8b 0305 	eor.w	r3, fp, r5
 8009098:	e9dd ab3c 	ldrd	sl, fp, [sp, #240]	; 0xf0
 800909c:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 80090a0:	eb1a 0a03 	adds.w	sl, sl, r3
 80090a4:	eb4b 0b02 	adc.w	fp, fp, r2
 80090a8:	ea86 060a 	eor.w	r6, r6, sl
 80090ac:	ea87 070b 	eor.w	r7, r7, fp
 80090b0:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 80090b4:	4691      	mov	r9, r2
 80090b6:	1900      	adds	r0, r0, r4
 80090b8:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 80090bc:	ea4f 6717 	mov.w	r7, r7, lsr #24
 80090c0:	4698      	mov	r8, r3
 80090c2:	4169      	adcs	r1, r5
 80090c4:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 80090c8:	1880      	adds	r0, r0, r2
 80090ca:	4159      	adcs	r1, r3
 80090cc:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 80090d0:	ea80 0008 	eor.w	r0, r0, r8
 80090d4:	ea81 0109 	eor.w	r1, r1, r9
 80090d8:	4689      	mov	r9, r1
 80090da:	0c04      	lsrs	r4, r0, #16
 80090dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80090e0:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80090e4:	912c      	str	r1, [sp, #176]	; 0xb0
 80090e6:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80090ea:	912d      	str	r1, [sp, #180]	; 0xb4
 80090ec:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 80090f0:	eb10 000a 	adds.w	r0, r0, sl
 80090f4:	eb41 010b 	adc.w	r1, r1, fp
 80090f8:	e9cd 013c 	strd	r0, r1, [sp, #240]	; 0xf0
 80090fc:	4050      	eors	r0, r2
 80090fe:	4059      	eors	r1, r3
 8009100:	460b      	mov	r3, r1
 8009102:	0042      	lsls	r2, r0, #1
 8009104:	0049      	lsls	r1, r1, #1
 8009106:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 800910a:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 800910e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8009112:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8009116:	18c0      	adds	r0, r0, r3
 8009118:	4161      	adcs	r1, r4
 800911a:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 800911e:	181b      	adds	r3, r3, r0
 8009120:	4618      	mov	r0, r3
 8009122:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009126:	414c      	adcs	r4, r1
 8009128:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 800912c:	4063      	eors	r3, r4
 800912e:	4621      	mov	r1, r4
 8009130:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8009134:	18f6      	adds	r6, r6, r3
 8009136:	ea82 0200 	eor.w	r2, r2, r0
 800913a:	4157      	adcs	r7, r2
 800913c:	4074      	eors	r4, r6
 800913e:	407d      	eors	r5, r7
 8009140:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009144:	4691      	mov	r9, r2
 8009146:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800914a:	0e2d      	lsrs	r5, r5, #24
 800914c:	4698      	mov	r8, r3
 800914e:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009152:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8009156:	1824      	adds	r4, r4, r0
 8009158:	414d      	adcs	r5, r1
 800915a:	18a4      	adds	r4, r4, r2
 800915c:	415d      	adcs	r5, r3
 800915e:	ea84 0008 	eor.w	r0, r4, r8
 8009162:	ea85 0109 	eor.w	r1, r5, r9
 8009166:	4689      	mov	r9, r1
 8009168:	0c01      	lsrs	r1, r0, #16
 800916a:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800916e:	9122      	str	r1, [sp, #136]	; 0x88
 8009170:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009174:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009178:	9123      	str	r1, [sp, #140]	; 0x8c
 800917a:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800917e:	1980      	adds	r0, r0, r6
 8009180:	4179      	adcs	r1, r7
 8009182:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8009186:	4050      	eors	r0, r2
 8009188:	4059      	eors	r1, r3
 800918a:	0042      	lsls	r2, r0, #1
 800918c:	460b      	mov	r3, r1
 800918e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009192:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8009196:	932a      	str	r3, [sp, #168]	; 0xa8
 8009198:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 800919c:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 80091a0:	18a4      	adds	r4, r4, r2
 80091a2:	415d      	adcs	r5, r3
 80091a4:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80091a8:	1912      	adds	r2, r2, r4
 80091aa:	416b      	adcs	r3, r5
 80091ac:	4614      	mov	r4, r2
 80091ae:	461d      	mov	r5, r3
 80091b0:	0049      	lsls	r1, r1, #1
 80091b2:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80091b6:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 80091ba:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80091be:	912b      	str	r1, [sp, #172]	; 0xac
 80091c0:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80091c4:	406b      	eors	r3, r5
 80091c6:	18f6      	adds	r6, r6, r3
 80091c8:	ea82 0204 	eor.w	r2, r2, r4
 80091cc:	4157      	adcs	r7, r2
 80091ce:	4070      	eors	r0, r6
 80091d0:	4079      	eors	r1, r7
 80091d2:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 80091d6:	4691      	mov	r9, r2
 80091d8:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 80091dc:	0e09      	lsrs	r1, r1, #24
 80091de:	4698      	mov	r8, r3
 80091e0:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 80091e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091e8:	1900      	adds	r0, r0, r4
 80091ea:	4169      	adcs	r1, r5
 80091ec:	1880      	adds	r0, r0, r2
 80091ee:	4159      	adcs	r1, r3
 80091f0:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 80091f4:	ea80 0008 	eor.w	r0, r0, r8
 80091f8:	ea81 0109 	eor.w	r1, r1, r9
 80091fc:	4689      	mov	r9, r1
 80091fe:	0c01      	lsrs	r1, r0, #16
 8009200:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009204:	9120      	str	r1, [sp, #128]	; 0x80
 8009206:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800920a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800920e:	9121      	str	r1, [sp, #132]	; 0x84
 8009210:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8009214:	1980      	adds	r0, r0, r6
 8009216:	4179      	adcs	r1, r7
 8009218:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 800921c:	4050      	eors	r0, r2
 800921e:	4059      	eors	r1, r3
 8009220:	0042      	lsls	r2, r0, #1
 8009222:	460b      	mov	r3, r1
 8009224:	0049      	lsls	r1, r1, #1
 8009226:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800922a:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800922e:	9127      	str	r1, [sp, #156]	; 0x9c
 8009230:	9326      	str	r3, [sp, #152]	; 0x98
 8009232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009236:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 800923a:	18c0      	adds	r0, r0, r3
 800923c:	4161      	adcs	r1, r4
 800923e:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8009242:	181b      	adds	r3, r3, r0
 8009244:	4618      	mov	r0, r3
 8009246:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 800924a:	414c      	adcs	r4, r1
 800924c:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8009250:	4063      	eors	r3, r4
 8009252:	4621      	mov	r1, r4
 8009254:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8009258:	18f6      	adds	r6, r6, r3
 800925a:	ea82 0200 	eor.w	r2, r2, r0
 800925e:	4157      	adcs	r7, r2
 8009260:	4074      	eors	r4, r6
 8009262:	407d      	eors	r5, r7
 8009264:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009268:	4691      	mov	r9, r2
 800926a:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800926e:	0e2d      	lsrs	r5, r5, #24
 8009270:	4698      	mov	r8, r3
 8009272:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009276:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 800927a:	1824      	adds	r4, r4, r0
 800927c:	414d      	adcs	r5, r1
 800927e:	18a4      	adds	r4, r4, r2
 8009280:	415d      	adcs	r5, r3
 8009282:	ea84 0008 	eor.w	r0, r4, r8
 8009286:	ea85 0109 	eor.w	r1, r5, r9
 800928a:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 800928e:	0c04      	lsrs	r4, r0, #16
 8009290:	4680      	mov	r8, r0
 8009292:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8009296:	0c0c      	lsrs	r4, r1, #16
 8009298:	1836      	adds	r6, r6, r0
 800929a:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 800929e:	414f      	adcs	r7, r1
 80092a0:	407b      	eors	r3, r7
 80092a2:	4072      	eors	r2, r6
 80092a4:	005c      	lsls	r4, r3, #1
 80092a6:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 80092aa:	0052      	lsls	r2, r2, #1
 80092ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80092b0:	9425      	str	r4, [sp, #148]	; 0x94
 80092b2:	9324      	str	r3, [sp, #144]	; 0x90
 80092b4:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 80092b8:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 80092bc:	18a4      	adds	r4, r4, r2
 80092be:	415d      	adcs	r5, r3
 80092c0:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80092c4:	1912      	adds	r2, r2, r4
 80092c6:	416b      	adcs	r3, r5
 80092c8:	4050      	eors	r0, r2
 80092ca:	4059      	eors	r1, r3
 80092cc:	4614      	mov	r4, r2
 80092ce:	461d      	mov	r5, r3
 80092d0:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80092d4:	1852      	adds	r2, r2, r1
 80092d6:	4143      	adcs	r3, r0
 80092d8:	4688      	mov	r8, r1
 80092da:	4681      	mov	r9, r0
 80092dc:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 80092e0:	4050      	eors	r0, r2
 80092e2:	4059      	eors	r1, r3
 80092e4:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 80092e8:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 80092ec:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 80092f0:	0e09      	lsrs	r1, r1, #24
 80092f2:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 80092f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092fa:	1900      	adds	r0, r0, r4
 80092fc:	4169      	adcs	r1, r5
 80092fe:	1880      	adds	r0, r0, r2
 8009300:	4159      	adcs	r1, r3
 8009302:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8009306:	ea80 0008 	eor.w	r0, r0, r8
 800930a:	ea81 0109 	eor.w	r1, r1, r9
 800930e:	4689      	mov	r9, r1
 8009310:	0c01      	lsrs	r1, r0, #16
 8009312:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009316:	9128      	str	r1, [sp, #160]	; 0xa0
 8009318:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800931c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009320:	9129      	str	r1, [sp, #164]	; 0xa4
 8009322:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8009326:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 800932a:	1900      	adds	r0, r0, r4
 800932c:	4169      	adcs	r1, r5
 800932e:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8009332:	4050      	eors	r0, r2
 8009334:	4059      	eors	r1, r3
 8009336:	0042      	lsls	r2, r0, #1
 8009338:	460b      	mov	r3, r1
 800933a:	0049      	lsls	r1, r1, #1
 800933c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009340:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009344:	912b      	str	r1, [sp, #172]	; 0xac
 8009346:	932a      	str	r3, [sp, #168]	; 0xa8
 8009348:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800934c:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8009350:	18c0      	adds	r0, r0, r3
 8009352:	4161      	adcs	r1, r4
 8009354:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
 8009358:	181b      	adds	r3, r3, r0
 800935a:	4618      	mov	r0, r3
 800935c:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 8009360:	414c      	adcs	r4, r1
 8009362:	4063      	eors	r3, r4
 8009364:	4621      	mov	r1, r4
 8009366:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 800936a:	18f6      	adds	r6, r6, r3
 800936c:	ea82 0200 	eor.w	r2, r2, r0
 8009370:	4157      	adcs	r7, r2
 8009372:	4074      	eors	r4, r6
 8009374:	407d      	eors	r5, r7
 8009376:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800937a:	4691      	mov	r9, r2
 800937c:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009380:	0e2d      	lsrs	r5, r5, #24
 8009382:	4698      	mov	r8, r3
 8009384:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009388:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 800938c:	1824      	adds	r4, r4, r0
 800938e:	414d      	adcs	r5, r1
 8009390:	18a4      	adds	r4, r4, r2
 8009392:	415d      	adcs	r5, r3
 8009394:	ea84 0008 	eor.w	r0, r4, r8
 8009398:	ea85 0109 	eor.w	r1, r5, r9
 800939c:	4689      	mov	r9, r1
 800939e:	0c01      	lsrs	r1, r0, #16
 80093a0:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80093a4:	9126      	str	r1, [sp, #152]	; 0x98
 80093a6:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80093aa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093ae:	9127      	str	r1, [sp, #156]	; 0x9c
 80093b0:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80093b4:	1980      	adds	r0, r0, r6
 80093b6:	4179      	adcs	r1, r7
 80093b8:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 80093bc:	4050      	eors	r0, r2
 80093be:	4059      	eors	r1, r3
 80093c0:	0042      	lsls	r2, r0, #1
 80093c2:	460b      	mov	r3, r1
 80093c4:	0049      	lsls	r1, r1, #1
 80093c6:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80093ca:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80093ce:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 80093d2:	912d      	str	r1, [sp, #180]	; 0xb4
 80093d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80093d8:	932c      	str	r3, [sp, #176]	; 0xb0
 80093da:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 80093de:	18a4      	adds	r4, r4, r2
 80093e0:	415d      	adcs	r5, r3
 80093e2:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 80093e6:	1912      	adds	r2, r2, r4
 80093e8:	416b      	adcs	r3, r5
 80093ea:	4614      	mov	r4, r2
 80093ec:	461d      	mov	r5, r3
 80093ee:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 80093f2:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 80093f6:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 80093fa:	406b      	eors	r3, r5
 80093fc:	18c0      	adds	r0, r0, r3
 80093fe:	ea82 0204 	eor.w	r2, r2, r4
 8009402:	4151      	adcs	r1, r2
 8009404:	4046      	eors	r6, r0
 8009406:	404f      	eors	r7, r1
 8009408:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 800940c:	4691      	mov	r9, r2
 800940e:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8009412:	0e3f      	lsrs	r7, r7, #24
 8009414:	4698      	mov	r8, r3
 8009416:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 800941a:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 800941e:	1936      	adds	r6, r6, r4
 8009420:	416f      	adcs	r7, r5
 8009422:	18b6      	adds	r6, r6, r2
 8009424:	415f      	adcs	r7, r3
 8009426:	ea86 0408 	eor.w	r4, r6, r8
 800942a:	ea87 0509 	eor.w	r5, r7, r9
 800942e:	46a0      	mov	r8, r4
 8009430:	0c24      	lsrs	r4, r4, #16
 8009432:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009436:	9422      	str	r4, [sp, #136]	; 0x88
 8009438:	0c2c      	lsrs	r4, r5, #16
 800943a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800943e:	9423      	str	r4, [sp, #140]	; 0x8c
 8009440:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8009444:	1824      	adds	r4, r4, r0
 8009446:	414d      	adcs	r5, r1
 8009448:	4620      	mov	r0, r4
 800944a:	4629      	mov	r1, r5
 800944c:	4050      	eors	r0, r2
 800944e:	4059      	eors	r1, r3
 8009450:	0042      	lsls	r2, r0, #1
 8009452:	460b      	mov	r3, r1
 8009454:	0049      	lsls	r1, r1, #1
 8009456:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800945a:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800945e:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8009462:	9125      	str	r1, [sp, #148]	; 0x94
 8009464:	9324      	str	r3, [sp, #144]	; 0x90
 8009466:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800946a:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 800946e:	18c0      	adds	r0, r0, r3
 8009470:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8009474:	4161      	adcs	r1, r4
 8009476:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 800947a:	eb10 000a 	adds.w	r0, r0, sl
 800947e:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8009482:	eb41 010b 	adc.w	r1, r1, fp
 8009486:	404b      	eors	r3, r1
 8009488:	18f6      	adds	r6, r6, r3
 800948a:	ea82 0200 	eor.w	r2, r2, r0
 800948e:	4157      	adcs	r7, r2
 8009490:	ea8a 0406 	eor.w	r4, sl, r6
 8009494:	ea8b 0507 	eor.w	r5, fp, r7
 8009498:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800949c:	4691      	mov	r9, r2
 800949e:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80094a2:	0e2d      	lsrs	r5, r5, #24
 80094a4:	4698      	mov	r8, r3
 80094a6:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80094aa:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80094ae:	1824      	adds	r4, r4, r0
 80094b0:	414d      	adcs	r5, r1
 80094b2:	18a4      	adds	r4, r4, r2
 80094b4:	415d      	adcs	r5, r3
 80094b6:	ea84 0008 	eor.w	r0, r4, r8
 80094ba:	ea85 0109 	eor.w	r1, r5, r9
 80094be:	4689      	mov	r9, r1
 80094c0:	0c01      	lsrs	r1, r0, #16
 80094c2:	ea41 4a09 	orr.w	sl, r1, r9, lsl #16
 80094c6:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80094ca:	ea41 4b00 	orr.w	fp, r1, r0, lsl #16
 80094ce:	eb16 000a 	adds.w	r0, r6, sl
 80094d2:	eb47 010b 	adc.w	r1, r7, fp
 80094d6:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
 80094da:	4050      	eors	r0, r2
 80094dc:	4059      	eors	r1, r3
 80094de:	460b      	mov	r3, r1
 80094e0:	0042      	lsls	r2, r0, #1
 80094e2:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 80094e6:	e9cd 453e 	strd	r4, r5, [sp, #248]	; 0xf8
 80094ea:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 80094ee:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 80094f2:	18a4      	adds	r4, r4, r2
 80094f4:	415d      	adcs	r5, r3
 80094f6:	0049      	lsls	r1, r1, #1
 80094f8:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80094fc:	19a4      	adds	r4, r4, r6
 80094fe:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8009502:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8009506:	417d      	adcs	r5, r7
 8009508:	406b      	eors	r3, r5
 800950a:	18c0      	adds	r0, r0, r3
 800950c:	ea82 0204 	eor.w	r2, r2, r4
 8009510:	4151      	adcs	r1, r2
 8009512:	4046      	eors	r6, r0
 8009514:	404f      	eors	r7, r1
 8009516:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 800951a:	4691      	mov	r9, r2
 800951c:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8009520:	0e3f      	lsrs	r7, r7, #24
 8009522:	4698      	mov	r8, r3
 8009524:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8009528:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800952c:	1936      	adds	r6, r6, r4
 800952e:	416f      	adcs	r7, r5
 8009530:	18b6      	adds	r6, r6, r2
 8009532:	415f      	adcs	r7, r3
 8009534:	ea86 0408 	eor.w	r4, r6, r8
 8009538:	ea87 0509 	eor.w	r5, r7, r9
 800953c:	46a0      	mov	r8, r4
 800953e:	0c24      	lsrs	r4, r4, #16
 8009540:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009544:	9420      	str	r4, [sp, #128]	; 0x80
 8009546:	0c2c      	lsrs	r4, r5, #16
 8009548:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800954c:	9421      	str	r4, [sp, #132]	; 0x84
 800954e:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 8009552:	1824      	adds	r4, r4, r0
 8009554:	414d      	adcs	r5, r1
 8009556:	4620      	mov	r0, r4
 8009558:	4629      	mov	r1, r5
 800955a:	4050      	eors	r0, r2
 800955c:	4059      	eors	r1, r3
 800955e:	0042      	lsls	r2, r0, #1
 8009560:	460b      	mov	r3, r1
 8009562:	0049      	lsls	r1, r1, #1
 8009564:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009568:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800956c:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8009570:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 8009574:	9127      	str	r1, [sp, #156]	; 0x9c
 8009576:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800957a:	9326      	str	r3, [sp, #152]	; 0x98
 800957c:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8009580:	18c0      	adds	r0, r0, r3
 8009582:	4161      	adcs	r1, r4
 8009584:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8009588:	181b      	adds	r3, r3, r0
 800958a:	4618      	mov	r0, r3
 800958c:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009590:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 8009594:	414c      	adcs	r4, r1
 8009596:	4063      	eors	r3, r4
 8009598:	4621      	mov	r1, r4
 800959a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 800959e:	18f6      	adds	r6, r6, r3
 80095a0:	ea82 0200 	eor.w	r2, r2, r0
 80095a4:	4157      	adcs	r7, r2
 80095a6:	4074      	eors	r4, r6
 80095a8:	407d      	eors	r5, r7
 80095aa:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80095ae:	4691      	mov	r9, r2
 80095b0:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80095b4:	0e2d      	lsrs	r5, r5, #24
 80095b6:	4698      	mov	r8, r3
 80095b8:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80095bc:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80095c0:	1824      	adds	r4, r4, r0
 80095c2:	414d      	adcs	r5, r1
 80095c4:	18a4      	adds	r4, r4, r2
 80095c6:	415d      	adcs	r5, r3
 80095c8:	ea84 0008 	eor.w	r0, r4, r8
 80095cc:	ea85 0109 	eor.w	r1, r5, r9
 80095d0:	4689      	mov	r9, r1
 80095d2:	0c01      	lsrs	r1, r0, #16
 80095d4:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80095d8:	9122      	str	r1, [sp, #136]	; 0x88
 80095da:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80095de:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095e2:	9123      	str	r1, [sp, #140]	; 0x8c
 80095e4:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 80095e8:	1980      	adds	r0, r0, r6
 80095ea:	4179      	adcs	r1, r7
 80095ec:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 80095f0:	ac40      	add	r4, sp, #256	; 0x100
 80095f2:	e9c4 0100 	strd	r0, r1, [r4]
 80095f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80095fa:	4050      	eors	r0, r2
 80095fc:	4059      	eors	r1, r3
 80095fe:	0042      	lsls	r2, r0, #1
 8009600:	460b      	mov	r3, r1
 8009602:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009606:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 800960a:	932a      	str	r3, [sp, #168]	; 0xa8
 800960c:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8009610:	18a4      	adds	r4, r4, r2
 8009612:	415d      	adcs	r5, r3
 8009614:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 8009618:	1912      	adds	r2, r2, r4
 800961a:	416b      	adcs	r3, r5
 800961c:	0049      	lsls	r1, r1, #1
 800961e:	4614      	mov	r4, r2
 8009620:	461d      	mov	r5, r3
 8009622:	ea8a 0202 	eor.w	r2, sl, r2
 8009626:	ea8b 0303 	eor.w	r3, fp, r3
 800962a:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800962e:	e9dd ab34 	ldrd	sl, fp, [sp, #208]	; 0xd0
 8009632:	912b      	str	r1, [sp, #172]	; 0xac
 8009634:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 8009638:	eb1a 0a03 	adds.w	sl, sl, r3
 800963c:	eb4b 0b02 	adc.w	fp, fp, r2
 8009640:	ea80 000a 	eor.w	r0, r0, sl
 8009644:	ea81 010b 	eor.w	r1, r1, fp
 8009648:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 800964c:	4691      	mov	r9, r2
 800964e:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8009652:	0e09      	lsrs	r1, r1, #24
 8009654:	4698      	mov	r8, r3
 8009656:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800965a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800965e:	1900      	adds	r0, r0, r4
 8009660:	4169      	adcs	r1, r5
 8009662:	1880      	adds	r0, r0, r2
 8009664:	4159      	adcs	r1, r3
 8009666:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 800966a:	ea80 0008 	eor.w	r0, r0, r8
 800966e:	ea81 0109 	eor.w	r1, r1, r9
 8009672:	4689      	mov	r9, r1
 8009674:	0c01      	lsrs	r1, r0, #16
 8009676:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800967a:	912c      	str	r1, [sp, #176]	; 0xb0
 800967c:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009680:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009684:	912d      	str	r1, [sp, #180]	; 0xb4
 8009686:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800968a:	eb10 000a 	adds.w	r0, r0, sl
 800968e:	eb41 010b 	adc.w	r1, r1, fp
 8009692:	404b      	eors	r3, r1
 8009694:	4042      	eors	r2, r0
 8009696:	468b      	mov	fp, r1
 8009698:	0059      	lsls	r1, r3, #1
 800969a:	ea41 71d2 	orr.w	r1, r1, r2, lsr #31
 800969e:	0052      	lsls	r2, r2, #1
 80096a0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80096a4:	4682      	mov	sl, r0
 80096a6:	912f      	str	r1, [sp, #188]	; 0xbc
 80096a8:	932e      	str	r3, [sp, #184]	; 0xb8
 80096aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ae:	e9dd 343e 	ldrd	r3, r4, [sp, #248]	; 0xf8
 80096b2:	18c0      	adds	r0, r0, r3
 80096b4:	4161      	adcs	r1, r4
 80096b6:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 80096ba:	181b      	adds	r3, r3, r0
 80096bc:	4618      	mov	r0, r3
 80096be:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 80096c2:	414c      	adcs	r4, r1
 80096c4:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 80096c8:	4063      	eors	r3, r4
 80096ca:	4621      	mov	r1, r4
 80096cc:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 80096d0:	18f6      	adds	r6, r6, r3
 80096d2:	ea82 0200 	eor.w	r2, r2, r0
 80096d6:	4157      	adcs	r7, r2
 80096d8:	4074      	eors	r4, r6
 80096da:	407d      	eors	r5, r7
 80096dc:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80096e0:	4691      	mov	r9, r2
 80096e2:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80096e6:	0e2d      	lsrs	r5, r5, #24
 80096e8:	4698      	mov	r8, r3
 80096ea:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80096ee:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80096f2:	1824      	adds	r4, r4, r0
 80096f4:	414d      	adcs	r5, r1
 80096f6:	18a4      	adds	r4, r4, r2
 80096f8:	415d      	adcs	r5, r3
 80096fa:	ea84 0008 	eor.w	r0, r4, r8
 80096fe:	ea85 0109 	eor.w	r1, r5, r9
 8009702:	e9cd 4534 	strd	r4, r5, [sp, #208]	; 0xd0
 8009706:	0c04      	lsrs	r4, r0, #16
 8009708:	4680      	mov	r8, r0
 800970a:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 800970e:	0c0c      	lsrs	r4, r1, #16
 8009710:	1836      	adds	r6, r6, r0
 8009712:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8009716:	414f      	adcs	r7, r1
 8009718:	407b      	eors	r3, r7
 800971a:	4072      	eors	r2, r6
 800971c:	005c      	lsls	r4, r3, #1
 800971e:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8009722:	0052      	lsls	r2, r2, #1
 8009724:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009728:	9425      	str	r4, [sp, #148]	; 0x94
 800972a:	9324      	str	r3, [sp, #144]	; 0x90
 800972c:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8009730:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8009734:	18a4      	adds	r4, r4, r2
 8009736:	415d      	adcs	r5, r3
 8009738:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 800973c:	1912      	adds	r2, r2, r4
 800973e:	416b      	adcs	r3, r5
 8009740:	4059      	eors	r1, r3
 8009742:	eb1a 0a01 	adds.w	sl, sl, r1
 8009746:	ea80 0002 	eor.w	r0, r0, r2
 800974a:	eb4b 0b00 	adc.w	fp, fp, r0
 800974e:	4688      	mov	r8, r1
 8009750:	4681      	mov	r9, r0
 8009752:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8009756:	ea80 000a 	eor.w	r0, r0, sl
 800975a:	ea81 010b 	eor.w	r1, r1, fp
 800975e:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8009762:	4614      	mov	r4, r2
 8009764:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8009768:	0e09      	lsrs	r1, r1, #24
 800976a:	461d      	mov	r5, r3
 800976c:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8009770:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8009774:	1900      	adds	r0, r0, r4
 8009776:	4169      	adcs	r1, r5
 8009778:	1880      	adds	r0, r0, r2
 800977a:	4159      	adcs	r1, r3
 800977c:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8009780:	ea80 0008 	eor.w	r0, r0, r8
 8009784:	ea81 0109 	eor.w	r1, r1, r9
 8009788:	4689      	mov	r9, r1
 800978a:	0c01      	lsrs	r1, r0, #16
 800978c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009790:	9128      	str	r1, [sp, #160]	; 0xa0
 8009792:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009796:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800979a:	9129      	str	r1, [sp, #164]	; 0xa4
 800979c:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 80097a0:	eb10 000a 	adds.w	r0, r0, sl
 80097a4:	eb41 010b 	adc.w	r1, r1, fp
 80097a8:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 80097ac:	4050      	eors	r0, r2
 80097ae:	4059      	eors	r1, r3
 80097b0:	460b      	mov	r3, r1
 80097b2:	0042      	lsls	r2, r0, #1
 80097b4:	0049      	lsls	r1, r1, #1
 80097b6:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 80097ba:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 80097be:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 80097c2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80097c6:	18c0      	adds	r0, r0, r3
 80097c8:	4161      	adcs	r1, r4
 80097ca:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 80097ce:	181b      	adds	r3, r3, r0
 80097d0:	4618      	mov	r0, r3
 80097d2:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80097d6:	414c      	adcs	r4, r1
 80097d8:	4063      	eors	r3, r4
 80097da:	4621      	mov	r1, r4
 80097dc:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
 80097e0:	18f6      	adds	r6, r6, r3
 80097e2:	ea82 0200 	eor.w	r2, r2, r0
 80097e6:	4157      	adcs	r7, r2
 80097e8:	4074      	eors	r4, r6
 80097ea:	407d      	eors	r5, r7
 80097ec:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80097f0:	4691      	mov	r9, r2
 80097f2:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80097f6:	0e2d      	lsrs	r5, r5, #24
 80097f8:	4698      	mov	r8, r3
 80097fa:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80097fe:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8009802:	1824      	adds	r4, r4, r0
 8009804:	414d      	adcs	r5, r1
 8009806:	18a4      	adds	r4, r4, r2
 8009808:	415d      	adcs	r5, r3
 800980a:	ea84 0008 	eor.w	r0, r4, r8
 800980e:	ea85 0109 	eor.w	r1, r5, r9
 8009812:	4689      	mov	r9, r1
 8009814:	0c01      	lsrs	r1, r0, #16
 8009816:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800981a:	9120      	str	r1, [sp, #128]	; 0x80
 800981c:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009820:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009824:	9121      	str	r1, [sp, #132]	; 0x84
 8009826:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800982a:	1980      	adds	r0, r0, r6
 800982c:	4179      	adcs	r1, r7
 800982e:	e9cd 0138 	strd	r0, r1, [sp, #224]	; 0xe0
 8009832:	4050      	eors	r0, r2
 8009834:	4059      	eors	r1, r3
 8009836:	0042      	lsls	r2, r0, #1
 8009838:	460b      	mov	r3, r1
 800983a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800983e:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8009842:	932a      	str	r3, [sp, #168]	; 0xa8
 8009844:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009848:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 800984c:	18a4      	adds	r4, r4, r2
 800984e:	415d      	adcs	r5, r3
 8009850:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8009854:	0049      	lsls	r1, r1, #1
 8009856:	1912      	adds	r2, r2, r4
 8009858:	416b      	adcs	r3, r5
 800985a:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800985e:	4614      	mov	r4, r2
 8009860:	461d      	mov	r5, r3
 8009862:	912b      	str	r1, [sp, #172]	; 0xac
 8009864:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009868:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 800986c:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8009870:	406b      	eors	r3, r5
 8009872:	18c0      	adds	r0, r0, r3
 8009874:	ea82 0204 	eor.w	r2, r2, r4
 8009878:	4151      	adcs	r1, r2
 800987a:	4046      	eors	r6, r0
 800987c:	404f      	eors	r7, r1
 800987e:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8009882:	4691      	mov	r9, r2
 8009884:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8009888:	0e3f      	lsrs	r7, r7, #24
 800988a:	4698      	mov	r8, r3
 800988c:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8009890:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8009894:	1936      	adds	r6, r6, r4
 8009896:	416f      	adcs	r7, r5
 8009898:	18b6      	adds	r6, r6, r2
 800989a:	415f      	adcs	r7, r3
 800989c:	ea86 0408 	eor.w	r4, r6, r8
 80098a0:	ea87 0509 	eor.w	r5, r7, r9
 80098a4:	46a0      	mov	r8, r4
 80098a6:	0c24      	lsrs	r4, r4, #16
 80098a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80098ac:	9422      	str	r4, [sp, #136]	; 0x88
 80098ae:	0c2c      	lsrs	r4, r5, #16
 80098b0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80098b4:	9423      	str	r4, [sp, #140]	; 0x8c
 80098b6:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 80098ba:	1824      	adds	r4, r4, r0
 80098bc:	414d      	adcs	r5, r1
 80098be:	4620      	mov	r0, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	4050      	eors	r0, r2
 80098c4:	4059      	eors	r1, r3
 80098c6:	0042      	lsls	r2, r0, #1
 80098c8:	460b      	mov	r3, r1
 80098ca:	0049      	lsls	r1, r1, #1
 80098cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80098d0:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80098d4:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 80098d8:	9125      	str	r1, [sp, #148]	; 0x94
 80098da:	9324      	str	r3, [sp, #144]	; 0x90
 80098dc:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80098e0:	e9dd 3434 	ldrd	r3, r4, [sp, #208]	; 0xd0
 80098e4:	18c0      	adds	r0, r0, r3
 80098e6:	4161      	adcs	r1, r4
 80098e8:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
 80098ec:	181b      	adds	r3, r3, r0
 80098ee:	4618      	mov	r0, r3
 80098f0:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 80098f4:	414c      	adcs	r4, r1
 80098f6:	4063      	eors	r3, r4
 80098f8:	4698      	mov	r8, r3
 80098fa:	ab40      	add	r3, sp, #256	; 0x100
 80098fc:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8009900:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009904:	4621      	mov	r1, r4
 8009906:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 800990a:	eb16 0608 	adds.w	r6, r6, r8
 800990e:	ea82 0200 	eor.w	r2, r2, r0
 8009912:	4157      	adcs	r7, r2
 8009914:	4074      	eors	r4, r6
 8009916:	407d      	eors	r5, r7
 8009918:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800991c:	4691      	mov	r9, r2
 800991e:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009922:	0e2d      	lsrs	r5, r5, #24
 8009924:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009928:	e9dd 4500 	ldrd	r4, r5, [sp]
 800992c:	1824      	adds	r4, r4, r0
 800992e:	414d      	adcs	r5, r1
 8009930:	18a4      	adds	r4, r4, r2
 8009932:	415d      	adcs	r5, r3
 8009934:	ea84 0008 	eor.w	r0, r4, r8
 8009938:	ea85 0109 	eor.w	r1, r5, r9
 800993c:	4689      	mov	r9, r1
 800993e:	0c01      	lsrs	r1, r0, #16
 8009940:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009944:	9126      	str	r1, [sp, #152]	; 0x98
 8009946:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800994a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800994e:	9127      	str	r1, [sp, #156]	; 0x9c
 8009950:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8009954:	1980      	adds	r0, r0, r6
 8009956:	4179      	adcs	r1, r7
 8009958:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 800995c:	4050      	eors	r0, r2
 800995e:	4059      	eors	r1, r3
 8009960:	460b      	mov	r3, r1
 8009962:	0042      	lsls	r2, r0, #1
 8009964:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8009968:	e9cd 4534 	strd	r4, r5, [sp, #208]	; 0xd0
 800996c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8009970:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009974:	18a4      	adds	r4, r4, r2
 8009976:	415d      	adcs	r5, r3
 8009978:	0049      	lsls	r1, r1, #1
 800997a:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800997e:	19a4      	adds	r4, r4, r6
 8009980:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8009984:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8009988:	417d      	adcs	r5, r7
 800998a:	406b      	eors	r3, r5
 800998c:	18c0      	adds	r0, r0, r3
 800998e:	ea82 0204 	eor.w	r2, r2, r4
 8009992:	4151      	adcs	r1, r2
 8009994:	4046      	eors	r6, r0
 8009996:	404f      	eors	r7, r1
 8009998:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 800999c:	4691      	mov	r9, r2
 800999e:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 80099a2:	0e3f      	lsrs	r7, r7, #24
 80099a4:	4698      	mov	r8, r3
 80099a6:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 80099aa:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80099ae:	1936      	adds	r6, r6, r4
 80099b0:	416f      	adcs	r7, r5
 80099b2:	18b6      	adds	r6, r6, r2
 80099b4:	415f      	adcs	r7, r3
 80099b6:	ea86 0408 	eor.w	r4, r6, r8
 80099ba:	ea87 0509 	eor.w	r5, r7, r9
 80099be:	46a0      	mov	r8, r4
 80099c0:	0c24      	lsrs	r4, r4, #16
 80099c2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80099c6:	9420      	str	r4, [sp, #128]	; 0x80
 80099c8:	0c2c      	lsrs	r4, r5, #16
 80099ca:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80099ce:	9421      	str	r4, [sp, #132]	; 0x84
 80099d0:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 80099d4:	1824      	adds	r4, r4, r0
 80099d6:	414d      	adcs	r5, r1
 80099d8:	4620      	mov	r0, r4
 80099da:	4629      	mov	r1, r5
 80099dc:	4050      	eors	r0, r2
 80099de:	4059      	eors	r1, r3
 80099e0:	0042      	lsls	r2, r0, #1
 80099e2:	460b      	mov	r3, r1
 80099e4:	0049      	lsls	r1, r1, #1
 80099e6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80099ea:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80099ee:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 80099f2:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 80099f6:	912d      	str	r1, [sp, #180]	; 0xb4
 80099f8:	932c      	str	r3, [sp, #176]	; 0xb0
 80099fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099fe:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8009a02:	18c0      	adds	r0, r0, r3
 8009a04:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009a08:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8009a0c:	4161      	adcs	r1, r4
 8009a0e:	eb10 000a 	adds.w	r0, r0, sl
 8009a12:	eb41 010b 	adc.w	r1, r1, fp
 8009a16:	404b      	eors	r3, r1
 8009a18:	18f6      	adds	r6, r6, r3
 8009a1a:	ea82 0200 	eor.w	r2, r2, r0
 8009a1e:	4157      	adcs	r7, r2
 8009a20:	ea8a 0406 	eor.w	r4, sl, r6
 8009a24:	ea8b 0507 	eor.w	r5, fp, r7
 8009a28:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009a2c:	4691      	mov	r9, r2
 8009a2e:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009a32:	0e2d      	lsrs	r5, r5, #24
 8009a34:	4698      	mov	r8, r3
 8009a36:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009a3a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009a3e:	1824      	adds	r4, r4, r0
 8009a40:	414d      	adcs	r5, r1
 8009a42:	18a4      	adds	r4, r4, r2
 8009a44:	415d      	adcs	r5, r3
 8009a46:	ea84 0008 	eor.w	r0, r4, r8
 8009a4a:	ea85 0109 	eor.w	r1, r5, r9
 8009a4e:	4689      	mov	r9, r1
 8009a50:	0c01      	lsrs	r1, r0, #16
 8009a52:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009a56:	9122      	str	r1, [sp, #136]	; 0x88
 8009a58:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009a5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a60:	9123      	str	r1, [sp, #140]	; 0x8c
 8009a62:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8009a66:	1980      	adds	r0, r0, r6
 8009a68:	4179      	adcs	r1, r7
 8009a6a:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8009a6e:	4050      	eors	r0, r2
 8009a70:	4059      	eors	r1, r3
 8009a72:	460b      	mov	r3, r1
 8009a74:	0042      	lsls	r2, r0, #1
 8009a76:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8009a7a:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8009a7e:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8009a82:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8009a86:	18a4      	adds	r4, r4, r2
 8009a88:	415d      	adcs	r5, r3
 8009a8a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8009a8e:	1912      	adds	r2, r2, r4
 8009a90:	416b      	adcs	r3, r5
 8009a92:	4614      	mov	r4, r2
 8009a94:	461d      	mov	r5, r3
 8009a96:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009a9a:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8009a9e:	0049      	lsls	r1, r1, #1
 8009aa0:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8009aa4:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8009aa8:	406b      	eors	r3, r5
 8009aaa:	18f6      	adds	r6, r6, r3
 8009aac:	ea82 0204 	eor.w	r2, r2, r4
 8009ab0:	4157      	adcs	r7, r2
 8009ab2:	4070      	eors	r0, r6
 8009ab4:	4079      	eors	r1, r7
 8009ab6:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8009aba:	4691      	mov	r9, r2
 8009abc:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8009ac0:	0e09      	lsrs	r1, r1, #24
 8009ac2:	4698      	mov	r8, r3
 8009ac4:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8009ac8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009acc:	1900      	adds	r0, r0, r4
 8009ace:	4169      	adcs	r1, r5
 8009ad0:	1880      	adds	r0, r0, r2
 8009ad2:	4159      	adcs	r1, r3
 8009ad4:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 8009ad8:	ea80 0008 	eor.w	r0, r0, r8
 8009adc:	ea81 0109 	eor.w	r1, r1, r9
 8009ae0:	4689      	mov	r9, r1
 8009ae2:	0c01      	lsrs	r1, r0, #16
 8009ae4:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009ae8:	9126      	str	r1, [sp, #152]	; 0x98
 8009aea:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009aee:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009af2:	9127      	str	r1, [sp, #156]	; 0x9c
 8009af4:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8009af8:	1980      	adds	r0, r0, r6
 8009afa:	4179      	adcs	r1, r7
 8009afc:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8009b00:	4050      	eors	r0, r2
 8009b02:	4059      	eors	r1, r3
 8009b04:	0042      	lsls	r2, r0, #1
 8009b06:	460b      	mov	r3, r1
 8009b08:	0049      	lsls	r1, r1, #1
 8009b0a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009b0e:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009b12:	912b      	str	r1, [sp, #172]	; 0xac
 8009b14:	932a      	str	r3, [sp, #168]	; 0xa8
 8009b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b1a:	e9dd 3434 	ldrd	r3, r4, [sp, #208]	; 0xd0
 8009b1e:	18c0      	adds	r0, r0, r3
 8009b20:	4161      	adcs	r1, r4
 8009b22:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8009b26:	181b      	adds	r3, r3, r0
 8009b28:	4618      	mov	r0, r3
 8009b2a:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8009b2e:	414c      	adcs	r4, r1
 8009b30:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 8009b34:	4063      	eors	r3, r4
 8009b36:	4621      	mov	r1, r4
 8009b38:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8009b3c:	18f6      	adds	r6, r6, r3
 8009b3e:	ea82 0200 	eor.w	r2, r2, r0
 8009b42:	4157      	adcs	r7, r2
 8009b44:	4074      	eors	r4, r6
 8009b46:	407d      	eors	r5, r7
 8009b48:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009b4c:	4691      	mov	r9, r2
 8009b4e:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009b52:	0e2d      	lsrs	r5, r5, #24
 8009b54:	4698      	mov	r8, r3
 8009b56:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009b5a:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8009b5e:	1824      	adds	r4, r4, r0
 8009b60:	414d      	adcs	r5, r1
 8009b62:	18a4      	adds	r4, r4, r2
 8009b64:	415d      	adcs	r5, r3
 8009b66:	ea84 0008 	eor.w	r0, r4, r8
 8009b6a:	ea85 0109 	eor.w	r1, r5, r9
 8009b6e:	e9cd 4534 	strd	r4, r5, [sp, #208]	; 0xd0
 8009b72:	0c04      	lsrs	r4, r0, #16
 8009b74:	4680      	mov	r8, r0
 8009b76:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8009b7a:	0c0c      	lsrs	r4, r1, #16
 8009b7c:	1836      	adds	r6, r6, r0
 8009b7e:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8009b82:	414f      	adcs	r7, r1
 8009b84:	407b      	eors	r3, r7
 8009b86:	4072      	eors	r2, r6
 8009b88:	005c      	lsls	r4, r3, #1
 8009b8a:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8009b8e:	0052      	lsls	r2, r2, #1
 8009b90:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009b94:	9425      	str	r4, [sp, #148]	; 0x94
 8009b96:	9324      	str	r3, [sp, #144]	; 0x90
 8009b98:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8009b9c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8009ba0:	18a4      	adds	r4, r4, r2
 8009ba2:	415d      	adcs	r5, r3
 8009ba4:	eb14 040a 	adds.w	r4, r4, sl
 8009ba8:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 8009bac:	eb45 050b 	adc.w	r5, r5, fp
 8009bb0:	4069      	eors	r1, r5
 8009bb2:	1852      	adds	r2, r2, r1
 8009bb4:	ea80 0004 	eor.w	r0, r0, r4
 8009bb8:	4143      	adcs	r3, r0
 8009bba:	4681      	mov	r9, r0
 8009bbc:	ea82 000a 	eor.w	r0, r2, sl
 8009bc0:	4688      	mov	r8, r1
 8009bc2:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8009bc6:	ea83 010b 	eor.w	r1, r3, fp
 8009bca:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 8009bce:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8009bd2:	0e09      	lsrs	r1, r1, #24
 8009bd4:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8009bd8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009bdc:	1900      	adds	r0, r0, r4
 8009bde:	4169      	adcs	r1, r5
 8009be0:	1880      	adds	r0, r0, r2
 8009be2:	4159      	adcs	r1, r3
 8009be4:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8009be8:	ea80 0008 	eor.w	r0, r0, r8
 8009bec:	ea81 0109 	eor.w	r1, r1, r9
 8009bf0:	4689      	mov	r9, r1
 8009bf2:	0c01      	lsrs	r1, r0, #16
 8009bf4:	ea41 4a09 	orr.w	sl, r1, r9, lsl #16
 8009bf8:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009bfc:	ea41 4b00 	orr.w	fp, r1, r0, lsl #16
 8009c00:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8009c04:	eb10 000a 	adds.w	r0, r0, sl
 8009c08:	eb41 010b 	adc.w	r1, r1, fp
 8009c0c:	e9cd 0138 	strd	r0, r1, [sp, #224]	; 0xe0
 8009c10:	4050      	eors	r0, r2
 8009c12:	4059      	eors	r1, r3
 8009c14:	0042      	lsls	r2, r0, #1
 8009c16:	460b      	mov	r3, r1
 8009c18:	0049      	lsls	r1, r1, #1
 8009c1a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009c1e:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009c22:	9129      	str	r1, [sp, #164]	; 0xa4
 8009c24:	9328      	str	r3, [sp, #160]	; 0xa0
 8009c26:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8009c2a:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8009c2e:	18c0      	adds	r0, r0, r3
 8009c30:	4161      	adcs	r1, r4
 8009c32:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8009c36:	181b      	adds	r3, r3, r0
 8009c38:	4618      	mov	r0, r3
 8009c3a:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8009c3e:	414c      	adcs	r4, r1
 8009c40:	4063      	eors	r3, r4
 8009c42:	4621      	mov	r1, r4
 8009c44:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8009c48:	18f6      	adds	r6, r6, r3
 8009c4a:	ea82 0200 	eor.w	r2, r2, r0
 8009c4e:	4157      	adcs	r7, r2
 8009c50:	4074      	eors	r4, r6
 8009c52:	407d      	eors	r5, r7
 8009c54:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009c58:	4691      	mov	r9, r2
 8009c5a:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009c5e:	0e2d      	lsrs	r5, r5, #24
 8009c60:	4698      	mov	r8, r3
 8009c62:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009c66:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8009c6a:	1824      	adds	r4, r4, r0
 8009c6c:	414d      	adcs	r5, r1
 8009c6e:	18a4      	adds	r4, r4, r2
 8009c70:	415d      	adcs	r5, r3
 8009c72:	ea84 0008 	eor.w	r0, r4, r8
 8009c76:	ea85 0109 	eor.w	r1, r5, r9
 8009c7a:	4689      	mov	r9, r1
 8009c7c:	0c01      	lsrs	r1, r0, #16
 8009c7e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009c82:	9120      	str	r1, [sp, #128]	; 0x80
 8009c84:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009c88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c8c:	9121      	str	r1, [sp, #132]	; 0x84
 8009c8e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8009c92:	1980      	adds	r0, r0, r6
 8009c94:	4179      	adcs	r1, r7
 8009c96:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8009c9a:	4050      	eors	r0, r2
 8009c9c:	4059      	eors	r1, r3
 8009c9e:	0042      	lsls	r2, r0, #1
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009ca6:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8009caa:	932a      	str	r3, [sp, #168]	; 0xa8
 8009cac:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 8009cb0:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8009cb4:	18a4      	adds	r4, r4, r2
 8009cb6:	415d      	adcs	r5, r3
 8009cb8:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8009cbc:	1912      	adds	r2, r2, r4
 8009cbe:	416b      	adcs	r3, r5
 8009cc0:	0049      	lsls	r1, r1, #1
 8009cc2:	4614      	mov	r4, r2
 8009cc4:	461d      	mov	r5, r3
 8009cc6:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009cca:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009cce:	912b      	str	r1, [sp, #172]	; 0xac
 8009cd0:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8009cd4:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8009cd8:	406b      	eors	r3, r5
 8009cda:	18c0      	adds	r0, r0, r3
 8009cdc:	ea82 0204 	eor.w	r2, r2, r4
 8009ce0:	4151      	adcs	r1, r2
 8009ce2:	4046      	eors	r6, r0
 8009ce4:	404f      	eors	r7, r1
 8009ce6:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8009cea:	4691      	mov	r9, r2
 8009cec:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8009cf0:	0e3f      	lsrs	r7, r7, #24
 8009cf2:	4698      	mov	r8, r3
 8009cf4:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8009cf8:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
 8009cfc:	1936      	adds	r6, r6, r4
 8009cfe:	416f      	adcs	r7, r5
 8009d00:	18b6      	adds	r6, r6, r2
 8009d02:	415f      	adcs	r7, r3
 8009d04:	ea86 0408 	eor.w	r4, r6, r8
 8009d08:	ea87 0509 	eor.w	r5, r7, r9
 8009d0c:	46a0      	mov	r8, r4
 8009d0e:	0c24      	lsrs	r4, r4, #16
 8009d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009d14:	9422      	str	r4, [sp, #136]	; 0x88
 8009d16:	0c2c      	lsrs	r4, r5, #16
 8009d18:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8009d1c:	9423      	str	r4, [sp, #140]	; 0x8c
 8009d1e:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8009d22:	1824      	adds	r4, r4, r0
 8009d24:	414d      	adcs	r5, r1
 8009d26:	4620      	mov	r0, r4
 8009d28:	4629      	mov	r1, r5
 8009d2a:	4050      	eors	r0, r2
 8009d2c:	4059      	eors	r1, r3
 8009d2e:	0042      	lsls	r2, r0, #1
 8009d30:	460b      	mov	r3, r1
 8009d32:	0049      	lsls	r1, r1, #1
 8009d34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009d38:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009d3c:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8009d40:	9125      	str	r1, [sp, #148]	; 0x94
 8009d42:	9324      	str	r3, [sp, #144]	; 0x90
 8009d44:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8009d48:	e9dd 3434 	ldrd	r3, r4, [sp, #208]	; 0xd0
 8009d4c:	18c0      	adds	r0, r0, r3
 8009d4e:	4161      	adcs	r1, r4
 8009d50:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8009d54:	181b      	adds	r3, r3, r0
 8009d56:	4618      	mov	r0, r3
 8009d58:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009d5c:	414c      	adcs	r4, r1
 8009d5e:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8009d62:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8009d66:	4063      	eors	r3, r4
 8009d68:	4621      	mov	r1, r4
 8009d6a:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 8009d6e:	18f6      	adds	r6, r6, r3
 8009d70:	ea82 0200 	eor.w	r2, r2, r0
 8009d74:	4157      	adcs	r7, r2
 8009d76:	4074      	eors	r4, r6
 8009d78:	407d      	eors	r5, r7
 8009d7a:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009d7e:	4691      	mov	r9, r2
 8009d80:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009d84:	0e2d      	lsrs	r5, r5, #24
 8009d86:	4698      	mov	r8, r3
 8009d88:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009d8c:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8009d90:	1824      	adds	r4, r4, r0
 8009d92:	414d      	adcs	r5, r1
 8009d94:	18a4      	adds	r4, r4, r2
 8009d96:	415d      	adcs	r5, r3
 8009d98:	ea84 0008 	eor.w	r0, r4, r8
 8009d9c:	ea85 0109 	eor.w	r1, r5, r9
 8009da0:	4689      	mov	r9, r1
 8009da2:	0c01      	lsrs	r1, r0, #16
 8009da4:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009da8:	9126      	str	r1, [sp, #152]	; 0x98
 8009daa:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009dae:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009db2:	9127      	str	r1, [sp, #156]	; 0x9c
 8009db4:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8009db8:	1980      	adds	r0, r0, r6
 8009dba:	4179      	adcs	r1, r7
 8009dbc:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8009dc0:	4050      	eors	r0, r2
 8009dc2:	4059      	eors	r1, r3
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	0042      	lsls	r2, r0, #1
 8009dc8:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8009dcc:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8009dd0:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8009dd4:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8009dd8:	18a4      	adds	r4, r4, r2
 8009dda:	415d      	adcs	r5, r3
 8009ddc:	0049      	lsls	r1, r1, #1
 8009dde:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8009de2:	19a4      	adds	r4, r4, r6
 8009de4:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8009de8:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8009dec:	417d      	adcs	r5, r7
 8009dee:	406b      	eors	r3, r5
 8009df0:	18c0      	adds	r0, r0, r3
 8009df2:	ea82 0204 	eor.w	r2, r2, r4
 8009df6:	4151      	adcs	r1, r2
 8009df8:	4046      	eors	r6, r0
 8009dfa:	404f      	eors	r7, r1
 8009dfc:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8009e00:	4691      	mov	r9, r2
 8009e02:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8009e06:	0e3f      	lsrs	r7, r7, #24
 8009e08:	4698      	mov	r8, r3
 8009e0a:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8009e0e:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 8009e12:	1936      	adds	r6, r6, r4
 8009e14:	416f      	adcs	r7, r5
 8009e16:	18b6      	adds	r6, r6, r2
 8009e18:	415f      	adcs	r7, r3
 8009e1a:	ea86 0408 	eor.w	r4, r6, r8
 8009e1e:	ea87 0509 	eor.w	r5, r7, r9
 8009e22:	46a0      	mov	r8, r4
 8009e24:	0c24      	lsrs	r4, r4, #16
 8009e26:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009e2a:	9414      	str	r4, [sp, #80]	; 0x50
 8009e2c:	0c2c      	lsrs	r4, r5, #16
 8009e2e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8009e32:	9415      	str	r4, [sp, #84]	; 0x54
 8009e34:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8009e38:	1824      	adds	r4, r4, r0
 8009e3a:	414d      	adcs	r5, r1
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	4629      	mov	r1, r5
 8009e40:	4050      	eors	r0, r2
 8009e42:	4059      	eors	r1, r3
 8009e44:	0042      	lsls	r2, r0, #1
 8009e46:	460b      	mov	r3, r1
 8009e48:	0049      	lsls	r1, r1, #1
 8009e4a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009e4e:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009e52:	e9cd 4536 	strd	r4, r5, [sp, #216]	; 0xd8
 8009e56:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
 8009e5a:	911d      	str	r1, [sp, #116]	; 0x74
 8009e5c:	931c      	str	r3, [sp, #112]	; 0x70
 8009e5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e62:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8009e66:	18c0      	adds	r0, r0, r3
 8009e68:	4161      	adcs	r1, r4
 8009e6a:	e9dd 3428 	ldrd	r3, r4, [sp, #160]	; 0xa0
 8009e6e:	181b      	adds	r3, r3, r0
 8009e70:	4618      	mov	r0, r3
 8009e72:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009e76:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 8009e7a:	414c      	adcs	r4, r1
 8009e7c:	e9dd 8928 	ldrd	r8, r9, [sp, #160]	; 0xa0
 8009e80:	4063      	eors	r3, r4
 8009e82:	18f6      	adds	r6, r6, r3
 8009e84:	ea82 0200 	eor.w	r2, r2, r0
 8009e88:	4157      	adcs	r7, r2
 8009e8a:	ea88 0806 	eor.w	r8, r8, r6
 8009e8e:	ea89 0907 	eor.w	r9, r9, r7
 8009e92:	ea4f 6e18 	mov.w	lr, r8, lsr #24
 8009e96:	4615      	mov	r5, r2
 8009e98:	ea4e 2209 	orr.w	r2, lr, r9, lsl #8
 8009e9c:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	461c      	mov	r4, r3
 8009ea4:	ea4e 2308 	orr.w	r3, lr, r8, lsl #8
 8009ea8:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009eac:	eb18 0800 	adds.w	r8, r8, r0
 8009eb0:	eb49 0901 	adc.w	r9, r9, r1
 8009eb4:	eb18 0802 	adds.w	r8, r8, r2
 8009eb8:	eb49 0903 	adc.w	r9, r9, r3
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	4060      	eors	r0, r4
 8009ec2:	4069      	eors	r1, r5
 8009ec4:	460d      	mov	r5, r1
 8009ec6:	0c01      	lsrs	r1, r0, #16
 8009ec8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8009ecc:	9108      	str	r1, [sp, #32]
 8009ece:	0c29      	lsrs	r1, r5, #16
 8009ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ed4:	9109      	str	r1, [sp, #36]	; 0x24
 8009ed6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009eda:	1980      	adds	r0, r0, r6
 8009edc:	4179      	adcs	r1, r7
 8009ede:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8009ee2:	4050      	eors	r0, r2
 8009ee4:	4059      	eors	r1, r3
 8009ee6:	0042      	lsls	r2, r0, #1
 8009ee8:	460b      	mov	r3, r1
 8009eea:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009eee:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8009ef2:	9310      	str	r3, [sp, #64]	; 0x40
 8009ef4:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8009ef8:	18a4      	adds	r4, r4, r2
 8009efa:	415d      	adcs	r5, r3
 8009efc:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8009f00:	1912      	adds	r2, r2, r4
 8009f02:	416b      	adcs	r3, r5
 8009f04:	4614      	mov	r4, r2
 8009f06:	461d      	mov	r5, r3
 8009f08:	0049      	lsls	r1, r1, #1
 8009f0a:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009f0e:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 8009f12:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009f16:	9111      	str	r1, [sp, #68]	; 0x44
 8009f18:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8009f1c:	406b      	eors	r3, r5
 8009f1e:	18f6      	adds	r6, r6, r3
 8009f20:	ea82 0204 	eor.w	r2, r2, r4
 8009f24:	4157      	adcs	r7, r2
 8009f26:	4070      	eors	r0, r6
 8009f28:	4079      	eors	r1, r7
 8009f2a:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8009f2e:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 8009f32:	4691      	mov	r9, r2
 8009f34:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8009f38:	0e09      	lsrs	r1, r1, #24
 8009f3a:	4698      	mov	r8, r3
 8009f3c:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8009f40:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8009f44:	1900      	adds	r0, r0, r4
 8009f46:	4169      	adcs	r1, r5
 8009f48:	1880      	adds	r0, r0, r2
 8009f4a:	4159      	adcs	r1, r3
 8009f4c:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
 8009f50:	ea80 0008 	eor.w	r0, r0, r8
 8009f54:	ea81 0109 	eor.w	r1, r1, r9
 8009f58:	4689      	mov	r9, r1
 8009f5a:	0c01      	lsrs	r1, r0, #16
 8009f5c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009f60:	9112      	str	r1, [sp, #72]	; 0x48
 8009f62:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009f66:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f6a:	9113      	str	r1, [sp, #76]	; 0x4c
 8009f6c:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 8009f70:	eb18 0806 	adds.w	r8, r8, r6
 8009f74:	eb49 0907 	adc.w	r9, r9, r7
 8009f78:	ea83 0309 	eor.w	r3, r3, r9
 8009f7c:	ea82 0208 	eor.w	r2, r2, r8
 8009f80:	0059      	lsls	r1, r3, #1
 8009f82:	ea41 71d2 	orr.w	r1, r1, r2, lsr #31
 8009f86:	0052      	lsls	r2, r2, #1
 8009f88:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009f8c:	911f      	str	r1, [sp, #124]	; 0x7c
 8009f8e:	931e      	str	r3, [sp, #120]	; 0x78
 8009f90:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8009f94:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8009f98:	18c0      	adds	r0, r0, r3
 8009f9a:	4161      	adcs	r1, r4
 8009f9c:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8009fa0:	181b      	adds	r3, r3, r0
 8009fa2:	414c      	adcs	r4, r1
 8009fa4:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8009fa8:	ea8a 0203 	eor.w	r2, sl, r3
 8009fac:	4618      	mov	r0, r3
 8009fae:	4621      	mov	r1, r4
 8009fb0:	ea8b 0304 	eor.w	r3, fp, r4
 8009fb4:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8009fb8:	18f6      	adds	r6, r6, r3
 8009fba:	4157      	adcs	r7, r2
 8009fbc:	4074      	eors	r4, r6
 8009fbe:	407d      	eors	r5, r7
 8009fc0:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009fc4:	4693      	mov	fp, r2
 8009fc6:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009fca:	0e2d      	lsrs	r5, r5, #24
 8009fcc:	469a      	mov	sl, r3
 8009fce:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009fd2:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8009fd6:	1824      	adds	r4, r4, r0
 8009fd8:	414d      	adcs	r5, r1
 8009fda:	18a4      	adds	r4, r4, r2
 8009fdc:	415d      	adcs	r5, r3
 8009fde:	ea84 000a 	eor.w	r0, r4, sl
 8009fe2:	ea85 010b 	eor.w	r1, r5, fp
 8009fe6:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8009fea:	0c04      	lsrs	r4, r0, #16
 8009fec:	4682      	mov	sl, r0
 8009fee:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8009ff2:	0c0c      	lsrs	r4, r1, #16
 8009ff4:	ea44 410a 	orr.w	r1, r4, sl, lsl #16
 8009ff8:	1834      	adds	r4, r6, r0
 8009ffa:	eb47 0501 	adc.w	r5, r7, r1
 8009ffe:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 800a002:	405d      	eors	r5, r3
 800a004:	4054      	eors	r4, r2
 800a006:	4622      	mov	r2, r4
 800a008:	006c      	lsls	r4, r5, #1
 800a00a:	ea44 7bd2 	orr.w	fp, r4, r2, lsr #31
 800a00e:	0052      	lsls	r2, r2, #1
 800a010:	ea42 7ad5 	orr.w	sl, r2, r5, lsr #31
 800a014:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800a018:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a01c:	18a4      	adds	r4, r4, r2
 800a01e:	415d      	adcs	r5, r3
 800a020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a024:	1912      	adds	r2, r2, r4
 800a026:	416b      	adcs	r3, r5
 800a028:	461d      	mov	r5, r3
 800a02a:	404b      	eors	r3, r1
 800a02c:	eb18 0603 	adds.w	r6, r8, r3
 800a030:	4614      	mov	r4, r2
 800a032:	ea80 0202 	eor.w	r2, r0, r2
 800a036:	eb49 0702 	adc.w	r7, r9, r2
 800a03a:	4618      	mov	r0, r3
 800a03c:	4611      	mov	r1, r2
 800a03e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a042:	4072      	eors	r2, r6
 800a044:	407b      	eors	r3, r7
 800a046:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800a04a:	ea4e 2803 	orr.w	r8, lr, r3, lsl #8
 800a04e:	0e1b      	lsrs	r3, r3, #24
 800a050:	ea43 2902 	orr.w	r9, r3, r2, lsl #8
 800a054:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a058:	1912      	adds	r2, r2, r4
 800a05a:	416b      	adcs	r3, r5
 800a05c:	eb12 0408 	adds.w	r4, r2, r8
 800a060:	eb43 0509 	adc.w	r5, r3, r9
 800a064:	4060      	eors	r0, r4
 800a066:	ab62      	add	r3, sp, #392	; 0x188
 800a068:	e9c3 4500 	strd	r4, r5, [r3]
 800a06c:	4069      	eors	r1, r5
 800a06e:	0c04      	lsrs	r4, r0, #16
 800a070:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
 800a074:	0c09      	lsrs	r1, r1, #16
 800a076:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
 800a07a:	18b6      	adds	r6, r6, r2
 800a07c:	a980      	add	r1, sp, #512	; 0x200
 800a07e:	e9c1 2300 	strd	r2, r3, [r1]
 800a082:	415f      	adcs	r7, r3
 800a084:	ab76      	add	r3, sp, #472	; 0x1d8
 800a086:	e9c3 6700 	strd	r6, r7, [r3]
 800a08a:	ea87 0709 	eor.w	r7, r7, r9
 800a08e:	ea86 0608 	eor.w	r6, r6, r8
 800a092:	007b      	lsls	r3, r7, #1
 800a094:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 800a098:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a09c:	936d      	str	r3, [sp, #436]	; 0x1b4
 800a09e:	e9dd 3422 	ldrd	r3, r4, [sp, #136]	; 0x88
 800a0a2:	18c0      	adds	r0, r0, r3
 800a0a4:	4161      	adcs	r1, r4
 800a0a6:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 800a0aa:	0072      	lsls	r2, r6, #1
 800a0ac:	181b      	adds	r3, r3, r0
 800a0ae:	ea42 72d7 	orr.w	r2, r2, r7, lsr #31
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	926c      	str	r2, [sp, #432]	; 0x1b0
 800a0b6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a0ba:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
 800a0be:	414c      	adcs	r4, r1
 800a0c0:	4063      	eors	r3, r4
 800a0c2:	18f6      	adds	r6, r6, r3
 800a0c4:	ea82 0200 	eor.w	r2, r2, r0
 800a0c8:	4157      	adcs	r7, r2
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4615      	mov	r5, r2
 800a0ce:	461c      	mov	r4, r3
 800a0d0:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800a0d4:	4072      	eors	r2, r6
 800a0d6:	407b      	eors	r3, r7
 800a0d8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800a0dc:	ea4e 2803 	orr.w	r8, lr, r3, lsl #8
 800a0e0:	0e1b      	lsrs	r3, r3, #24
 800a0e2:	ea43 2902 	orr.w	r9, r3, r2, lsl #8
 800a0e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ea:	1812      	adds	r2, r2, r0
 800a0ec:	414b      	adcs	r3, r1
 800a0ee:	eb12 0008 	adds.w	r0, r2, r8
 800a0f2:	eb43 0109 	adc.w	r1, r3, r9
 800a0f6:	4044      	eors	r4, r0
 800a0f8:	ab64      	add	r3, sp, #400	; 0x190
 800a0fa:	e9c3 0100 	strd	r0, r1, [r3]
 800a0fe:	404d      	eors	r5, r1
 800a100:	0c21      	lsrs	r1, r4, #16
 800a102:	ea41 4205 	orr.w	r2, r1, r5, lsl #16
 800a106:	0c29      	lsrs	r1, r5, #16
 800a108:	ea41 4304 	orr.w	r3, r1, r4, lsl #16
 800a10c:	18b6      	adds	r6, r6, r2
 800a10e:	a97a      	add	r1, sp, #488	; 0x1e8
 800a110:	e9c1 2300 	strd	r2, r3, [r1]
 800a114:	415f      	adcs	r7, r3
 800a116:	ab78      	add	r3, sp, #480	; 0x1e0
 800a118:	e9c3 6700 	strd	r6, r7, [r3]
 800a11c:	ea86 0608 	eor.w	r6, r6, r8
 800a120:	ea87 0709 	eor.w	r7, r7, r9
 800a124:	007b      	lsls	r3, r7, #1
 800a126:	0072      	lsls	r2, r6, #1
 800a128:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 800a12c:	ea42 72d7 	orr.w	r2, r2, r7, lsr #31
 800a130:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 800a134:	926e      	str	r2, [sp, #440]	; 0x1b8
 800a136:	936f      	str	r3, [sp, #444]	; 0x1bc
 800a138:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800a13c:	18a4      	adds	r4, r4, r2
 800a13e:	415d      	adcs	r5, r3
 800a140:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a144:	eb14 040a 	adds.w	r4, r4, sl
 800a148:	e9dd 0136 	ldrd	r0, r1, [sp, #216]	; 0xd8
 800a14c:	eb45 050b 	adc.w	r5, r5, fp
 800a150:	406b      	eors	r3, r5
 800a152:	18c0      	adds	r0, r0, r3
 800a154:	ea82 0204 	eor.w	r2, r2, r4
 800a158:	4151      	adcs	r1, r2
 800a15a:	4617      	mov	r7, r2
 800a15c:	ea8a 0200 	eor.w	r2, sl, r0
 800a160:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800a164:	461e      	mov	r6, r3
 800a166:	ea8b 0301 	eor.w	r3, fp, r1
 800a16a:	ea4e 2803 	orr.w	r8, lr, r3, lsl #8
 800a16e:	0e1b      	lsrs	r3, r3, #24
 800a170:	ea43 2902 	orr.w	r9, r3, r2, lsl #8
 800a174:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a178:	1912      	adds	r2, r2, r4
 800a17a:	416b      	adcs	r3, r5
 800a17c:	eb12 0408 	adds.w	r4, r2, r8
 800a180:	eb43 0509 	adc.w	r5, r3, r9
 800a184:	4066      	eors	r6, r4
 800a186:	ab66      	add	r3, sp, #408	; 0x198
 800a188:	e9c3 4500 	strd	r4, r5, [r3]
 800a18c:	406f      	eors	r7, r5
 800a18e:	0c34      	lsrs	r4, r6, #16
 800a190:	ea44 4207 	orr.w	r2, r4, r7, lsl #16
 800a194:	0c3c      	lsrs	r4, r7, #16
 800a196:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800a19a:	1880      	adds	r0, r0, r2
 800a19c:	ac7c      	add	r4, sp, #496	; 0x1f0
 800a19e:	e9c4 2300 	strd	r2, r3, [r4]
 800a1a2:	4159      	adcs	r1, r3
 800a1a4:	ab72      	add	r3, sp, #456	; 0x1c8
 800a1a6:	e9c3 0100 	strd	r0, r1, [r3]
 800a1aa:	ea81 0109 	eor.w	r1, r1, r9
 800a1ae:	ea80 0008 	eor.w	r0, r0, r8
 800a1b2:	004b      	lsls	r3, r1, #1
 800a1b4:	ea43 73d0 	orr.w	r3, r3, r0, lsr #31
 800a1b8:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 800a1bc:	9371      	str	r3, [sp, #452]	; 0x1c4
 800a1be:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a1c2:	eb18 0803 	adds.w	r8, r8, r3
 800a1c6:	eb49 0904 	adc.w	r9, r9, r4
 800a1ca:	e9dd 341c 	ldrd	r3, r4, [sp, #112]	; 0x70
 800a1ce:	0042      	lsls	r2, r0, #1
 800a1d0:	eb13 0308 	adds.w	r3, r3, r8
 800a1d4:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
 800a1d8:	4698      	mov	r8, r3
 800a1da:	9270      	str	r2, [sp, #448]	; 0x1c0
 800a1dc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a1e0:	eb44 0409 	adc.w	r4, r4, r9
 800a1e4:	4063      	eors	r3, r4
 800a1e6:	46a1      	mov	r9, r4
 800a1e8:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 800a1ec:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a1f0:	18e4      	adds	r4, r4, r3
 800a1f2:	ea82 0208 	eor.w	r2, r2, r8
 800a1f6:	4155      	adcs	r5, r2
 800a1f8:	4060      	eors	r0, r4
 800a1fa:	4069      	eors	r1, r5
 800a1fc:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 800a200:	4617      	mov	r7, r2
 800a202:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 800a206:	0e09      	lsrs	r1, r1, #24
 800a208:	461e      	mov	r6, r3
 800a20a:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800a20e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a212:	eb10 0008 	adds.w	r0, r0, r8
 800a216:	eb41 0109 	adc.w	r1, r1, r9
 800a21a:	eb10 0802 	adds.w	r8, r0, r2
 800a21e:	eb41 0903 	adc.w	r9, r1, r3
 800a222:	ea86 0608 	eor.w	r6, r6, r8
 800a226:	ea87 0709 	eor.w	r7, r7, r9
 800a22a:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800a22e:	ea4e 4007 	orr.w	r0, lr, r7, lsl #16
 800a232:	a968      	add	r1, sp, #416	; 0x1a0
 800a234:	0c3f      	lsrs	r7, r7, #16
 800a236:	1824      	adds	r4, r4, r0
 800a238:	e9c1 8900 	strd	r8, r9, [r1]
 800a23c:	ea47 4106 	orr.w	r1, r7, r6, lsl #16
 800a240:	414d      	adcs	r5, r1
 800a242:	ae7e      	add	r6, sp, #504	; 0x1f8
 800a244:	406b      	eors	r3, r5
 800a246:	e9c6 0100 	strd	r0, r1, [r6]
 800a24a:	a974      	add	r1, sp, #464	; 0x1d0
 800a24c:	4062      	eors	r2, r4
 800a24e:	e9c1 4500 	strd	r4, r5, [r1]
 800a252:	0059      	lsls	r1, r3, #1
 800a254:	ea41 71d2 	orr.w	r1, r1, r2, lsr #31
 800a258:	0052      	lsls	r2, r2, #1
 800a25a:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 800a25e:	926a      	str	r2, [sp, #424]	; 0x1a8
 800a260:	916b      	str	r1, [sp, #428]	; 0x1ac
 800a262:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800a264:	e9f3 0102 	ldrd	r0, r1, [r3, #8]!
 800a268:	9330      	str	r3, [sp, #192]	; 0xc0
 800a26a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a26e:	4050      	eors	r0, r2
 800a270:	4059      	eors	r1, r3
 800a272:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
 800a276:	404b      	eors	r3, r1
 800a278:	4042      	eors	r2, r0
 800a27a:	e9ec 2302 	strd	r2, r3, [ip, #8]!
 800a27e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800a280:	459c      	cmp	ip, r3
 800a282:	d1ee      	bne.n	800a262 <blake2b_compress_ref+0x36ea>
 800a284:	2000      	movs	r0, #0
 800a286:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 800a28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28e:	bf00      	nop

0800a290 <abort>:
 800a290:	b508      	push	{r3, lr}
 800a292:	2006      	movs	r0, #6
 800a294:	f000 fd8a 	bl	800adac <raise>
 800a298:	2001      	movs	r0, #1
 800a29a:	f003 fb01 	bl	800d8a0 <_exit>
 800a29e:	bf00      	nop

0800a2a0 <__assert_func>:
 800a2a0:	b500      	push	{lr}
 800a2a2:	4c0a      	ldr	r4, [pc, #40]	; (800a2cc <__assert_func+0x2c>)
 800a2a4:	6826      	ldr	r6, [r4, #0]
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	461c      	mov	r4, r3
 800a2ac:	68f0      	ldr	r0, [r6, #12]
 800a2ae:	b152      	cbz	r2, 800a2c6 <__assert_func+0x26>
 800a2b0:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <__assert_func+0x30>)
 800a2b2:	9100      	str	r1, [sp, #0]
 800a2b4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a2b8:	4906      	ldr	r1, [pc, #24]	; (800a2d4 <__assert_func+0x34>)
 800a2ba:	462b      	mov	r3, r5
 800a2bc:	4622      	mov	r2, r4
 800a2be:	f000 f861 	bl	800a384 <fiprintf>
 800a2c2:	f7ff ffe5 	bl	800a290 <abort>
 800a2c6:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <__assert_func+0x38>)
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	e7f2      	b.n	800a2b2 <__assert_func+0x12>
 800a2cc:	20000490 	.word	0x20000490
 800a2d0:	0800de08 	.word	0x0800de08
 800a2d4:	0800de18 	.word	0x0800de18
 800a2d8:	0800de14 	.word	0x0800de14

0800a2dc <__assert>:
 800a2dc:	b508      	push	{r3, lr}
 800a2de:	4613      	mov	r3, r2
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f7ff ffdd 	bl	800a2a0 <__assert_func>
 800a2e6:	bf00      	nop

0800a2e8 <calloc>:
 800a2e8:	4b02      	ldr	r3, [pc, #8]	; (800a2f4 <calloc+0xc>)
 800a2ea:	460a      	mov	r2, r1
 800a2ec:	4601      	mov	r1, r0
 800a2ee:	6818      	ldr	r0, [r3, #0]
 800a2f0:	f000 b802 	b.w	800a2f8 <_calloc_r>
 800a2f4:	20000490 	.word	0x20000490

0800a2f8 <_calloc_r>:
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	fb02 f101 	mul.w	r1, r2, r1
 800a2fe:	f000 f889 	bl	800a414 <_malloc_r>
 800a302:	4604      	mov	r4, r0
 800a304:	b168      	cbz	r0, 800a322 <_calloc_r+0x2a>
 800a306:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a30a:	f022 0203 	bic.w	r2, r2, #3
 800a30e:	3a04      	subs	r2, #4
 800a310:	2a24      	cmp	r2, #36	; 0x24
 800a312:	d818      	bhi.n	800a346 <_calloc_r+0x4e>
 800a314:	2a13      	cmp	r2, #19
 800a316:	d806      	bhi.n	800a326 <_calloc_r+0x2e>
 800a318:	4602      	mov	r2, r0
 800a31a:	2300      	movs	r3, #0
 800a31c:	e9c2 3300 	strd	r3, r3, [r2]
 800a320:	6093      	str	r3, [r2, #8]
 800a322:	4620      	mov	r0, r4
 800a324:	bd10      	pop	{r4, pc}
 800a326:	2300      	movs	r3, #0
 800a328:	2a1b      	cmp	r2, #27
 800a32a:	e9c0 3300 	strd	r3, r3, [r0]
 800a32e:	d90f      	bls.n	800a350 <_calloc_r+0x58>
 800a330:	2a24      	cmp	r2, #36	; 0x24
 800a332:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800a336:	bf12      	itee	ne
 800a338:	f100 0210 	addne.w	r2, r0, #16
 800a33c:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 800a340:	f100 0218 	addeq.w	r2, r0, #24
 800a344:	e7e9      	b.n	800a31a <_calloc_r+0x22>
 800a346:	2100      	movs	r1, #0
 800a348:	f000 fc18 	bl	800ab7c <memset>
 800a34c:	4620      	mov	r0, r4
 800a34e:	bd10      	pop	{r4, pc}
 800a350:	f100 0208 	add.w	r2, r0, #8
 800a354:	e7e1      	b.n	800a31a <_calloc_r+0x22>
 800a356:	bf00      	nop

0800a358 <__errno>:
 800a358:	4b01      	ldr	r3, [pc, #4]	; (800a360 <__errno+0x8>)
 800a35a:	6818      	ldr	r0, [r3, #0]
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	20000490 	.word	0x20000490

0800a364 <explicit_bzero>:
 800a364:	f001 bcf8 	b.w	800bd58 <bzero>

0800a368 <_fiprintf_r>:
 800a368:	b40c      	push	{r2, r3}
 800a36a:	b500      	push	{lr}
 800a36c:	b083      	sub	sp, #12
 800a36e:	ab04      	add	r3, sp, #16
 800a370:	f853 2b04 	ldr.w	r2, [r3], #4
 800a374:	9301      	str	r3, [sp, #4]
 800a376:	f000 fe4d 	bl	800b014 <_vfiprintf_r>
 800a37a:	b003      	add	sp, #12
 800a37c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a380:	b002      	add	sp, #8
 800a382:	4770      	bx	lr

0800a384 <fiprintf>:
 800a384:	b40e      	push	{r1, r2, r3}
 800a386:	b510      	push	{r4, lr}
 800a388:	b083      	sub	sp, #12
 800a38a:	ab05      	add	r3, sp, #20
 800a38c:	4c06      	ldr	r4, [pc, #24]	; (800a3a8 <fiprintf+0x24>)
 800a38e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	4601      	mov	r1, r0
 800a396:	6820      	ldr	r0, [r4, #0]
 800a398:	f000 fe3c 	bl	800b014 <_vfiprintf_r>
 800a39c:	b003      	add	sp, #12
 800a39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a2:	b003      	add	sp, #12
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	20000490 	.word	0x20000490

0800a3ac <__libc_init_array>:
 800a3ac:	b570      	push	{r4, r5, r6, lr}
 800a3ae:	4e0d      	ldr	r6, [pc, #52]	; (800a3e4 <__libc_init_array+0x38>)
 800a3b0:	4d0d      	ldr	r5, [pc, #52]	; (800a3e8 <__libc_init_array+0x3c>)
 800a3b2:	1b76      	subs	r6, r6, r5
 800a3b4:	10b6      	asrs	r6, r6, #2
 800a3b6:	d006      	beq.n	800a3c6 <__libc_init_array+0x1a>
 800a3b8:	2400      	movs	r4, #0
 800a3ba:	3401      	adds	r4, #1
 800a3bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3c0:	4798      	blx	r3
 800a3c2:	42a6      	cmp	r6, r4
 800a3c4:	d1f9      	bne.n	800a3ba <__libc_init_array+0xe>
 800a3c6:	4e09      	ldr	r6, [pc, #36]	; (800a3ec <__libc_init_array+0x40>)
 800a3c8:	4d09      	ldr	r5, [pc, #36]	; (800a3f0 <__libc_init_array+0x44>)
 800a3ca:	1b76      	subs	r6, r6, r5
 800a3cc:	f7fa f996 	bl	80046fc <_init>
 800a3d0:	10b6      	asrs	r6, r6, #2
 800a3d2:	d006      	beq.n	800a3e2 <__libc_init_array+0x36>
 800a3d4:	2400      	movs	r4, #0
 800a3d6:	3401      	adds	r4, #1
 800a3d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3dc:	4798      	blx	r3
 800a3de:	42a6      	cmp	r6, r4
 800a3e0:	d1f9      	bne.n	800a3d6 <__libc_init_array+0x2a>
 800a3e2:	bd70      	pop	{r4, r5, r6, pc}
 800a3e4:	20000e9c 	.word	0x20000e9c
 800a3e8:	20000e9c 	.word	0x20000e9c
 800a3ec:	20000e9c 	.word	0x20000e9c
 800a3f0:	20000e9c 	.word	0x20000e9c

0800a3f4 <malloc>:
 800a3f4:	4b02      	ldr	r3, [pc, #8]	; (800a400 <malloc+0xc>)
 800a3f6:	4601      	mov	r1, r0
 800a3f8:	6818      	ldr	r0, [r3, #0]
 800a3fa:	f000 b80b 	b.w	800a414 <_malloc_r>
 800a3fe:	bf00      	nop
 800a400:	20000490 	.word	0x20000490

0800a404 <free>:
 800a404:	4b02      	ldr	r3, [pc, #8]	; (800a410 <free+0xc>)
 800a406:	4601      	mov	r1, r0
 800a408:	6818      	ldr	r0, [r3, #0]
 800a40a:	f001 bf5d 	b.w	800c2c8 <_free_r>
 800a40e:	bf00      	nop
 800a410:	20000490 	.word	0x20000490

0800a414 <_malloc_r>:
 800a414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	f101 050b 	add.w	r5, r1, #11
 800a41c:	2d16      	cmp	r5, #22
 800a41e:	b083      	sub	sp, #12
 800a420:	4606      	mov	r6, r0
 800a422:	d823      	bhi.n	800a46c <_malloc_r+0x58>
 800a424:	2910      	cmp	r1, #16
 800a426:	f200 80b9 	bhi.w	800a59c <_malloc_r+0x188>
 800a42a:	f000 fbf7 	bl	800ac1c <__malloc_lock>
 800a42e:	2510      	movs	r5, #16
 800a430:	2318      	movs	r3, #24
 800a432:	2002      	movs	r0, #2
 800a434:	4fcd      	ldr	r7, [pc, #820]	; (800a76c <_malloc_r+0x358>)
 800a436:	443b      	add	r3, r7
 800a438:	f1a3 0208 	sub.w	r2, r3, #8
 800a43c:	685c      	ldr	r4, [r3, #4]
 800a43e:	4294      	cmp	r4, r2
 800a440:	f000 80b9 	beq.w	800a5b6 <_malloc_r+0x1a2>
 800a444:	6863      	ldr	r3, [r4, #4]
 800a446:	f023 0303 	bic.w	r3, r3, #3
 800a44a:	4423      	add	r3, r4
 800a44c:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 800a450:	685a      	ldr	r2, [r3, #4]
 800a452:	60e9      	str	r1, [r5, #12]
 800a454:	f042 0201 	orr.w	r2, r2, #1
 800a458:	4630      	mov	r0, r6
 800a45a:	608d      	str	r5, [r1, #8]
 800a45c:	605a      	str	r2, [r3, #4]
 800a45e:	f000 fbdf 	bl	800ac20 <__malloc_unlock>
 800a462:	3408      	adds	r4, #8
 800a464:	4620      	mov	r0, r4
 800a466:	b003      	add	sp, #12
 800a468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46c:	f035 0507 	bics.w	r5, r5, #7
 800a470:	f100 8094 	bmi.w	800a59c <_malloc_r+0x188>
 800a474:	42a9      	cmp	r1, r5
 800a476:	f200 8091 	bhi.w	800a59c <_malloc_r+0x188>
 800a47a:	f000 fbcf 	bl	800ac1c <__malloc_lock>
 800a47e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800a482:	f0c0 819d 	bcc.w	800a7c0 <_malloc_r+0x3ac>
 800a486:	0a6b      	lsrs	r3, r5, #9
 800a488:	f000 808f 	beq.w	800a5aa <_malloc_r+0x196>
 800a48c:	2b04      	cmp	r3, #4
 800a48e:	f200 8173 	bhi.w	800a778 <_malloc_r+0x364>
 800a492:	09ab      	lsrs	r3, r5, #6
 800a494:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800a498:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 800a49c:	00c3      	lsls	r3, r0, #3
 800a49e:	4fb3      	ldr	r7, [pc, #716]	; (800a76c <_malloc_r+0x358>)
 800a4a0:	443b      	add	r3, r7
 800a4a2:	f1a3 0108 	sub.w	r1, r3, #8
 800a4a6:	685c      	ldr	r4, [r3, #4]
 800a4a8:	42a1      	cmp	r1, r4
 800a4aa:	d106      	bne.n	800a4ba <_malloc_r+0xa6>
 800a4ac:	e00c      	b.n	800a4c8 <_malloc_r+0xb4>
 800a4ae:	2a00      	cmp	r2, #0
 800a4b0:	f280 812b 	bge.w	800a70a <_malloc_r+0x2f6>
 800a4b4:	68e4      	ldr	r4, [r4, #12]
 800a4b6:	42a1      	cmp	r1, r4
 800a4b8:	d006      	beq.n	800a4c8 <_malloc_r+0xb4>
 800a4ba:	6863      	ldr	r3, [r4, #4]
 800a4bc:	f023 0303 	bic.w	r3, r3, #3
 800a4c0:	1b5a      	subs	r2, r3, r5
 800a4c2:	2a0f      	cmp	r2, #15
 800a4c4:	ddf3      	ble.n	800a4ae <_malloc_r+0x9a>
 800a4c6:	4660      	mov	r0, ip
 800a4c8:	693c      	ldr	r4, [r7, #16]
 800a4ca:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 800a770 <_malloc_r+0x35c>
 800a4ce:	4564      	cmp	r4, ip
 800a4d0:	d07c      	beq.n	800a5cc <_malloc_r+0x1b8>
 800a4d2:	6863      	ldr	r3, [r4, #4]
 800a4d4:	f023 0303 	bic.w	r3, r3, #3
 800a4d8:	1b5a      	subs	r2, r3, r5
 800a4da:	2a0f      	cmp	r2, #15
 800a4dc:	f300 817e 	bgt.w	800a7dc <_malloc_r+0x3c8>
 800a4e0:	2a00      	cmp	r2, #0
 800a4e2:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 800a4e6:	f280 816f 	bge.w	800a7c8 <_malloc_r+0x3b4>
 800a4ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4ee:	f080 811a 	bcs.w	800a726 <_malloc_r+0x312>
 800a4f2:	08db      	lsrs	r3, r3, #3
 800a4f4:	1c59      	adds	r1, r3, #1
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 800a4fc:	f8c4 8008 	str.w	r8, [r4, #8]
 800a500:	f04f 0e01 	mov.w	lr, #1
 800a504:	109b      	asrs	r3, r3, #2
 800a506:	fa0e f303 	lsl.w	r3, lr, r3
 800a50a:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 800a50e:	4313      	orrs	r3, r2
 800a510:	f1ae 0208 	sub.w	r2, lr, #8
 800a514:	60e2      	str	r2, [r4, #12]
 800a516:	607b      	str	r3, [r7, #4]
 800a518:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 800a51c:	f8c8 400c 	str.w	r4, [r8, #12]
 800a520:	1082      	asrs	r2, r0, #2
 800a522:	2401      	movs	r4, #1
 800a524:	4094      	lsls	r4, r2
 800a526:	429c      	cmp	r4, r3
 800a528:	d856      	bhi.n	800a5d8 <_malloc_r+0x1c4>
 800a52a:	421c      	tst	r4, r3
 800a52c:	d106      	bne.n	800a53c <_malloc_r+0x128>
 800a52e:	f020 0003 	bic.w	r0, r0, #3
 800a532:	0064      	lsls	r4, r4, #1
 800a534:	421c      	tst	r4, r3
 800a536:	f100 0004 	add.w	r0, r0, #4
 800a53a:	d0fa      	beq.n	800a532 <_malloc_r+0x11e>
 800a53c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800a540:	46ce      	mov	lr, r9
 800a542:	4680      	mov	r8, r0
 800a544:	f8de 300c 	ldr.w	r3, [lr, #12]
 800a548:	459e      	cmp	lr, r3
 800a54a:	d107      	bne.n	800a55c <_malloc_r+0x148>
 800a54c:	e120      	b.n	800a790 <_malloc_r+0x37c>
 800a54e:	2a00      	cmp	r2, #0
 800a550:	f280 8127 	bge.w	800a7a2 <_malloc_r+0x38e>
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	459e      	cmp	lr, r3
 800a558:	f000 811a 	beq.w	800a790 <_malloc_r+0x37c>
 800a55c:	6859      	ldr	r1, [r3, #4]
 800a55e:	f021 0103 	bic.w	r1, r1, #3
 800a562:	1b4a      	subs	r2, r1, r5
 800a564:	2a0f      	cmp	r2, #15
 800a566:	ddf2      	ble.n	800a54e <_malloc_r+0x13a>
 800a568:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 800a56c:	195c      	adds	r4, r3, r5
 800a56e:	f045 0501 	orr.w	r5, r5, #1
 800a572:	605d      	str	r5, [r3, #4]
 800a574:	f042 0501 	orr.w	r5, r2, #1
 800a578:	f8c8 e00c 	str.w	lr, [r8, #12]
 800a57c:	4630      	mov	r0, r6
 800a57e:	f8ce 8008 	str.w	r8, [lr, #8]
 800a582:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800a586:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 800a58a:	6065      	str	r5, [r4, #4]
 800a58c:	505a      	str	r2, [r3, r1]
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	f000 fb46 	bl	800ac20 <__malloc_unlock>
 800a594:	9b00      	ldr	r3, [sp, #0]
 800a596:	f103 0408 	add.w	r4, r3, #8
 800a59a:	e002      	b.n	800a5a2 <_malloc_r+0x18e>
 800a59c:	230c      	movs	r3, #12
 800a59e:	6033      	str	r3, [r6, #0]
 800a5a0:	2400      	movs	r4, #0
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	b003      	add	sp, #12
 800a5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ae:	2040      	movs	r0, #64	; 0x40
 800a5b0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800a5b4:	e773      	b.n	800a49e <_malloc_r+0x8a>
 800a5b6:	68dc      	ldr	r4, [r3, #12]
 800a5b8:	42a3      	cmp	r3, r4
 800a5ba:	bf08      	it	eq
 800a5bc:	3002      	addeq	r0, #2
 800a5be:	f47f af41 	bne.w	800a444 <_malloc_r+0x30>
 800a5c2:	693c      	ldr	r4, [r7, #16]
 800a5c4:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800a770 <_malloc_r+0x35c>
 800a5c8:	4564      	cmp	r4, ip
 800a5ca:	d182      	bne.n	800a4d2 <_malloc_r+0xbe>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	1082      	asrs	r2, r0, #2
 800a5d0:	2401      	movs	r4, #1
 800a5d2:	4094      	lsls	r4, r2
 800a5d4:	429c      	cmp	r4, r3
 800a5d6:	d9a8      	bls.n	800a52a <_malloc_r+0x116>
 800a5d8:	68bc      	ldr	r4, [r7, #8]
 800a5da:	6863      	ldr	r3, [r4, #4]
 800a5dc:	f023 0803 	bic.w	r8, r3, #3
 800a5e0:	45a8      	cmp	r8, r5
 800a5e2:	d303      	bcc.n	800a5ec <_malloc_r+0x1d8>
 800a5e4:	eba8 0305 	sub.w	r3, r8, r5
 800a5e8:	2b0f      	cmp	r3, #15
 800a5ea:	dc7e      	bgt.n	800a6ea <_malloc_r+0x2d6>
 800a5ec:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800a774 <_malloc_r+0x360>
 800a5f0:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800a5f4:	f8d9 3000 	ldr.w	r3, [r9]
 800a5f8:	3201      	adds	r2, #1
 800a5fa:	eb04 0a08 	add.w	sl, r4, r8
 800a5fe:	442b      	add	r3, r5
 800a600:	f000 8137 	beq.w	800a872 <_malloc_r+0x45e>
 800a604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a608:	330f      	adds	r3, #15
 800a60a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 800a60e:	f02b 0b0f 	bic.w	fp, fp, #15
 800a612:	4659      	mov	r1, fp
 800a614:	4630      	mov	r0, r6
 800a616:	f000 fb2b 	bl	800ac70 <_sbrk_r>
 800a61a:	1c41      	adds	r1, r0, #1
 800a61c:	4602      	mov	r2, r0
 800a61e:	f000 80f7 	beq.w	800a810 <_malloc_r+0x3fc>
 800a622:	4582      	cmp	sl, r0
 800a624:	f200 80f2 	bhi.w	800a80c <_malloc_r+0x3f8>
 800a628:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a62c:	4459      	add	r1, fp
 800a62e:	f8c9 1004 	str.w	r1, [r9, #4]
 800a632:	460b      	mov	r3, r1
 800a634:	f000 8153 	beq.w	800a8de <_malloc_r+0x4ca>
 800a638:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 800a63c:	3101      	adds	r1, #1
 800a63e:	bf1b      	ittet	ne
 800a640:	eba2 0a0a 	subne.w	sl, r2, sl
 800a644:	4453      	addne	r3, sl
 800a646:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
 800a64a:	f8c9 3004 	strne.w	r3, [r9, #4]
 800a64e:	f012 0307 	ands.w	r3, r2, #7
 800a652:	f000 811a 	beq.w	800a88a <_malloc_r+0x476>
 800a656:	f1c3 0108 	rsb	r1, r3, #8
 800a65a:	440a      	add	r2, r1
 800a65c:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 800a660:	4493      	add	fp, r2
 800a662:	3108      	adds	r1, #8
 800a664:	eba1 010b 	sub.w	r1, r1, fp
 800a668:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 800a66c:	4651      	mov	r1, sl
 800a66e:	4630      	mov	r0, r6
 800a670:	9301      	str	r3, [sp, #4]
 800a672:	9200      	str	r2, [sp, #0]
 800a674:	f000 fafc 	bl	800ac70 <_sbrk_r>
 800a678:	1c42      	adds	r2, r0, #1
 800a67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a67e:	f000 8153 	beq.w	800a928 <_malloc_r+0x514>
 800a682:	1a83      	subs	r3, r0, r2
 800a684:	eb03 0b0a 	add.w	fp, r3, sl
 800a688:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a68c:	60ba      	str	r2, [r7, #8]
 800a68e:	f04b 0301 	orr.w	r3, fp, #1
 800a692:	4451      	add	r1, sl
 800a694:	42bc      	cmp	r4, r7
 800a696:	6053      	str	r3, [r2, #4]
 800a698:	f8c9 1004 	str.w	r1, [r9, #4]
 800a69c:	f000 812b 	beq.w	800a8f6 <_malloc_r+0x4e2>
 800a6a0:	f1b8 0f0f 	cmp.w	r8, #15
 800a6a4:	f240 8129 	bls.w	800a8fa <_malloc_r+0x4e6>
 800a6a8:	6863      	ldr	r3, [r4, #4]
 800a6aa:	f1a8 000c 	sub.w	r0, r8, #12
 800a6ae:	f020 0007 	bic.w	r0, r0, #7
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	eb04 0c00 	add.w	ip, r4, r0
 800a6ba:	4303      	orrs	r3, r0
 800a6bc:	f04f 0e05 	mov.w	lr, #5
 800a6c0:	280f      	cmp	r0, #15
 800a6c2:	6063      	str	r3, [r4, #4]
 800a6c4:	e9cc ee01 	strd	lr, lr, [ip, #4]
 800a6c8:	f200 8135 	bhi.w	800a936 <_malloc_r+0x522>
 800a6cc:	6853      	ldr	r3, [r2, #4]
 800a6ce:	4614      	mov	r4, r2
 800a6d0:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 800a6d4:	428a      	cmp	r2, r1
 800a6d6:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 800a6da:	bf38      	it	cc
 800a6dc:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
 800a6e0:	428a      	cmp	r2, r1
 800a6e2:	bf38      	it	cc
 800a6e4:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
 800a6e8:	e094      	b.n	800a814 <_malloc_r+0x400>
 800a6ea:	1962      	adds	r2, r4, r5
 800a6ec:	f043 0301 	orr.w	r3, r3, #1
 800a6f0:	f045 0501 	orr.w	r5, r5, #1
 800a6f4:	6065      	str	r5, [r4, #4]
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	60ba      	str	r2, [r7, #8]
 800a6fa:	6053      	str	r3, [r2, #4]
 800a6fc:	f000 fa90 	bl	800ac20 <__malloc_unlock>
 800a700:	3408      	adds	r4, #8
 800a702:	4620      	mov	r0, r4
 800a704:	b003      	add	sp, #12
 800a706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70a:	4423      	add	r3, r4
 800a70c:	68e1      	ldr	r1, [r4, #12]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	68a5      	ldr	r5, [r4, #8]
 800a712:	f042 0201 	orr.w	r2, r2, #1
 800a716:	60e9      	str	r1, [r5, #12]
 800a718:	4630      	mov	r0, r6
 800a71a:	608d      	str	r5, [r1, #8]
 800a71c:	605a      	str	r2, [r3, #4]
 800a71e:	f000 fa7f 	bl	800ac20 <__malloc_unlock>
 800a722:	3408      	adds	r4, #8
 800a724:	e73d      	b.n	800a5a2 <_malloc_r+0x18e>
 800a726:	0a5a      	lsrs	r2, r3, #9
 800a728:	2a04      	cmp	r2, #4
 800a72a:	d969      	bls.n	800a800 <_malloc_r+0x3ec>
 800a72c:	2a14      	cmp	r2, #20
 800a72e:	f200 80be 	bhi.w	800a8ae <_malloc_r+0x49a>
 800a732:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800a736:	00c9      	lsls	r1, r1, #3
 800a738:	325b      	adds	r2, #91	; 0x5b
 800a73a:	eb07 0e01 	add.w	lr, r7, r1
 800a73e:	5879      	ldr	r1, [r7, r1]
 800a740:	f1ae 0e08 	sub.w	lr, lr, #8
 800a744:	458e      	cmp	lr, r1
 800a746:	f000 8097 	beq.w	800a878 <_malloc_r+0x464>
 800a74a:	684a      	ldr	r2, [r1, #4]
 800a74c:	f022 0203 	bic.w	r2, r2, #3
 800a750:	429a      	cmp	r2, r3
 800a752:	d902      	bls.n	800a75a <_malloc_r+0x346>
 800a754:	6889      	ldr	r1, [r1, #8]
 800a756:	458e      	cmp	lr, r1
 800a758:	d1f7      	bne.n	800a74a <_malloc_r+0x336>
 800a75a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 800a764:	f8ce 4008 	str.w	r4, [lr, #8]
 800a768:	60cc      	str	r4, [r1, #12]
 800a76a:	e6d9      	b.n	800a520 <_malloc_r+0x10c>
 800a76c:	200008c0 	.word	0x200008c0
 800a770:	200008c8 	.word	0x200008c8
 800a774:	20000f4c 	.word	0x20000f4c
 800a778:	2b14      	cmp	r3, #20
 800a77a:	d959      	bls.n	800a830 <_malloc_r+0x41c>
 800a77c:	2b54      	cmp	r3, #84	; 0x54
 800a77e:	f200 809e 	bhi.w	800a8be <_malloc_r+0x4aa>
 800a782:	0b2b      	lsrs	r3, r5, #12
 800a784:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800a788:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 800a78c:	00c3      	lsls	r3, r0, #3
 800a78e:	e686      	b.n	800a49e <_malloc_r+0x8a>
 800a790:	f108 0801 	add.w	r8, r8, #1
 800a794:	f018 0f03 	tst.w	r8, #3
 800a798:	f10e 0e08 	add.w	lr, lr, #8
 800a79c:	f47f aed2 	bne.w	800a544 <_malloc_r+0x130>
 800a7a0:	e051      	b.n	800a846 <_malloc_r+0x432>
 800a7a2:	4419      	add	r1, r3
 800a7a4:	461c      	mov	r4, r3
 800a7a6:	684a      	ldr	r2, [r1, #4]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800a7ae:	f042 0201 	orr.w	r2, r2, #1
 800a7b2:	604a      	str	r2, [r1, #4]
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	60eb      	str	r3, [r5, #12]
 800a7b8:	609d      	str	r5, [r3, #8]
 800a7ba:	f000 fa31 	bl	800ac20 <__malloc_unlock>
 800a7be:	e6f0      	b.n	800a5a2 <_malloc_r+0x18e>
 800a7c0:	08e8      	lsrs	r0, r5, #3
 800a7c2:	f105 0308 	add.w	r3, r5, #8
 800a7c6:	e635      	b.n	800a434 <_malloc_r+0x20>
 800a7c8:	4423      	add	r3, r4
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	f042 0201 	orr.w	r2, r2, #1
 800a7d2:	605a      	str	r2, [r3, #4]
 800a7d4:	3408      	adds	r4, #8
 800a7d6:	f000 fa23 	bl	800ac20 <__malloc_unlock>
 800a7da:	e6e2      	b.n	800a5a2 <_malloc_r+0x18e>
 800a7dc:	1961      	adds	r1, r4, r5
 800a7de:	f045 0e01 	orr.w	lr, r5, #1
 800a7e2:	f042 0501 	orr.w	r5, r2, #1
 800a7e6:	f8c4 e004 	str.w	lr, [r4, #4]
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800a7f0:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800a7f4:	604d      	str	r5, [r1, #4]
 800a7f6:	50e2      	str	r2, [r4, r3]
 800a7f8:	f000 fa12 	bl	800ac20 <__malloc_unlock>
 800a7fc:	3408      	adds	r4, #8
 800a7fe:	e6d0      	b.n	800a5a2 <_malloc_r+0x18e>
 800a800:	099a      	lsrs	r2, r3, #6
 800a802:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800a806:	00c9      	lsls	r1, r1, #3
 800a808:	3238      	adds	r2, #56	; 0x38
 800a80a:	e796      	b.n	800a73a <_malloc_r+0x326>
 800a80c:	42bc      	cmp	r4, r7
 800a80e:	d060      	beq.n	800a8d2 <_malloc_r+0x4be>
 800a810:	68bc      	ldr	r4, [r7, #8]
 800a812:	6863      	ldr	r3, [r4, #4]
 800a814:	f023 0b03 	bic.w	fp, r3, #3
 800a818:	45ab      	cmp	fp, r5
 800a81a:	ebab 0305 	sub.w	r3, fp, r5
 800a81e:	d302      	bcc.n	800a826 <_malloc_r+0x412>
 800a820:	2b0f      	cmp	r3, #15
 800a822:	f73f af62 	bgt.w	800a6ea <_malloc_r+0x2d6>
 800a826:	4630      	mov	r0, r6
 800a828:	f000 f9fa 	bl	800ac20 <__malloc_unlock>
 800a82c:	2400      	movs	r4, #0
 800a82e:	e6b8      	b.n	800a5a2 <_malloc_r+0x18e>
 800a830:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800a834:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800a838:	00c3      	lsls	r3, r0, #3
 800a83a:	e630      	b.n	800a49e <_malloc_r+0x8a>
 800a83c:	f859 3908 	ldr.w	r3, [r9], #-8
 800a840:	454b      	cmp	r3, r9
 800a842:	f040 8096 	bne.w	800a972 <_malloc_r+0x55e>
 800a846:	f010 0f03 	tst.w	r0, #3
 800a84a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800a84e:	d1f5      	bne.n	800a83c <_malloc_r+0x428>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	ea23 0304 	bic.w	r3, r3, r4
 800a856:	607b      	str	r3, [r7, #4]
 800a858:	0064      	lsls	r4, r4, #1
 800a85a:	429c      	cmp	r4, r3
 800a85c:	f63f aebc 	bhi.w	800a5d8 <_malloc_r+0x1c4>
 800a860:	b91c      	cbnz	r4, 800a86a <_malloc_r+0x456>
 800a862:	e6b9      	b.n	800a5d8 <_malloc_r+0x1c4>
 800a864:	0064      	lsls	r4, r4, #1
 800a866:	f108 0804 	add.w	r8, r8, #4
 800a86a:	421c      	tst	r4, r3
 800a86c:	d0fa      	beq.n	800a864 <_malloc_r+0x450>
 800a86e:	4640      	mov	r0, r8
 800a870:	e664      	b.n	800a53c <_malloc_r+0x128>
 800a872:	f103 0b10 	add.w	fp, r3, #16
 800a876:	e6cc      	b.n	800a612 <_malloc_r+0x1fe>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	1092      	asrs	r2, r2, #2
 800a87c:	f04f 0801 	mov.w	r8, #1
 800a880:	fa08 f202 	lsl.w	r2, r8, r2
 800a884:	4313      	orrs	r3, r2
 800a886:	607b      	str	r3, [r7, #4]
 800a888:	e76a      	b.n	800a760 <_malloc_r+0x34c>
 800a88a:	eb02 010b 	add.w	r1, r2, fp
 800a88e:	4249      	negs	r1, r1
 800a890:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 800a894:	4651      	mov	r1, sl
 800a896:	4630      	mov	r0, r6
 800a898:	9301      	str	r3, [sp, #4]
 800a89a:	9200      	str	r2, [sp, #0]
 800a89c:	f000 f9e8 	bl	800ac70 <_sbrk_r>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8a6:	f47f aeec 	bne.w	800a682 <_malloc_r+0x26e>
 800a8aa:	469a      	mov	sl, r3
 800a8ac:	e6ec      	b.n	800a688 <_malloc_r+0x274>
 800a8ae:	2a54      	cmp	r2, #84	; 0x54
 800a8b0:	d826      	bhi.n	800a900 <_malloc_r+0x4ec>
 800a8b2:	0b1a      	lsrs	r2, r3, #12
 800a8b4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800a8b8:	00c9      	lsls	r1, r1, #3
 800a8ba:	326e      	adds	r2, #110	; 0x6e
 800a8bc:	e73d      	b.n	800a73a <_malloc_r+0x326>
 800a8be:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a8c2:	d826      	bhi.n	800a912 <_malloc_r+0x4fe>
 800a8c4:	0beb      	lsrs	r3, r5, #15
 800a8c6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800a8ca:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800a8ce:	00c3      	lsls	r3, r0, #3
 800a8d0:	e5e5      	b.n	800a49e <_malloc_r+0x8a>
 800a8d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a8d6:	445b      	add	r3, fp
 800a8d8:	f8c9 3004 	str.w	r3, [r9, #4]
 800a8dc:	e6ac      	b.n	800a638 <_malloc_r+0x224>
 800a8de:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	f47f aea8 	bne.w	800a638 <_malloc_r+0x224>
 800a8e8:	eb08 030b 	add.w	r3, r8, fp
 800a8ec:	68bc      	ldr	r4, [r7, #8]
 800a8ee:	f043 0301 	orr.w	r3, r3, #1
 800a8f2:	6063      	str	r3, [r4, #4]
 800a8f4:	e6ec      	b.n	800a6d0 <_malloc_r+0x2bc>
 800a8f6:	4614      	mov	r4, r2
 800a8f8:	e6ea      	b.n	800a6d0 <_malloc_r+0x2bc>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	6053      	str	r3, [r2, #4]
 800a8fe:	e792      	b.n	800a826 <_malloc_r+0x412>
 800a900:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a904:	d821      	bhi.n	800a94a <_malloc_r+0x536>
 800a906:	0bda      	lsrs	r2, r3, #15
 800a908:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800a90c:	00c9      	lsls	r1, r1, #3
 800a90e:	3277      	adds	r2, #119	; 0x77
 800a910:	e713      	b.n	800a73a <_malloc_r+0x326>
 800a912:	f240 5254 	movw	r2, #1364	; 0x554
 800a916:	4293      	cmp	r3, r2
 800a918:	d821      	bhi.n	800a95e <_malloc_r+0x54a>
 800a91a:	0cab      	lsrs	r3, r5, #18
 800a91c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800a920:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 800a924:	00c3      	lsls	r3, r0, #3
 800a926:	e5ba      	b.n	800a49e <_malloc_r+0x8a>
 800a928:	3b08      	subs	r3, #8
 800a92a:	449b      	add	fp, r3
 800a92c:	ebab 0b02 	sub.w	fp, fp, r2
 800a930:	f04f 0a00 	mov.w	sl, #0
 800a934:	e6a8      	b.n	800a688 <_malloc_r+0x274>
 800a936:	f104 0108 	add.w	r1, r4, #8
 800a93a:	4630      	mov	r0, r6
 800a93c:	f001 fcc4 	bl	800c2c8 <_free_r>
 800a940:	68bc      	ldr	r4, [r7, #8]
 800a942:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a946:	6863      	ldr	r3, [r4, #4]
 800a948:	e6c2      	b.n	800a6d0 <_malloc_r+0x2bc>
 800a94a:	f240 5154 	movw	r1, #1364	; 0x554
 800a94e:	428a      	cmp	r2, r1
 800a950:	d80b      	bhi.n	800a96a <_malloc_r+0x556>
 800a952:	0c9a      	lsrs	r2, r3, #18
 800a954:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800a958:	00c9      	lsls	r1, r1, #3
 800a95a:	327c      	adds	r2, #124	; 0x7c
 800a95c:	e6ed      	b.n	800a73a <_malloc_r+0x326>
 800a95e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800a962:	207f      	movs	r0, #127	; 0x7f
 800a964:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800a968:	e599      	b.n	800a49e <_malloc_r+0x8a>
 800a96a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800a96e:	227e      	movs	r2, #126	; 0x7e
 800a970:	e6e3      	b.n	800a73a <_malloc_r+0x326>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	e770      	b.n	800a858 <_malloc_r+0x444>
 800a976:	bf00      	nop

0800a978 <memcpy>:
 800a978:	4684      	mov	ip, r0
 800a97a:	ea41 0300 	orr.w	r3, r1, r0
 800a97e:	f013 0303 	ands.w	r3, r3, #3
 800a982:	d16d      	bne.n	800aa60 <memcpy+0xe8>
 800a984:	3a40      	subs	r2, #64	; 0x40
 800a986:	d341      	bcc.n	800aa0c <memcpy+0x94>
 800a988:	f851 3b04 	ldr.w	r3, [r1], #4
 800a98c:	f840 3b04 	str.w	r3, [r0], #4
 800a990:	f851 3b04 	ldr.w	r3, [r1], #4
 800a994:	f840 3b04 	str.w	r3, [r0], #4
 800a998:	f851 3b04 	ldr.w	r3, [r1], #4
 800a99c:	f840 3b04 	str.w	r3, [r0], #4
 800a9a0:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9a4:	f840 3b04 	str.w	r3, [r0], #4
 800a9a8:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9ac:	f840 3b04 	str.w	r3, [r0], #4
 800a9b0:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9b4:	f840 3b04 	str.w	r3, [r0], #4
 800a9b8:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9bc:	f840 3b04 	str.w	r3, [r0], #4
 800a9c0:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9c4:	f840 3b04 	str.w	r3, [r0], #4
 800a9c8:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9cc:	f840 3b04 	str.w	r3, [r0], #4
 800a9d0:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9d4:	f840 3b04 	str.w	r3, [r0], #4
 800a9d8:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9dc:	f840 3b04 	str.w	r3, [r0], #4
 800a9e0:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9e4:	f840 3b04 	str.w	r3, [r0], #4
 800a9e8:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9ec:	f840 3b04 	str.w	r3, [r0], #4
 800a9f0:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9f4:	f840 3b04 	str.w	r3, [r0], #4
 800a9f8:	f851 3b04 	ldr.w	r3, [r1], #4
 800a9fc:	f840 3b04 	str.w	r3, [r0], #4
 800aa00:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa04:	f840 3b04 	str.w	r3, [r0], #4
 800aa08:	3a40      	subs	r2, #64	; 0x40
 800aa0a:	d2bd      	bcs.n	800a988 <memcpy+0x10>
 800aa0c:	3230      	adds	r2, #48	; 0x30
 800aa0e:	d311      	bcc.n	800aa34 <memcpy+0xbc>
 800aa10:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa14:	f840 3b04 	str.w	r3, [r0], #4
 800aa18:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa1c:	f840 3b04 	str.w	r3, [r0], #4
 800aa20:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa24:	f840 3b04 	str.w	r3, [r0], #4
 800aa28:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa2c:	f840 3b04 	str.w	r3, [r0], #4
 800aa30:	3a10      	subs	r2, #16
 800aa32:	d2ed      	bcs.n	800aa10 <memcpy+0x98>
 800aa34:	320c      	adds	r2, #12
 800aa36:	d305      	bcc.n	800aa44 <memcpy+0xcc>
 800aa38:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa3c:	f840 3b04 	str.w	r3, [r0], #4
 800aa40:	3a04      	subs	r2, #4
 800aa42:	d2f9      	bcs.n	800aa38 <memcpy+0xc0>
 800aa44:	3204      	adds	r2, #4
 800aa46:	d008      	beq.n	800aa5a <memcpy+0xe2>
 800aa48:	07d2      	lsls	r2, r2, #31
 800aa4a:	bf1c      	itt	ne
 800aa4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800aa50:	f800 3b01 	strbne.w	r3, [r0], #1
 800aa54:	d301      	bcc.n	800aa5a <memcpy+0xe2>
 800aa56:	880b      	ldrh	r3, [r1, #0]
 800aa58:	8003      	strh	r3, [r0, #0]
 800aa5a:	4660      	mov	r0, ip
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	2a08      	cmp	r2, #8
 800aa62:	d313      	bcc.n	800aa8c <memcpy+0x114>
 800aa64:	078b      	lsls	r3, r1, #30
 800aa66:	d08d      	beq.n	800a984 <memcpy+0xc>
 800aa68:	f010 0303 	ands.w	r3, r0, #3
 800aa6c:	d08a      	beq.n	800a984 <memcpy+0xc>
 800aa6e:	f1c3 0304 	rsb	r3, r3, #4
 800aa72:	1ad2      	subs	r2, r2, r3
 800aa74:	07db      	lsls	r3, r3, #31
 800aa76:	bf1c      	itt	ne
 800aa78:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800aa7c:	f800 3b01 	strbne.w	r3, [r0], #1
 800aa80:	d380      	bcc.n	800a984 <memcpy+0xc>
 800aa82:	f831 3b02 	ldrh.w	r3, [r1], #2
 800aa86:	f820 3b02 	strh.w	r3, [r0], #2
 800aa8a:	e77b      	b.n	800a984 <memcpy+0xc>
 800aa8c:	3a04      	subs	r2, #4
 800aa8e:	d3d9      	bcc.n	800aa44 <memcpy+0xcc>
 800aa90:	3a01      	subs	r2, #1
 800aa92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa96:	f800 3b01 	strb.w	r3, [r0], #1
 800aa9a:	d2f9      	bcs.n	800aa90 <memcpy+0x118>
 800aa9c:	780b      	ldrb	r3, [r1, #0]
 800aa9e:	7003      	strb	r3, [r0, #0]
 800aaa0:	784b      	ldrb	r3, [r1, #1]
 800aaa2:	7043      	strb	r3, [r0, #1]
 800aaa4:	788b      	ldrb	r3, [r1, #2]
 800aaa6:	7083      	strb	r3, [r0, #2]
 800aaa8:	4660      	mov	r0, ip
 800aaaa:	4770      	bx	lr

0800aaac <memmove>:
 800aaac:	4288      	cmp	r0, r1
 800aaae:	b4f0      	push	{r4, r5, r6, r7}
 800aab0:	d90d      	bls.n	800aace <memmove+0x22>
 800aab2:	188b      	adds	r3, r1, r2
 800aab4:	4283      	cmp	r3, r0
 800aab6:	d90a      	bls.n	800aace <memmove+0x22>
 800aab8:	1884      	adds	r4, r0, r2
 800aaba:	b132      	cbz	r2, 800aaca <memmove+0x1e>
 800aabc:	4622      	mov	r2, r4
 800aabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aac6:	4299      	cmp	r1, r3
 800aac8:	d1f9      	bne.n	800aabe <memmove+0x12>
 800aaca:	bcf0      	pop	{r4, r5, r6, r7}
 800aacc:	4770      	bx	lr
 800aace:	2a0f      	cmp	r2, #15
 800aad0:	d80e      	bhi.n	800aaf0 <memmove+0x44>
 800aad2:	4603      	mov	r3, r0
 800aad4:	1e54      	subs	r4, r2, #1
 800aad6:	2a00      	cmp	r2, #0
 800aad8:	d0f7      	beq.n	800aaca <memmove+0x1e>
 800aada:	3401      	adds	r4, #1
 800aadc:	440c      	add	r4, r1
 800aade:	3b01      	subs	r3, #1
 800aae0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aae4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aae8:	42a1      	cmp	r1, r4
 800aaea:	d1f9      	bne.n	800aae0 <memmove+0x34>
 800aaec:	bcf0      	pop	{r4, r5, r6, r7}
 800aaee:	4770      	bx	lr
 800aaf0:	ea40 0301 	orr.w	r3, r0, r1
 800aaf4:	079b      	lsls	r3, r3, #30
 800aaf6:	d13b      	bne.n	800ab70 <memmove+0xc4>
 800aaf8:	f1a2 0710 	sub.w	r7, r2, #16
 800aafc:	093f      	lsrs	r7, r7, #4
 800aafe:	f101 0620 	add.w	r6, r1, #32
 800ab02:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800ab06:	f101 0310 	add.w	r3, r1, #16
 800ab0a:	f100 0410 	add.w	r4, r0, #16
 800ab0e:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800ab12:	f844 5c10 	str.w	r5, [r4, #-16]
 800ab16:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800ab1a:	f844 5c0c 	str.w	r5, [r4, #-12]
 800ab1e:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800ab22:	f844 5c08 	str.w	r5, [r4, #-8]
 800ab26:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800ab2a:	f844 5c04 	str.w	r5, [r4, #-4]
 800ab2e:	3310      	adds	r3, #16
 800ab30:	42b3      	cmp	r3, r6
 800ab32:	f104 0410 	add.w	r4, r4, #16
 800ab36:	d1ea      	bne.n	800ab0e <memmove+0x62>
 800ab38:	1c7b      	adds	r3, r7, #1
 800ab3a:	011b      	lsls	r3, r3, #4
 800ab3c:	f012 0f0c 	tst.w	r2, #12
 800ab40:	4419      	add	r1, r3
 800ab42:	f002 050f 	and.w	r5, r2, #15
 800ab46:	4403      	add	r3, r0
 800ab48:	d015      	beq.n	800ab76 <memmove+0xca>
 800ab4a:	3d04      	subs	r5, #4
 800ab4c:	08ad      	lsrs	r5, r5, #2
 800ab4e:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
 800ab52:	1f1c      	subs	r4, r3, #4
 800ab54:	460e      	mov	r6, r1
 800ab56:	f856 7b04 	ldr.w	r7, [r6], #4
 800ab5a:	f844 7f04 	str.w	r7, [r4, #4]!
 800ab5e:	4564      	cmp	r4, ip
 800ab60:	d1f9      	bne.n	800ab56 <memmove+0xaa>
 800ab62:	3501      	adds	r5, #1
 800ab64:	00ad      	lsls	r5, r5, #2
 800ab66:	442b      	add	r3, r5
 800ab68:	4429      	add	r1, r5
 800ab6a:	f002 0203 	and.w	r2, r2, #3
 800ab6e:	e7b1      	b.n	800aad4 <memmove+0x28>
 800ab70:	1e54      	subs	r4, r2, #1
 800ab72:	4603      	mov	r3, r0
 800ab74:	e7b1      	b.n	800aada <memmove+0x2e>
 800ab76:	462a      	mov	r2, r5
 800ab78:	e7ac      	b.n	800aad4 <memmove+0x28>
 800ab7a:	bf00      	nop

0800ab7c <memset>:
 800ab7c:	b4f0      	push	{r4, r5, r6, r7}
 800ab7e:	0786      	lsls	r6, r0, #30
 800ab80:	d046      	beq.n	800ac10 <memset+0x94>
 800ab82:	1e54      	subs	r4, r2, #1
 800ab84:	2a00      	cmp	r2, #0
 800ab86:	d03c      	beq.n	800ac02 <memset+0x86>
 800ab88:	b2ca      	uxtb	r2, r1
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	e002      	b.n	800ab94 <memset+0x18>
 800ab8e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800ab92:	d336      	bcc.n	800ac02 <memset+0x86>
 800ab94:	f803 2b01 	strb.w	r2, [r3], #1
 800ab98:	079d      	lsls	r5, r3, #30
 800ab9a:	d1f8      	bne.n	800ab8e <memset+0x12>
 800ab9c:	2c03      	cmp	r4, #3
 800ab9e:	d929      	bls.n	800abf4 <memset+0x78>
 800aba0:	b2cd      	uxtb	r5, r1
 800aba2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800aba6:	2c0f      	cmp	r4, #15
 800aba8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800abac:	d933      	bls.n	800ac16 <memset+0x9a>
 800abae:	f1a4 0610 	sub.w	r6, r4, #16
 800abb2:	0936      	lsrs	r6, r6, #4
 800abb4:	f103 0720 	add.w	r7, r3, #32
 800abb8:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 800abbc:	f103 0210 	add.w	r2, r3, #16
 800abc0:	e942 5504 	strd	r5, r5, [r2, #-16]
 800abc4:	e942 5502 	strd	r5, r5, [r2, #-8]
 800abc8:	3210      	adds	r2, #16
 800abca:	42ba      	cmp	r2, r7
 800abcc:	d1f8      	bne.n	800abc0 <memset+0x44>
 800abce:	1c72      	adds	r2, r6, #1
 800abd0:	f014 0f0c 	tst.w	r4, #12
 800abd4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800abd8:	f004 060f 	and.w	r6, r4, #15
 800abdc:	d013      	beq.n	800ac06 <memset+0x8a>
 800abde:	1f33      	subs	r3, r6, #4
 800abe0:	f023 0303 	bic.w	r3, r3, #3
 800abe4:	3304      	adds	r3, #4
 800abe6:	4413      	add	r3, r2
 800abe8:	f842 5b04 	str.w	r5, [r2], #4
 800abec:	4293      	cmp	r3, r2
 800abee:	d1fb      	bne.n	800abe8 <memset+0x6c>
 800abf0:	f006 0403 	and.w	r4, r6, #3
 800abf4:	b12c      	cbz	r4, 800ac02 <memset+0x86>
 800abf6:	b2c9      	uxtb	r1, r1
 800abf8:	441c      	add	r4, r3
 800abfa:	f803 1b01 	strb.w	r1, [r3], #1
 800abfe:	429c      	cmp	r4, r3
 800ac00:	d1fb      	bne.n	800abfa <memset+0x7e>
 800ac02:	bcf0      	pop	{r4, r5, r6, r7}
 800ac04:	4770      	bx	lr
 800ac06:	4634      	mov	r4, r6
 800ac08:	4613      	mov	r3, r2
 800ac0a:	2c00      	cmp	r4, #0
 800ac0c:	d1f3      	bne.n	800abf6 <memset+0x7a>
 800ac0e:	e7f8      	b.n	800ac02 <memset+0x86>
 800ac10:	4614      	mov	r4, r2
 800ac12:	4603      	mov	r3, r0
 800ac14:	e7c2      	b.n	800ab9c <memset+0x20>
 800ac16:	461a      	mov	r2, r3
 800ac18:	4626      	mov	r6, r4
 800ac1a:	e7e0      	b.n	800abde <memset+0x62>

0800ac1c <__malloc_lock>:
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop

0800ac20 <__malloc_unlock>:
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop

0800ac24 <srand>:
 800ac24:	4b02      	ldr	r3, [pc, #8]	; (800ac30 <srand+0xc>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	e9c3 022a 	strd	r0, r2, [r3, #168]	; 0xa8
 800ac2e:	4770      	bx	lr
 800ac30:	20000490 	.word	0x20000490

0800ac34 <rand>:
 800ac34:	4b0b      	ldr	r3, [pc, #44]	; (800ac64 <rand+0x30>)
 800ac36:	480c      	ldr	r0, [pc, #48]	; (800ac68 <rand+0x34>)
 800ac38:	6819      	ldr	r1, [r3, #0]
 800ac3a:	e9d1 232a 	ldrd	r2, r3, [r1, #168]	; 0xa8
 800ac3e:	b410      	push	{r4}
 800ac40:	4c0a      	ldr	r4, [pc, #40]	; (800ac6c <rand+0x38>)
 800ac42:	fb00 f002 	mul.w	r0, r0, r2
 800ac46:	fb04 0003 	mla	r0, r4, r3, r0
 800ac4a:	fba2 3404 	umull	r3, r4, r2, r4
 800ac4e:	4404      	add	r4, r0
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	f144 0000 	adc.w	r0, r4, #0
 800ac56:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
 800ac5a:	bc10      	pop	{r4}
 800ac5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	20000490 	.word	0x20000490
 800ac68:	5851f42d 	.word	0x5851f42d
 800ac6c:	4c957f2d 	.word	0x4c957f2d

0800ac70 <_sbrk_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4c07      	ldr	r4, [pc, #28]	; (800ac90 <_sbrk_r+0x20>)
 800ac74:	2300      	movs	r3, #0
 800ac76:	4605      	mov	r5, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	6023      	str	r3, [r4, #0]
 800ac7c:	f7f9 fd1c 	bl	80046b8 <_sbrk>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d000      	beq.n	800ac86 <_sbrk_r+0x16>
 800ac84:	bd38      	pop	{r3, r4, r5, pc}
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0fb      	beq.n	800ac84 <_sbrk_r+0x14>
 800ac8c:	602b      	str	r3, [r5, #0]
 800ac8e:	bd38      	pop	{r3, r4, r5, pc}
 800ac90:	2000161c 	.word	0x2000161c

0800ac94 <_init_signal_r.part.0>:
 800ac94:	b510      	push	{r4, lr}
 800ac96:	2180      	movs	r1, #128	; 0x80
 800ac98:	4604      	mov	r4, r0
 800ac9a:	f7ff fbbb 	bl	800a414 <_malloc_r>
 800ac9e:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 800aca2:	b140      	cbz	r0, 800acb6 <_init_signal_r.part.0+0x22>
 800aca4:	1f03      	subs	r3, r0, #4
 800aca6:	2200      	movs	r2, #0
 800aca8:	307c      	adds	r0, #124	; 0x7c
 800acaa:	f843 2f04 	str.w	r2, [r3, #4]!
 800acae:	4283      	cmp	r3, r0
 800acb0:	d1fb      	bne.n	800acaa <_init_signal_r.part.0+0x16>
 800acb2:	2000      	movs	r0, #0
 800acb4:	bd10      	pop	{r4, pc}
 800acb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acba:	bd10      	pop	{r4, pc}

0800acbc <_init_signal_r>:
 800acbc:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800acc0:	b10b      	cbz	r3, 800acc6 <_init_signal_r+0xa>
 800acc2:	2000      	movs	r0, #0
 800acc4:	4770      	bx	lr
 800acc6:	e7e5      	b.n	800ac94 <_init_signal_r.part.0>

0800acc8 <_signal_r>:
 800acc8:	291f      	cmp	r1, #31
 800acca:	b570      	push	{r4, r5, r6, lr}
 800accc:	4605      	mov	r5, r0
 800acce:	d809      	bhi.n	800ace4 <_signal_r+0x1c>
 800acd0:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800acd4:	4616      	mov	r6, r2
 800acd6:	460c      	mov	r4, r1
 800acd8:	b14b      	cbz	r3, 800acee <_signal_r+0x26>
 800acda:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800acde:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800ace2:	bd70      	pop	{r4, r5, r6, pc}
 800ace4:	2216      	movs	r2, #22
 800ace6:	6002      	str	r2, [r0, #0]
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acec:	bd70      	pop	{r4, r5, r6, pc}
 800acee:	f7ff ffd1 	bl	800ac94 <_init_signal_r.part.0>
 800acf2:	b910      	cbnz	r0, 800acfa <_signal_r+0x32>
 800acf4:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
 800acf8:	e7ef      	b.n	800acda <_signal_r+0x12>
 800acfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acfe:	bd70      	pop	{r4, r5, r6, pc}

0800ad00 <_raise_r>:
 800ad00:	291f      	cmp	r1, #31
 800ad02:	b538      	push	{r3, r4, r5, lr}
 800ad04:	d822      	bhi.n	800ad4c <_raise_r+0x4c>
 800ad06:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	b16a      	cbz	r2, 800ad2c <_raise_r+0x2c>
 800ad10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad14:	b153      	cbz	r3, 800ad2c <_raise_r+0x2c>
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d016      	beq.n	800ad48 <_raise_r+0x48>
 800ad1a:	1c59      	adds	r1, r3, #1
 800ad1c:	d010      	beq.n	800ad40 <_raise_r+0x40>
 800ad1e:	2500      	movs	r5, #0
 800ad20:	4620      	mov	r0, r4
 800ad22:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800ad26:	4798      	blx	r3
 800ad28:	4628      	mov	r0, r5
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	f000 f873 	bl	800ae18 <_getpid_r>
 800ad32:	4622      	mov	r2, r4
 800ad34:	4601      	mov	r1, r0
 800ad36:	4628      	mov	r0, r5
 800ad38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad3c:	f000 b858 	b.w	800adf0 <_kill_r>
 800ad40:	2316      	movs	r3, #22
 800ad42:	6003      	str	r3, [r0, #0]
 800ad44:	2001      	movs	r0, #1
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	2000      	movs	r0, #0
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	2316      	movs	r3, #22
 800ad4e:	6003      	str	r3, [r0, #0]
 800ad50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad54:	bd38      	pop	{r3, r4, r5, pc}
 800ad56:	bf00      	nop

0800ad58 <__sigtramp_r>:
 800ad58:	291f      	cmp	r1, #31
 800ad5a:	d823      	bhi.n	800ada4 <__sigtramp_r+0x4c>
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800ad62:	4605      	mov	r5, r0
 800ad64:	460c      	mov	r4, r1
 800ad66:	b183      	cbz	r3, 800ad8a <__sigtramp_r+0x32>
 800ad68:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800ad6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad70:	b14a      	cbz	r2, 800ad86 <__sigtramp_r+0x2e>
 800ad72:	1c51      	adds	r1, r2, #1
 800ad74:	d011      	beq.n	800ad9a <__sigtramp_r+0x42>
 800ad76:	2a01      	cmp	r2, #1
 800ad78:	d00d      	beq.n	800ad96 <__sigtramp_r+0x3e>
 800ad7a:	2500      	movs	r5, #0
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	601d      	str	r5, [r3, #0]
 800ad80:	4790      	blx	r2
 800ad82:	4628      	mov	r0, r5
 800ad84:	bd38      	pop	{r3, r4, r5, pc}
 800ad86:	2001      	movs	r0, #1
 800ad88:	bd38      	pop	{r3, r4, r5, pc}
 800ad8a:	f7ff ff83 	bl	800ac94 <_init_signal_r.part.0>
 800ad8e:	b930      	cbnz	r0, 800ad9e <__sigtramp_r+0x46>
 800ad90:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
 800ad94:	e7e8      	b.n	800ad68 <__sigtramp_r+0x10>
 800ad96:	2003      	movs	r0, #3
 800ad98:	bd38      	pop	{r3, r4, r5, pc}
 800ad9a:	2002      	movs	r0, #2
 800ad9c:	bd38      	pop	{r3, r4, r5, pc}
 800ad9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop

0800adac <raise>:
 800adac:	4b02      	ldr	r3, [pc, #8]	; (800adb8 <raise+0xc>)
 800adae:	4601      	mov	r1, r0
 800adb0:	6818      	ldr	r0, [r3, #0]
 800adb2:	f7ff bfa5 	b.w	800ad00 <_raise_r>
 800adb6:	bf00      	nop
 800adb8:	20000490 	.word	0x20000490

0800adbc <signal>:
 800adbc:	4b02      	ldr	r3, [pc, #8]	; (800adc8 <signal+0xc>)
 800adbe:	460a      	mov	r2, r1
 800adc0:	4601      	mov	r1, r0
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	f7ff bf80 	b.w	800acc8 <_signal_r>
 800adc8:	20000490 	.word	0x20000490

0800adcc <_init_signal>:
 800adcc:	4b03      	ldr	r3, [pc, #12]	; (800addc <_init_signal+0x10>)
 800adce:	6818      	ldr	r0, [r3, #0]
 800add0:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800add4:	b10b      	cbz	r3, 800adda <_init_signal+0xe>
 800add6:	2000      	movs	r0, #0
 800add8:	4770      	bx	lr
 800adda:	e75b      	b.n	800ac94 <_init_signal_r.part.0>
 800addc:	20000490 	.word	0x20000490

0800ade0 <__sigtramp>:
 800ade0:	4b02      	ldr	r3, [pc, #8]	; (800adec <__sigtramp+0xc>)
 800ade2:	4601      	mov	r1, r0
 800ade4:	6818      	ldr	r0, [r3, #0]
 800ade6:	f7ff bfb7 	b.w	800ad58 <__sigtramp_r>
 800adea:	bf00      	nop
 800adec:	20000490 	.word	0x20000490

0800adf0 <_kill_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	460b      	mov	r3, r1
 800adf4:	4c07      	ldr	r4, [pc, #28]	; (800ae14 <_kill_r+0x24>)
 800adf6:	4605      	mov	r5, r0
 800adf8:	4611      	mov	r1, r2
 800adfa:	4618      	mov	r0, r3
 800adfc:	2300      	movs	r3, #0
 800adfe:	6023      	str	r3, [r4, #0]
 800ae00:	f002 fd26 	bl	800d850 <_kill>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d000      	beq.n	800ae0a <_kill_r+0x1a>
 800ae08:	bd38      	pop	{r3, r4, r5, pc}
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0fb      	beq.n	800ae08 <_kill_r+0x18>
 800ae10:	602b      	str	r3, [r5, #0]
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
 800ae14:	2000161c 	.word	0x2000161c

0800ae18 <_getpid_r>:
 800ae18:	f002 bd0a 	b.w	800d830 <_getpid>
	...

0800ae40 <strlen>:
 800ae40:	f890 f000 	pld	[r0]
 800ae44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 800ae48:	f020 0107 	bic.w	r1, r0, #7
 800ae4c:	f06f 0c00 	mvn.w	ip, #0
 800ae50:	f010 0407 	ands.w	r4, r0, #7
 800ae54:	f891 f020 	pld	[r1, #32]
 800ae58:	f040 8049 	bne.w	800aeee <strlen+0xae>
 800ae5c:	f04f 0400 	mov.w	r4, #0
 800ae60:	f06f 0007 	mvn.w	r0, #7
 800ae64:	e9d1 2300 	ldrd	r2, r3, [r1]
 800ae68:	f891 f040 	pld	[r1, #64]	; 0x40
 800ae6c:	f100 0008 	add.w	r0, r0, #8
 800ae70:	fa82 f24c 	uadd8	r2, r2, ip
 800ae74:	faa4 f28c 	sel	r2, r4, ip
 800ae78:	fa83 f34c 	uadd8	r3, r3, ip
 800ae7c:	faa2 f38c 	sel	r3, r2, ip
 800ae80:	bb4b      	cbnz	r3, 800aed6 <strlen+0x96>
 800ae82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800ae86:	fa82 f24c 	uadd8	r2, r2, ip
 800ae8a:	f100 0008 	add.w	r0, r0, #8
 800ae8e:	faa4 f28c 	sel	r2, r4, ip
 800ae92:	fa83 f34c 	uadd8	r3, r3, ip
 800ae96:	faa2 f38c 	sel	r3, r2, ip
 800ae9a:	b9e3      	cbnz	r3, 800aed6 <strlen+0x96>
 800ae9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 800aea0:	fa82 f24c 	uadd8	r2, r2, ip
 800aea4:	f100 0008 	add.w	r0, r0, #8
 800aea8:	faa4 f28c 	sel	r2, r4, ip
 800aeac:	fa83 f34c 	uadd8	r3, r3, ip
 800aeb0:	faa2 f38c 	sel	r3, r2, ip
 800aeb4:	b97b      	cbnz	r3, 800aed6 <strlen+0x96>
 800aeb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800aeba:	f101 0120 	add.w	r1, r1, #32
 800aebe:	fa82 f24c 	uadd8	r2, r2, ip
 800aec2:	f100 0008 	add.w	r0, r0, #8
 800aec6:	faa4 f28c 	sel	r2, r4, ip
 800aeca:	fa83 f34c 	uadd8	r3, r3, ip
 800aece:	faa2 f38c 	sel	r3, r2, ip
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d0c6      	beq.n	800ae64 <strlen+0x24>
 800aed6:	2a00      	cmp	r2, #0
 800aed8:	bf04      	itt	eq
 800aeda:	3004      	addeq	r0, #4
 800aedc:	461a      	moveq	r2, r3
 800aede:	ba12      	rev	r2, r2
 800aee0:	fab2 f282 	clz	r2, r2
 800aee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 800aee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800aeec:	4770      	bx	lr
 800aeee:	e9d1 2300 	ldrd	r2, r3, [r1]
 800aef2:	f004 0503 	and.w	r5, r4, #3
 800aef6:	f1c4 0000 	rsb	r0, r4, #0
 800aefa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800aefe:	f014 0f04 	tst.w	r4, #4
 800af02:	f891 f040 	pld	[r1, #64]	; 0x40
 800af06:	fa0c f505 	lsl.w	r5, ip, r5
 800af0a:	ea62 0205 	orn	r2, r2, r5
 800af0e:	bf1c      	itt	ne
 800af10:	ea63 0305 	ornne	r3, r3, r5
 800af14:	4662      	movne	r2, ip
 800af16:	f04f 0400 	mov.w	r4, #0
 800af1a:	e7a9      	b.n	800ae70 <strlen+0x30>

0800af1c <close>:
 800af1c:	4b02      	ldr	r3, [pc, #8]	; (800af28 <close+0xc>)
 800af1e:	4601      	mov	r1, r0
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	f000 bf1d 	b.w	800bd60 <_close_r>
 800af26:	bf00      	nop
 800af28:	20000490 	.word	0x20000490

0800af2c <fcntl>:
 800af2c:	b508      	push	{r3, lr}
 800af2e:	f7ff fa13 	bl	800a358 <__errno>
 800af32:	2358      	movs	r3, #88	; 0x58
 800af34:	6003      	str	r3, [r0, #0]
 800af36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af3a:	bd08      	pop	{r3, pc}

0800af3c <fstat>:
 800af3c:	4b02      	ldr	r3, [pc, #8]	; (800af48 <fstat+0xc>)
 800af3e:	460a      	mov	r2, r1
 800af40:	4601      	mov	r1, r0
 800af42:	6818      	ldr	r0, [r3, #0]
 800af44:	f001 baba 	b.w	800c4bc <_fstat_r>
 800af48:	20000490 	.word	0x20000490

0800af4c <open>:
 800af4c:	b40e      	push	{r1, r2, r3}
 800af4e:	b510      	push	{r4, lr}
 800af50:	b083      	sub	sp, #12
 800af52:	a905      	add	r1, sp, #20
 800af54:	4c06      	ldr	r4, [pc, #24]	; (800af70 <open+0x24>)
 800af56:	f851 2b04 	ldr.w	r2, [r1], #4
 800af5a:	9101      	str	r1, [sp, #4]
 800af5c:	9b06      	ldr	r3, [sp, #24]
 800af5e:	4601      	mov	r1, r0
 800af60:	6820      	ldr	r0, [r4, #0]
 800af62:	f001 fdad 	bl	800cac0 <_open_r>
 800af66:	b003      	add	sp, #12
 800af68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af6c:	b003      	add	sp, #12
 800af6e:	4770      	bx	lr
 800af70:	20000490 	.word	0x20000490

0800af74 <read>:
 800af74:	b410      	push	{r4}
 800af76:	4c04      	ldr	r4, [pc, #16]	; (800af88 <read+0x14>)
 800af78:	4613      	mov	r3, r2
 800af7a:	460a      	mov	r2, r1
 800af7c:	4601      	mov	r1, r0
 800af7e:	6820      	ldr	r0, [r4, #0]
 800af80:	bc10      	pop	{r4}
 800af82:	f001 bdb3 	b.w	800caec <_read_r>
 800af86:	bf00      	nop
 800af88:	20000490 	.word	0x20000490

0800af8c <__sprint_r.part.0>:
 800af8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af90:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800af92:	049c      	lsls	r4, r3, #18
 800af94:	4693      	mov	fp, r2
 800af96:	d52d      	bpl.n	800aff4 <__sprint_r.part.0+0x68>
 800af98:	6893      	ldr	r3, [r2, #8]
 800af9a:	6812      	ldr	r2, [r2, #0]
 800af9c:	b343      	cbz	r3, 800aff0 <__sprint_r.part.0+0x64>
 800af9e:	460e      	mov	r6, r1
 800afa0:	4607      	mov	r7, r0
 800afa2:	f102 0908 	add.w	r9, r2, #8
 800afa6:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 800afaa:	ea5f 089a 	movs.w	r8, sl, lsr #2
 800afae:	d015      	beq.n	800afdc <__sprint_r.part.0+0x50>
 800afb0:	3d04      	subs	r5, #4
 800afb2:	2400      	movs	r4, #0
 800afb4:	e001      	b.n	800afba <__sprint_r.part.0+0x2e>
 800afb6:	45a0      	cmp	r8, r4
 800afb8:	d00e      	beq.n	800afd8 <__sprint_r.part.0+0x4c>
 800afba:	4632      	mov	r2, r6
 800afbc:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800afc0:	4638      	mov	r0, r7
 800afc2:	f001 f8ff 	bl	800c1c4 <_fputwc_r>
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	f104 0401 	add.w	r4, r4, #1
 800afcc:	d1f3      	bne.n	800afb6 <__sprint_r.part.0+0x2a>
 800afce:	2300      	movs	r3, #0
 800afd0:	e9cb 3301 	strd	r3, r3, [fp, #4]
 800afd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd8:	f8db 3008 	ldr.w	r3, [fp, #8]
 800afdc:	f02a 0a03 	bic.w	sl, sl, #3
 800afe0:	eba3 030a 	sub.w	r3, r3, sl
 800afe4:	f8cb 3008 	str.w	r3, [fp, #8]
 800afe8:	f109 0908 	add.w	r9, r9, #8
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1da      	bne.n	800afa6 <__sprint_r.part.0+0x1a>
 800aff0:	2000      	movs	r0, #0
 800aff2:	e7ec      	b.n	800afce <__sprint_r.part.0+0x42>
 800aff4:	f001 fa76 	bl	800c4e4 <__sfvwrite_r>
 800aff8:	2300      	movs	r3, #0
 800affa:	e9cb 3301 	strd	r3, r3, [fp, #4]
 800affe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b002:	bf00      	nop

0800b004 <__sprint_r>:
 800b004:	6893      	ldr	r3, [r2, #8]
 800b006:	b103      	cbz	r3, 800b00a <__sprint_r+0x6>
 800b008:	e7c0      	b.n	800af8c <__sprint_r.part.0>
 800b00a:	b410      	push	{r4}
 800b00c:	4618      	mov	r0, r3
 800b00e:	6053      	str	r3, [r2, #4]
 800b010:	bc10      	pop	{r4}
 800b012:	4770      	bx	lr

0800b014 <_vfiprintf_r>:
 800b014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b018:	b0ab      	sub	sp, #172	; 0xac
 800b01a:	461c      	mov	r4, r3
 800b01c:	468a      	mov	sl, r1
 800b01e:	4690      	mov	r8, r2
 800b020:	e9cd 3004 	strd	r3, r0, [sp, #16]
 800b024:	b118      	cbz	r0, 800b02e <_vfiprintf_r+0x1a>
 800b026:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 8300 	beq.w	800b62e <_vfiprintf_r+0x61a>
 800b02e:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
 800b032:	b28a      	uxth	r2, r1
 800b034:	0490      	lsls	r0, r2, #18
 800b036:	d40a      	bmi.n	800b04e <_vfiprintf_r+0x3a>
 800b038:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 800b03c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 800b040:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b044:	f8aa 200c 	strh.w	r2, [sl, #12]
 800b048:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 800b04c:	b292      	uxth	r2, r2
 800b04e:	0711      	lsls	r1, r2, #28
 800b050:	f140 80ca 	bpl.w	800b1e8 <_vfiprintf_r+0x1d4>
 800b054:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 80c5 	beq.w	800b1e8 <_vfiprintf_r+0x1d4>
 800b05e:	f002 021a 	and.w	r2, r2, #26
 800b062:	2a0a      	cmp	r2, #10
 800b064:	f000 80ce 	beq.w	800b204 <_vfiprintf_r+0x1f0>
 800b068:	2300      	movs	r3, #0
 800b06a:	9308      	str	r3, [sp, #32]
 800b06c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 800b070:	9302      	str	r3, [sp, #8]
 800b072:	ab1a      	add	r3, sp, #104	; 0x68
 800b074:	930d      	str	r3, [sp, #52]	; 0x34
 800b076:	469b      	mov	fp, r3
 800b078:	f898 3000 	ldrb.w	r3, [r8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 80df 	beq.w	800b240 <_vfiprintf_r+0x22c>
 800b082:	2b25      	cmp	r3, #37	; 0x25
 800b084:	f000 851c 	beq.w	800bac0 <_vfiprintf_r+0xaac>
 800b088:	4645      	mov	r5, r8
 800b08a:	e003      	b.n	800b094 <_vfiprintf_r+0x80>
 800b08c:	2b25      	cmp	r3, #37	; 0x25
 800b08e:	f000 80c6 	beq.w	800b21e <_vfiprintf_r+0x20a>
 800b092:	4625      	mov	r5, r4
 800b094:	786b      	ldrb	r3, [r5, #1]
 800b096:	1c6c      	adds	r4, r5, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1f7      	bne.n	800b08c <_vfiprintf_r+0x78>
 800b09c:	ebb4 0608 	subs.w	r6, r4, r8
 800b0a0:	f000 80ce 	beq.w	800b240 <_vfiprintf_r+0x22c>
 800b0a4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	4432      	add	r2, r6
 800b0ac:	2b07      	cmp	r3, #7
 800b0ae:	f8cb 8000 	str.w	r8, [fp]
 800b0b2:	f8cb 6004 	str.w	r6, [fp, #4]
 800b0b6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 800b0ba:	f300 80b5 	bgt.w	800b228 <_vfiprintf_r+0x214>
 800b0be:	f10b 0b08 	add.w	fp, fp, #8
 800b0c2:	9a02      	ldr	r2, [sp, #8]
 800b0c4:	786b      	ldrb	r3, [r5, #1]
 800b0c6:	4432      	add	r2, r6
 800b0c8:	9202      	str	r2, [sp, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f000 80b8 	beq.w	800b240 <_vfiprintf_r+0x22c>
 800b0d0:	f04f 0300 	mov.w	r3, #0
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800b0da:	7863      	ldrb	r3, [r4, #1]
 800b0dc:	9103      	str	r1, [sp, #12]
 800b0de:	4608      	mov	r0, r1
 800b0e0:	460f      	mov	r7, r1
 800b0e2:	f104 0801 	add.w	r8, r4, #1
 800b0e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b0ea:	f108 0801 	add.w	r8, r8, #1
 800b0ee:	f1a3 0220 	sub.w	r2, r3, #32
 800b0f2:	2a58      	cmp	r2, #88	; 0x58
 800b0f4:	f200 829e 	bhi.w	800b634 <_vfiprintf_r+0x620>
 800b0f8:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b0fc:	029c00f9 	.word	0x029c00f9
 800b100:	00f4029c 	.word	0x00f4029c
 800b104:	029c029c 	.word	0x029c029c
 800b108:	029c029c 	.word	0x029c029c
 800b10c:	029c029c 	.word	0x029c029c
 800b110:	00e400e9 	.word	0x00e400e9
 800b114:	00df029c 	.word	0x00df029c
 800b118:	029c00c6 	.word	0x029c00c6
 800b11c:	00b200c1 	.word	0x00b200c1
 800b120:	00b200b2 	.word	0x00b200b2
 800b124:	00b200b2 	.word	0x00b200b2
 800b128:	00b200b2 	.word	0x00b200b2
 800b12c:	00b200b2 	.word	0x00b200b2
 800b130:	029c029c 	.word	0x029c029c
 800b134:	029c029c 	.word	0x029c029c
 800b138:	029c029c 	.word	0x029c029c
 800b13c:	029c029c 	.word	0x029c029c
 800b140:	029c029c 	.word	0x029c029c
 800b144:	029c0228 	.word	0x029c0228
 800b148:	029c029c 	.word	0x029c029c
 800b14c:	029c029c 	.word	0x029c029c
 800b150:	029c029c 	.word	0x029c029c
 800b154:	029c029c 	.word	0x029c029c
 800b158:	0067029c 	.word	0x0067029c
 800b15c:	029c029c 	.word	0x029c029c
 800b160:	029c029c 	.word	0x029c029c
 800b164:	0059029c 	.word	0x0059029c
 800b168:	029c029c 	.word	0x029c029c
 800b16c:	029c0213 	.word	0x029c0213
 800b170:	029c029c 	.word	0x029c029c
 800b174:	029c029c 	.word	0x029c029c
 800b178:	029c029c 	.word	0x029c029c
 800b17c:	029c029c 	.word	0x029c029c
 800b180:	0184029c 	.word	0x0184029c
 800b184:	029c0157 	.word	0x029c0157
 800b188:	029c029c 	.word	0x029c029c
 800b18c:	01570152 	.word	0x01570152
 800b190:	029c029c 	.word	0x029c029c
 800b194:	029c0145 	.word	0x029c0145
 800b198:	0069026e 	.word	0x0069026e
 800b19c:	0140023f 	.word	0x0140023f
 800b1a0:	0120029c 	.word	0x0120029c
 800b1a4:	005b029c 	.word	0x005b029c
 800b1a8:	029c029c 	.word	0x029c029c
 800b1ac:	0101      	.short	0x0101
 800b1ae:	f047 0710 	orr.w	r7, r7, #16
 800b1b2:	06ba      	lsls	r2, r7, #26
 800b1b4:	9b04      	ldr	r3, [sp, #16]
 800b1b6:	f140 8227 	bpl.w	800b608 <_vfiprintf_r+0x5f4>
 800b1ba:	3307      	adds	r3, #7
 800b1bc:	f023 0307 	bic.w	r3, r3, #7
 800b1c0:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 800b1c4:	9304      	str	r3, [sp, #16]
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e1e5      	b.n	800b596 <_vfiprintf_r+0x582>
 800b1ca:	f047 0710 	orr.w	r7, r7, #16
 800b1ce:	f017 0320 	ands.w	r3, r7, #32
 800b1d2:	f000 8222 	beq.w	800b61a <_vfiprintf_r+0x606>
 800b1d6:	9b04      	ldr	r3, [sp, #16]
 800b1d8:	3307      	adds	r3, #7
 800b1da:	f023 0307 	bic.w	r3, r3, #7
 800b1de:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e1d6      	b.n	800b596 <_vfiprintf_r+0x582>
 800b1e8:	4651      	mov	r1, sl
 800b1ea:	9805      	ldr	r0, [sp, #20]
 800b1ec:	f000 fd4c 	bl	800bc88 <__swsetup_r>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	f040 84f4 	bne.w	800bbde <_vfiprintf_r+0xbca>
 800b1f6:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 800b1fa:	f002 021a 	and.w	r2, r2, #26
 800b1fe:	2a0a      	cmp	r2, #10
 800b200:	f47f af32 	bne.w	800b068 <_vfiprintf_r+0x54>
 800b204:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f6ff af2d 	blt.w	800b068 <_vfiprintf_r+0x54>
 800b20e:	4623      	mov	r3, r4
 800b210:	4642      	mov	r2, r8
 800b212:	4651      	mov	r1, sl
 800b214:	9805      	ldr	r0, [sp, #20]
 800b216:	f000 fd01 	bl	800bc1c <__sbprintf>
 800b21a:	9002      	str	r0, [sp, #8]
 800b21c:	e01c      	b.n	800b258 <_vfiprintf_r+0x244>
 800b21e:	ebb4 0608 	subs.w	r6, r4, r8
 800b222:	f43f af55 	beq.w	800b0d0 <_vfiprintf_r+0xbc>
 800b226:	e73d      	b.n	800b0a4 <_vfiprintf_r+0x90>
 800b228:	2a00      	cmp	r2, #0
 800b22a:	f000 840f 	beq.w	800ba4c <_vfiprintf_r+0xa38>
 800b22e:	aa0d      	add	r2, sp, #52	; 0x34
 800b230:	4651      	mov	r1, sl
 800b232:	9805      	ldr	r0, [sp, #20]
 800b234:	f7ff feaa 	bl	800af8c <__sprint_r.part.0>
 800b238:	b948      	cbnz	r0, 800b24e <_vfiprintf_r+0x23a>
 800b23a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800b23e:	e740      	b.n	800b0c2 <_vfiprintf_r+0xae>
 800b240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b242:	b123      	cbz	r3, 800b24e <_vfiprintf_r+0x23a>
 800b244:	9805      	ldr	r0, [sp, #20]
 800b246:	aa0d      	add	r2, sp, #52	; 0x34
 800b248:	4651      	mov	r1, sl
 800b24a:	f7ff fe9f 	bl	800af8c <__sprint_r.part.0>
 800b24e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800b252:	065b      	lsls	r3, r3, #25
 800b254:	f100 84c3 	bmi.w	800bbde <_vfiprintf_r+0xbca>
 800b258:	9802      	ldr	r0, [sp, #8]
 800b25a:	b02b      	add	sp, #172	; 0xac
 800b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b260:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b264:	2400      	movs	r4, #0
 800b266:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b26a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b26e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b272:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b276:	2a09      	cmp	r2, #9
 800b278:	d9f5      	bls.n	800b266 <_vfiprintf_r+0x252>
 800b27a:	9403      	str	r4, [sp, #12]
 800b27c:	e737      	b.n	800b0ee <_vfiprintf_r+0xda>
 800b27e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800b282:	f898 3000 	ldrb.w	r3, [r8]
 800b286:	e730      	b.n	800b0ea <_vfiprintf_r+0xd6>
 800b288:	4644      	mov	r4, r8
 800b28a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b28e:	2b2a      	cmp	r3, #42	; 0x2a
 800b290:	f000 84aa 	beq.w	800bbe8 <_vfiprintf_r+0xbd4>
 800b294:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b298:	2a09      	cmp	r2, #9
 800b29a:	46a0      	mov	r8, r4
 800b29c:	f04f 0900 	mov.w	r9, #0
 800b2a0:	f63f af25 	bhi.w	800b0ee <_vfiprintf_r+0xda>
 800b2a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b2a8:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800b2ac:	eb02 0949 	add.w	r9, r2, r9, lsl #1
 800b2b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b2b4:	2a09      	cmp	r2, #9
 800b2b6:	d9f5      	bls.n	800b2a4 <_vfiprintf_r+0x290>
 800b2b8:	e719      	b.n	800b0ee <_vfiprintf_r+0xda>
 800b2ba:	f898 3000 	ldrb.w	r3, [r8]
 800b2be:	f047 0704 	orr.w	r7, r7, #4
 800b2c2:	e712      	b.n	800b0ea <_vfiprintf_r+0xd6>
 800b2c4:	f898 3000 	ldrb.w	r3, [r8]
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	202b      	movs	r0, #43	; 0x2b
 800b2cc:	e70d      	b.n	800b0ea <_vfiprintf_r+0xd6>
 800b2ce:	9a04      	ldr	r2, [sp, #16]
 800b2d0:	f898 3000 	ldrb.w	r3, [r8]
 800b2d4:	f852 4b04 	ldr.w	r4, [r2], #4
 800b2d8:	9403      	str	r4, [sp, #12]
 800b2da:	2c00      	cmp	r4, #0
 800b2dc:	f2c0 8415 	blt.w	800bb0a <_vfiprintf_r+0xaf6>
 800b2e0:	9204      	str	r2, [sp, #16]
 800b2e2:	e702      	b.n	800b0ea <_vfiprintf_r+0xd6>
 800b2e4:	f047 0701 	orr.w	r7, r7, #1
 800b2e8:	f898 3000 	ldrb.w	r3, [r8]
 800b2ec:	e6fd      	b.n	800b0ea <_vfiprintf_r+0xd6>
 800b2ee:	f898 3000 	ldrb.w	r3, [r8]
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	f47f aef9 	bne.w	800b0ea <_vfiprintf_r+0xd6>
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	2020      	movs	r0, #32
 800b2fc:	e6f5      	b.n	800b0ea <_vfiprintf_r+0xd6>
 800b2fe:	2900      	cmp	r1, #0
 800b300:	f040 845b 	bne.w	800bbba <_vfiprintf_r+0xba6>
 800b304:	4abe      	ldr	r2, [pc, #760]	; (800b600 <_vfiprintf_r+0x5ec>)
 800b306:	9208      	str	r2, [sp, #32]
 800b308:	06b8      	lsls	r0, r7, #26
 800b30a:	9a04      	ldr	r2, [sp, #16]
 800b30c:	f140 8112 	bpl.w	800b534 <_vfiprintf_r+0x520>
 800b310:	3207      	adds	r2, #7
 800b312:	f022 0207 	bic.w	r2, r2, #7
 800b316:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 800b31a:	9204      	str	r2, [sp, #16]
 800b31c:	07fe      	lsls	r6, r7, #31
 800b31e:	f140 8199 	bpl.w	800b654 <_vfiprintf_r+0x640>
 800b322:	ea54 0205 	orrs.w	r2, r4, r5
 800b326:	f000 8195 	beq.w	800b654 <_vfiprintf_r+0x640>
 800b32a:	2230      	movs	r2, #48	; 0x30
 800b32c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800b330:	f047 0702 	orr.w	r7, r7, #2
 800b334:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800b338:	2302      	movs	r3, #2
 800b33a:	e12c      	b.n	800b596 <_vfiprintf_r+0x582>
 800b33c:	9c04      	ldr	r4, [sp, #16]
 800b33e:	f854 6b04 	ldr.w	r6, [r4], #4
 800b342:	f04f 0300 	mov.w	r3, #0
 800b346:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	f000 8407 	beq.w	800bb5e <_vfiprintf_r+0xb4a>
 800b350:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800b354:	f000 83de 	beq.w	800bb14 <_vfiprintf_r+0xb00>
 800b358:	464a      	mov	r2, r9
 800b35a:	2100      	movs	r1, #0
 800b35c:	4630      	mov	r0, r6
 800b35e:	f001 fb5f 	bl	800ca20 <memchr>
 800b362:	2800      	cmp	r0, #0
 800b364:	f000 8419 	beq.w	800bb9a <_vfiprintf_r+0xb86>
 800b368:	1b83      	subs	r3, r0, r6
 800b36a:	9301      	str	r3, [sp, #4]
 800b36c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800b370:	9404      	str	r4, [sp, #16]
 800b372:	9700      	str	r7, [sp, #0]
 800b374:	9306      	str	r3, [sp, #24]
 800b376:	f04f 0900 	mov.w	r9, #0
 800b37a:	e1b0      	b.n	800b6de <_vfiprintf_r+0x6ca>
 800b37c:	f047 0720 	orr.w	r7, r7, #32
 800b380:	f898 3000 	ldrb.w	r3, [r8]
 800b384:	e6b1      	b.n	800b0ea <_vfiprintf_r+0xd6>
 800b386:	f898 3000 	ldrb.w	r3, [r8]
 800b38a:	2b6c      	cmp	r3, #108	; 0x6c
 800b38c:	bf03      	ittte	eq
 800b38e:	f898 3001 	ldrbeq.w	r3, [r8, #1]
 800b392:	f047 0720 	orreq.w	r7, r7, #32
 800b396:	f108 0801 	addeq.w	r8, r8, #1
 800b39a:	f047 0710 	orrne.w	r7, r7, #16
 800b39e:	e6a4      	b.n	800b0ea <_vfiprintf_r+0xd6>
 800b3a0:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800b3a4:	f898 3000 	ldrb.w	r3, [r8]
 800b3a8:	e69f      	b.n	800b0ea <_vfiprintf_r+0xd6>
 800b3aa:	2900      	cmp	r1, #0
 800b3ac:	f040 8401 	bne.w	800bbb2 <_vfiprintf_r+0xb9e>
 800b3b0:	06ba      	lsls	r2, r7, #26
 800b3b2:	9b04      	ldr	r3, [sp, #16]
 800b3b4:	f140 80d3 	bpl.w	800b55e <_vfiprintf_r+0x54a>
 800b3b8:	3307      	adds	r3, #7
 800b3ba:	f023 0307 	bic.w	r3, r3, #7
 800b3be:	4619      	mov	r1, r3
 800b3c0:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b3c4:	9104      	str	r1, [sp, #16]
 800b3c6:	4614      	mov	r4, r2
 800b3c8:	461d      	mov	r5, r3
 800b3ca:	2a00      	cmp	r2, #0
 800b3cc:	f173 0300 	sbcs.w	r3, r3, #0
 800b3d0:	f2c0 8349 	blt.w	800ba66 <_vfiprintf_r+0xa52>
 800b3d4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800b3d8:	9306      	str	r3, [sp, #24]
 800b3da:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800b3de:	f000 8314 	beq.w	800ba0a <_vfiprintf_r+0x9f6>
 800b3e2:	f027 0380 	bic.w	r3, r7, #128	; 0x80
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	ea54 0305 	orrs.w	r3, r4, r5
 800b3ec:	f040 830c 	bne.w	800ba08 <_vfiprintf_r+0x9f4>
 800b3f0:	f1b9 0f00 	cmp.w	r9, #0
 800b3f4:	f040 83cf 	bne.w	800bb96 <_vfiprintf_r+0xb82>
 800b3f8:	f04f 0900 	mov.w	r9, #0
 800b3fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b400:	ae1a      	add	r6, sp, #104	; 0x68
 800b402:	e16c      	b.n	800b6de <_vfiprintf_r+0x6ca>
 800b404:	9b04      	ldr	r3, [sp, #16]
 800b406:	2501      	movs	r5, #1
 800b408:	f853 2b04 	ldr.w	r2, [r3], #4
 800b40c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 800b410:	f04f 0100 	mov.w	r1, #0
 800b414:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800b418:	9304      	str	r3, [sp, #16]
 800b41a:	9501      	str	r5, [sp, #4]
 800b41c:	ae10      	add	r6, sp, #64	; 0x40
 800b41e:	9700      	str	r7, [sp, #0]
 800b420:	f04f 0900 	mov.w	r9, #0
 800b424:	9b00      	ldr	r3, [sp, #0]
 800b426:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
 800b42a:	f013 0302 	ands.w	r3, r3, #2
 800b42e:	9306      	str	r3, [sp, #24]
 800b430:	9b00      	ldr	r3, [sp, #0]
 800b432:	bf18      	it	ne
 800b434:	3502      	addne	r5, #2
 800b436:	1c50      	adds	r0, r2, #1
 800b438:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800b43c:	4601      	mov	r1, r0
 800b43e:	9307      	str	r3, [sp, #28]
 800b440:	d104      	bne.n	800b44c <_vfiprintf_r+0x438>
 800b442:	9b03      	ldr	r3, [sp, #12]
 800b444:	1b5c      	subs	r4, r3, r5
 800b446:	2c00      	cmp	r4, #0
 800b448:	f300 8225 	bgt.w	800b896 <_vfiprintf_r+0x882>
 800b44c:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
 800b450:	f10b 0008 	add.w	r0, fp, #8
 800b454:	b17c      	cbz	r4, 800b476 <_vfiprintf_r+0x462>
 800b456:	f10c 0c01 	add.w	ip, ip, #1
 800b45a:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
 800b45e:	2201      	movs	r2, #1
 800b460:	2907      	cmp	r1, #7
 800b462:	e9cd 1c0e 	strd	r1, ip, [sp, #56]	; 0x38
 800b466:	e9cb 4200 	strd	r4, r2, [fp]
 800b46a:	f300 81f4 	bgt.w	800b856 <_vfiprintf_r+0x842>
 800b46e:	460a      	mov	r2, r1
 800b470:	4683      	mov	fp, r0
 800b472:	3101      	adds	r1, #1
 800b474:	3008      	adds	r0, #8
 800b476:	9b06      	ldr	r3, [sp, #24]
 800b478:	b1e3      	cbz	r3, 800b4b4 <_vfiprintf_r+0x4a0>
 800b47a:	f10c 0c02 	add.w	ip, ip, #2
 800b47e:	aa0c      	add	r2, sp, #48	; 0x30
 800b480:	2302      	movs	r3, #2
 800b482:	2907      	cmp	r1, #7
 800b484:	e9cd 1c0e 	strd	r1, ip, [sp, #56]	; 0x38
 800b488:	e9cb 2300 	strd	r2, r3, [fp]
 800b48c:	f340 81fd 	ble.w	800b88a <_vfiprintf_r+0x876>
 800b490:	f1bc 0f00 	cmp.w	ip, #0
 800b494:	f000 82fd 	beq.w	800ba92 <_vfiprintf_r+0xa7e>
 800b498:	aa0d      	add	r2, sp, #52	; 0x34
 800b49a:	4651      	mov	r1, sl
 800b49c:	9805      	ldr	r0, [sp, #20]
 800b49e:	f7ff fd75 	bl	800af8c <__sprint_r.part.0>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	f47f aed3 	bne.w	800b24e <_vfiprintf_r+0x23a>
 800b4a8:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
 800b4ac:	a81c      	add	r0, sp, #112	; 0x70
 800b4ae:	1c51      	adds	r1, r2, #1
 800b4b0:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800b4b4:	9b07      	ldr	r3, [sp, #28]
 800b4b6:	2b80      	cmp	r3, #128	; 0x80
 800b4b8:	f000 811c 	beq.w	800b6f4 <_vfiprintf_r+0x6e0>
 800b4bc:	9b01      	ldr	r3, [sp, #4]
 800b4be:	eba9 0703 	sub.w	r7, r9, r3
 800b4c2:	2f00      	cmp	r7, #0
 800b4c4:	f300 8173 	bgt.w	800b7ae <_vfiprintf_r+0x79a>
 800b4c8:	9a01      	ldr	r2, [sp, #4]
 800b4ca:	910e      	str	r1, [sp, #56]	; 0x38
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	4463      	add	r3, ip
 800b4d0:	2907      	cmp	r1, #7
 800b4d2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4d4:	e9cb 6200 	strd	r6, r2, [fp]
 800b4d8:	dd0c      	ble.n	800b4f4 <_vfiprintf_r+0x4e0>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 8224 	beq.w	800b928 <_vfiprintf_r+0x914>
 800b4e0:	aa0d      	add	r2, sp, #52	; 0x34
 800b4e2:	4651      	mov	r1, sl
 800b4e4:	9805      	ldr	r0, [sp, #20]
 800b4e6:	f7ff fd51 	bl	800af8c <__sprint_r.part.0>
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	f47f aeaf 	bne.w	800b24e <_vfiprintf_r+0x23a>
 800b4f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4f2:	a81a      	add	r0, sp, #104	; 0x68
 800b4f4:	9a00      	ldr	r2, [sp, #0]
 800b4f6:	0752      	lsls	r2, r2, #29
 800b4f8:	d504      	bpl.n	800b504 <_vfiprintf_r+0x4f0>
 800b4fa:	9a03      	ldr	r2, [sp, #12]
 800b4fc:	1b54      	subs	r4, r2, r5
 800b4fe:	2c00      	cmp	r4, #0
 800b500:	f300 821b 	bgt.w	800b93a <_vfiprintf_r+0x926>
 800b504:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b508:	42a9      	cmp	r1, r5
 800b50a:	bfac      	ite	ge
 800b50c:	1852      	addge	r2, r2, r1
 800b50e:	1952      	addlt	r2, r2, r5
 800b510:	9202      	str	r2, [sp, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	f040 8191 	bne.w	800b83a <_vfiprintf_r+0x826>
 800b518:	2300      	movs	r3, #0
 800b51a:	930e      	str	r3, [sp, #56]	; 0x38
 800b51c:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800b520:	e5aa      	b.n	800b078 <_vfiprintf_r+0x64>
 800b522:	2900      	cmp	r1, #0
 800b524:	f040 8352 	bne.w	800bbcc <_vfiprintf_r+0xbb8>
 800b528:	4a36      	ldr	r2, [pc, #216]	; (800b604 <_vfiprintf_r+0x5f0>)
 800b52a:	9208      	str	r2, [sp, #32]
 800b52c:	06b8      	lsls	r0, r7, #26
 800b52e:	9a04      	ldr	r2, [sp, #16]
 800b530:	f53f aeee 	bmi.w	800b310 <_vfiprintf_r+0x2fc>
 800b534:	f852 4b04 	ldr.w	r4, [r2], #4
 800b538:	9204      	str	r2, [sp, #16]
 800b53a:	06f9      	lsls	r1, r7, #27
 800b53c:	f100 829c 	bmi.w	800ba78 <_vfiprintf_r+0xa64>
 800b540:	067a      	lsls	r2, r7, #25
 800b542:	f140 8299 	bpl.w	800ba78 <_vfiprintf_r+0xa64>
 800b546:	b2a4      	uxth	r4, r4
 800b548:	2500      	movs	r5, #0
 800b54a:	e6e7      	b.n	800b31c <_vfiprintf_r+0x308>
 800b54c:	2900      	cmp	r1, #0
 800b54e:	f040 832d 	bne.w	800bbac <_vfiprintf_r+0xb98>
 800b552:	f047 0710 	orr.w	r7, r7, #16
 800b556:	06ba      	lsls	r2, r7, #26
 800b558:	9b04      	ldr	r3, [sp, #16]
 800b55a:	f53f af2d 	bmi.w	800b3b8 <_vfiprintf_r+0x3a4>
 800b55e:	f853 4b04 	ldr.w	r4, [r3], #4
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	06fe      	lsls	r6, r7, #27
 800b566:	f100 8276 	bmi.w	800ba56 <_vfiprintf_r+0xa42>
 800b56a:	067d      	lsls	r5, r7, #25
 800b56c:	f140 8273 	bpl.w	800ba56 <_vfiprintf_r+0xa42>
 800b570:	b224      	sxth	r4, r4
 800b572:	17e5      	asrs	r5, r4, #31
 800b574:	4622      	mov	r2, r4
 800b576:	462b      	mov	r3, r5
 800b578:	e727      	b.n	800b3ca <_vfiprintf_r+0x3b6>
 800b57a:	9b04      	ldr	r3, [sp, #16]
 800b57c:	f853 4b04 	ldr.w	r4, [r3], #4
 800b580:	9304      	str	r3, [sp, #16]
 800b582:	f647 0230 	movw	r2, #30768	; 0x7830
 800b586:	4b1e      	ldr	r3, [pc, #120]	; (800b600 <_vfiprintf_r+0x5ec>)
 800b588:	9308      	str	r3, [sp, #32]
 800b58a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800b58e:	f047 0702 	orr.w	r7, r7, #2
 800b592:	2500      	movs	r5, #0
 800b594:	2302      	movs	r3, #2
 800b596:	f04f 0200 	mov.w	r2, #0
 800b59a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 800b59e:	2200      	movs	r2, #0
 800b5a0:	9206      	str	r2, [sp, #24]
 800b5a2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800b5a6:	d058      	beq.n	800b65a <_vfiprintf_r+0x646>
 800b5a8:	f027 0280 	bic.w	r2, r7, #128	; 0x80
 800b5ac:	9200      	str	r2, [sp, #0]
 800b5ae:	ea54 0205 	orrs.w	r2, r4, r5
 800b5b2:	d151      	bne.n	800b658 <_vfiprintf_r+0x644>
 800b5b4:	f1b9 0f00 	cmp.w	r9, #0
 800b5b8:	f040 820a 	bne.w	800b9d0 <_vfiprintf_r+0x9bc>
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f47f af1b 	bne.w	800b3f8 <_vfiprintf_r+0x3e4>
 800b5c2:	f017 0301 	ands.w	r3, r7, #1
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	f000 827d 	beq.w	800bac6 <_vfiprintf_r+0xab2>
 800b5cc:	2330      	movs	r3, #48	; 0x30
 800b5ce:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800b5d2:	f10d 0667 	add.w	r6, sp, #103	; 0x67
 800b5d6:	e082      	b.n	800b6de <_vfiprintf_r+0x6ca>
 800b5d8:	2900      	cmp	r1, #0
 800b5da:	f040 82f2 	bne.w	800bbc2 <_vfiprintf_r+0xbae>
 800b5de:	9a04      	ldr	r2, [sp, #16]
 800b5e0:	06bc      	lsls	r4, r7, #26
 800b5e2:	f852 3b04 	ldr.w	r3, [r2], #4
 800b5e6:	9204      	str	r2, [sp, #16]
 800b5e8:	f100 8282 	bmi.w	800baf0 <_vfiprintf_r+0xadc>
 800b5ec:	06f8      	lsls	r0, r7, #27
 800b5ee:	f100 82aa 	bmi.w	800bb46 <_vfiprintf_r+0xb32>
 800b5f2:	0679      	lsls	r1, r7, #25
 800b5f4:	f140 82a7 	bpl.w	800bb46 <_vfiprintf_r+0xb32>
 800b5f8:	9a02      	ldr	r2, [sp, #8]
 800b5fa:	801a      	strh	r2, [r3, #0]
 800b5fc:	e53c      	b.n	800b078 <_vfiprintf_r+0x64>
 800b5fe:	bf00      	nop
 800b600:	0800de80 	.word	0x0800de80
 800b604:	0800de6c 	.word	0x0800de6c
 800b608:	f853 4b04 	ldr.w	r4, [r3], #4
 800b60c:	9304      	str	r3, [sp, #16]
 800b60e:	06fe      	lsls	r6, r7, #27
 800b610:	f140 8268 	bpl.w	800bae4 <_vfiprintf_r+0xad0>
 800b614:	2500      	movs	r5, #0
 800b616:	2301      	movs	r3, #1
 800b618:	e7bd      	b.n	800b596 <_vfiprintf_r+0x582>
 800b61a:	9a04      	ldr	r2, [sp, #16]
 800b61c:	f852 4b04 	ldr.w	r4, [r2], #4
 800b620:	9204      	str	r2, [sp, #16]
 800b622:	f017 0210 	ands.w	r2, r7, #16
 800b626:	f000 8256 	beq.w	800bad6 <_vfiprintf_r+0xac2>
 800b62a:	2500      	movs	r5, #0
 800b62c:	e7b3      	b.n	800b596 <_vfiprintf_r+0x582>
 800b62e:	f000 fd55 	bl	800c0dc <__sinit>
 800b632:	e4fc      	b.n	800b02e <_vfiprintf_r+0x1a>
 800b634:	2900      	cmp	r1, #0
 800b636:	f040 82ab 	bne.w	800bb90 <_vfiprintf_r+0xb7c>
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f43f ae00 	beq.w	800b240 <_vfiprintf_r+0x22c>
 800b640:	2501      	movs	r5, #1
 800b642:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800b646:	f04f 0300 	mov.w	r3, #0
 800b64a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800b64e:	9501      	str	r5, [sp, #4]
 800b650:	ae10      	add	r6, sp, #64	; 0x40
 800b652:	e6e4      	b.n	800b41e <_vfiprintf_r+0x40a>
 800b654:	2302      	movs	r3, #2
 800b656:	e79e      	b.n	800b596 <_vfiprintf_r+0x582>
 800b658:	9f00      	ldr	r7, [sp, #0]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	f000 81d5 	beq.w	800ba0a <_vfiprintf_r+0x9f6>
 800b660:	2b02      	cmp	r3, #2
 800b662:	f000 81bc 	beq.w	800b9de <_vfiprintf_r+0x9ca>
 800b666:	a91a      	add	r1, sp, #104	; 0x68
 800b668:	e000      	b.n	800b66c <_vfiprintf_r+0x658>
 800b66a:	4631      	mov	r1, r6
 800b66c:	08e2      	lsrs	r2, r4, #3
 800b66e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800b672:	08e8      	lsrs	r0, r5, #3
 800b674:	f004 0307 	and.w	r3, r4, #7
 800b678:	4605      	mov	r5, r0
 800b67a:	4614      	mov	r4, r2
 800b67c:	3330      	adds	r3, #48	; 0x30
 800b67e:	ea54 0205 	orrs.w	r2, r4, r5
 800b682:	f801 3c01 	strb.w	r3, [r1, #-1]
 800b686:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800b68a:	d1ee      	bne.n	800b66a <_vfiprintf_r+0x656>
 800b68c:	07f8      	lsls	r0, r7, #31
 800b68e:	d522      	bpl.n	800b6d6 <_vfiprintf_r+0x6c2>
 800b690:	2b30      	cmp	r3, #48	; 0x30
 800b692:	d020      	beq.n	800b6d6 <_vfiprintf_r+0x6c2>
 800b694:	2330      	movs	r3, #48	; 0x30
 800b696:	3902      	subs	r1, #2
 800b698:	f806 3c01 	strb.w	r3, [r6, #-1]
 800b69c:	ab1a      	add	r3, sp, #104	; 0x68
 800b69e:	1a5b      	subs	r3, r3, r1
 800b6a0:	9700      	str	r7, [sp, #0]
 800b6a2:	9301      	str	r3, [sp, #4]
 800b6a4:	460e      	mov	r6, r1
 800b6a6:	e01a      	b.n	800b6de <_vfiprintf_r+0x6ca>
 800b6a8:	ae1a      	add	r6, sp, #104	; 0x68
 800b6aa:	e001      	b.n	800b6b0 <_vfiprintf_r+0x69c>
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	460d      	mov	r5, r1
 800b6b0:	220a      	movs	r2, #10
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	f001 ff30 	bl	800d51c <__aeabi_uldivmod>
 800b6bc:	3230      	adds	r2, #48	; 0x30
 800b6be:	f806 2d01 	strb.w	r2, [r6, #-1]!
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	220a      	movs	r2, #10
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	f001 ff27 	bl	800d51c <__aeabi_uldivmod>
 800b6ce:	2d00      	cmp	r5, #0
 800b6d0:	bf08      	it	eq
 800b6d2:	2c0a      	cmpeq	r4, #10
 800b6d4:	d2ea      	bcs.n	800b6ac <_vfiprintf_r+0x698>
 800b6d6:	ab1a      	add	r3, sp, #104	; 0x68
 800b6d8:	1b9b      	subs	r3, r3, r6
 800b6da:	9700      	str	r7, [sp, #0]
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	9b01      	ldr	r3, [sp, #4]
 800b6e0:	454b      	cmp	r3, r9
 800b6e2:	bfb8      	it	lt
 800b6e4:	464b      	movlt	r3, r9
 800b6e6:	461d      	mov	r5, r3
 800b6e8:	9b06      	ldr	r3, [sp, #24]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f43f ae9a 	beq.w	800b424 <_vfiprintf_r+0x410>
 800b6f0:	3501      	adds	r5, #1
 800b6f2:	e697      	b.n	800b424 <_vfiprintf_r+0x410>
 800b6f4:	9b03      	ldr	r3, [sp, #12]
 800b6f6:	1b5f      	subs	r7, r3, r5
 800b6f8:	2f00      	cmp	r7, #0
 800b6fa:	f77f aedf 	ble.w	800b4bc <_vfiprintf_r+0x4a8>
 800b6fe:	2f10      	cmp	r7, #16
 800b700:	4cbf      	ldr	r4, [pc, #764]	; (800ba00 <_vfiprintf_r+0x9ec>)
 800b702:	f340 8269 	ble.w	800bbd8 <_vfiprintf_r+0xbc4>
 800b706:	4663      	mov	r3, ip
 800b708:	46dc      	mov	ip, fp
 800b70a:	46ab      	mov	fp, r5
 800b70c:	4625      	mov	r5, r4
 800b70e:	9c05      	ldr	r4, [sp, #20]
 800b710:	e006      	b.n	800b720 <_vfiprintf_r+0x70c>
 800b712:	1c90      	adds	r0, r2, #2
 800b714:	f10c 0c08 	add.w	ip, ip, #8
 800b718:	460a      	mov	r2, r1
 800b71a:	3f10      	subs	r7, #16
 800b71c:	2f10      	cmp	r7, #16
 800b71e:	dd1e      	ble.n	800b75e <_vfiprintf_r+0x74a>
 800b720:	1c51      	adds	r1, r2, #1
 800b722:	3310      	adds	r3, #16
 800b724:	2010      	movs	r0, #16
 800b726:	2907      	cmp	r1, #7
 800b728:	930f      	str	r3, [sp, #60]	; 0x3c
 800b72a:	f8cc 5000 	str.w	r5, [ip]
 800b72e:	f8cc 0004 	str.w	r0, [ip, #4]
 800b732:	910e      	str	r1, [sp, #56]	; 0x38
 800b734:	dded      	ble.n	800b712 <_vfiprintf_r+0x6fe>
 800b736:	aa0d      	add	r2, sp, #52	; 0x34
 800b738:	4651      	mov	r1, sl
 800b73a:	4620      	mov	r0, r4
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 8085 	beq.w	800b84c <_vfiprintf_r+0x838>
 800b742:	f7ff fc23 	bl	800af8c <__sprint_r.part.0>
 800b746:	2800      	cmp	r0, #0
 800b748:	f47f ad81 	bne.w	800b24e <_vfiprintf_r+0x23a>
 800b74c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b750:	3f10      	subs	r7, #16
 800b752:	2f10      	cmp	r7, #16
 800b754:	f102 0001 	add.w	r0, r2, #1
 800b758:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b75c:	dce0      	bgt.n	800b720 <_vfiprintf_r+0x70c>
 800b75e:	462c      	mov	r4, r5
 800b760:	465d      	mov	r5, fp
 800b762:	46e3      	mov	fp, ip
 800b764:	469c      	mov	ip, r3
 800b766:	f10b 0308 	add.w	r3, fp, #8
 800b76a:	44bc      	add	ip, r7
 800b76c:	2807      	cmp	r0, #7
 800b76e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800b772:	e9cb 4700 	strd	r4, r7, [fp]
 800b776:	900e      	str	r0, [sp, #56]	; 0x38
 800b778:	f340 81a7 	ble.w	800baca <_vfiprintf_r+0xab6>
 800b77c:	f1bc 0f00 	cmp.w	ip, #0
 800b780:	f000 81f7 	beq.w	800bb72 <_vfiprintf_r+0xb5e>
 800b784:	aa0d      	add	r2, sp, #52	; 0x34
 800b786:	4651      	mov	r1, sl
 800b788:	9805      	ldr	r0, [sp, #20]
 800b78a:	f7ff fbff 	bl	800af8c <__sprint_r.part.0>
 800b78e:	2800      	cmp	r0, #0
 800b790:	f47f ad5d 	bne.w	800b24e <_vfiprintf_r+0x23a>
 800b794:	9b01      	ldr	r3, [sp, #4]
 800b796:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
 800b79a:	eba9 0703 	sub.w	r7, r9, r3
 800b79e:	2f00      	cmp	r7, #0
 800b7a0:	f102 0101 	add.w	r1, r2, #1
 800b7a4:	a81c      	add	r0, sp, #112	; 0x70
 800b7a6:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800b7aa:	f77f ae8d 	ble.w	800b4c8 <_vfiprintf_r+0x4b4>
 800b7ae:	2f10      	cmp	r7, #16
 800b7b0:	4c93      	ldr	r4, [pc, #588]	; (800ba00 <_vfiprintf_r+0x9ec>)
 800b7b2:	f340 81dc 	ble.w	800bb6e <_vfiprintf_r+0xb5a>
 800b7b6:	4663      	mov	r3, ip
 800b7b8:	f04f 0910 	mov.w	r9, #16
 800b7bc:	46dc      	mov	ip, fp
 800b7be:	46ab      	mov	fp, r5
 800b7c0:	4625      	mov	r5, r4
 800b7c2:	9c05      	ldr	r4, [sp, #20]
 800b7c4:	e006      	b.n	800b7d4 <_vfiprintf_r+0x7c0>
 800b7c6:	1c91      	adds	r1, r2, #2
 800b7c8:	f10c 0c08 	add.w	ip, ip, #8
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	3f10      	subs	r7, #16
 800b7d0:	2f10      	cmp	r7, #16
 800b7d2:	dd19      	ble.n	800b808 <_vfiprintf_r+0x7f4>
 800b7d4:	1c50      	adds	r0, r2, #1
 800b7d6:	3310      	adds	r3, #16
 800b7d8:	2807      	cmp	r0, #7
 800b7da:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7dc:	e9cc 5900 	strd	r5, r9, [ip]
 800b7e0:	900e      	str	r0, [sp, #56]	; 0x38
 800b7e2:	ddf0      	ble.n	800b7c6 <_vfiprintf_r+0x7b2>
 800b7e4:	aa0d      	add	r2, sp, #52	; 0x34
 800b7e6:	4651      	mov	r1, sl
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	b30b      	cbz	r3, 800b830 <_vfiprintf_r+0x81c>
 800b7ec:	f7ff fbce 	bl	800af8c <__sprint_r.part.0>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	f47f ad2c 	bne.w	800b24e <_vfiprintf_r+0x23a>
 800b7f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b7fa:	3f10      	subs	r7, #16
 800b7fc:	2f10      	cmp	r7, #16
 800b7fe:	f102 0101 	add.w	r1, r2, #1
 800b802:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b806:	dce5      	bgt.n	800b7d4 <_vfiprintf_r+0x7c0>
 800b808:	462c      	mov	r4, r5
 800b80a:	465d      	mov	r5, fp
 800b80c:	46e3      	mov	fp, ip
 800b80e:	469c      	mov	ip, r3
 800b810:	f10b 0308 	add.w	r3, fp, #8
 800b814:	44bc      	add	ip, r7
 800b816:	2907      	cmp	r1, #7
 800b818:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800b81c:	e9cb 4700 	strd	r4, r7, [fp]
 800b820:	910e      	str	r1, [sp, #56]	; 0x38
 800b822:	f300 8100 	bgt.w	800ba26 <_vfiprintf_r+0xa12>
 800b826:	3101      	adds	r1, #1
 800b828:	f103 0008 	add.w	r0, r3, #8
 800b82c:	469b      	mov	fp, r3
 800b82e:	e64b      	b.n	800b4c8 <_vfiprintf_r+0x4b4>
 800b830:	2101      	movs	r1, #1
 800b832:	461a      	mov	r2, r3
 800b834:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b838:	e7c9      	b.n	800b7ce <_vfiprintf_r+0x7ba>
 800b83a:	aa0d      	add	r2, sp, #52	; 0x34
 800b83c:	4651      	mov	r1, sl
 800b83e:	9805      	ldr	r0, [sp, #20]
 800b840:	f7ff fba4 	bl	800af8c <__sprint_r.part.0>
 800b844:	2800      	cmp	r0, #0
 800b846:	f43f ae67 	beq.w	800b518 <_vfiprintf_r+0x504>
 800b84a:	e500      	b.n	800b24e <_vfiprintf_r+0x23a>
 800b84c:	2001      	movs	r0, #1
 800b84e:	461a      	mov	r2, r3
 800b850:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b854:	e761      	b.n	800b71a <_vfiprintf_r+0x706>
 800b856:	f1bc 0f00 	cmp.w	ip, #0
 800b85a:	f000 810f 	beq.w	800ba7c <_vfiprintf_r+0xa68>
 800b85e:	aa0d      	add	r2, sp, #52	; 0x34
 800b860:	4651      	mov	r1, sl
 800b862:	9805      	ldr	r0, [sp, #20]
 800b864:	f7ff fb92 	bl	800af8c <__sprint_r.part.0>
 800b868:	2800      	cmp	r0, #0
 800b86a:	f47f acf0 	bne.w	800b24e <_vfiprintf_r+0x23a>
 800b86e:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
 800b872:	a81c      	add	r0, sp, #112	; 0x70
 800b874:	1c51      	adds	r1, r2, #1
 800b876:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800b87a:	e5fc      	b.n	800b476 <_vfiprintf_r+0x462>
 800b87c:	2302      	movs	r3, #2
 800b87e:	aa0c      	add	r2, sp, #48	; 0x30
 800b880:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 800b884:	469c      	mov	ip, r3
 800b886:	a81c      	add	r0, sp, #112	; 0x70
 800b888:	2101      	movs	r1, #1
 800b88a:	4683      	mov	fp, r0
 800b88c:	460a      	mov	r2, r1
 800b88e:	1c51      	adds	r1, r2, #1
 800b890:	f10b 0008 	add.w	r0, fp, #8
 800b894:	e60e      	b.n	800b4b4 <_vfiprintf_r+0x4a0>
 800b896:	2c10      	cmp	r4, #16
 800b898:	4f5a      	ldr	r7, [pc, #360]	; (800ba04 <_vfiprintf_r+0x9f0>)
 800b89a:	f340 8195 	ble.w	800bbc8 <_vfiprintf_r+0xbb4>
 800b89e:	9609      	str	r6, [sp, #36]	; 0x24
 800b8a0:	4659      	mov	r1, fp
 800b8a2:	2310      	movs	r3, #16
 800b8a4:	46c3      	mov	fp, r8
 800b8a6:	4666      	mov	r6, ip
 800b8a8:	46a8      	mov	r8, r5
 800b8aa:	9d05      	ldr	r5, [sp, #20]
 800b8ac:	e007      	b.n	800b8be <_vfiprintf_r+0x8aa>
 800b8ae:	f102 0e02 	add.w	lr, r2, #2
 800b8b2:	3108      	adds	r1, #8
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	3c10      	subs	r4, #16
 800b8b8:	2c10      	cmp	r4, #16
 800b8ba:	dd1a      	ble.n	800b8f2 <_vfiprintf_r+0x8de>
 800b8bc:	1c50      	adds	r0, r2, #1
 800b8be:	3610      	adds	r6, #16
 800b8c0:	2807      	cmp	r0, #7
 800b8c2:	960f      	str	r6, [sp, #60]	; 0x3c
 800b8c4:	e9c1 7300 	strd	r7, r3, [r1]
 800b8c8:	900e      	str	r0, [sp, #56]	; 0x38
 800b8ca:	ddf0      	ble.n	800b8ae <_vfiprintf_r+0x89a>
 800b8cc:	aa0d      	add	r2, sp, #52	; 0x34
 800b8ce:	4651      	mov	r1, sl
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	b326      	cbz	r6, 800b91e <_vfiprintf_r+0x90a>
 800b8d4:	f7ff fb5a 	bl	800af8c <__sprint_r.part.0>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	f47f acb8 	bne.w	800b24e <_vfiprintf_r+0x23a>
 800b8de:	e9dd 260e 	ldrd	r2, r6, [sp, #56]	; 0x38
 800b8e2:	3c10      	subs	r4, #16
 800b8e4:	2c10      	cmp	r4, #16
 800b8e6:	f102 0e01 	add.w	lr, r2, #1
 800b8ea:	a91a      	add	r1, sp, #104	; 0x68
 800b8ec:	f04f 0310 	mov.w	r3, #16
 800b8f0:	dce4      	bgt.n	800b8bc <_vfiprintf_r+0x8a8>
 800b8f2:	46b4      	mov	ip, r6
 800b8f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b8f6:	4645      	mov	r5, r8
 800b8f8:	46d8      	mov	r8, fp
 800b8fa:	468b      	mov	fp, r1
 800b8fc:	44a4      	add	ip, r4
 800b8fe:	f1be 0f07 	cmp.w	lr, #7
 800b902:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800b906:	e9cb 7400 	strd	r7, r4, [fp]
 800b90a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800b90e:	f300 80c6 	bgt.w	800ba9e <_vfiprintf_r+0xa8a>
 800b912:	f10b 0b08 	add.w	fp, fp, #8
 800b916:	f10e 0101 	add.w	r1, lr, #1
 800b91a:	4672      	mov	r2, lr
 800b91c:	e596      	b.n	800b44c <_vfiprintf_r+0x438>
 800b91e:	4632      	mov	r2, r6
 800b920:	f04f 0e01 	mov.w	lr, #1
 800b924:	a91a      	add	r1, sp, #104	; 0x68
 800b926:	e7c6      	b.n	800b8b6 <_vfiprintf_r+0x8a2>
 800b928:	9a00      	ldr	r2, [sp, #0]
 800b92a:	930e      	str	r3, [sp, #56]	; 0x38
 800b92c:	0751      	lsls	r1, r2, #29
 800b92e:	d547      	bpl.n	800b9c0 <_vfiprintf_r+0x9ac>
 800b930:	9a03      	ldr	r2, [sp, #12]
 800b932:	1b54      	subs	r4, r2, r5
 800b934:	2c00      	cmp	r4, #0
 800b936:	dd43      	ble.n	800b9c0 <_vfiprintf_r+0x9ac>
 800b938:	a81a      	add	r0, sp, #104	; 0x68
 800b93a:	2c10      	cmp	r4, #16
 800b93c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b93e:	4f31      	ldr	r7, [pc, #196]	; (800ba04 <_vfiprintf_r+0x9f0>)
 800b940:	f340 8147 	ble.w	800bbd2 <_vfiprintf_r+0xbbe>
 800b944:	2610      	movs	r6, #16
 800b946:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b94a:	e006      	b.n	800b95a <_vfiprintf_r+0x946>
 800b94c:	f101 0c02 	add.w	ip, r1, #2
 800b950:	3008      	adds	r0, #8
 800b952:	4611      	mov	r1, r2
 800b954:	3c10      	subs	r4, #16
 800b956:	2c10      	cmp	r4, #16
 800b958:	dd18      	ble.n	800b98c <_vfiprintf_r+0x978>
 800b95a:	1c4a      	adds	r2, r1, #1
 800b95c:	3310      	adds	r3, #16
 800b95e:	2a07      	cmp	r2, #7
 800b960:	930f      	str	r3, [sp, #60]	; 0x3c
 800b962:	e9c0 7600 	strd	r7, r6, [r0]
 800b966:	920e      	str	r2, [sp, #56]	; 0x38
 800b968:	ddf0      	ble.n	800b94c <_vfiprintf_r+0x938>
 800b96a:	aa0d      	add	r2, sp, #52	; 0x34
 800b96c:	4651      	mov	r1, sl
 800b96e:	4648      	mov	r0, r9
 800b970:	b30b      	cbz	r3, 800b9b6 <_vfiprintf_r+0x9a2>
 800b972:	f7ff fb0b 	bl	800af8c <__sprint_r.part.0>
 800b976:	2800      	cmp	r0, #0
 800b978:	f47f ac69 	bne.w	800b24e <_vfiprintf_r+0x23a>
 800b97c:	e9dd 130e 	ldrd	r1, r3, [sp, #56]	; 0x38
 800b980:	3c10      	subs	r4, #16
 800b982:	2c10      	cmp	r4, #16
 800b984:	f101 0c01 	add.w	ip, r1, #1
 800b988:	a81a      	add	r0, sp, #104	; 0x68
 800b98a:	dce6      	bgt.n	800b95a <_vfiprintf_r+0x946>
 800b98c:	4423      	add	r3, r4
 800b98e:	f1bc 0f07 	cmp.w	ip, #7
 800b992:	930f      	str	r3, [sp, #60]	; 0x3c
 800b994:	e9c0 7400 	strd	r7, r4, [r0]
 800b998:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800b99c:	f77f adb2 	ble.w	800b504 <_vfiprintf_r+0x4f0>
 800b9a0:	b173      	cbz	r3, 800b9c0 <_vfiprintf_r+0x9ac>
 800b9a2:	aa0d      	add	r2, sp, #52	; 0x34
 800b9a4:	4651      	mov	r1, sl
 800b9a6:	9805      	ldr	r0, [sp, #20]
 800b9a8:	f7ff faf0 	bl	800af8c <__sprint_r.part.0>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	f47f ac4e 	bne.w	800b24e <_vfiprintf_r+0x23a>
 800b9b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9b4:	e5a6      	b.n	800b504 <_vfiprintf_r+0x4f0>
 800b9b6:	f04f 0c01 	mov.w	ip, #1
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	a81a      	add	r0, sp, #104	; 0x68
 800b9be:	e7c9      	b.n	800b954 <_vfiprintf_r+0x940>
 800b9c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b9c4:	42aa      	cmp	r2, r5
 800b9c6:	bfac      	ite	ge
 800b9c8:	189b      	addge	r3, r3, r2
 800b9ca:	195b      	addlt	r3, r3, r5
 800b9cc:	9302      	str	r3, [sp, #8]
 800b9ce:	e5a3      	b.n	800b518 <_vfiprintf_r+0x504>
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	f000 80e0 	beq.w	800bb96 <_vfiprintf_r+0xb82>
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	9f00      	ldr	r7, [sp, #0]
 800b9da:	f47f ae44 	bne.w	800b666 <_vfiprintf_r+0x652>
 800b9de:	9808      	ldr	r0, [sp, #32]
 800b9e0:	ae1a      	add	r6, sp, #104	; 0x68
 800b9e2:	0923      	lsrs	r3, r4, #4
 800b9e4:	f004 010f 	and.w	r1, r4, #15
 800b9e8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800b9ec:	092a      	lsrs	r2, r5, #4
 800b9ee:	461c      	mov	r4, r3
 800b9f0:	4615      	mov	r5, r2
 800b9f2:	5c43      	ldrb	r3, [r0, r1]
 800b9f4:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800b9f8:	ea54 0305 	orrs.w	r3, r4, r5
 800b9fc:	d1f1      	bne.n	800b9e2 <_vfiprintf_r+0x9ce>
 800b9fe:	e66a      	b.n	800b6d6 <_vfiprintf_r+0x6c2>
 800ba00:	0800de5c 	.word	0x0800de5c
 800ba04:	0800de4c 	.word	0x0800de4c
 800ba08:	9f00      	ldr	r7, [sp, #0]
 800ba0a:	2d00      	cmp	r5, #0
 800ba0c:	bf08      	it	eq
 800ba0e:	2c0a      	cmpeq	r4, #10
 800ba10:	f4bf ae4a 	bcs.w	800b6a8 <_vfiprintf_r+0x694>
 800ba14:	3430      	adds	r4, #48	; 0x30
 800ba16:	2301      	movs	r3, #1
 800ba18:	f88d 4067 	strb.w	r4, [sp, #103]	; 0x67
 800ba1c:	9700      	str	r7, [sp, #0]
 800ba1e:	9301      	str	r3, [sp, #4]
 800ba20:	f10d 0667 	add.w	r6, sp, #103	; 0x67
 800ba24:	e65b      	b.n	800b6de <_vfiprintf_r+0x6ca>
 800ba26:	f1bc 0f00 	cmp.w	ip, #0
 800ba2a:	f000 8090 	beq.w	800bb4e <_vfiprintf_r+0xb3a>
 800ba2e:	aa0d      	add	r2, sp, #52	; 0x34
 800ba30:	4651      	mov	r1, sl
 800ba32:	9805      	ldr	r0, [sp, #20]
 800ba34:	f7ff faaa 	bl	800af8c <__sprint_r.part.0>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	f47f ac08 	bne.w	800b24e <_vfiprintf_r+0x23a>
 800ba3e:	e9dd 1c0e 	ldrd	r1, ip, [sp, #56]	; 0x38
 800ba42:	a81c      	add	r0, sp, #112	; 0x70
 800ba44:	3101      	adds	r1, #1
 800ba46:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800ba4a:	e53d      	b.n	800b4c8 <_vfiprintf_r+0x4b4>
 800ba4c:	920e      	str	r2, [sp, #56]	; 0x38
 800ba4e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800ba52:	f7ff bb36 	b.w	800b0c2 <_vfiprintf_r+0xae>
 800ba56:	17e5      	asrs	r5, r4, #31
 800ba58:	4622      	mov	r2, r4
 800ba5a:	462b      	mov	r3, r5
 800ba5c:	2a00      	cmp	r2, #0
 800ba5e:	f173 0300 	sbcs.w	r3, r3, #0
 800ba62:	f6bf acb7 	bge.w	800b3d4 <_vfiprintf_r+0x3c0>
 800ba66:	232d      	movs	r3, #45	; 0x2d
 800ba68:	4264      	negs	r4, r4
 800ba6a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800ba6e:	9306      	str	r3, [sp, #24]
 800ba70:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ba74:	2301      	movs	r3, #1
 800ba76:	e594      	b.n	800b5a2 <_vfiprintf_r+0x58e>
 800ba78:	2500      	movs	r5, #0
 800ba7a:	e44f      	b.n	800b31c <_vfiprintf_r+0x308>
 800ba7c:	9b06      	ldr	r3, [sp, #24]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d03d      	beq.n	800bafe <_vfiprintf_r+0xaea>
 800ba82:	2302      	movs	r3, #2
 800ba84:	a90c      	add	r1, sp, #48	; 0x30
 800ba86:	e9cd 131a 	strd	r1, r3, [sp, #104]	; 0x68
 800ba8a:	469c      	mov	ip, r3
 800ba8c:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800ba90:	e6fd      	b.n	800b88e <_vfiprintf_r+0x87a>
 800ba92:	a81c      	add	r0, sp, #112	; 0x70
 800ba94:	2101      	movs	r1, #1
 800ba96:	4662      	mov	r2, ip
 800ba98:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800ba9c:	e50a      	b.n	800b4b4 <_vfiprintf_r+0x4a0>
 800ba9e:	f1bc 0f00 	cmp.w	ip, #0
 800baa2:	d043      	beq.n	800bb2c <_vfiprintf_r+0xb18>
 800baa4:	aa0d      	add	r2, sp, #52	; 0x34
 800baa6:	4651      	mov	r1, sl
 800baa8:	9805      	ldr	r0, [sp, #20]
 800baaa:	f7ff fa6f 	bl	800af8c <__sprint_r.part.0>
 800baae:	2800      	cmp	r0, #0
 800bab0:	f47f abcd 	bne.w	800b24e <_vfiprintf_r+0x23a>
 800bab4:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
 800bab8:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800babc:	1c51      	adds	r1, r2, #1
 800babe:	e4c5      	b.n	800b44c <_vfiprintf_r+0x438>
 800bac0:	4644      	mov	r4, r8
 800bac2:	f7ff bb05 	b.w	800b0d0 <_vfiprintf_r+0xbc>
 800bac6:	ae1a      	add	r6, sp, #104	; 0x68
 800bac8:	e609      	b.n	800b6de <_vfiprintf_r+0x6ca>
 800baca:	1c41      	adds	r1, r0, #1
 800bacc:	4602      	mov	r2, r0
 800bace:	469b      	mov	fp, r3
 800bad0:	f103 0008 	add.w	r0, r3, #8
 800bad4:	e4f2      	b.n	800b4bc <_vfiprintf_r+0x4a8>
 800bad6:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 800bada:	bf1c      	itt	ne
 800badc:	4613      	movne	r3, r2
 800bade:	b2a4      	uxthne	r4, r4
 800bae0:	2500      	movs	r5, #0
 800bae2:	e558      	b.n	800b596 <_vfiprintf_r+0x582>
 800bae4:	067d      	lsls	r5, r7, #25
 800bae6:	bf48      	it	mi
 800bae8:	b2a4      	uxthmi	r4, r4
 800baea:	2500      	movs	r5, #0
 800baec:	2301      	movs	r3, #1
 800baee:	e552      	b.n	800b596 <_vfiprintf_r+0x582>
 800baf0:	9a02      	ldr	r2, [sp, #8]
 800baf2:	4610      	mov	r0, r2
 800baf4:	17d1      	asrs	r1, r2, #31
 800baf6:	e9c3 0100 	strd	r0, r1, [r3]
 800bafa:	f7ff babd 	b.w	800b078 <_vfiprintf_r+0x64>
 800bafe:	4611      	mov	r1, r2
 800bb00:	a81c      	add	r0, sp, #112	; 0x70
 800bb02:	4662      	mov	r2, ip
 800bb04:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800bb08:	e4d4      	b.n	800b4b4 <_vfiprintf_r+0x4a0>
 800bb0a:	4264      	negs	r4, r4
 800bb0c:	e9cd 4203 	strd	r4, r2, [sp, #12]
 800bb10:	f7ff bbd5 	b.w	800b2be <_vfiprintf_r+0x2aa>
 800bb14:	4630      	mov	r0, r6
 800bb16:	9404      	str	r4, [sp, #16]
 800bb18:	9700      	str	r7, [sp, #0]
 800bb1a:	f7ff f991 	bl	800ae40 <strlen>
 800bb1e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800bb22:	9001      	str	r0, [sp, #4]
 800bb24:	9306      	str	r3, [sp, #24]
 800bb26:	f04f 0900 	mov.w	r9, #0
 800bb2a:	e5d8      	b.n	800b6de <_vfiprintf_r+0x6ca>
 800bb2c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800bb30:	bb2a      	cbnz	r2, 800bb7e <_vfiprintf_r+0xb6a>
 800bb32:	9b06      	ldr	r3, [sp, #24]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f47f aea1 	bne.w	800b87c <_vfiprintf_r+0x868>
 800bb3a:	4662      	mov	r2, ip
 800bb3c:	a81c      	add	r0, sp, #112	; 0x70
 800bb3e:	2101      	movs	r1, #1
 800bb40:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800bb44:	e4ba      	b.n	800b4bc <_vfiprintf_r+0x4a8>
 800bb46:	9a02      	ldr	r2, [sp, #8]
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	f7ff ba95 	b.w	800b078 <_vfiprintf_r+0x64>
 800bb4e:	9b01      	ldr	r3, [sp, #4]
 800bb50:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb52:	2201      	movs	r2, #1
 800bb54:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb56:	961a      	str	r6, [sp, #104]	; 0x68
 800bb58:	920e      	str	r2, [sp, #56]	; 0x38
 800bb5a:	a81c      	add	r0, sp, #112	; 0x70
 800bb5c:	e4ca      	b.n	800b4f4 <_vfiprintf_r+0x4e0>
 800bb5e:	464d      	mov	r5, r9
 800bb60:	2d06      	cmp	r5, #6
 800bb62:	bf28      	it	cs
 800bb64:	2506      	movcs	r5, #6
 800bb66:	9501      	str	r5, [sp, #4]
 800bb68:	9404      	str	r4, [sp, #16]
 800bb6a:	4e25      	ldr	r6, [pc, #148]	; (800bc00 <_vfiprintf_r+0xbec>)
 800bb6c:	e457      	b.n	800b41e <_vfiprintf_r+0x40a>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	e650      	b.n	800b814 <_vfiprintf_r+0x800>
 800bb72:	a81c      	add	r0, sp, #112	; 0x70
 800bb74:	2101      	movs	r1, #1
 800bb76:	4662      	mov	r2, ip
 800bb78:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800bb7c:	e49e      	b.n	800b4bc <_vfiprintf_r+0x4a8>
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 800bb84:	901a      	str	r0, [sp, #104]	; 0x68
 800bb86:	4694      	mov	ip, r2
 800bb88:	921b      	str	r2, [sp, #108]	; 0x6c
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	a81c      	add	r0, sp, #112	; 0x70
 800bb8e:	e46e      	b.n	800b46e <_vfiprintf_r+0x45a>
 800bb90:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800bb94:	e551      	b.n	800b63a <_vfiprintf_r+0x626>
 800bb96:	9f00      	ldr	r7, [sp, #0]
 800bb98:	e73c      	b.n	800ba14 <_vfiprintf_r+0xa00>
 800bb9a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800bb9e:	f8cd 9004 	str.w	r9, [sp, #4]
 800bba2:	9306      	str	r3, [sp, #24]
 800bba4:	9404      	str	r4, [sp, #16]
 800bba6:	9700      	str	r7, [sp, #0]
 800bba8:	4681      	mov	r9, r0
 800bbaa:	e598      	b.n	800b6de <_vfiprintf_r+0x6ca>
 800bbac:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800bbb0:	e4cf      	b.n	800b552 <_vfiprintf_r+0x53e>
 800bbb2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800bbb6:	f7ff bbfb 	b.w	800b3b0 <_vfiprintf_r+0x39c>
 800bbba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800bbbe:	f7ff bba1 	b.w	800b304 <_vfiprintf_r+0x2f0>
 800bbc2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800bbc6:	e50a      	b.n	800b5de <_vfiprintf_r+0x5ca>
 800bbc8:	4686      	mov	lr, r0
 800bbca:	e697      	b.n	800b8fc <_vfiprintf_r+0x8e8>
 800bbcc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800bbd0:	e4aa      	b.n	800b528 <_vfiprintf_r+0x514>
 800bbd2:	f101 0c01 	add.w	ip, r1, #1
 800bbd6:	e6d9      	b.n	800b98c <_vfiprintf_r+0x978>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	4608      	mov	r0, r1
 800bbdc:	e5c5      	b.n	800b76a <_vfiprintf_r+0x756>
 800bbde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbe2:	9302      	str	r3, [sp, #8]
 800bbe4:	f7ff bb38 	b.w	800b258 <_vfiprintf_r+0x244>
 800bbe8:	9d04      	ldr	r5, [sp, #16]
 800bbea:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bbee:	f855 2b04 	ldr.w	r2, [r5], #4
 800bbf2:	9504      	str	r5, [sp, #16]
 800bbf4:	46a0      	mov	r8, r4
 800bbf6:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 800bbfa:	f7ff ba76 	b.w	800b0ea <_vfiprintf_r+0xd6>
 800bbfe:	bf00      	nop
 800bc00:	0800de94 	.word	0x0800de94

0800bc04 <vfiprintf>:
 800bc04:	b410      	push	{r4}
 800bc06:	4c04      	ldr	r4, [pc, #16]	; (800bc18 <vfiprintf+0x14>)
 800bc08:	4613      	mov	r3, r2
 800bc0a:	460a      	mov	r2, r1
 800bc0c:	4601      	mov	r1, r0
 800bc0e:	6820      	ldr	r0, [r4, #0]
 800bc10:	bc10      	pop	{r4}
 800bc12:	f7ff b9ff 	b.w	800b014 <_vfiprintf_r>
 800bc16:	bf00      	nop
 800bc18:	20000490 	.word	0x20000490

0800bc1c <__sbprintf>:
 800bc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc1e:	460c      	mov	r4, r1
 800bc20:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800bc24:	8989      	ldrh	r1, [r1, #12]
 800bc26:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800bc28:	89e5      	ldrh	r5, [r4, #14]
 800bc2a:	9619      	str	r6, [sp, #100]	; 0x64
 800bc2c:	f021 0102 	bic.w	r1, r1, #2
 800bc30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc32:	f8ad 500e 	strh.w	r5, [sp, #14]
 800bc36:	2500      	movs	r5, #0
 800bc38:	69e7      	ldr	r7, [r4, #28]
 800bc3a:	f8ad 100c 	strh.w	r1, [sp, #12]
 800bc3e:	9609      	str	r6, [sp, #36]	; 0x24
 800bc40:	9506      	str	r5, [sp, #24]
 800bc42:	ae1a      	add	r6, sp, #104	; 0x68
 800bc44:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800bc48:	4669      	mov	r1, sp
 800bc4a:	9600      	str	r6, [sp, #0]
 800bc4c:	9604      	str	r6, [sp, #16]
 800bc4e:	9502      	str	r5, [sp, #8]
 800bc50:	9505      	str	r5, [sp, #20]
 800bc52:	9707      	str	r7, [sp, #28]
 800bc54:	4606      	mov	r6, r0
 800bc56:	f7ff f9dd 	bl	800b014 <_vfiprintf_r>
 800bc5a:	1e05      	subs	r5, r0, #0
 800bc5c:	db07      	blt.n	800bc6e <__sbprintf+0x52>
 800bc5e:	4630      	mov	r0, r6
 800bc60:	4669      	mov	r1, sp
 800bc62:	f000 f935 	bl	800bed0 <_fflush_r>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	bf18      	it	ne
 800bc6a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800bc6e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800bc72:	065b      	lsls	r3, r3, #25
 800bc74:	d503      	bpl.n	800bc7e <__sbprintf+0x62>
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc7c:	81a3      	strh	r3, [r4, #12]
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800bc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc86:	bf00      	nop

0800bc88 <__swsetup_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4b32      	ldr	r3, [pc, #200]	; (800bd54 <__swsetup_r+0xcc>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4605      	mov	r5, r0
 800bc90:	460c      	mov	r4, r1
 800bc92:	b10b      	cbz	r3, 800bc98 <__swsetup_r+0x10>
 800bc94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc96:	b312      	cbz	r2, 800bcde <__swsetup_r+0x56>
 800bc98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc9c:	b293      	uxth	r3, r2
 800bc9e:	0718      	lsls	r0, r3, #28
 800bca0:	d525      	bpl.n	800bcee <__swsetup_r+0x66>
 800bca2:	6920      	ldr	r0, [r4, #16]
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d02d      	beq.n	800bd04 <__swsetup_r+0x7c>
 800bca8:	f013 0201 	ands.w	r2, r3, #1
 800bcac:	d007      	beq.n	800bcbe <__swsetup_r+0x36>
 800bcae:	6963      	ldr	r3, [r4, #20]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	425b      	negs	r3, r3
 800bcb4:	61a3      	str	r3, [r4, #24]
 800bcb6:	60a2      	str	r2, [r4, #8]
 800bcb8:	b138      	cbz	r0, 800bcca <__swsetup_r+0x42>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	bd38      	pop	{r3, r4, r5, pc}
 800bcbe:	0799      	lsls	r1, r3, #30
 800bcc0:	bf58      	it	pl
 800bcc2:	6962      	ldrpl	r2, [r4, #20]
 800bcc4:	60a2      	str	r2, [r4, #8]
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d1f7      	bne.n	800bcba <__swsetup_r+0x32>
 800bcca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcce:	061a      	lsls	r2, r3, #24
 800bcd0:	d5f4      	bpl.n	800bcbc <__swsetup_r+0x34>
 800bcd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcd6:	81a3      	strh	r3, [r4, #12]
 800bcd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcdc:	bd38      	pop	{r3, r4, r5, pc}
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 f9fc 	bl	800c0dc <__sinit>
 800bce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bce8:	b293      	uxth	r3, r2
 800bcea:	0718      	lsls	r0, r3, #28
 800bcec:	d4d9      	bmi.n	800bca2 <__swsetup_r+0x1a>
 800bcee:	06d9      	lsls	r1, r3, #27
 800bcf0:	d528      	bpl.n	800bd44 <__swsetup_r+0xbc>
 800bcf2:	0758      	lsls	r0, r3, #29
 800bcf4:	d412      	bmi.n	800bd1c <__swsetup_r+0x94>
 800bcf6:	6920      	ldr	r0, [r4, #16]
 800bcf8:	f042 0308 	orr.w	r3, r2, #8
 800bcfc:	81a3      	strh	r3, [r4, #12]
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d1d1      	bne.n	800bca8 <__swsetup_r+0x20>
 800bd04:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800bd08:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800bd0c:	d0cc      	beq.n	800bca8 <__swsetup_r+0x20>
 800bd0e:	4628      	mov	r0, r5
 800bd10:	4621      	mov	r1, r4
 800bd12:	f000 fe17 	bl	800c944 <__smakebuf_r>
 800bd16:	89a3      	ldrh	r3, [r4, #12]
 800bd18:	6920      	ldr	r0, [r4, #16]
 800bd1a:	e7c5      	b.n	800bca8 <__swsetup_r+0x20>
 800bd1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bd1e:	b151      	cbz	r1, 800bd36 <__swsetup_r+0xae>
 800bd20:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bd24:	4299      	cmp	r1, r3
 800bd26:	d004      	beq.n	800bd32 <__swsetup_r+0xaa>
 800bd28:	4628      	mov	r0, r5
 800bd2a:	f000 facd 	bl	800c2c8 <_free_r>
 800bd2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd32:	2300      	movs	r3, #0
 800bd34:	6323      	str	r3, [r4, #48]	; 0x30
 800bd36:	2300      	movs	r3, #0
 800bd38:	6920      	ldr	r0, [r4, #16]
 800bd3a:	6063      	str	r3, [r4, #4]
 800bd3c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800bd40:	6020      	str	r0, [r4, #0]
 800bd42:	e7d9      	b.n	800bcf8 <__swsetup_r+0x70>
 800bd44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd48:	2309      	movs	r3, #9
 800bd4a:	602b      	str	r3, [r5, #0]
 800bd4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd50:	81a2      	strh	r2, [r4, #12]
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	20000490 	.word	0x20000490

0800bd58 <bzero>:
 800bd58:	460a      	mov	r2, r1
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	f7fe bf0e 	b.w	800ab7c <memset>

0800bd60 <_close_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4c07      	ldr	r4, [pc, #28]	; (800bd80 <_close_r+0x20>)
 800bd64:	2300      	movs	r3, #0
 800bd66:	4605      	mov	r5, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	6023      	str	r3, [r4, #0]
 800bd6c:	f001 fd50 	bl	800d810 <_close>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d000      	beq.n	800bd76 <_close_r+0x16>
 800bd74:	bd38      	pop	{r3, r4, r5, pc}
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d0fb      	beq.n	800bd74 <_close_r+0x14>
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	2000161c 	.word	0x2000161c

0800bd84 <__sflush_r>:
 800bd84:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd8e:	460c      	mov	r4, r1
 800bd90:	0711      	lsls	r1, r2, #28
 800bd92:	4680      	mov	r8, r0
 800bd94:	d448      	bmi.n	800be28 <__sflush_r+0xa4>
 800bd96:	6862      	ldr	r2, [r4, #4]
 800bd98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bd9c:	2a00      	cmp	r2, #0
 800bd9e:	81a3      	strh	r3, [r4, #12]
 800bda0:	dd5d      	ble.n	800be5e <__sflush_r+0xda>
 800bda2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800bda4:	2d00      	cmp	r5, #0
 800bda6:	d057      	beq.n	800be58 <__sflush_r+0xd4>
 800bda8:	2200      	movs	r2, #0
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	f8d8 6000 	ldr.w	r6, [r8]
 800bdb0:	69e1      	ldr	r1, [r4, #28]
 800bdb2:	f8c8 2000 	str.w	r2, [r8]
 800bdb6:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 800bdba:	d154      	bne.n	800be66 <__sflush_r+0xe2>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	4640      	mov	r0, r8
 800bdc0:	47a8      	blx	r5
 800bdc2:	1c43      	adds	r3, r0, #1
 800bdc4:	d066      	beq.n	800be94 <__sflush_r+0x110>
 800bdc6:	89a3      	ldrh	r3, [r4, #12]
 800bdc8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800bdca:	69e1      	ldr	r1, [r4, #28]
 800bdcc:	075f      	lsls	r7, r3, #29
 800bdce:	d505      	bpl.n	800bddc <__sflush_r+0x58>
 800bdd0:	6862      	ldr	r2, [r4, #4]
 800bdd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bdd4:	1a80      	subs	r0, r0, r2
 800bdd6:	b10b      	cbz	r3, 800bddc <__sflush_r+0x58>
 800bdd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdda:	1ac0      	subs	r0, r0, r3
 800bddc:	4602      	mov	r2, r0
 800bdde:	2300      	movs	r3, #0
 800bde0:	4640      	mov	r0, r8
 800bde2:	47a8      	blx	r5
 800bde4:	1c45      	adds	r5, r0, #1
 800bde6:	d148      	bne.n	800be7a <__sflush_r+0xf6>
 800bde8:	f8d8 2000 	ldr.w	r2, [r8]
 800bdec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdf0:	2a00      	cmp	r2, #0
 800bdf2:	d05c      	beq.n	800beae <__sflush_r+0x12a>
 800bdf4:	2a1d      	cmp	r2, #29
 800bdf6:	d001      	beq.n	800bdfc <__sflush_r+0x78>
 800bdf8:	2a16      	cmp	r2, #22
 800bdfa:	d164      	bne.n	800bec6 <__sflush_r+0x142>
 800bdfc:	6922      	ldr	r2, [r4, #16]
 800bdfe:	2100      	movs	r1, #0
 800be00:	e9c4 2100 	strd	r2, r1, [r4]
 800be04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be08:	81a3      	strh	r3, [r4, #12]
 800be0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800be0c:	f8c8 6000 	str.w	r6, [r8]
 800be10:	b311      	cbz	r1, 800be58 <__sflush_r+0xd4>
 800be12:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800be16:	4299      	cmp	r1, r3
 800be18:	d002      	beq.n	800be20 <__sflush_r+0x9c>
 800be1a:	4640      	mov	r0, r8
 800be1c:	f000 fa54 	bl	800c2c8 <_free_r>
 800be20:	2000      	movs	r0, #0
 800be22:	6320      	str	r0, [r4, #48]	; 0x30
 800be24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be28:	6926      	ldr	r6, [r4, #16]
 800be2a:	b1ae      	cbz	r6, 800be58 <__sflush_r+0xd4>
 800be2c:	6825      	ldr	r5, [r4, #0]
 800be2e:	6026      	str	r6, [r4, #0]
 800be30:	0791      	lsls	r1, r2, #30
 800be32:	bf0c      	ite	eq
 800be34:	6963      	ldreq	r3, [r4, #20]
 800be36:	2300      	movne	r3, #0
 800be38:	1bad      	subs	r5, r5, r6
 800be3a:	60a3      	str	r3, [r4, #8]
 800be3c:	e00a      	b.n	800be54 <__sflush_r+0xd0>
 800be3e:	462b      	mov	r3, r5
 800be40:	4632      	mov	r2, r6
 800be42:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800be44:	69e1      	ldr	r1, [r4, #28]
 800be46:	4640      	mov	r0, r8
 800be48:	47b8      	blx	r7
 800be4a:	2800      	cmp	r0, #0
 800be4c:	eba5 0500 	sub.w	r5, r5, r0
 800be50:	4406      	add	r6, r0
 800be52:	dd0a      	ble.n	800be6a <__sflush_r+0xe6>
 800be54:	2d00      	cmp	r5, #0
 800be56:	dcf2      	bgt.n	800be3e <__sflush_r+0xba>
 800be58:	2000      	movs	r0, #0
 800be5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800be60:	2a00      	cmp	r2, #0
 800be62:	dc9e      	bgt.n	800bda2 <__sflush_r+0x1e>
 800be64:	e7f8      	b.n	800be58 <__sflush_r+0xd4>
 800be66:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800be68:	e7b0      	b.n	800bdcc <__sflush_r+0x48>
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be70:	81a3      	strh	r3, [r4, #12]
 800be72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be7e:	6922      	ldr	r2, [r4, #16]
 800be80:	6022      	str	r2, [r4, #0]
 800be82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be86:	2200      	movs	r2, #0
 800be88:	6062      	str	r2, [r4, #4]
 800be8a:	04da      	lsls	r2, r3, #19
 800be8c:	81a3      	strh	r3, [r4, #12]
 800be8e:	d5bc      	bpl.n	800be0a <__sflush_r+0x86>
 800be90:	6520      	str	r0, [r4, #80]	; 0x50
 800be92:	e7ba      	b.n	800be0a <__sflush_r+0x86>
 800be94:	f8d8 3000 	ldr.w	r3, [r8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d094      	beq.n	800bdc6 <__sflush_r+0x42>
 800be9c:	2b1d      	cmp	r3, #29
 800be9e:	d00f      	beq.n	800bec0 <__sflush_r+0x13c>
 800bea0:	2b16      	cmp	r3, #22
 800bea2:	d00d      	beq.n	800bec0 <__sflush_r+0x13c>
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beaa:	81a3      	strh	r3, [r4, #12]
 800beac:	e7d5      	b.n	800be5a <__sflush_r+0xd6>
 800beae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800beb2:	6921      	ldr	r1, [r4, #16]
 800beb4:	81a3      	strh	r3, [r4, #12]
 800beb6:	04db      	lsls	r3, r3, #19
 800beb8:	e9c4 1200 	strd	r1, r2, [r4]
 800bebc:	d5a5      	bpl.n	800be0a <__sflush_r+0x86>
 800bebe:	e7e7      	b.n	800be90 <__sflush_r+0x10c>
 800bec0:	f8c8 6000 	str.w	r6, [r8]
 800bec4:	e7c8      	b.n	800be58 <__sflush_r+0xd4>
 800bec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beca:	81a3      	strh	r3, [r4, #12]
 800becc:	e7c5      	b.n	800be5a <__sflush_r+0xd6>
 800bece:	bf00      	nop

0800bed0 <_fflush_r>:
 800bed0:	b510      	push	{r4, lr}
 800bed2:	4604      	mov	r4, r0
 800bed4:	b082      	sub	sp, #8
 800bed6:	b108      	cbz	r0, 800bedc <_fflush_r+0xc>
 800bed8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800beda:	b123      	cbz	r3, 800bee6 <_fflush_r+0x16>
 800bedc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800bee0:	b948      	cbnz	r0, 800bef6 <_fflush_r+0x26>
 800bee2:	b002      	add	sp, #8
 800bee4:	bd10      	pop	{r4, pc}
 800bee6:	9101      	str	r1, [sp, #4]
 800bee8:	f000 f8f8 	bl	800c0dc <__sinit>
 800beec:	9901      	ldr	r1, [sp, #4]
 800beee:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d0f5      	beq.n	800bee2 <_fflush_r+0x12>
 800bef6:	4620      	mov	r0, r4
 800bef8:	b002      	add	sp, #8
 800befa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800befe:	f7ff bf41 	b.w	800bd84 <__sflush_r>
 800bf02:	bf00      	nop

0800bf04 <fflush>:
 800bf04:	b120      	cbz	r0, 800bf10 <fflush+0xc>
 800bf06:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <fflush+0x18>)
 800bf08:	4601      	mov	r1, r0
 800bf0a:	6818      	ldr	r0, [r3, #0]
 800bf0c:	f7ff bfe0 	b.w	800bed0 <_fflush_r>
 800bf10:	4b03      	ldr	r3, [pc, #12]	; (800bf20 <fflush+0x1c>)
 800bf12:	4904      	ldr	r1, [pc, #16]	; (800bf24 <fflush+0x20>)
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	f000 bc8f 	b.w	800c838 <_fwalk_reent>
 800bf1a:	bf00      	nop
 800bf1c:	20000490 	.word	0x20000490
 800bf20:	0800de48 	.word	0x0800de48
 800bf24:	0800bed1 	.word	0x0800bed1

0800bf28 <__fp_lock>:
 800bf28:	2000      	movs	r0, #0
 800bf2a:	4770      	bx	lr

0800bf2c <_cleanup_r>:
 800bf2c:	4901      	ldr	r1, [pc, #4]	; (800bf34 <_cleanup_r+0x8>)
 800bf2e:	f000 bc83 	b.w	800c838 <_fwalk_reent>
 800bf32:	bf00      	nop
 800bf34:	0800d435 	.word	0x0800d435

0800bf38 <__sinit.part.0>:
 800bf38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf3c:	6845      	ldr	r5, [r0, #4]
 800bf3e:	4b2c      	ldr	r3, [pc, #176]	; (800bff0 <__sinit.part.0+0xb8>)
 800bf40:	63c3      	str	r3, [r0, #60]	; 0x3c
 800bf42:	2400      	movs	r4, #0
 800bf44:	4607      	mov	r7, r0
 800bf46:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800bf4a:	2304      	movs	r3, #4
 800bf4c:	2103      	movs	r1, #3
 800bf4e:	e9c0 12b9 	strd	r1, r2, [r0, #740]	; 0x2e4
 800bf52:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800bf56:	4621      	mov	r1, r4
 800bf58:	60eb      	str	r3, [r5, #12]
 800bf5a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800bf5e:	666c      	str	r4, [r5, #100]	; 0x64
 800bf60:	e9c5 4400 	strd	r4, r4, [r5]
 800bf64:	60ac      	str	r4, [r5, #8]
 800bf66:	e9c5 4404 	strd	r4, r4, [r5, #16]
 800bf6a:	61ac      	str	r4, [r5, #24]
 800bf6c:	2208      	movs	r2, #8
 800bf6e:	f7fe fe05 	bl	800ab7c <memset>
 800bf72:	f8df b088 	ldr.w	fp, [pc, #136]	; 800bffc <__sinit.part.0+0xc4>
 800bf76:	68be      	ldr	r6, [r7, #8]
 800bf78:	f8df a084 	ldr.w	sl, [pc, #132]	; 800c000 <__sinit.part.0+0xc8>
 800bf7c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800c004 <__sinit.part.0+0xcc>
 800bf80:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800c008 <__sinit.part.0+0xd0>
 800bf84:	4b1b      	ldr	r3, [pc, #108]	; (800bff4 <__sinit.part.0+0xbc>)
 800bf86:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800bf8a:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 800bf8e:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 800bf92:	4621      	mov	r1, r4
 800bf94:	60f3      	str	r3, [r6, #12]
 800bf96:	2208      	movs	r2, #8
 800bf98:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800bf9c:	6674      	str	r4, [r6, #100]	; 0x64
 800bf9e:	e9c6 4400 	strd	r4, r4, [r6]
 800bfa2:	60b4      	str	r4, [r6, #8]
 800bfa4:	e9c6 4404 	strd	r4, r4, [r6, #16]
 800bfa8:	61b4      	str	r4, [r6, #24]
 800bfaa:	f7fe fde7 	bl	800ab7c <memset>
 800bfae:	68fd      	ldr	r5, [r7, #12]
 800bfb0:	4b11      	ldr	r3, [pc, #68]	; (800bff8 <__sinit.part.0+0xc0>)
 800bfb2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800bfb6:	e9c6 6b07 	strd	r6, fp, [r6, #28]
 800bfba:	e9c6 a909 	strd	sl, r9, [r6, #36]	; 0x24
 800bfbe:	4621      	mov	r1, r4
 800bfc0:	60eb      	str	r3, [r5, #12]
 800bfc2:	666c      	str	r4, [r5, #100]	; 0x64
 800bfc4:	e9c5 4400 	strd	r4, r4, [r5]
 800bfc8:	60ac      	str	r4, [r5, #8]
 800bfca:	e9c5 4404 	strd	r4, r4, [r5, #16]
 800bfce:	61ac      	str	r4, [r5, #24]
 800bfd0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800bfd4:	2208      	movs	r2, #8
 800bfd6:	f7fe fdd1 	bl	800ab7c <memset>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 800bfe0:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 800bfe4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800bfe8:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfee:	bf00      	nop
 800bff0:	0800bf2d 	.word	0x0800bf2d
 800bff4:	00010009 	.word	0x00010009
 800bff8:	00020012 	.word	0x00020012
 800bffc:	0800cf29 	.word	0x0800cf29
 800c000:	0800cf51 	.word	0x0800cf51
 800c004:	0800cf91 	.word	0x0800cf91
 800c008:	0800cfb1 	.word	0x0800cfb1

0800c00c <__fp_unlock>:
 800c00c:	2000      	movs	r0, #0
 800c00e:	4770      	bx	lr

0800c010 <__sfmoreglue>:
 800c010:	b570      	push	{r4, r5, r6, lr}
 800c012:	1e4a      	subs	r2, r1, #1
 800c014:	2568      	movs	r5, #104	; 0x68
 800c016:	fb05 f502 	mul.w	r5, r5, r2
 800c01a:	460e      	mov	r6, r1
 800c01c:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c020:	f7fe f9f8 	bl	800a414 <_malloc_r>
 800c024:	4604      	mov	r4, r0
 800c026:	b140      	cbz	r0, 800c03a <__sfmoreglue+0x2a>
 800c028:	2100      	movs	r1, #0
 800c02a:	300c      	adds	r0, #12
 800c02c:	6066      	str	r6, [r4, #4]
 800c02e:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c032:	6021      	str	r1, [r4, #0]
 800c034:	60a0      	str	r0, [r4, #8]
 800c036:	f7fe fda1 	bl	800ab7c <memset>
 800c03a:	4620      	mov	r0, r4
 800c03c:	bd70      	pop	{r4, r5, r6, pc}
 800c03e:	bf00      	nop

0800c040 <__sfp>:
 800c040:	4b1f      	ldr	r3, [pc, #124]	; (800c0c0 <__sfp+0x80>)
 800c042:	b570      	push	{r4, r5, r6, lr}
 800c044:	681d      	ldr	r5, [r3, #0]
 800c046:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c048:	4606      	mov	r6, r0
 800c04a:	b34b      	cbz	r3, 800c0a0 <__sfp+0x60>
 800c04c:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800c050:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 800c054:	3b01      	subs	r3, #1
 800c056:	d505      	bpl.n	800c064 <__sfp+0x24>
 800c058:	e01e      	b.n	800c098 <__sfp+0x58>
 800c05a:	3b01      	subs	r3, #1
 800c05c:	1c5a      	adds	r2, r3, #1
 800c05e:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800c062:	d019      	beq.n	800c098 <__sfp+0x58>
 800c064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c068:	2a00      	cmp	r2, #0
 800c06a:	d1f6      	bne.n	800c05a <__sfp+0x1a>
 800c06c:	2500      	movs	r5, #0
 800c06e:	4b15      	ldr	r3, [pc, #84]	; (800c0c4 <__sfp+0x84>)
 800c070:	6665      	str	r5, [r4, #100]	; 0x64
 800c072:	e9c4 5500 	strd	r5, r5, [r4]
 800c076:	60a5      	str	r5, [r4, #8]
 800c078:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c07c:	61a5      	str	r5, [r4, #24]
 800c07e:	4629      	mov	r1, r5
 800c080:	60e3      	str	r3, [r4, #12]
 800c082:	2208      	movs	r2, #8
 800c084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c088:	f7fe fd78 	bl	800ab7c <memset>
 800c08c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 800c090:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 800c094:	4620      	mov	r0, r4
 800c096:	bd70      	pop	{r4, r5, r6, pc}
 800c098:	682c      	ldr	r4, [r5, #0]
 800c09a:	b12c      	cbz	r4, 800c0a8 <__sfp+0x68>
 800c09c:	4625      	mov	r5, r4
 800c09e:	e7d7      	b.n	800c050 <__sfp+0x10>
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f7ff ff49 	bl	800bf38 <__sinit.part.0>
 800c0a6:	e7d1      	b.n	800c04c <__sfp+0xc>
 800c0a8:	2104      	movs	r1, #4
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f7ff ffb0 	bl	800c010 <__sfmoreglue>
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	6028      	str	r0, [r5, #0]
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d1f1      	bne.n	800c09c <__sfp+0x5c>
 800c0b8:	230c      	movs	r3, #12
 800c0ba:	6033      	str	r3, [r6, #0]
 800c0bc:	e7ea      	b.n	800c094 <__sfp+0x54>
 800c0be:	bf00      	nop
 800c0c0:	0800de48 	.word	0x0800de48
 800c0c4:	ffff0001 	.word	0xffff0001

0800c0c8 <_cleanup>:
 800c0c8:	4b02      	ldr	r3, [pc, #8]	; (800c0d4 <_cleanup+0xc>)
 800c0ca:	4903      	ldr	r1, [pc, #12]	; (800c0d8 <_cleanup+0x10>)
 800c0cc:	6818      	ldr	r0, [r3, #0]
 800c0ce:	f000 bbb3 	b.w	800c838 <_fwalk_reent>
 800c0d2:	bf00      	nop
 800c0d4:	0800de48 	.word	0x0800de48
 800c0d8:	0800d435 	.word	0x0800d435

0800c0dc <__sinit>:
 800c0dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c0de:	b103      	cbz	r3, 800c0e2 <__sinit+0x6>
 800c0e0:	4770      	bx	lr
 800c0e2:	e729      	b.n	800bf38 <__sinit.part.0>

0800c0e4 <__sfp_lock_acquire>:
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop

0800c0e8 <__sfp_lock_release>:
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop

0800c0ec <__sinit_lock_acquire>:
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <__sinit_lock_release>:
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop

0800c0f4 <__fp_lock_all>:
 800c0f4:	4b02      	ldr	r3, [pc, #8]	; (800c100 <__fp_lock_all+0xc>)
 800c0f6:	4903      	ldr	r1, [pc, #12]	; (800c104 <__fp_lock_all+0x10>)
 800c0f8:	6818      	ldr	r0, [r3, #0]
 800c0fa:	f000 bb77 	b.w	800c7ec <_fwalk>
 800c0fe:	bf00      	nop
 800c100:	20000490 	.word	0x20000490
 800c104:	0800bf29 	.word	0x0800bf29

0800c108 <__fp_unlock_all>:
 800c108:	4b02      	ldr	r3, [pc, #8]	; (800c114 <__fp_unlock_all+0xc>)
 800c10a:	4903      	ldr	r1, [pc, #12]	; (800c118 <__fp_unlock_all+0x10>)
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	f000 bb6d 	b.w	800c7ec <_fwalk>
 800c112:	bf00      	nop
 800c114:	20000490 	.word	0x20000490
 800c118:	0800c00d 	.word	0x0800c00d

0800c11c <__fputwc>:
 800c11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c120:	b082      	sub	sp, #8
 800c122:	4680      	mov	r8, r0
 800c124:	4689      	mov	r9, r1
 800c126:	4614      	mov	r4, r2
 800c128:	f000 fbd0 	bl	800c8cc <__locale_mb_cur_max>
 800c12c:	2801      	cmp	r0, #1
 800c12e:	d103      	bne.n	800c138 <__fputwc+0x1c>
 800c130:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800c134:	2bfe      	cmp	r3, #254	; 0xfe
 800c136:	d936      	bls.n	800c1a6 <__fputwc+0x8a>
 800c138:	464a      	mov	r2, r9
 800c13a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800c13e:	a901      	add	r1, sp, #4
 800c140:	4640      	mov	r0, r8
 800c142:	f001 f90b 	bl	800d35c <_wcrtomb_r>
 800c146:	1c42      	adds	r2, r0, #1
 800c148:	4606      	mov	r6, r0
 800c14a:	d032      	beq.n	800c1b2 <__fputwc+0x96>
 800c14c:	b330      	cbz	r0, 800c19c <__fputwc+0x80>
 800c14e:	f89d c004 	ldrb.w	ip, [sp, #4]
 800c152:	2500      	movs	r5, #0
 800c154:	f10d 0a04 	add.w	sl, sp, #4
 800c158:	e009      	b.n	800c16e <__fputwc+0x52>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	1c5a      	adds	r2, r3, #1
 800c15e:	6022      	str	r2, [r4, #0]
 800c160:	f883 c000 	strb.w	ip, [r3]
 800c164:	3501      	adds	r5, #1
 800c166:	42b5      	cmp	r5, r6
 800c168:	d218      	bcs.n	800c19c <__fputwc+0x80>
 800c16a:	f815 c00a 	ldrb.w	ip, [r5, sl]
 800c16e:	68a3      	ldr	r3, [r4, #8]
 800c170:	3b01      	subs	r3, #1
 800c172:	2b00      	cmp	r3, #0
 800c174:	60a3      	str	r3, [r4, #8]
 800c176:	daf0      	bge.n	800c15a <__fputwc+0x3e>
 800c178:	69a7      	ldr	r7, [r4, #24]
 800c17a:	42bb      	cmp	r3, r7
 800c17c:	4661      	mov	r1, ip
 800c17e:	4622      	mov	r2, r4
 800c180:	4640      	mov	r0, r8
 800c182:	db02      	blt.n	800c18a <__fputwc+0x6e>
 800c184:	f1bc 0f0a 	cmp.w	ip, #10
 800c188:	d1e7      	bne.n	800c15a <__fputwc+0x3e>
 800c18a:	f001 f887 	bl	800d29c <__swbuf_r>
 800c18e:	1c43      	adds	r3, r0, #1
 800c190:	d1e8      	bne.n	800c164 <__fputwc+0x48>
 800c192:	4606      	mov	r6, r0
 800c194:	4630      	mov	r0, r6
 800c196:	b002      	add	sp, #8
 800c198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c19c:	464e      	mov	r6, r9
 800c19e:	4630      	mov	r0, r6
 800c1a0:	b002      	add	sp, #8
 800c1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1a6:	fa5f fc89 	uxtb.w	ip, r9
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	f88d c004 	strb.w	ip, [sp, #4]
 800c1b0:	e7cf      	b.n	800c152 <__fputwc+0x36>
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ba:	81a3      	strh	r3, [r4, #12]
 800c1bc:	b002      	add	sp, #8
 800c1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c2:	bf00      	nop

0800c1c4 <_fputwc_r>:
 800c1c4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800c1c8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c1cc:	d10a      	bne.n	800c1e4 <_fputwc_r+0x20>
 800c1ce:	b410      	push	{r4}
 800c1d0:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800c1d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c1d6:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800c1da:	6654      	str	r4, [r2, #100]	; 0x64
 800c1dc:	8193      	strh	r3, [r2, #12]
 800c1de:	bc10      	pop	{r4}
 800c1e0:	f7ff bf9c 	b.w	800c11c <__fputwc>
 800c1e4:	f7ff bf9a 	b.w	800c11c <__fputwc>

0800c1e8 <fputwc>:
 800c1e8:	4b0e      	ldr	r3, [pc, #56]	; (800c224 <fputwc+0x3c>)
 800c1ea:	b570      	push	{r4, r5, r6, lr}
 800c1ec:	681d      	ldr	r5, [r3, #0]
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	460c      	mov	r4, r1
 800c1f2:	b10d      	cbz	r5, 800c1f8 <fputwc+0x10>
 800c1f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c1f6:	b18b      	cbz	r3, 800c21c <fputwc+0x34>
 800c1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1fc:	049a      	lsls	r2, r3, #18
 800c1fe:	d406      	bmi.n	800c20e <fputwc+0x26>
 800c200:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c202:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c206:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c20a:	81a3      	strh	r3, [r4, #12]
 800c20c:	6662      	str	r2, [r4, #100]	; 0x64
 800c20e:	4622      	mov	r2, r4
 800c210:	4631      	mov	r1, r6
 800c212:	4628      	mov	r0, r5
 800c214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c218:	f7ff bf80 	b.w	800c11c <__fputwc>
 800c21c:	4628      	mov	r0, r5
 800c21e:	f7ff ff5d 	bl	800c0dc <__sinit>
 800c222:	e7e9      	b.n	800c1f8 <fputwc+0x10>
 800c224:	20000490 	.word	0x20000490

0800c228 <_malloc_trim_r>:
 800c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22a:	4f24      	ldr	r7, [pc, #144]	; (800c2bc <_malloc_trim_r+0x94>)
 800c22c:	460c      	mov	r4, r1
 800c22e:	4606      	mov	r6, r0
 800c230:	f7fe fcf4 	bl	800ac1c <__malloc_lock>
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	685d      	ldr	r5, [r3, #4]
 800c238:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800c23c:	310f      	adds	r1, #15
 800c23e:	f025 0503 	bic.w	r5, r5, #3
 800c242:	4429      	add	r1, r5
 800c244:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800c248:	f021 010f 	bic.w	r1, r1, #15
 800c24c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800c250:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800c254:	db07      	blt.n	800c266 <_malloc_trim_r+0x3e>
 800c256:	2100      	movs	r1, #0
 800c258:	4630      	mov	r0, r6
 800c25a:	f7fe fd09 	bl	800ac70 <_sbrk_r>
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	442b      	add	r3, r5
 800c262:	4298      	cmp	r0, r3
 800c264:	d004      	beq.n	800c270 <_malloc_trim_r+0x48>
 800c266:	4630      	mov	r0, r6
 800c268:	f7fe fcda 	bl	800ac20 <__malloc_unlock>
 800c26c:	2000      	movs	r0, #0
 800c26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c270:	4261      	negs	r1, r4
 800c272:	4630      	mov	r0, r6
 800c274:	f7fe fcfc 	bl	800ac70 <_sbrk_r>
 800c278:	3001      	adds	r0, #1
 800c27a:	d00d      	beq.n	800c298 <_malloc_trim_r+0x70>
 800c27c:	4b10      	ldr	r3, [pc, #64]	; (800c2c0 <_malloc_trim_r+0x98>)
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	6819      	ldr	r1, [r3, #0]
 800c282:	1b2d      	subs	r5, r5, r4
 800c284:	f045 0501 	orr.w	r5, r5, #1
 800c288:	4630      	mov	r0, r6
 800c28a:	1b09      	subs	r1, r1, r4
 800c28c:	6055      	str	r5, [r2, #4]
 800c28e:	6019      	str	r1, [r3, #0]
 800c290:	f7fe fcc6 	bl	800ac20 <__malloc_unlock>
 800c294:	2001      	movs	r0, #1
 800c296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c298:	2100      	movs	r1, #0
 800c29a:	4630      	mov	r0, r6
 800c29c:	f7fe fce8 	bl	800ac70 <_sbrk_r>
 800c2a0:	68ba      	ldr	r2, [r7, #8]
 800c2a2:	1a83      	subs	r3, r0, r2
 800c2a4:	2b0f      	cmp	r3, #15
 800c2a6:	ddde      	ble.n	800c266 <_malloc_trim_r+0x3e>
 800c2a8:	4c06      	ldr	r4, [pc, #24]	; (800c2c4 <_malloc_trim_r+0x9c>)
 800c2aa:	4905      	ldr	r1, [pc, #20]	; (800c2c0 <_malloc_trim_r+0x98>)
 800c2ac:	6824      	ldr	r4, [r4, #0]
 800c2ae:	f043 0301 	orr.w	r3, r3, #1
 800c2b2:	1b00      	subs	r0, r0, r4
 800c2b4:	6053      	str	r3, [r2, #4]
 800c2b6:	6008      	str	r0, [r1, #0]
 800c2b8:	e7d5      	b.n	800c266 <_malloc_trim_r+0x3e>
 800c2ba:	bf00      	nop
 800c2bc:	200008c0 	.word	0x200008c0
 800c2c0:	20000f50 	.word	0x20000f50
 800c2c4:	20000cc8 	.word	0x20000cc8

0800c2c8 <_free_r>:
 800c2c8:	2900      	cmp	r1, #0
 800c2ca:	d05e      	beq.n	800c38a <_free_r+0xc2>
 800c2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ce:	460f      	mov	r7, r1
 800c2d0:	4606      	mov	r6, r0
 800c2d2:	f7fe fca3 	bl	800ac1c <__malloc_lock>
 800c2d6:	f857 cc04 	ldr.w	ip, [r7, #-4]
 800c2da:	4d75      	ldr	r5, [pc, #468]	; (800c4b0 <_free_r+0x1e8>)
 800c2dc:	f02c 0301 	bic.w	r3, ip, #1
 800c2e0:	f1a7 0008 	sub.w	r0, r7, #8
 800c2e4:	18c2      	adds	r2, r0, r3
 800c2e6:	68a9      	ldr	r1, [r5, #8]
 800c2e8:	6854      	ldr	r4, [r2, #4]
 800c2ea:	4291      	cmp	r1, r2
 800c2ec:	f024 0403 	bic.w	r4, r4, #3
 800c2f0:	f000 8084 	beq.w	800c3fc <_free_r+0x134>
 800c2f4:	f01c 0f01 	tst.w	ip, #1
 800c2f8:	6054      	str	r4, [r2, #4]
 800c2fa:	eb02 0104 	add.w	r1, r2, r4
 800c2fe:	d133      	bne.n	800c368 <_free_r+0xa0>
 800c300:	f857 ec08 	ldr.w	lr, [r7, #-8]
 800c304:	6849      	ldr	r1, [r1, #4]
 800c306:	eba0 000e 	sub.w	r0, r0, lr
 800c30a:	f105 0c08 	add.w	ip, r5, #8
 800c30e:	6887      	ldr	r7, [r0, #8]
 800c310:	4567      	cmp	r7, ip
 800c312:	4473      	add	r3, lr
 800c314:	f001 0101 	and.w	r1, r1, #1
 800c318:	d060      	beq.n	800c3dc <_free_r+0x114>
 800c31a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800c31e:	f8c7 e00c 	str.w	lr, [r7, #12]
 800c322:	f8ce 7008 	str.w	r7, [lr, #8]
 800c326:	2900      	cmp	r1, #0
 800c328:	f000 808d 	beq.w	800c446 <_free_r+0x17e>
 800c32c:	f043 0101 	orr.w	r1, r3, #1
 800c330:	6041      	str	r1, [r0, #4]
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c338:	d230      	bcs.n	800c39c <_free_r+0xd4>
 800c33a:	08db      	lsrs	r3, r3, #3
 800c33c:	1c59      	adds	r1, r3, #1
 800c33e:	686c      	ldr	r4, [r5, #4]
 800c340:	109a      	asrs	r2, r3, #2
 800c342:	2301      	movs	r3, #1
 800c344:	4093      	lsls	r3, r2
 800c346:	4323      	orrs	r3, r4
 800c348:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 800c34c:	f855 4031 	ldr.w	r4, [r5, r1, lsl #3]
 800c350:	606b      	str	r3, [r5, #4]
 800c352:	3a08      	subs	r2, #8
 800c354:	e9c0 4202 	strd	r4, r2, [r0, #8]
 800c358:	f845 0031 	str.w	r0, [r5, r1, lsl #3]
 800c35c:	60e0      	str	r0, [r4, #12]
 800c35e:	4630      	mov	r0, r6
 800c360:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c364:	f7fe bc5c 	b.w	800ac20 <__malloc_unlock>
 800c368:	6849      	ldr	r1, [r1, #4]
 800c36a:	07c9      	lsls	r1, r1, #31
 800c36c:	d40e      	bmi.n	800c38c <_free_r+0xc4>
 800c36e:	4423      	add	r3, r4
 800c370:	f105 0c08 	add.w	ip, r5, #8
 800c374:	6891      	ldr	r1, [r2, #8]
 800c376:	4561      	cmp	r1, ip
 800c378:	f043 0401 	orr.w	r4, r3, #1
 800c37c:	d06b      	beq.n	800c456 <_free_r+0x18e>
 800c37e:	68d2      	ldr	r2, [r2, #12]
 800c380:	60ca      	str	r2, [r1, #12]
 800c382:	6091      	str	r1, [r2, #8]
 800c384:	6044      	str	r4, [r0, #4]
 800c386:	50c3      	str	r3, [r0, r3]
 800c388:	e7d4      	b.n	800c334 <_free_r+0x6c>
 800c38a:	4770      	bx	lr
 800c38c:	f043 0101 	orr.w	r1, r3, #1
 800c390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c394:	f847 1c04 	str.w	r1, [r7, #-4]
 800c398:	6013      	str	r3, [r2, #0]
 800c39a:	d3ce      	bcc.n	800c33a <_free_r+0x72>
 800c39c:	0a5a      	lsrs	r2, r3, #9
 800c39e:	2a04      	cmp	r2, #4
 800c3a0:	d846      	bhi.n	800c430 <_free_r+0x168>
 800c3a2:	099a      	lsrs	r2, r3, #6
 800c3a4:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800c3a8:	00ff      	lsls	r7, r7, #3
 800c3aa:	f102 0138 	add.w	r1, r2, #56	; 0x38
 800c3ae:	19ec      	adds	r4, r5, r7
 800c3b0:	59ea      	ldr	r2, [r5, r7]
 800c3b2:	3c08      	subs	r4, #8
 800c3b4:	4294      	cmp	r4, r2
 800c3b6:	d055      	beq.n	800c464 <_free_r+0x19c>
 800c3b8:	6851      	ldr	r1, [r2, #4]
 800c3ba:	f021 0103 	bic.w	r1, r1, #3
 800c3be:	4299      	cmp	r1, r3
 800c3c0:	d902      	bls.n	800c3c8 <_free_r+0x100>
 800c3c2:	6892      	ldr	r2, [r2, #8]
 800c3c4:	4294      	cmp	r4, r2
 800c3c6:	d1f7      	bne.n	800c3b8 <_free_r+0xf0>
 800c3c8:	68d4      	ldr	r4, [r2, #12]
 800c3ca:	e9c0 2402 	strd	r2, r4, [r0, #8]
 800c3ce:	60a0      	str	r0, [r4, #8]
 800c3d0:	60d0      	str	r0, [r2, #12]
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3d8:	f7fe bc22 	b.w	800ac20 <__malloc_unlock>
 800c3dc:	2900      	cmp	r1, #0
 800c3de:	d162      	bne.n	800c4a6 <_free_r+0x1de>
 800c3e0:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 800c3e4:	4423      	add	r3, r4
 800c3e6:	f043 0401 	orr.w	r4, r3, #1
 800c3ea:	60d1      	str	r1, [r2, #12]
 800c3ec:	608a      	str	r2, [r1, #8]
 800c3ee:	6044      	str	r4, [r0, #4]
 800c3f0:	50c3      	str	r3, [r0, r3]
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3f8:	f7fe bc12 	b.w	800ac20 <__malloc_unlock>
 800c3fc:	f01c 0f01 	tst.w	ip, #1
 800c400:	4423      	add	r3, r4
 800c402:	d107      	bne.n	800c414 <_free_r+0x14c>
 800c404:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800c408:	1a80      	subs	r0, r0, r2
 800c40a:	4413      	add	r3, r2
 800c40c:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 800c410:	60ca      	str	r2, [r1, #12]
 800c412:	6091      	str	r1, [r2, #8]
 800c414:	4a27      	ldr	r2, [pc, #156]	; (800c4b4 <_free_r+0x1ec>)
 800c416:	6812      	ldr	r2, [r2, #0]
 800c418:	f043 0101 	orr.w	r1, r3, #1
 800c41c:	429a      	cmp	r2, r3
 800c41e:	6041      	str	r1, [r0, #4]
 800c420:	60a8      	str	r0, [r5, #8]
 800c422:	d89c      	bhi.n	800c35e <_free_r+0x96>
 800c424:	4b24      	ldr	r3, [pc, #144]	; (800c4b8 <_free_r+0x1f0>)
 800c426:	4630      	mov	r0, r6
 800c428:	6819      	ldr	r1, [r3, #0]
 800c42a:	f7ff fefd 	bl	800c228 <_malloc_trim_r>
 800c42e:	e796      	b.n	800c35e <_free_r+0x96>
 800c430:	2a14      	cmp	r2, #20
 800c432:	d90a      	bls.n	800c44a <_free_r+0x182>
 800c434:	2a54      	cmp	r2, #84	; 0x54
 800c436:	d81d      	bhi.n	800c474 <_free_r+0x1ac>
 800c438:	0b1a      	lsrs	r2, r3, #12
 800c43a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800c43e:	00ff      	lsls	r7, r7, #3
 800c440:	f102 016e 	add.w	r1, r2, #110	; 0x6e
 800c444:	e7b3      	b.n	800c3ae <_free_r+0xe6>
 800c446:	4423      	add	r3, r4
 800c448:	e794      	b.n	800c374 <_free_r+0xac>
 800c44a:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800c44e:	00ff      	lsls	r7, r7, #3
 800c450:	f102 015b 	add.w	r1, r2, #91	; 0x5b
 800c454:	e7ab      	b.n	800c3ae <_free_r+0xe6>
 800c456:	e9c5 0004 	strd	r0, r0, [r5, #16]
 800c45a:	e9c0 cc02 	strd	ip, ip, [r0, #8]
 800c45e:	6044      	str	r4, [r0, #4]
 800c460:	50c3      	str	r3, [r0, r3]
 800c462:	e77c      	b.n	800c35e <_free_r+0x96>
 800c464:	686b      	ldr	r3, [r5, #4]
 800c466:	1089      	asrs	r1, r1, #2
 800c468:	2701      	movs	r7, #1
 800c46a:	fa07 f101 	lsl.w	r1, r7, r1
 800c46e:	4319      	orrs	r1, r3
 800c470:	6069      	str	r1, [r5, #4]
 800c472:	e7aa      	b.n	800c3ca <_free_r+0x102>
 800c474:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c478:	d806      	bhi.n	800c488 <_free_r+0x1c0>
 800c47a:	0bda      	lsrs	r2, r3, #15
 800c47c:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800c480:	00ff      	lsls	r7, r7, #3
 800c482:	f102 0177 	add.w	r1, r2, #119	; 0x77
 800c486:	e792      	b.n	800c3ae <_free_r+0xe6>
 800c488:	f240 5154 	movw	r1, #1364	; 0x554
 800c48c:	428a      	cmp	r2, r1
 800c48e:	d806      	bhi.n	800c49e <_free_r+0x1d6>
 800c490:	0c9a      	lsrs	r2, r3, #18
 800c492:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800c496:	00ff      	lsls	r7, r7, #3
 800c498:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 800c49c:	e787      	b.n	800c3ae <_free_r+0xe6>
 800c49e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 800c4a2:	217e      	movs	r1, #126	; 0x7e
 800c4a4:	e783      	b.n	800c3ae <_free_r+0xe6>
 800c4a6:	f043 0101 	orr.w	r1, r3, #1
 800c4aa:	6041      	str	r1, [r0, #4]
 800c4ac:	6013      	str	r3, [r2, #0]
 800c4ae:	e756      	b.n	800c35e <_free_r+0x96>
 800c4b0:	200008c0 	.word	0x200008c0
 800c4b4:	20000ccc 	.word	0x20000ccc
 800c4b8:	20000f4c 	.word	0x20000f4c

0800c4bc <_fstat_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	460b      	mov	r3, r1
 800c4c0:	4c07      	ldr	r4, [pc, #28]	; (800c4e0 <_fstat_r+0x24>)
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	6023      	str	r3, [r4, #0]
 800c4cc:	f001 f9a8 	bl	800d820 <_fstat>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d000      	beq.n	800c4d6 <_fstat_r+0x1a>
 800c4d4:	bd38      	pop	{r3, r4, r5, pc}
 800c4d6:	6823      	ldr	r3, [r4, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d0fb      	beq.n	800c4d4 <_fstat_r+0x18>
 800c4dc:	602b      	str	r3, [r5, #0]
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	2000161c 	.word	0x2000161c

0800c4e4 <__sfvwrite_r>:
 800c4e4:	6893      	ldr	r3, [r2, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 8102 	beq.w	800c6f0 <__sfvwrite_r+0x20c>
 800c4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	0719      	lsls	r1, r3, #28
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	4682      	mov	sl, r0
 800c4fe:	4690      	mov	r8, r2
 800c500:	d535      	bpl.n	800c56e <__sfvwrite_r+0x8a>
 800c502:	6922      	ldr	r2, [r4, #16]
 800c504:	b39a      	cbz	r2, 800c56e <__sfvwrite_r+0x8a>
 800c506:	f013 0202 	ands.w	r2, r3, #2
 800c50a:	f8d8 6000 	ldr.w	r6, [r8]
 800c50e:	d03d      	beq.n	800c58c <__sfvwrite_r+0xa8>
 800c510:	2700      	movs	r7, #0
 800c512:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800c516:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800c51a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800c7e8 <__sfvwrite_r+0x304>
 800c51e:	463d      	mov	r5, r7
 800c520:	454d      	cmp	r5, r9
 800c522:	462b      	mov	r3, r5
 800c524:	463a      	mov	r2, r7
 800c526:	bf28      	it	cs
 800c528:	464b      	movcs	r3, r9
 800c52a:	4661      	mov	r1, ip
 800c52c:	4650      	mov	r0, sl
 800c52e:	b1d5      	cbz	r5, 800c566 <__sfvwrite_r+0x82>
 800c530:	47d8      	blx	fp
 800c532:	2800      	cmp	r0, #0
 800c534:	f340 80d2 	ble.w	800c6dc <__sfvwrite_r+0x1f8>
 800c538:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c53c:	1a1b      	subs	r3, r3, r0
 800c53e:	4407      	add	r7, r0
 800c540:	1a2d      	subs	r5, r5, r0
 800c542:	f8c8 3008 	str.w	r3, [r8, #8]
 800c546:	2b00      	cmp	r3, #0
 800c548:	f000 80b7 	beq.w	800c6ba <__sfvwrite_r+0x1d6>
 800c54c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800c550:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800c554:	454d      	cmp	r5, r9
 800c556:	462b      	mov	r3, r5
 800c558:	463a      	mov	r2, r7
 800c55a:	bf28      	it	cs
 800c55c:	464b      	movcs	r3, r9
 800c55e:	4661      	mov	r1, ip
 800c560:	4650      	mov	r0, sl
 800c562:	2d00      	cmp	r5, #0
 800c564:	d1e4      	bne.n	800c530 <__sfvwrite_r+0x4c>
 800c566:	e9d6 7500 	ldrd	r7, r5, [r6]
 800c56a:	3608      	adds	r6, #8
 800c56c:	e7d8      	b.n	800c520 <__sfvwrite_r+0x3c>
 800c56e:	4621      	mov	r1, r4
 800c570:	4650      	mov	r0, sl
 800c572:	f7ff fb89 	bl	800bc88 <__swsetup_r>
 800c576:	2800      	cmp	r0, #0
 800c578:	f040 8130 	bne.w	800c7dc <__sfvwrite_r+0x2f8>
 800c57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c580:	f8d8 6000 	ldr.w	r6, [r8]
 800c584:	b29b      	uxth	r3, r3
 800c586:	f013 0202 	ands.w	r2, r3, #2
 800c58a:	d1c1      	bne.n	800c510 <__sfvwrite_r+0x2c>
 800c58c:	f013 0901 	ands.w	r9, r3, #1
 800c590:	f040 80b0 	bne.w	800c6f4 <__sfvwrite_r+0x210>
 800c594:	68a7      	ldr	r7, [r4, #8]
 800c596:	6820      	ldr	r0, [r4, #0]
 800c598:	464d      	mov	r5, r9
 800c59a:	2d00      	cmp	r5, #0
 800c59c:	d054      	beq.n	800c648 <__sfvwrite_r+0x164>
 800c59e:	059a      	lsls	r2, r3, #22
 800c5a0:	f140 80bc 	bpl.w	800c71c <__sfvwrite_r+0x238>
 800c5a4:	42af      	cmp	r7, r5
 800c5a6:	46bb      	mov	fp, r7
 800c5a8:	f200 80e7 	bhi.w	800c77a <__sfvwrite_r+0x296>
 800c5ac:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c5b0:	d02f      	beq.n	800c612 <__sfvwrite_r+0x12e>
 800c5b2:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 800c5b6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800c5ba:	eba0 0b01 	sub.w	fp, r0, r1
 800c5be:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800c5c2:	1c68      	adds	r0, r5, #1
 800c5c4:	107f      	asrs	r7, r7, #1
 800c5c6:	4458      	add	r0, fp
 800c5c8:	42b8      	cmp	r0, r7
 800c5ca:	463a      	mov	r2, r7
 800c5cc:	bf84      	itt	hi
 800c5ce:	4607      	movhi	r7, r0
 800c5d0:	463a      	movhi	r2, r7
 800c5d2:	055b      	lsls	r3, r3, #21
 800c5d4:	f140 80e9 	bpl.w	800c7aa <__sfvwrite_r+0x2c6>
 800c5d8:	4611      	mov	r1, r2
 800c5da:	4650      	mov	r0, sl
 800c5dc:	f7fd ff1a 	bl	800a414 <_malloc_r>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	f000 80f5 	beq.w	800c7d0 <__sfvwrite_r+0x2ec>
 800c5e6:	465a      	mov	r2, fp
 800c5e8:	6921      	ldr	r1, [r4, #16]
 800c5ea:	9001      	str	r0, [sp, #4]
 800c5ec:	f7fe f9c4 	bl	800a978 <memcpy>
 800c5f0:	89a2      	ldrh	r2, [r4, #12]
 800c5f2:	9b01      	ldr	r3, [sp, #4]
 800c5f4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c5f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c5fc:	81a2      	strh	r2, [r4, #12]
 800c5fe:	eba7 020b 	sub.w	r2, r7, fp
 800c602:	eb03 000b 	add.w	r0, r3, fp
 800c606:	6167      	str	r7, [r4, #20]
 800c608:	6123      	str	r3, [r4, #16]
 800c60a:	6020      	str	r0, [r4, #0]
 800c60c:	60a2      	str	r2, [r4, #8]
 800c60e:	462f      	mov	r7, r5
 800c610:	46ab      	mov	fp, r5
 800c612:	465a      	mov	r2, fp
 800c614:	4649      	mov	r1, r9
 800c616:	f7fe fa49 	bl	800aaac <memmove>
 800c61a:	68a2      	ldr	r2, [r4, #8]
 800c61c:	6823      	ldr	r3, [r4, #0]
 800c61e:	1bd2      	subs	r2, r2, r7
 800c620:	445b      	add	r3, fp
 800c622:	462f      	mov	r7, r5
 800c624:	60a2      	str	r2, [r4, #8]
 800c626:	6023      	str	r3, [r4, #0]
 800c628:	2500      	movs	r5, #0
 800c62a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c62e:	1bdb      	subs	r3, r3, r7
 800c630:	44b9      	add	r9, r7
 800c632:	f8c8 3008 	str.w	r3, [r8, #8]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d03f      	beq.n	800c6ba <__sfvwrite_r+0x1d6>
 800c63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c63e:	68a7      	ldr	r7, [r4, #8]
 800c640:	6820      	ldr	r0, [r4, #0]
 800c642:	b29b      	uxth	r3, r3
 800c644:	2d00      	cmp	r5, #0
 800c646:	d1aa      	bne.n	800c59e <__sfvwrite_r+0xba>
 800c648:	e9d6 9500 	ldrd	r9, r5, [r6]
 800c64c:	3608      	adds	r6, #8
 800c64e:	e7a4      	b.n	800c59a <__sfvwrite_r+0xb6>
 800c650:	f10b 0308 	add.w	r3, fp, #8
 800c654:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 800c658:	469b      	mov	fp, r3
 800c65a:	3308      	adds	r3, #8
 800c65c:	2f00      	cmp	r7, #0
 800c65e:	d0f9      	beq.n	800c654 <__sfvwrite_r+0x170>
 800c660:	463a      	mov	r2, r7
 800c662:	210a      	movs	r1, #10
 800c664:	4630      	mov	r0, r6
 800c666:	f000 f9db 	bl	800ca20 <memchr>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	d053      	beq.n	800c716 <__sfvwrite_r+0x232>
 800c66e:	3001      	adds	r0, #1
 800c670:	eba0 0906 	sub.w	r9, r0, r6
 800c674:	464b      	mov	r3, r9
 800c676:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800c67a:	6820      	ldr	r0, [r4, #0]
 800c67c:	42bb      	cmp	r3, r7
 800c67e:	bf28      	it	cs
 800c680:	463b      	movcs	r3, r7
 800c682:	4288      	cmp	r0, r1
 800c684:	d903      	bls.n	800c68e <__sfvwrite_r+0x1aa>
 800c686:	68a5      	ldr	r5, [r4, #8]
 800c688:	4415      	add	r5, r2
 800c68a:	42ab      	cmp	r3, r5
 800c68c:	dc19      	bgt.n	800c6c2 <__sfvwrite_r+0x1de>
 800c68e:	429a      	cmp	r2, r3
 800c690:	dc7d      	bgt.n	800c78e <__sfvwrite_r+0x2aa>
 800c692:	4613      	mov	r3, r2
 800c694:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c696:	69e1      	ldr	r1, [r4, #28]
 800c698:	4632      	mov	r2, r6
 800c69a:	4650      	mov	r0, sl
 800c69c:	47a8      	blx	r5
 800c69e:	1e05      	subs	r5, r0, #0
 800c6a0:	dd1c      	ble.n	800c6dc <__sfvwrite_r+0x1f8>
 800c6a2:	ebb9 0905 	subs.w	r9, r9, r5
 800c6a6:	d06b      	beq.n	800c780 <__sfvwrite_r+0x29c>
 800c6a8:	2001      	movs	r0, #1
 800c6aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6ae:	1b5b      	subs	r3, r3, r5
 800c6b0:	442e      	add	r6, r5
 800c6b2:	1b7f      	subs	r7, r7, r5
 800c6b4:	f8c8 3008 	str.w	r3, [r8, #8]
 800c6b8:	bb13      	cbnz	r3, 800c700 <__sfvwrite_r+0x21c>
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	b003      	add	sp, #12
 800c6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	462a      	mov	r2, r5
 800c6c6:	f7fe f9f1 	bl	800aaac <memmove>
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	442b      	add	r3, r5
 800c6ce:	6023      	str	r3, [r4, #0]
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	4650      	mov	r0, sl
 800c6d4:	f7ff fbfc 	bl	800bed0 <_fflush_r>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d0e2      	beq.n	800c6a2 <__sfvwrite_r+0x1be>
 800c6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6e8:	81a3      	strh	r3, [r4, #12]
 800c6ea:	b003      	add	sp, #12
 800c6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	4770      	bx	lr
 800c6f4:	4633      	mov	r3, r6
 800c6f6:	4691      	mov	r9, r2
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	4617      	mov	r7, r2
 800c6fc:	464e      	mov	r6, r9
 800c6fe:	469b      	mov	fp, r3
 800c700:	2f00      	cmp	r7, #0
 800c702:	d0a5      	beq.n	800c650 <__sfvwrite_r+0x16c>
 800c704:	2800      	cmp	r0, #0
 800c706:	d1b5      	bne.n	800c674 <__sfvwrite_r+0x190>
 800c708:	463a      	mov	r2, r7
 800c70a:	210a      	movs	r1, #10
 800c70c:	4630      	mov	r0, r6
 800c70e:	f000 f987 	bl	800ca20 <memchr>
 800c712:	2800      	cmp	r0, #0
 800c714:	d1ab      	bne.n	800c66e <__sfvwrite_r+0x18a>
 800c716:	1c7b      	adds	r3, r7, #1
 800c718:	4699      	mov	r9, r3
 800c71a:	e7ac      	b.n	800c676 <__sfvwrite_r+0x192>
 800c71c:	6923      	ldr	r3, [r4, #16]
 800c71e:	4283      	cmp	r3, r0
 800c720:	d315      	bcc.n	800c74e <__sfvwrite_r+0x26a>
 800c722:	6961      	ldr	r1, [r4, #20]
 800c724:	42a9      	cmp	r1, r5
 800c726:	d812      	bhi.n	800c74e <__sfvwrite_r+0x26a>
 800c728:	4b2e      	ldr	r3, [pc, #184]	; (800c7e4 <__sfvwrite_r+0x300>)
 800c72a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800c72c:	429d      	cmp	r5, r3
 800c72e:	bf94      	ite	ls
 800c730:	462b      	movls	r3, r5
 800c732:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800c736:	464a      	mov	r2, r9
 800c738:	fb93 f3f1 	sdiv	r3, r3, r1
 800c73c:	4650      	mov	r0, sl
 800c73e:	fb01 f303 	mul.w	r3, r1, r3
 800c742:	69e1      	ldr	r1, [r4, #28]
 800c744:	47b8      	blx	r7
 800c746:	1e07      	subs	r7, r0, #0
 800c748:	ddc8      	ble.n	800c6dc <__sfvwrite_r+0x1f8>
 800c74a:	1bed      	subs	r5, r5, r7
 800c74c:	e76d      	b.n	800c62a <__sfvwrite_r+0x146>
 800c74e:	42af      	cmp	r7, r5
 800c750:	bf28      	it	cs
 800c752:	462f      	movcs	r7, r5
 800c754:	463a      	mov	r2, r7
 800c756:	4649      	mov	r1, r9
 800c758:	f7fe f9a8 	bl	800aaac <memmove>
 800c75c:	68a3      	ldr	r3, [r4, #8]
 800c75e:	6822      	ldr	r2, [r4, #0]
 800c760:	1bdb      	subs	r3, r3, r7
 800c762:	443a      	add	r2, r7
 800c764:	60a3      	str	r3, [r4, #8]
 800c766:	6022      	str	r2, [r4, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d1ee      	bne.n	800c74a <__sfvwrite_r+0x266>
 800c76c:	4621      	mov	r1, r4
 800c76e:	4650      	mov	r0, sl
 800c770:	f7ff fbae 	bl	800bed0 <_fflush_r>
 800c774:	2800      	cmp	r0, #0
 800c776:	d0e8      	beq.n	800c74a <__sfvwrite_r+0x266>
 800c778:	e7b0      	b.n	800c6dc <__sfvwrite_r+0x1f8>
 800c77a:	462f      	mov	r7, r5
 800c77c:	46ab      	mov	fp, r5
 800c77e:	e748      	b.n	800c612 <__sfvwrite_r+0x12e>
 800c780:	4621      	mov	r1, r4
 800c782:	4650      	mov	r0, sl
 800c784:	f7ff fba4 	bl	800bed0 <_fflush_r>
 800c788:	2800      	cmp	r0, #0
 800c78a:	d08e      	beq.n	800c6aa <__sfvwrite_r+0x1c6>
 800c78c:	e7a6      	b.n	800c6dc <__sfvwrite_r+0x1f8>
 800c78e:	461a      	mov	r2, r3
 800c790:	4631      	mov	r1, r6
 800c792:	9301      	str	r3, [sp, #4]
 800c794:	f7fe f98a 	bl	800aaac <memmove>
 800c798:	9b01      	ldr	r3, [sp, #4]
 800c79a:	68a1      	ldr	r1, [r4, #8]
 800c79c:	6822      	ldr	r2, [r4, #0]
 800c79e:	1ac9      	subs	r1, r1, r3
 800c7a0:	441a      	add	r2, r3
 800c7a2:	60a1      	str	r1, [r4, #8]
 800c7a4:	6022      	str	r2, [r4, #0]
 800c7a6:	461d      	mov	r5, r3
 800c7a8:	e77b      	b.n	800c6a2 <__sfvwrite_r+0x1be>
 800c7aa:	4650      	mov	r0, sl
 800c7ac:	f000 f9b4 	bl	800cb18 <_realloc_r>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	f47f af23 	bne.w	800c5fe <__sfvwrite_r+0x11a>
 800c7b8:	6921      	ldr	r1, [r4, #16]
 800c7ba:	4650      	mov	r0, sl
 800c7bc:	f7ff fd84 	bl	800c2c8 <_free_r>
 800c7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7c4:	220c      	movs	r2, #12
 800c7c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7ca:	f8ca 2000 	str.w	r2, [sl]
 800c7ce:	e787      	b.n	800c6e0 <__sfvwrite_r+0x1fc>
 800c7d0:	230c      	movs	r3, #12
 800c7d2:	f8ca 3000 	str.w	r3, [sl]
 800c7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7da:	e781      	b.n	800c6e0 <__sfvwrite_r+0x1fc>
 800c7dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7e0:	e76c      	b.n	800c6bc <__sfvwrite_r+0x1d8>
 800c7e2:	bf00      	nop
 800c7e4:	7ffffffe 	.word	0x7ffffffe
 800c7e8:	7ffffc00 	.word	0x7ffffc00

0800c7ec <_fwalk>:
 800c7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800c7f4:	d01b      	beq.n	800c82e <_fwalk+0x42>
 800c7f6:	4688      	mov	r8, r1
 800c7f8:	2600      	movs	r6, #0
 800c7fa:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800c7fe:	3d01      	subs	r5, #1
 800c800:	d40f      	bmi.n	800c822 <_fwalk+0x36>
 800c802:	89a3      	ldrh	r3, [r4, #12]
 800c804:	2b01      	cmp	r3, #1
 800c806:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800c80a:	d906      	bls.n	800c81a <_fwalk+0x2e>
 800c80c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800c810:	3301      	adds	r3, #1
 800c812:	4620      	mov	r0, r4
 800c814:	d001      	beq.n	800c81a <_fwalk+0x2e>
 800c816:	47c0      	blx	r8
 800c818:	4306      	orrs	r6, r0
 800c81a:	1c6b      	adds	r3, r5, #1
 800c81c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800c820:	d1ef      	bne.n	800c802 <_fwalk+0x16>
 800c822:	683f      	ldr	r7, [r7, #0]
 800c824:	2f00      	cmp	r7, #0
 800c826:	d1e8      	bne.n	800c7fa <_fwalk+0xe>
 800c828:	4630      	mov	r0, r6
 800c82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c82e:	463e      	mov	r6, r7
 800c830:	4630      	mov	r0, r6
 800c832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c836:	bf00      	nop

0800c838 <_fwalk_reent>:
 800c838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c83c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800c840:	d01f      	beq.n	800c882 <_fwalk_reent+0x4a>
 800c842:	4688      	mov	r8, r1
 800c844:	4606      	mov	r6, r0
 800c846:	f04f 0900 	mov.w	r9, #0
 800c84a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800c84e:	3d01      	subs	r5, #1
 800c850:	d411      	bmi.n	800c876 <_fwalk_reent+0x3e>
 800c852:	89a3      	ldrh	r3, [r4, #12]
 800c854:	2b01      	cmp	r3, #1
 800c856:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800c85a:	d908      	bls.n	800c86e <_fwalk_reent+0x36>
 800c85c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800c860:	3301      	adds	r3, #1
 800c862:	4621      	mov	r1, r4
 800c864:	4630      	mov	r0, r6
 800c866:	d002      	beq.n	800c86e <_fwalk_reent+0x36>
 800c868:	47c0      	blx	r8
 800c86a:	ea49 0900 	orr.w	r9, r9, r0
 800c86e:	1c6b      	adds	r3, r5, #1
 800c870:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800c874:	d1ed      	bne.n	800c852 <_fwalk_reent+0x1a>
 800c876:	683f      	ldr	r7, [r7, #0]
 800c878:	2f00      	cmp	r7, #0
 800c87a:	d1e6      	bne.n	800c84a <_fwalk_reent+0x12>
 800c87c:	4648      	mov	r0, r9
 800c87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c882:	46b9      	mov	r9, r7
 800c884:	4648      	mov	r0, r9
 800c886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c88a:	bf00      	nop

0800c88c <_setlocale_r>:
 800c88c:	b142      	cbz	r2, 800c8a0 <_setlocale_r+0x14>
 800c88e:	b510      	push	{r4, lr}
 800c890:	490b      	ldr	r1, [pc, #44]	; (800c8c0 <_setlocale_r+0x34>)
 800c892:	4610      	mov	r0, r2
 800c894:	4614      	mov	r4, r2
 800c896:	f000 fb97 	bl	800cfc8 <strcmp>
 800c89a:	b918      	cbnz	r0, 800c8a4 <_setlocale_r+0x18>
 800c89c:	4809      	ldr	r0, [pc, #36]	; (800c8c4 <_setlocale_r+0x38>)
 800c89e:	bd10      	pop	{r4, pc}
 800c8a0:	4808      	ldr	r0, [pc, #32]	; (800c8c4 <_setlocale_r+0x38>)
 800c8a2:	4770      	bx	lr
 800c8a4:	4907      	ldr	r1, [pc, #28]	; (800c8c4 <_setlocale_r+0x38>)
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f000 fb8e 	bl	800cfc8 <strcmp>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d0f5      	beq.n	800c89c <_setlocale_r+0x10>
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	4905      	ldr	r1, [pc, #20]	; (800c8c8 <_setlocale_r+0x3c>)
 800c8b4:	f000 fb88 	bl	800cfc8 <strcmp>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d0ef      	beq.n	800c89c <_setlocale_r+0x10>
 800c8bc:	2000      	movs	r0, #0
 800c8be:	bd10      	pop	{r4, pc}
 800c8c0:	0800dea0 	.word	0x0800dea0
 800c8c4:	0800de9c 	.word	0x0800de9c
 800c8c8:	0800de14 	.word	0x0800de14

0800c8cc <__locale_mb_cur_max>:
 800c8cc:	4b01      	ldr	r3, [pc, #4]	; (800c8d4 <__locale_mb_cur_max+0x8>)
 800c8ce:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800c8d2:	4770      	bx	lr
 800c8d4:	20000cd0 	.word	0x20000cd0

0800c8d8 <setlocale>:
 800c8d8:	4b02      	ldr	r3, [pc, #8]	; (800c8e4 <setlocale+0xc>)
 800c8da:	460a      	mov	r2, r1
 800c8dc:	4601      	mov	r1, r0
 800c8de:	6818      	ldr	r0, [r3, #0]
 800c8e0:	f7ff bfd4 	b.w	800c88c <_setlocale_r>
 800c8e4:	20000490 	.word	0x20000490

0800c8e8 <__swhatbuf_r>:
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	460c      	mov	r4, r1
 800c8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8f0:	2900      	cmp	r1, #0
 800c8f2:	b096      	sub	sp, #88	; 0x58
 800c8f4:	4615      	mov	r5, r2
 800c8f6:	461e      	mov	r6, r3
 800c8f8:	db14      	blt.n	800c924 <__swhatbuf_r+0x3c>
 800c8fa:	466a      	mov	r2, sp
 800c8fc:	f7ff fdde 	bl	800c4bc <_fstat_r>
 800c900:	2800      	cmp	r0, #0
 800c902:	db0f      	blt.n	800c924 <__swhatbuf_r+0x3c>
 800c904:	9a01      	ldr	r2, [sp, #4]
 800c906:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c90a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800c90e:	fab2 f282 	clz	r2, r2
 800c912:	0952      	lsrs	r2, r2, #5
 800c914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c918:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c91c:	6032      	str	r2, [r6, #0]
 800c91e:	602b      	str	r3, [r5, #0]
 800c920:	b016      	add	sp, #88	; 0x58
 800c922:	bd70      	pop	{r4, r5, r6, pc}
 800c924:	89a2      	ldrh	r2, [r4, #12]
 800c926:	2300      	movs	r3, #0
 800c928:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 800c92c:	6033      	str	r3, [r6, #0]
 800c92e:	d004      	beq.n	800c93a <__swhatbuf_r+0x52>
 800c930:	2240      	movs	r2, #64	; 0x40
 800c932:	4618      	mov	r0, r3
 800c934:	602a      	str	r2, [r5, #0]
 800c936:	b016      	add	sp, #88	; 0x58
 800c938:	bd70      	pop	{r4, r5, r6, pc}
 800c93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c93e:	602b      	str	r3, [r5, #0]
 800c940:	b016      	add	sp, #88	; 0x58
 800c942:	bd70      	pop	{r4, r5, r6, pc}

0800c944 <__smakebuf_r>:
 800c944:	898a      	ldrh	r2, [r1, #12]
 800c946:	0792      	lsls	r2, r2, #30
 800c948:	460b      	mov	r3, r1
 800c94a:	d506      	bpl.n	800c95a <__smakebuf_r+0x16>
 800c94c:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c950:	2101      	movs	r1, #1
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	e9c3 2104 	strd	r2, r1, [r3, #16]
 800c958:	4770      	bx	lr
 800c95a:	b570      	push	{r4, r5, r6, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	ab01      	add	r3, sp, #4
 800c960:	466a      	mov	r2, sp
 800c962:	460c      	mov	r4, r1
 800c964:	4606      	mov	r6, r0
 800c966:	f7ff ffbf 	bl	800c8e8 <__swhatbuf_r>
 800c96a:	9900      	ldr	r1, [sp, #0]
 800c96c:	4605      	mov	r5, r0
 800c96e:	4630      	mov	r0, r6
 800c970:	f7fd fd50 	bl	800a414 <_malloc_r>
 800c974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c978:	b170      	cbz	r0, 800c998 <__smakebuf_r+0x54>
 800c97a:	4916      	ldr	r1, [pc, #88]	; (800c9d4 <__smakebuf_r+0x90>)
 800c97c:	63f1      	str	r1, [r6, #60]	; 0x3c
 800c97e:	9a01      	ldr	r2, [sp, #4]
 800c980:	9900      	ldr	r1, [sp, #0]
 800c982:	6020      	str	r0, [r4, #0]
 800c984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c988:	81a3      	strh	r3, [r4, #12]
 800c98a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800c98e:	b98a      	cbnz	r2, 800c9b4 <__smakebuf_r+0x70>
 800c990:	432b      	orrs	r3, r5
 800c992:	81a3      	strh	r3, [r4, #12]
 800c994:	b002      	add	sp, #8
 800c996:	bd70      	pop	{r4, r5, r6, pc}
 800c998:	059a      	lsls	r2, r3, #22
 800c99a:	d4fb      	bmi.n	800c994 <__smakebuf_r+0x50>
 800c99c:	f023 0303 	bic.w	r3, r3, #3
 800c9a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9a4:	f043 0302 	orr.w	r3, r3, #2
 800c9a8:	2101      	movs	r1, #1
 800c9aa:	81a3      	strh	r3, [r4, #12]
 800c9ac:	6022      	str	r2, [r4, #0]
 800c9ae:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800c9b2:	e7ef      	b.n	800c994 <__smakebuf_r+0x50>
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9ba:	f000 fd87 	bl	800d4cc <_isatty_r>
 800c9be:	b910      	cbnz	r0, 800c9c6 <__smakebuf_r+0x82>
 800c9c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c4:	e7e4      	b.n	800c990 <__smakebuf_r+0x4c>
 800c9c6:	89a3      	ldrh	r3, [r4, #12]
 800c9c8:	f023 0303 	bic.w	r3, r3, #3
 800c9cc:	f043 0301 	orr.w	r3, r3, #1
 800c9d0:	b21b      	sxth	r3, r3
 800c9d2:	e7dd      	b.n	800c990 <__smakebuf_r+0x4c>
 800c9d4:	0800bf2d 	.word	0x0800bf2d

0800c9d8 <_mbtowc_r>:
 800c9d8:	b410      	push	{r4}
 800c9da:	4c03      	ldr	r4, [pc, #12]	; (800c9e8 <_mbtowc_r+0x10>)
 800c9dc:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 800c9e0:	46a4      	mov	ip, r4
 800c9e2:	bc10      	pop	{r4}
 800c9e4:	4760      	bx	ip
 800c9e6:	bf00      	nop
 800c9e8:	20000cd0 	.word	0x20000cd0

0800c9ec <__ascii_mbtowc>:
 800c9ec:	b082      	sub	sp, #8
 800c9ee:	b149      	cbz	r1, 800ca04 <__ascii_mbtowc+0x18>
 800c9f0:	b15a      	cbz	r2, 800ca0a <__ascii_mbtowc+0x1e>
 800c9f2:	b16b      	cbz	r3, 800ca10 <__ascii_mbtowc+0x24>
 800c9f4:	7813      	ldrb	r3, [r2, #0]
 800c9f6:	600b      	str	r3, [r1, #0]
 800c9f8:	7812      	ldrb	r2, [r2, #0]
 800c9fa:	1c10      	adds	r0, r2, #0
 800c9fc:	bf18      	it	ne
 800c9fe:	2001      	movne	r0, #1
 800ca00:	b002      	add	sp, #8
 800ca02:	4770      	bx	lr
 800ca04:	a901      	add	r1, sp, #4
 800ca06:	2a00      	cmp	r2, #0
 800ca08:	d1f3      	bne.n	800c9f2 <__ascii_mbtowc+0x6>
 800ca0a:	4610      	mov	r0, r2
 800ca0c:	b002      	add	sp, #8
 800ca0e:	4770      	bx	lr
 800ca10:	f06f 0001 	mvn.w	r0, #1
 800ca14:	e7f4      	b.n	800ca00 <__ascii_mbtowc+0x14>
 800ca16:	bf00      	nop
	...

0800ca20 <memchr>:
 800ca20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800ca24:	2a10      	cmp	r2, #16
 800ca26:	db2b      	blt.n	800ca80 <memchr+0x60>
 800ca28:	f010 0f07 	tst.w	r0, #7
 800ca2c:	d008      	beq.n	800ca40 <memchr+0x20>
 800ca2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ca32:	3a01      	subs	r2, #1
 800ca34:	428b      	cmp	r3, r1
 800ca36:	d02d      	beq.n	800ca94 <memchr+0x74>
 800ca38:	f010 0f07 	tst.w	r0, #7
 800ca3c:	b342      	cbz	r2, 800ca90 <memchr+0x70>
 800ca3e:	d1f6      	bne.n	800ca2e <memchr+0xe>
 800ca40:	b4f0      	push	{r4, r5, r6, r7}
 800ca42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800ca46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800ca4a:	f022 0407 	bic.w	r4, r2, #7
 800ca4e:	f07f 0700 	mvns.w	r7, #0
 800ca52:	2300      	movs	r3, #0
 800ca54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800ca58:	3c08      	subs	r4, #8
 800ca5a:	ea85 0501 	eor.w	r5, r5, r1
 800ca5e:	ea86 0601 	eor.w	r6, r6, r1
 800ca62:	fa85 f547 	uadd8	r5, r5, r7
 800ca66:	faa3 f587 	sel	r5, r3, r7
 800ca6a:	fa86 f647 	uadd8	r6, r6, r7
 800ca6e:	faa5 f687 	sel	r6, r5, r7
 800ca72:	b98e      	cbnz	r6, 800ca98 <memchr+0x78>
 800ca74:	d1ee      	bne.n	800ca54 <memchr+0x34>
 800ca76:	bcf0      	pop	{r4, r5, r6, r7}
 800ca78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800ca7c:	f002 0207 	and.w	r2, r2, #7
 800ca80:	b132      	cbz	r2, 800ca90 <memchr+0x70>
 800ca82:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ca86:	3a01      	subs	r2, #1
 800ca88:	ea83 0301 	eor.w	r3, r3, r1
 800ca8c:	b113      	cbz	r3, 800ca94 <memchr+0x74>
 800ca8e:	d1f8      	bne.n	800ca82 <memchr+0x62>
 800ca90:	2000      	movs	r0, #0
 800ca92:	4770      	bx	lr
 800ca94:	3801      	subs	r0, #1
 800ca96:	4770      	bx	lr
 800ca98:	2d00      	cmp	r5, #0
 800ca9a:	bf06      	itte	eq
 800ca9c:	4635      	moveq	r5, r6
 800ca9e:	3803      	subeq	r0, #3
 800caa0:	3807      	subne	r0, #7
 800caa2:	f015 0f01 	tst.w	r5, #1
 800caa6:	d107      	bne.n	800cab8 <memchr+0x98>
 800caa8:	3001      	adds	r0, #1
 800caaa:	f415 7f80 	tst.w	r5, #256	; 0x100
 800caae:	bf02      	ittt	eq
 800cab0:	3001      	addeq	r0, #1
 800cab2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800cab6:	3001      	addeq	r0, #1
 800cab8:	bcf0      	pop	{r4, r5, r6, r7}
 800caba:	3801      	subs	r0, #1
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop

0800cac0 <_open_r>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	460d      	mov	r5, r1
 800cac4:	4c08      	ldr	r4, [pc, #32]	; (800cae8 <_open_r+0x28>)
 800cac6:	4611      	mov	r1, r2
 800cac8:	4606      	mov	r6, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	4628      	mov	r0, r5
 800cace:	2300      	movs	r3, #0
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	f000 fecd 	bl	800d870 <_open>
 800cad6:	1c43      	adds	r3, r0, #1
 800cad8:	d000      	beq.n	800cadc <_open_r+0x1c>
 800cada:	bd70      	pop	{r4, r5, r6, pc}
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0fb      	beq.n	800cada <_open_r+0x1a>
 800cae2:	6033      	str	r3, [r6, #0]
 800cae4:	bd70      	pop	{r4, r5, r6, pc}
 800cae6:	bf00      	nop
 800cae8:	2000161c 	.word	0x2000161c

0800caec <_read_r>:
 800caec:	b570      	push	{r4, r5, r6, lr}
 800caee:	460d      	mov	r5, r1
 800caf0:	4c08      	ldr	r4, [pc, #32]	; (800cb14 <_read_r+0x28>)
 800caf2:	4611      	mov	r1, r2
 800caf4:	4606      	mov	r6, r0
 800caf6:	461a      	mov	r2, r3
 800caf8:	4628      	mov	r0, r5
 800cafa:	2300      	movs	r3, #0
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	f000 febf 	bl	800d880 <_read>
 800cb02:	1c43      	adds	r3, r0, #1
 800cb04:	d000      	beq.n	800cb08 <_read_r+0x1c>
 800cb06:	bd70      	pop	{r4, r5, r6, pc}
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d0fb      	beq.n	800cb06 <_read_r+0x1a>
 800cb0e:	6033      	str	r3, [r6, #0]
 800cb10:	bd70      	pop	{r4, r5, r6, pc}
 800cb12:	bf00      	nop
 800cb14:	2000161c 	.word	0x2000161c

0800cb18 <_realloc_r>:
 800cb18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1c:	4617      	mov	r7, r2
 800cb1e:	2900      	cmp	r1, #0
 800cb20:	f000 80bb 	beq.w	800cc9a <_realloc_r+0x182>
 800cb24:	f107 040b 	add.w	r4, r7, #11
 800cb28:	4681      	mov	r9, r0
 800cb2a:	460d      	mov	r5, r1
 800cb2c:	f7fe f876 	bl	800ac1c <__malloc_lock>
 800cb30:	2c16      	cmp	r4, #22
 800cb32:	d85e      	bhi.n	800cbf2 <_realloc_r+0xda>
 800cb34:	2410      	movs	r4, #16
 800cb36:	4622      	mov	r2, r4
 800cb38:	42a7      	cmp	r7, r4
 800cb3a:	d85f      	bhi.n	800cbfc <_realloc_r+0xe4>
 800cb3c:	f855 ec04 	ldr.w	lr, [r5, #-4]
 800cb40:	f02e 0603 	bic.w	r6, lr, #3
 800cb44:	f1a5 0808 	sub.w	r8, r5, #8
 800cb48:	4296      	cmp	r6, r2
 800cb4a:	eb08 0a06 	add.w	sl, r8, r6
 800cb4e:	f280 8081 	bge.w	800cc54 <_realloc_r+0x13c>
 800cb52:	4bcb      	ldr	r3, [pc, #812]	; (800ce80 <_realloc_r+0x368>)
 800cb54:	f8da 0004 	ldr.w	r0, [sl, #4]
 800cb58:	6899      	ldr	r1, [r3, #8]
 800cb5a:	4551      	cmp	r1, sl
 800cb5c:	f000 80b5 	beq.w	800ccca <_realloc_r+0x1b2>
 800cb60:	f020 0301 	bic.w	r3, r0, #1
 800cb64:	4453      	add	r3, sl
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	07db      	lsls	r3, r3, #31
 800cb6a:	f100 808a 	bmi.w	800cc82 <_realloc_r+0x16a>
 800cb6e:	f020 0003 	bic.w	r0, r0, #3
 800cb72:	1833      	adds	r3, r6, r0
 800cb74:	4293      	cmp	r3, r2
 800cb76:	f280 8112 	bge.w	800cd9e <_realloc_r+0x286>
 800cb7a:	f01e 0f01 	tst.w	lr, #1
 800cb7e:	d10f      	bne.n	800cba0 <_realloc_r+0x88>
 800cb80:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800cb84:	eba8 0b03 	sub.w	fp, r8, r3
 800cb88:	f8db 1004 	ldr.w	r1, [fp, #4]
 800cb8c:	f021 0103 	bic.w	r1, r1, #3
 800cb90:	4408      	add	r0, r1
 800cb92:	1983      	adds	r3, r0, r6
 800cb94:	4293      	cmp	r3, r2
 800cb96:	f280 8116 	bge.w	800cdc6 <_realloc_r+0x2ae>
 800cb9a:	1873      	adds	r3, r6, r1
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	da34      	bge.n	800cc0a <_realloc_r+0xf2>
 800cba0:	4639      	mov	r1, r7
 800cba2:	4648      	mov	r0, r9
 800cba4:	f7fd fc36 	bl	800a414 <_malloc_r>
 800cba8:	4607      	mov	r7, r0
 800cbaa:	b1e0      	cbz	r0, 800cbe6 <_realloc_r+0xce>
 800cbac:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800cbb0:	f023 0301 	bic.w	r3, r3, #1
 800cbb4:	4443      	add	r3, r8
 800cbb6:	f1a0 0208 	sub.w	r2, r0, #8
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	f000 80f7 	beq.w	800cdae <_realloc_r+0x296>
 800cbc0:	1f32      	subs	r2, r6, #4
 800cbc2:	2a24      	cmp	r2, #36	; 0x24
 800cbc4:	f200 80fb 	bhi.w	800cdbe <_realloc_r+0x2a6>
 800cbc8:	2a13      	cmp	r2, #19
 800cbca:	6829      	ldr	r1, [r5, #0]
 800cbcc:	f200 80c9 	bhi.w	800cd62 <_realloc_r+0x24a>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	462a      	mov	r2, r5
 800cbd4:	6019      	str	r1, [r3, #0]
 800cbd6:	6851      	ldr	r1, [r2, #4]
 800cbd8:	6059      	str	r1, [r3, #4]
 800cbda:	6892      	ldr	r2, [r2, #8]
 800cbdc:	609a      	str	r2, [r3, #8]
 800cbde:	4629      	mov	r1, r5
 800cbe0:	4648      	mov	r0, r9
 800cbe2:	f7ff fb71 	bl	800c2c8 <_free_r>
 800cbe6:	4648      	mov	r0, r9
 800cbe8:	f7fe f81a 	bl	800ac20 <__malloc_unlock>
 800cbec:	4638      	mov	r0, r7
 800cbee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf2:	f024 0407 	bic.w	r4, r4, #7
 800cbf6:	2c00      	cmp	r4, #0
 800cbf8:	4622      	mov	r2, r4
 800cbfa:	da9d      	bge.n	800cb38 <_realloc_r+0x20>
 800cbfc:	230c      	movs	r3, #12
 800cbfe:	f8c9 3000 	str.w	r3, [r9]
 800cc02:	2700      	movs	r7, #0
 800cc04:	4638      	mov	r0, r7
 800cc06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc0a:	465f      	mov	r7, fp
 800cc0c:	f8db 100c 	ldr.w	r1, [fp, #12]
 800cc10:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800cc14:	1f32      	subs	r2, r6, #4
 800cc16:	2a24      	cmp	r2, #36	; 0x24
 800cc18:	60c1      	str	r1, [r0, #12]
 800cc1a:	eb0b 0a03 	add.w	sl, fp, r3
 800cc1e:	6088      	str	r0, [r1, #8]
 800cc20:	f200 80d9 	bhi.w	800cdd6 <_realloc_r+0x2be>
 800cc24:	2a13      	cmp	r2, #19
 800cc26:	6829      	ldr	r1, [r5, #0]
 800cc28:	f240 80d3 	bls.w	800cdd2 <_realloc_r+0x2ba>
 800cc2c:	f8cb 1008 	str.w	r1, [fp, #8]
 800cc30:	6869      	ldr	r1, [r5, #4]
 800cc32:	f8cb 100c 	str.w	r1, [fp, #12]
 800cc36:	2a1b      	cmp	r2, #27
 800cc38:	68a9      	ldr	r1, [r5, #8]
 800cc3a:	f200 80e0 	bhi.w	800cdfe <_realloc_r+0x2e6>
 800cc3e:	f10b 0210 	add.w	r2, fp, #16
 800cc42:	3508      	adds	r5, #8
 800cc44:	6011      	str	r1, [r2, #0]
 800cc46:	6869      	ldr	r1, [r5, #4]
 800cc48:	6051      	str	r1, [r2, #4]
 800cc4a:	68a9      	ldr	r1, [r5, #8]
 800cc4c:	6091      	str	r1, [r2, #8]
 800cc4e:	461e      	mov	r6, r3
 800cc50:	46d8      	mov	r8, fp
 800cc52:	463d      	mov	r5, r7
 800cc54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc58:	1b32      	subs	r2, r6, r4
 800cc5a:	2a0f      	cmp	r2, #15
 800cc5c:	f003 0301 	and.w	r3, r3, #1
 800cc60:	d820      	bhi.n	800cca4 <_realloc_r+0x18c>
 800cc62:	4333      	orrs	r3, r6
 800cc64:	f8c8 3004 	str.w	r3, [r8, #4]
 800cc68:	f8da 3004 	ldr.w	r3, [sl, #4]
 800cc6c:	f043 0301 	orr.w	r3, r3, #1
 800cc70:	f8ca 3004 	str.w	r3, [sl, #4]
 800cc74:	4648      	mov	r0, r9
 800cc76:	462f      	mov	r7, r5
 800cc78:	f7fd ffd2 	bl	800ac20 <__malloc_unlock>
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc82:	f01e 0f01 	tst.w	lr, #1
 800cc86:	d18b      	bne.n	800cba0 <_realloc_r+0x88>
 800cc88:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800cc8c:	eba8 0b03 	sub.w	fp, r8, r3
 800cc90:	f8db 1004 	ldr.w	r1, [fp, #4]
 800cc94:	f021 0103 	bic.w	r1, r1, #3
 800cc98:	e77f      	b.n	800cb9a <_realloc_r+0x82>
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca0:	f7fd bbb8 	b.w	800a414 <_malloc_r>
 800cca4:	eb08 0104 	add.w	r1, r8, r4
 800cca8:	4323      	orrs	r3, r4
 800ccaa:	f042 0201 	orr.w	r2, r2, #1
 800ccae:	f8c8 3004 	str.w	r3, [r8, #4]
 800ccb2:	604a      	str	r2, [r1, #4]
 800ccb4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ccb8:	f043 0301 	orr.w	r3, r3, #1
 800ccbc:	3108      	adds	r1, #8
 800ccbe:	f8ca 3004 	str.w	r3, [sl, #4]
 800ccc2:	4648      	mov	r0, r9
 800ccc4:	f7ff fb00 	bl	800c2c8 <_free_r>
 800ccc8:	e7d4      	b.n	800cc74 <_realloc_r+0x15c>
 800ccca:	f020 0003 	bic.w	r0, r0, #3
 800ccce:	1831      	adds	r1, r6, r0
 800ccd0:	f104 0c10 	add.w	ip, r4, #16
 800ccd4:	4561      	cmp	r1, ip
 800ccd6:	da4f      	bge.n	800cd78 <_realloc_r+0x260>
 800ccd8:	f01e 0f01 	tst.w	lr, #1
 800ccdc:	f47f af60 	bne.w	800cba0 <_realloc_r+0x88>
 800cce0:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800cce4:	eba8 0b01 	sub.w	fp, r8, r1
 800cce8:	f8db 1004 	ldr.w	r1, [fp, #4]
 800ccec:	f021 0103 	bic.w	r1, r1, #3
 800ccf0:	4408      	add	r0, r1
 800ccf2:	eb00 0a06 	add.w	sl, r0, r6
 800ccf6:	45d4      	cmp	ip, sl
 800ccf8:	f73f af4f 	bgt.w	800cb9a <_realloc_r+0x82>
 800ccfc:	465f      	mov	r7, fp
 800ccfe:	f8db 100c 	ldr.w	r1, [fp, #12]
 800cd02:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800cd06:	1f32      	subs	r2, r6, #4
 800cd08:	2a24      	cmp	r2, #36	; 0x24
 800cd0a:	60c1      	str	r1, [r0, #12]
 800cd0c:	6088      	str	r0, [r1, #8]
 800cd0e:	f200 8099 	bhi.w	800ce44 <_realloc_r+0x32c>
 800cd12:	2a13      	cmp	r2, #19
 800cd14:	6829      	ldr	r1, [r5, #0]
 800cd16:	f240 8093 	bls.w	800ce40 <_realloc_r+0x328>
 800cd1a:	f8cb 1008 	str.w	r1, [fp, #8]
 800cd1e:	6869      	ldr	r1, [r5, #4]
 800cd20:	f8cb 100c 	str.w	r1, [fp, #12]
 800cd24:	2a1b      	cmp	r2, #27
 800cd26:	68a9      	ldr	r1, [r5, #8]
 800cd28:	f200 8092 	bhi.w	800ce50 <_realloc_r+0x338>
 800cd2c:	f10b 0210 	add.w	r2, fp, #16
 800cd30:	3508      	adds	r5, #8
 800cd32:	6011      	str	r1, [r2, #0]
 800cd34:	6869      	ldr	r1, [r5, #4]
 800cd36:	6051      	str	r1, [r2, #4]
 800cd38:	68a9      	ldr	r1, [r5, #8]
 800cd3a:	6091      	str	r1, [r2, #8]
 800cd3c:	eb0b 0104 	add.w	r1, fp, r4
 800cd40:	ebaa 0204 	sub.w	r2, sl, r4
 800cd44:	f042 0201 	orr.w	r2, r2, #1
 800cd48:	6099      	str	r1, [r3, #8]
 800cd4a:	604a      	str	r2, [r1, #4]
 800cd4c:	f8db 3004 	ldr.w	r3, [fp, #4]
 800cd50:	f003 0301 	and.w	r3, r3, #1
 800cd54:	431c      	orrs	r4, r3
 800cd56:	4648      	mov	r0, r9
 800cd58:	f8cb 4004 	str.w	r4, [fp, #4]
 800cd5c:	f7fd ff60 	bl	800ac20 <__malloc_unlock>
 800cd60:	e750      	b.n	800cc04 <_realloc_r+0xec>
 800cd62:	6001      	str	r1, [r0, #0]
 800cd64:	686b      	ldr	r3, [r5, #4]
 800cd66:	6043      	str	r3, [r0, #4]
 800cd68:	2a1b      	cmp	r2, #27
 800cd6a:	d83c      	bhi.n	800cde6 <_realloc_r+0x2ce>
 800cd6c:	f105 0208 	add.w	r2, r5, #8
 800cd70:	f100 0308 	add.w	r3, r0, #8
 800cd74:	68a9      	ldr	r1, [r5, #8]
 800cd76:	e72d      	b.n	800cbd4 <_realloc_r+0xbc>
 800cd78:	eb08 0004 	add.w	r0, r8, r4
 800cd7c:	1b0a      	subs	r2, r1, r4
 800cd7e:	f042 0201 	orr.w	r2, r2, #1
 800cd82:	6098      	str	r0, [r3, #8]
 800cd84:	6042      	str	r2, [r0, #4]
 800cd86:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800cd8a:	f003 0301 	and.w	r3, r3, #1
 800cd8e:	431c      	orrs	r4, r3
 800cd90:	4648      	mov	r0, r9
 800cd92:	f845 4c04 	str.w	r4, [r5, #-4]
 800cd96:	f7fd ff43 	bl	800ac20 <__malloc_unlock>
 800cd9a:	462f      	mov	r7, r5
 800cd9c:	e732      	b.n	800cc04 <_realloc_r+0xec>
 800cd9e:	e9da 1202 	ldrd	r1, r2, [sl, #8]
 800cda2:	461e      	mov	r6, r3
 800cda4:	60ca      	str	r2, [r1, #12]
 800cda6:	eb08 0a03 	add.w	sl, r8, r3
 800cdaa:	6091      	str	r1, [r2, #8]
 800cdac:	e752      	b.n	800cc54 <_realloc_r+0x13c>
 800cdae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800cdb2:	f023 0303 	bic.w	r3, r3, #3
 800cdb6:	441e      	add	r6, r3
 800cdb8:	eb08 0a06 	add.w	sl, r8, r6
 800cdbc:	e74a      	b.n	800cc54 <_realloc_r+0x13c>
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	f7fd fe74 	bl	800aaac <memmove>
 800cdc4:	e70b      	b.n	800cbde <_realloc_r+0xc6>
 800cdc6:	e9da 1202 	ldrd	r1, r2, [sl, #8]
 800cdca:	465f      	mov	r7, fp
 800cdcc:	60ca      	str	r2, [r1, #12]
 800cdce:	6091      	str	r1, [r2, #8]
 800cdd0:	e71c      	b.n	800cc0c <_realloc_r+0xf4>
 800cdd2:	463a      	mov	r2, r7
 800cdd4:	e736      	b.n	800cc44 <_realloc_r+0x12c>
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	4638      	mov	r0, r7
 800cdda:	461e      	mov	r6, r3
 800cddc:	46d8      	mov	r8, fp
 800cdde:	f7fd fe65 	bl	800aaac <memmove>
 800cde2:	463d      	mov	r5, r7
 800cde4:	e736      	b.n	800cc54 <_realloc_r+0x13c>
 800cde6:	68ab      	ldr	r3, [r5, #8]
 800cde8:	6083      	str	r3, [r0, #8]
 800cdea:	68eb      	ldr	r3, [r5, #12]
 800cdec:	60c3      	str	r3, [r0, #12]
 800cdee:	2a24      	cmp	r2, #36	; 0x24
 800cdf0:	d011      	beq.n	800ce16 <_realloc_r+0x2fe>
 800cdf2:	f105 0210 	add.w	r2, r5, #16
 800cdf6:	f100 0310 	add.w	r3, r0, #16
 800cdfa:	6929      	ldr	r1, [r5, #16]
 800cdfc:	e6ea      	b.n	800cbd4 <_realloc_r+0xbc>
 800cdfe:	f8cb 1010 	str.w	r1, [fp, #16]
 800ce02:	68e9      	ldr	r1, [r5, #12]
 800ce04:	f8cb 1014 	str.w	r1, [fp, #20]
 800ce08:	2a24      	cmp	r2, #36	; 0x24
 800ce0a:	d00e      	beq.n	800ce2a <_realloc_r+0x312>
 800ce0c:	6929      	ldr	r1, [r5, #16]
 800ce0e:	f10b 0218 	add.w	r2, fp, #24
 800ce12:	3510      	adds	r5, #16
 800ce14:	e716      	b.n	800cc44 <_realloc_r+0x12c>
 800ce16:	692b      	ldr	r3, [r5, #16]
 800ce18:	6103      	str	r3, [r0, #16]
 800ce1a:	696b      	ldr	r3, [r5, #20]
 800ce1c:	6143      	str	r3, [r0, #20]
 800ce1e:	69a9      	ldr	r1, [r5, #24]
 800ce20:	f105 0218 	add.w	r2, r5, #24
 800ce24:	f100 0318 	add.w	r3, r0, #24
 800ce28:	e6d4      	b.n	800cbd4 <_realloc_r+0xbc>
 800ce2a:	692a      	ldr	r2, [r5, #16]
 800ce2c:	f8cb 2018 	str.w	r2, [fp, #24]
 800ce30:	696a      	ldr	r2, [r5, #20]
 800ce32:	f8cb 201c 	str.w	r2, [fp, #28]
 800ce36:	69a9      	ldr	r1, [r5, #24]
 800ce38:	f10b 0220 	add.w	r2, fp, #32
 800ce3c:	3518      	adds	r5, #24
 800ce3e:	e701      	b.n	800cc44 <_realloc_r+0x12c>
 800ce40:	463a      	mov	r2, r7
 800ce42:	e776      	b.n	800cd32 <_realloc_r+0x21a>
 800ce44:	4629      	mov	r1, r5
 800ce46:	4638      	mov	r0, r7
 800ce48:	f7fd fe30 	bl	800aaac <memmove>
 800ce4c:	4b0c      	ldr	r3, [pc, #48]	; (800ce80 <_realloc_r+0x368>)
 800ce4e:	e775      	b.n	800cd3c <_realloc_r+0x224>
 800ce50:	f8cb 1010 	str.w	r1, [fp, #16]
 800ce54:	68e9      	ldr	r1, [r5, #12]
 800ce56:	f8cb 1014 	str.w	r1, [fp, #20]
 800ce5a:	2a24      	cmp	r2, #36	; 0x24
 800ce5c:	d004      	beq.n	800ce68 <_realloc_r+0x350>
 800ce5e:	6929      	ldr	r1, [r5, #16]
 800ce60:	f10b 0218 	add.w	r2, fp, #24
 800ce64:	3510      	adds	r5, #16
 800ce66:	e764      	b.n	800cd32 <_realloc_r+0x21a>
 800ce68:	692a      	ldr	r2, [r5, #16]
 800ce6a:	f8cb 2018 	str.w	r2, [fp, #24]
 800ce6e:	696a      	ldr	r2, [r5, #20]
 800ce70:	f8cb 201c 	str.w	r2, [fp, #28]
 800ce74:	69a9      	ldr	r1, [r5, #24]
 800ce76:	f10b 0220 	add.w	r2, fp, #32
 800ce7a:	3518      	adds	r5, #24
 800ce7c:	e759      	b.n	800cd32 <_realloc_r+0x21a>
 800ce7e:	bf00      	nop
 800ce80:	200008c0 	.word	0x200008c0

0800ce84 <cleanup_glue>:
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	460c      	mov	r4, r1
 800ce88:	6809      	ldr	r1, [r1, #0]
 800ce8a:	4605      	mov	r5, r0
 800ce8c:	b109      	cbz	r1, 800ce92 <cleanup_glue+0xe>
 800ce8e:	f7ff fff9 	bl	800ce84 <cleanup_glue>
 800ce92:	4621      	mov	r1, r4
 800ce94:	4628      	mov	r0, r5
 800ce96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce9a:	f7ff ba15 	b.w	800c2c8 <_free_r>
 800ce9e:	bf00      	nop

0800cea0 <_reclaim_reent>:
 800cea0:	4b20      	ldr	r3, [pc, #128]	; (800cf24 <_reclaim_reent+0x84>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4283      	cmp	r3, r0
 800cea6:	d03b      	beq.n	800cf20 <_reclaim_reent+0x80>
 800cea8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ceaa:	b570      	push	{r4, r5, r6, lr}
 800ceac:	4605      	mov	r5, r0
 800ceae:	b18b      	cbz	r3, 800ced4 <_reclaim_reent+0x34>
 800ceb0:	2600      	movs	r6, #0
 800ceb2:	5999      	ldr	r1, [r3, r6]
 800ceb4:	b139      	cbz	r1, 800cec6 <_reclaim_reent+0x26>
 800ceb6:	680c      	ldr	r4, [r1, #0]
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f7ff fa05 	bl	800c2c8 <_free_r>
 800cebe:	4621      	mov	r1, r4
 800cec0:	2c00      	cmp	r4, #0
 800cec2:	d1f8      	bne.n	800ceb6 <_reclaim_reent+0x16>
 800cec4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800cec6:	3604      	adds	r6, #4
 800cec8:	2e80      	cmp	r6, #128	; 0x80
 800ceca:	d1f2      	bne.n	800ceb2 <_reclaim_reent+0x12>
 800cecc:	4619      	mov	r1, r3
 800cece:	4628      	mov	r0, r5
 800ced0:	f7ff f9fa 	bl	800c2c8 <_free_r>
 800ced4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800ced6:	b111      	cbz	r1, 800cede <_reclaim_reent+0x3e>
 800ced8:	4628      	mov	r0, r5
 800ceda:	f7ff f9f5 	bl	800c2c8 <_free_r>
 800cede:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800cee2:	b151      	cbz	r1, 800cefa <_reclaim_reent+0x5a>
 800cee4:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 800cee8:	42b1      	cmp	r1, r6
 800ceea:	d006      	beq.n	800cefa <_reclaim_reent+0x5a>
 800ceec:	680c      	ldr	r4, [r1, #0]
 800ceee:	4628      	mov	r0, r5
 800cef0:	f7ff f9ea 	bl	800c2c8 <_free_r>
 800cef4:	42a6      	cmp	r6, r4
 800cef6:	4621      	mov	r1, r4
 800cef8:	d1f8      	bne.n	800ceec <_reclaim_reent+0x4c>
 800cefa:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800cefc:	b111      	cbz	r1, 800cf04 <_reclaim_reent+0x64>
 800cefe:	4628      	mov	r0, r5
 800cf00:	f7ff f9e2 	bl	800c2c8 <_free_r>
 800cf04:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800cf06:	b153      	cbz	r3, 800cf1e <_reclaim_reent+0x7e>
 800cf08:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	4798      	blx	r3
 800cf0e:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 800cf12:	b121      	cbz	r1, 800cf1e <_reclaim_reent+0x7e>
 800cf14:	4628      	mov	r0, r5
 800cf16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf1a:	f7ff bfb3 	b.w	800ce84 <cleanup_glue>
 800cf1e:	bd70      	pop	{r4, r5, r6, pc}
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	20000490 	.word	0x20000490

0800cf28 <__sread>:
 800cf28:	b510      	push	{r4, lr}
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf30:	f7ff fddc 	bl	800caec <_read_r>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	db03      	blt.n	800cf40 <__sread+0x18>
 800cf38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cf3a:	4403      	add	r3, r0
 800cf3c:	6523      	str	r3, [r4, #80]	; 0x50
 800cf3e:	bd10      	pop	{r4, pc}
 800cf40:	89a3      	ldrh	r3, [r4, #12]
 800cf42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf46:	81a3      	strh	r3, [r4, #12]
 800cf48:	bd10      	pop	{r4, pc}
 800cf4a:	bf00      	nop

0800cf4c <__seofread>:
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	4770      	bx	lr

0800cf50 <__swrite>:
 800cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf54:	4616      	mov	r6, r2
 800cf56:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf5a:	461f      	mov	r7, r3
 800cf5c:	05d3      	lsls	r3, r2, #23
 800cf5e:	460c      	mov	r4, r1
 800cf60:	4605      	mov	r5, r0
 800cf62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf66:	d409      	bmi.n	800cf7c <__swrite+0x2c>
 800cf68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cf6c:	81a2      	strh	r2, [r4, #12]
 800cf6e:	463b      	mov	r3, r7
 800cf70:	4632      	mov	r2, r6
 800cf72:	4628      	mov	r0, r5
 800cf74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf78:	f000 ba46 	b.w	800d408 <_write_r>
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2302      	movs	r3, #2
 800cf80:	f000 fab6 	bl	800d4f0 <_lseek_r>
 800cf84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf8c:	e7ec      	b.n	800cf68 <__swrite+0x18>
 800cf8e:	bf00      	nop

0800cf90 <__sseek>:
 800cf90:	b510      	push	{r4, lr}
 800cf92:	460c      	mov	r4, r1
 800cf94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf98:	f000 faaa 	bl	800d4f0 <_lseek_r>
 800cf9c:	89a3      	ldrh	r3, [r4, #12]
 800cf9e:	1c42      	adds	r2, r0, #1
 800cfa0:	bf0e      	itee	eq
 800cfa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfaa:	6520      	strne	r0, [r4, #80]	; 0x50
 800cfac:	81a3      	strh	r3, [r4, #12]
 800cfae:	bd10      	pop	{r4, pc}

0800cfb0 <__sclose>:
 800cfb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb4:	f7fe bed4 	b.w	800bd60 <_close_r>
	...
 800cfc0:	eba2 0003 	sub.w	r0, r2, r3
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop

0800cfc8 <strcmp>:
 800cfc8:	7802      	ldrb	r2, [r0, #0]
 800cfca:	780b      	ldrb	r3, [r1, #0]
 800cfcc:	2a01      	cmp	r2, #1
 800cfce:	bf28      	it	cs
 800cfd0:	429a      	cmpcs	r2, r3
 800cfd2:	d1f5      	bne.n	800cfc0 <__sclose+0x10>
 800cfd4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 800cfd8:	ea40 0401 	orr.w	r4, r0, r1
 800cfdc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cfe0:	f06f 0c00 	mvn.w	ip, #0
 800cfe4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 800cfe8:	b312      	cbz	r2, 800d030 <strcmp+0x68>
 800cfea:	ea80 0401 	eor.w	r4, r0, r1
 800cfee:	f014 0f07 	tst.w	r4, #7
 800cff2:	d16a      	bne.n	800d0ca <strcmp+0x102>
 800cff4:	f000 0407 	and.w	r4, r0, #7
 800cff8:	f020 0007 	bic.w	r0, r0, #7
 800cffc:	f004 0503 	and.w	r5, r4, #3
 800d000:	f021 0107 	bic.w	r1, r1, #7
 800d004:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800d008:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800d00c:	f014 0f04 	tst.w	r4, #4
 800d010:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800d014:	fa0c f405 	lsl.w	r4, ip, r5
 800d018:	ea62 0204 	orn	r2, r2, r4
 800d01c:	ea66 0604 	orn	r6, r6, r4
 800d020:	d00a      	beq.n	800d038 <strcmp+0x70>
 800d022:	ea63 0304 	orn	r3, r3, r4
 800d026:	4662      	mov	r2, ip
 800d028:	ea67 0704 	orn	r7, r7, r4
 800d02c:	4666      	mov	r6, ip
 800d02e:	e003      	b.n	800d038 <strcmp+0x70>
 800d030:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800d034:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800d038:	fa82 f54c 	uadd8	r5, r2, ip
 800d03c:	ea82 0406 	eor.w	r4, r2, r6
 800d040:	faa4 f48c 	sel	r4, r4, ip
 800d044:	bb6c      	cbnz	r4, 800d0a2 <strcmp+0xda>
 800d046:	fa83 f54c 	uadd8	r5, r3, ip
 800d04a:	ea83 0507 	eor.w	r5, r3, r7
 800d04e:	faa5 f58c 	sel	r5, r5, ip
 800d052:	b995      	cbnz	r5, 800d07a <strcmp+0xb2>
 800d054:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 800d058:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800d05c:	fa82 f54c 	uadd8	r5, r2, ip
 800d060:	ea82 0406 	eor.w	r4, r2, r6
 800d064:	faa4 f48c 	sel	r4, r4, ip
 800d068:	fa83 f54c 	uadd8	r5, r3, ip
 800d06c:	ea83 0507 	eor.w	r5, r3, r7
 800d070:	faa5 f58c 	sel	r5, r5, ip
 800d074:	4325      	orrs	r5, r4
 800d076:	d0db      	beq.n	800d030 <strcmp+0x68>
 800d078:	b99c      	cbnz	r4, 800d0a2 <strcmp+0xda>
 800d07a:	ba2d      	rev	r5, r5
 800d07c:	fab5 f485 	clz	r4, r5
 800d080:	f024 0407 	bic.w	r4, r4, #7
 800d084:	fa27 f104 	lsr.w	r1, r7, r4
 800d088:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d08c:	fa23 f304 	lsr.w	r3, r3, r4
 800d090:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800d094:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800d098:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d09c:	eba0 0001 	sub.w	r0, r0, r1
 800d0a0:	4770      	bx	lr
 800d0a2:	ba24      	rev	r4, r4
 800d0a4:	fab4 f484 	clz	r4, r4
 800d0a8:	f024 0407 	bic.w	r4, r4, #7
 800d0ac:	fa26 f104 	lsr.w	r1, r6, r4
 800d0b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d0b4:	fa22 f204 	lsr.w	r2, r2, r4
 800d0b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800d0bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800d0c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d0c4:	eba0 0001 	sub.w	r0, r0, r1
 800d0c8:	4770      	bx	lr
 800d0ca:	f014 0f03 	tst.w	r4, #3
 800d0ce:	d13c      	bne.n	800d14a <strcmp+0x182>
 800d0d0:	f010 0403 	ands.w	r4, r0, #3
 800d0d4:	d128      	bne.n	800d128 <strcmp+0x160>
 800d0d6:	f850 2b08 	ldr.w	r2, [r0], #8
 800d0da:	f851 3b08 	ldr.w	r3, [r1], #8
 800d0de:	fa82 f54c 	uadd8	r5, r2, ip
 800d0e2:	ea82 0503 	eor.w	r5, r2, r3
 800d0e6:	faa5 f58c 	sel	r5, r5, ip
 800d0ea:	b95d      	cbnz	r5, 800d104 <strcmp+0x13c>
 800d0ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d0f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0f4:	fa82 f54c 	uadd8	r5, r2, ip
 800d0f8:	ea82 0503 	eor.w	r5, r2, r3
 800d0fc:	faa5 f58c 	sel	r5, r5, ip
 800d100:	2d00      	cmp	r5, #0
 800d102:	d0e8      	beq.n	800d0d6 <strcmp+0x10e>
 800d104:	ba2d      	rev	r5, r5
 800d106:	fab5 f485 	clz	r4, r5
 800d10a:	f024 0407 	bic.w	r4, r4, #7
 800d10e:	fa23 f104 	lsr.w	r1, r3, r4
 800d112:	fa22 f204 	lsr.w	r2, r2, r4
 800d116:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800d11a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800d11e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d122:	eba0 0001 	sub.w	r0, r0, r1
 800d126:	4770      	bx	lr
 800d128:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800d12c:	f020 0003 	bic.w	r0, r0, #3
 800d130:	f850 2b08 	ldr.w	r2, [r0], #8
 800d134:	f021 0103 	bic.w	r1, r1, #3
 800d138:	f851 3b08 	ldr.w	r3, [r1], #8
 800d13c:	fa0c f404 	lsl.w	r4, ip, r4
 800d140:	ea62 0204 	orn	r2, r2, r4
 800d144:	ea63 0304 	orn	r3, r3, r4
 800d148:	e7c9      	b.n	800d0de <strcmp+0x116>
 800d14a:	f010 0403 	ands.w	r4, r0, #3
 800d14e:	d01a      	beq.n	800d186 <strcmp+0x1be>
 800d150:	eba1 0104 	sub.w	r1, r1, r4
 800d154:	f020 0003 	bic.w	r0, r0, #3
 800d158:	07e4      	lsls	r4, r4, #31
 800d15a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d15e:	d006      	beq.n	800d16e <strcmp+0x1a6>
 800d160:	d20f      	bcs.n	800d182 <strcmp+0x1ba>
 800d162:	788b      	ldrb	r3, [r1, #2]
 800d164:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 800d168:	1ae4      	subs	r4, r4, r3
 800d16a:	d106      	bne.n	800d17a <strcmp+0x1b2>
 800d16c:	b12b      	cbz	r3, 800d17a <strcmp+0x1b2>
 800d16e:	78cb      	ldrb	r3, [r1, #3]
 800d170:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 800d174:	1ae4      	subs	r4, r4, r3
 800d176:	d100      	bne.n	800d17a <strcmp+0x1b2>
 800d178:	b91b      	cbnz	r3, 800d182 <strcmp+0x1ba>
 800d17a:	4620      	mov	r0, r4
 800d17c:	f85d 4b10 	ldr.w	r4, [sp], #16
 800d180:	4770      	bx	lr
 800d182:	f101 0104 	add.w	r1, r1, #4
 800d186:	f850 2b04 	ldr.w	r2, [r0], #4
 800d18a:	07cc      	lsls	r4, r1, #31
 800d18c:	f021 0103 	bic.w	r1, r1, #3
 800d190:	f851 3b04 	ldr.w	r3, [r1], #4
 800d194:	d848      	bhi.n	800d228 <strcmp+0x260>
 800d196:	d224      	bcs.n	800d1e2 <strcmp+0x21a>
 800d198:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800d19c:	fa82 f54c 	uadd8	r5, r2, ip
 800d1a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 800d1a4:	faa5 f58c 	sel	r5, r5, ip
 800d1a8:	d10a      	bne.n	800d1c0 <strcmp+0x1f8>
 800d1aa:	b965      	cbnz	r5, 800d1c6 <strcmp+0x1fe>
 800d1ac:	f851 3b04 	ldr.w	r3, [r1], #4
 800d1b0:	ea84 0402 	eor.w	r4, r4, r2
 800d1b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 800d1b8:	d10e      	bne.n	800d1d8 <strcmp+0x210>
 800d1ba:	f850 2b04 	ldr.w	r2, [r0], #4
 800d1be:	e7eb      	b.n	800d198 <strcmp+0x1d0>
 800d1c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d1c4:	e055      	b.n	800d272 <strcmp+0x2aa>
 800d1c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800d1ca:	d14d      	bne.n	800d268 <strcmp+0x2a0>
 800d1cc:	7808      	ldrb	r0, [r1, #0]
 800d1ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d1d2:	f1c0 0000 	rsb	r0, r0, #0
 800d1d6:	4770      	bx	lr
 800d1d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800d1dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800d1e0:	e047      	b.n	800d272 <strcmp+0x2aa>
 800d1e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 800d1e6:	fa82 f54c 	uadd8	r5, r2, ip
 800d1ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800d1ee:	faa5 f58c 	sel	r5, r5, ip
 800d1f2:	d10a      	bne.n	800d20a <strcmp+0x242>
 800d1f4:	b965      	cbnz	r5, 800d210 <strcmp+0x248>
 800d1f6:	f851 3b04 	ldr.w	r3, [r1], #4
 800d1fa:	ea84 0402 	eor.w	r4, r4, r2
 800d1fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 800d202:	d10c      	bne.n	800d21e <strcmp+0x256>
 800d204:	f850 2b04 	ldr.w	r2, [r0], #4
 800d208:	e7eb      	b.n	800d1e2 <strcmp+0x21a>
 800d20a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d20e:	e030      	b.n	800d272 <strcmp+0x2aa>
 800d210:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 800d214:	d128      	bne.n	800d268 <strcmp+0x2a0>
 800d216:	880b      	ldrh	r3, [r1, #0]
 800d218:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d21c:	e029      	b.n	800d272 <strcmp+0x2aa>
 800d21e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d222:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 800d226:	e024      	b.n	800d272 <strcmp+0x2aa>
 800d228:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800d22c:	fa82 f54c 	uadd8	r5, r2, ip
 800d230:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 800d234:	faa5 f58c 	sel	r5, r5, ip
 800d238:	d10a      	bne.n	800d250 <strcmp+0x288>
 800d23a:	b965      	cbnz	r5, 800d256 <strcmp+0x28e>
 800d23c:	f851 3b04 	ldr.w	r3, [r1], #4
 800d240:	ea84 0402 	eor.w	r4, r4, r2
 800d244:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 800d248:	d109      	bne.n	800d25e <strcmp+0x296>
 800d24a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d24e:	e7eb      	b.n	800d228 <strcmp+0x260>
 800d250:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800d254:	e00d      	b.n	800d272 <strcmp+0x2aa>
 800d256:	f015 0fff 	tst.w	r5, #255	; 0xff
 800d25a:	d105      	bne.n	800d268 <strcmp+0x2a0>
 800d25c:	680b      	ldr	r3, [r1, #0]
 800d25e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800d262:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d266:	e004      	b.n	800d272 <strcmp+0x2aa>
 800d268:	f04f 0000 	mov.w	r0, #0
 800d26c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d270:	4770      	bx	lr
 800d272:	ba12      	rev	r2, r2
 800d274:	ba1b      	rev	r3, r3
 800d276:	fa82 f44c 	uadd8	r4, r2, ip
 800d27a:	ea82 0403 	eor.w	r4, r2, r3
 800d27e:	faa4 f58c 	sel	r5, r4, ip
 800d282:	fab5 f485 	clz	r4, r5
 800d286:	fa02 f204 	lsl.w	r2, r2, r4
 800d28a:	fa03 f304 	lsl.w	r3, r3, r4
 800d28e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 800d292:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d296:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800d29a:	4770      	bx	lr

0800d29c <__swbuf_r>:
 800d29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29e:	460d      	mov	r5, r1
 800d2a0:	4614      	mov	r4, r2
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	b110      	cbz	r0, 800d2ac <__swbuf_r+0x10>
 800d2a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d043      	beq.n	800d334 <__swbuf_r+0x98>
 800d2ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2b0:	69a3      	ldr	r3, [r4, #24]
 800d2b2:	60a3      	str	r3, [r4, #8]
 800d2b4:	b291      	uxth	r1, r2
 800d2b6:	0708      	lsls	r0, r1, #28
 800d2b8:	d51b      	bpl.n	800d2f2 <__swbuf_r+0x56>
 800d2ba:	6923      	ldr	r3, [r4, #16]
 800d2bc:	b1cb      	cbz	r3, 800d2f2 <__swbuf_r+0x56>
 800d2be:	b2ed      	uxtb	r5, r5
 800d2c0:	0489      	lsls	r1, r1, #18
 800d2c2:	462f      	mov	r7, r5
 800d2c4:	d522      	bpl.n	800d30c <__swbuf_r+0x70>
 800d2c6:	6822      	ldr	r2, [r4, #0]
 800d2c8:	6961      	ldr	r1, [r4, #20]
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	4299      	cmp	r1, r3
 800d2ce:	dd29      	ble.n	800d324 <__swbuf_r+0x88>
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	68a1      	ldr	r1, [r4, #8]
 800d2d4:	1c50      	adds	r0, r2, #1
 800d2d6:	3901      	subs	r1, #1
 800d2d8:	60a1      	str	r1, [r4, #8]
 800d2da:	6020      	str	r0, [r4, #0]
 800d2dc:	7015      	strb	r5, [r2, #0]
 800d2de:	6962      	ldr	r2, [r4, #20]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d02a      	beq.n	800d33a <__swbuf_r+0x9e>
 800d2e4:	89a3      	ldrh	r3, [r4, #12]
 800d2e6:	07db      	lsls	r3, r3, #31
 800d2e8:	d501      	bpl.n	800d2ee <__swbuf_r+0x52>
 800d2ea:	2d0a      	cmp	r5, #10
 800d2ec:	d025      	beq.n	800d33a <__swbuf_r+0x9e>
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2f2:	4621      	mov	r1, r4
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f7fe fcc7 	bl	800bc88 <__swsetup_r>
 800d2fa:	bb20      	cbnz	r0, 800d346 <__swbuf_r+0xaa>
 800d2fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d300:	6923      	ldr	r3, [r4, #16]
 800d302:	b291      	uxth	r1, r2
 800d304:	b2ed      	uxtb	r5, r5
 800d306:	0489      	lsls	r1, r1, #18
 800d308:	462f      	mov	r7, r5
 800d30a:	d4dc      	bmi.n	800d2c6 <__swbuf_r+0x2a>
 800d30c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d30e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d312:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800d316:	81a2      	strh	r2, [r4, #12]
 800d318:	6822      	ldr	r2, [r4, #0]
 800d31a:	6661      	str	r1, [r4, #100]	; 0x64
 800d31c:	6961      	ldr	r1, [r4, #20]
 800d31e:	1ad3      	subs	r3, r2, r3
 800d320:	4299      	cmp	r1, r3
 800d322:	dcd5      	bgt.n	800d2d0 <__swbuf_r+0x34>
 800d324:	4621      	mov	r1, r4
 800d326:	4630      	mov	r0, r6
 800d328:	f7fe fdd2 	bl	800bed0 <_fflush_r>
 800d32c:	b958      	cbnz	r0, 800d346 <__swbuf_r+0xaa>
 800d32e:	6822      	ldr	r2, [r4, #0]
 800d330:	2301      	movs	r3, #1
 800d332:	e7ce      	b.n	800d2d2 <__swbuf_r+0x36>
 800d334:	f7fe fed2 	bl	800c0dc <__sinit>
 800d338:	e7b8      	b.n	800d2ac <__swbuf_r+0x10>
 800d33a:	4621      	mov	r1, r4
 800d33c:	4630      	mov	r0, r6
 800d33e:	f7fe fdc7 	bl	800bed0 <_fflush_r>
 800d342:	2800      	cmp	r0, #0
 800d344:	d0d3      	beq.n	800d2ee <__swbuf_r+0x52>
 800d346:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d34a:	e7d0      	b.n	800d2ee <__swbuf_r+0x52>

0800d34c <__swbuf>:
 800d34c:	4b02      	ldr	r3, [pc, #8]	; (800d358 <__swbuf+0xc>)
 800d34e:	460a      	mov	r2, r1
 800d350:	4601      	mov	r1, r0
 800d352:	6818      	ldr	r0, [r3, #0]
 800d354:	f7ff bfa2 	b.w	800d29c <__swbuf_r>
 800d358:	20000490 	.word	0x20000490

0800d35c <_wcrtomb_r>:
 800d35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d35e:	4c0b      	ldr	r4, [pc, #44]	; (800d38c <_wcrtomb_r+0x30>)
 800d360:	b085      	sub	sp, #20
 800d362:	4606      	mov	r6, r0
 800d364:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800d368:	461f      	mov	r7, r3
 800d36a:	b121      	cbz	r1, 800d376 <_wcrtomb_r+0x1a>
 800d36c:	47a0      	blx	r4
 800d36e:	1c43      	adds	r3, r0, #1
 800d370:	d006      	beq.n	800d380 <_wcrtomb_r+0x24>
 800d372:	b005      	add	sp, #20
 800d374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d376:	460a      	mov	r2, r1
 800d378:	a901      	add	r1, sp, #4
 800d37a:	47a0      	blx	r4
 800d37c:	1c43      	adds	r3, r0, #1
 800d37e:	d1f8      	bne.n	800d372 <_wcrtomb_r+0x16>
 800d380:	2200      	movs	r2, #0
 800d382:	238a      	movs	r3, #138	; 0x8a
 800d384:	603a      	str	r2, [r7, #0]
 800d386:	6033      	str	r3, [r6, #0]
 800d388:	b005      	add	sp, #20
 800d38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d38c:	20000cd0 	.word	0x20000cd0

0800d390 <wcrtomb>:
 800d390:	b570      	push	{r4, r5, r6, lr}
 800d392:	4b0f      	ldr	r3, [pc, #60]	; (800d3d0 <wcrtomb+0x40>)
 800d394:	4c0f      	ldr	r4, [pc, #60]	; (800d3d4 <wcrtomb+0x44>)
 800d396:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 800d39a:	6824      	ldr	r4, [r4, #0]
 800d39c:	b084      	sub	sp, #16
 800d39e:	4615      	mov	r5, r2
 800d3a0:	b140      	cbz	r0, 800d3b4 <wcrtomb+0x24>
 800d3a2:	460a      	mov	r2, r1
 800d3a4:	462b      	mov	r3, r5
 800d3a6:	4601      	mov	r1, r0
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	47b0      	blx	r6
 800d3ac:	1c43      	adds	r3, r0, #1
 800d3ae:	d008      	beq.n	800d3c2 <wcrtomb+0x32>
 800d3b0:	b004      	add	sp, #16
 800d3b2:	bd70      	pop	{r4, r5, r6, pc}
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	462b      	mov	r3, r5
 800d3b8:	a901      	add	r1, sp, #4
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	47b0      	blx	r6
 800d3be:	1c43      	adds	r3, r0, #1
 800d3c0:	d1f6      	bne.n	800d3b0 <wcrtomb+0x20>
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	238a      	movs	r3, #138	; 0x8a
 800d3c6:	602a      	str	r2, [r5, #0]
 800d3c8:	6023      	str	r3, [r4, #0]
 800d3ca:	b004      	add	sp, #16
 800d3cc:	bd70      	pop	{r4, r5, r6, pc}
 800d3ce:	bf00      	nop
 800d3d0:	20000cd0 	.word	0x20000cd0
 800d3d4:	20000490 	.word	0x20000490

0800d3d8 <_wctomb_r>:
 800d3d8:	b410      	push	{r4}
 800d3da:	4c03      	ldr	r4, [pc, #12]	; (800d3e8 <_wctomb_r+0x10>)
 800d3dc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800d3e0:	46a4      	mov	ip, r4
 800d3e2:	bc10      	pop	{r4}
 800d3e4:	4760      	bx	ip
 800d3e6:	bf00      	nop
 800d3e8:	20000cd0 	.word	0x20000cd0

0800d3ec <__ascii_wctomb>:
 800d3ec:	b149      	cbz	r1, 800d402 <__ascii_wctomb+0x16>
 800d3ee:	2aff      	cmp	r2, #255	; 0xff
 800d3f0:	d802      	bhi.n	800d3f8 <__ascii_wctomb+0xc>
 800d3f2:	700a      	strb	r2, [r1, #0]
 800d3f4:	2001      	movs	r0, #1
 800d3f6:	4770      	bx	lr
 800d3f8:	238a      	movs	r3, #138	; 0x8a
 800d3fa:	6003      	str	r3, [r0, #0]
 800d3fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d400:	4770      	bx	lr
 800d402:	4608      	mov	r0, r1
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop

0800d408 <_write_r>:
 800d408:	b570      	push	{r4, r5, r6, lr}
 800d40a:	460d      	mov	r5, r1
 800d40c:	4c08      	ldr	r4, [pc, #32]	; (800d430 <_write_r+0x28>)
 800d40e:	4611      	mov	r1, r2
 800d410:	4606      	mov	r6, r0
 800d412:	461a      	mov	r2, r3
 800d414:	4628      	mov	r0, r5
 800d416:	2300      	movs	r3, #0
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	f000 fa39 	bl	800d890 <_write>
 800d41e:	1c43      	adds	r3, r0, #1
 800d420:	d000      	beq.n	800d424 <_write_r+0x1c>
 800d422:	bd70      	pop	{r4, r5, r6, pc}
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d0fb      	beq.n	800d422 <_write_r+0x1a>
 800d42a:	6033      	str	r3, [r6, #0]
 800d42c:	bd70      	pop	{r4, r5, r6, pc}
 800d42e:	bf00      	nop
 800d430:	2000161c 	.word	0x2000161c

0800d434 <_fclose_r>:
 800d434:	b570      	push	{r4, r5, r6, lr}
 800d436:	b139      	cbz	r1, 800d448 <_fclose_r+0x14>
 800d438:	4605      	mov	r5, r0
 800d43a:	460c      	mov	r4, r1
 800d43c:	b108      	cbz	r0, 800d442 <_fclose_r+0xe>
 800d43e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d440:	b383      	cbz	r3, 800d4a4 <_fclose_r+0x70>
 800d442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d446:	b913      	cbnz	r3, 800d44e <_fclose_r+0x1a>
 800d448:	2600      	movs	r6, #0
 800d44a:	4630      	mov	r0, r6
 800d44c:	bd70      	pop	{r4, r5, r6, pc}
 800d44e:	4621      	mov	r1, r4
 800d450:	4628      	mov	r0, r5
 800d452:	f7fe fc97 	bl	800bd84 <__sflush_r>
 800d456:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d458:	4606      	mov	r6, r0
 800d45a:	b133      	cbz	r3, 800d46a <_fclose_r+0x36>
 800d45c:	69e1      	ldr	r1, [r4, #28]
 800d45e:	4628      	mov	r0, r5
 800d460:	4798      	blx	r3
 800d462:	2800      	cmp	r0, #0
 800d464:	bfb8      	it	lt
 800d466:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	061b      	lsls	r3, r3, #24
 800d46e:	d420      	bmi.n	800d4b2 <_fclose_r+0x7e>
 800d470:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d472:	b141      	cbz	r1, 800d486 <_fclose_r+0x52>
 800d474:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d478:	4299      	cmp	r1, r3
 800d47a:	d002      	beq.n	800d482 <_fclose_r+0x4e>
 800d47c:	4628      	mov	r0, r5
 800d47e:	f7fe ff23 	bl	800c2c8 <_free_r>
 800d482:	2300      	movs	r3, #0
 800d484:	6323      	str	r3, [r4, #48]	; 0x30
 800d486:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d488:	b121      	cbz	r1, 800d494 <_fclose_r+0x60>
 800d48a:	4628      	mov	r0, r5
 800d48c:	f7fe ff1c 	bl	800c2c8 <_free_r>
 800d490:	2300      	movs	r3, #0
 800d492:	6463      	str	r3, [r4, #68]	; 0x44
 800d494:	f7fe fe26 	bl	800c0e4 <__sfp_lock_acquire>
 800d498:	2300      	movs	r3, #0
 800d49a:	81a3      	strh	r3, [r4, #12]
 800d49c:	f7fe fe24 	bl	800c0e8 <__sfp_lock_release>
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	bd70      	pop	{r4, r5, r6, pc}
 800d4a4:	f7fe fe1a 	bl	800c0dc <__sinit>
 800d4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d0cb      	beq.n	800d448 <_fclose_r+0x14>
 800d4b0:	e7cd      	b.n	800d44e <_fclose_r+0x1a>
 800d4b2:	6921      	ldr	r1, [r4, #16]
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f7fe ff07 	bl	800c2c8 <_free_r>
 800d4ba:	e7d9      	b.n	800d470 <_fclose_r+0x3c>

0800d4bc <fclose>:
 800d4bc:	4b02      	ldr	r3, [pc, #8]	; (800d4c8 <fclose+0xc>)
 800d4be:	4601      	mov	r1, r0
 800d4c0:	6818      	ldr	r0, [r3, #0]
 800d4c2:	f7ff bfb7 	b.w	800d434 <_fclose_r>
 800d4c6:	bf00      	nop
 800d4c8:	20000490 	.word	0x20000490

0800d4cc <_isatty_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	4c07      	ldr	r4, [pc, #28]	; (800d4ec <_isatty_r+0x20>)
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	4608      	mov	r0, r1
 800d4d6:	6023      	str	r3, [r4, #0]
 800d4d8:	f000 f9b2 	bl	800d840 <_isatty>
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	d000      	beq.n	800d4e2 <_isatty_r+0x16>
 800d4e0:	bd38      	pop	{r3, r4, r5, pc}
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d0fb      	beq.n	800d4e0 <_isatty_r+0x14>
 800d4e8:	602b      	str	r3, [r5, #0]
 800d4ea:	bd38      	pop	{r3, r4, r5, pc}
 800d4ec:	2000161c 	.word	0x2000161c

0800d4f0 <_lseek_r>:
 800d4f0:	b570      	push	{r4, r5, r6, lr}
 800d4f2:	460d      	mov	r5, r1
 800d4f4:	4c08      	ldr	r4, [pc, #32]	; (800d518 <_lseek_r+0x28>)
 800d4f6:	4611      	mov	r1, r2
 800d4f8:	4606      	mov	r6, r0
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	2300      	movs	r3, #0
 800d500:	6023      	str	r3, [r4, #0]
 800d502:	f000 f9ad 	bl	800d860 <_lseek>
 800d506:	1c43      	adds	r3, r0, #1
 800d508:	d000      	beq.n	800d50c <_lseek_r+0x1c>
 800d50a:	bd70      	pop	{r4, r5, r6, pc}
 800d50c:	6823      	ldr	r3, [r4, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d0fb      	beq.n	800d50a <_lseek_r+0x1a>
 800d512:	6033      	str	r3, [r6, #0]
 800d514:	bd70      	pop	{r4, r5, r6, pc}
 800d516:	bf00      	nop
 800d518:	2000161c 	.word	0x2000161c

0800d51c <__aeabi_uldivmod>:
 800d51c:	b953      	cbnz	r3, 800d534 <__aeabi_uldivmod+0x18>
 800d51e:	b94a      	cbnz	r2, 800d534 <__aeabi_uldivmod+0x18>
 800d520:	2900      	cmp	r1, #0
 800d522:	bf08      	it	eq
 800d524:	2800      	cmpeq	r0, #0
 800d526:	bf1c      	itt	ne
 800d528:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800d52c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800d530:	f000 b96c 	b.w	800d80c <__aeabi_idiv0>
 800d534:	f1ad 0c08 	sub.w	ip, sp, #8
 800d538:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800d53c:	f000 f806 	bl	800d54c <__udivmoddi4>
 800d540:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d548:	b004      	add	sp, #16
 800d54a:	4770      	bx	lr

0800d54c <__udivmoddi4>:
 800d54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d550:	9e08      	ldr	r6, [sp, #32]
 800d552:	460d      	mov	r5, r1
 800d554:	4604      	mov	r4, r0
 800d556:	468e      	mov	lr, r1
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f040 8082 	bne.w	800d662 <__udivmoddi4+0x116>
 800d55e:	428a      	cmp	r2, r1
 800d560:	4617      	mov	r7, r2
 800d562:	d946      	bls.n	800d5f2 <__udivmoddi4+0xa6>
 800d564:	fab2 f282 	clz	r2, r2
 800d568:	b14a      	cbz	r2, 800d57e <__udivmoddi4+0x32>
 800d56a:	f1c2 0120 	rsb	r1, r2, #32
 800d56e:	fa05 f302 	lsl.w	r3, r5, r2
 800d572:	fa20 f101 	lsr.w	r1, r0, r1
 800d576:	4097      	lsls	r7, r2
 800d578:	ea41 0e03 	orr.w	lr, r1, r3
 800d57c:	4094      	lsls	r4, r2
 800d57e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800d582:	0c23      	lsrs	r3, r4, #16
 800d584:	fbbe fcf8 	udiv	ip, lr, r8
 800d588:	b2b9      	uxth	r1, r7
 800d58a:	fb08 ee1c 	mls	lr, r8, ip, lr
 800d58e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800d592:	fb0c f001 	mul.w	r0, ip, r1
 800d596:	4298      	cmp	r0, r3
 800d598:	d90a      	bls.n	800d5b0 <__udivmoddi4+0x64>
 800d59a:	18fb      	adds	r3, r7, r3
 800d59c:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800d5a0:	f080 8116 	bcs.w	800d7d0 <__udivmoddi4+0x284>
 800d5a4:	4298      	cmp	r0, r3
 800d5a6:	f240 8113 	bls.w	800d7d0 <__udivmoddi4+0x284>
 800d5aa:	f1ac 0c02 	sub.w	ip, ip, #2
 800d5ae:	443b      	add	r3, r7
 800d5b0:	1a1b      	subs	r3, r3, r0
 800d5b2:	b2a4      	uxth	r4, r4
 800d5b4:	fbb3 f0f8 	udiv	r0, r3, r8
 800d5b8:	fb08 3310 	mls	r3, r8, r0, r3
 800d5bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800d5c0:	fb00 f101 	mul.w	r1, r0, r1
 800d5c4:	42a1      	cmp	r1, r4
 800d5c6:	d909      	bls.n	800d5dc <__udivmoddi4+0x90>
 800d5c8:	193c      	adds	r4, r7, r4
 800d5ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d5ce:	f080 8101 	bcs.w	800d7d4 <__udivmoddi4+0x288>
 800d5d2:	42a1      	cmp	r1, r4
 800d5d4:	f240 80fe 	bls.w	800d7d4 <__udivmoddi4+0x288>
 800d5d8:	3802      	subs	r0, #2
 800d5da:	443c      	add	r4, r7
 800d5dc:	1a64      	subs	r4, r4, r1
 800d5de:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	b11e      	cbz	r6, 800d5ee <__udivmoddi4+0xa2>
 800d5e6:	40d4      	lsrs	r4, r2
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	e9c6 4300 	strd	r4, r3, [r6]
 800d5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f2:	b902      	cbnz	r2, 800d5f6 <__udivmoddi4+0xaa>
 800d5f4:	deff      	udf	#255	; 0xff
 800d5f6:	fab2 f282 	clz	r2, r2
 800d5fa:	2a00      	cmp	r2, #0
 800d5fc:	d14f      	bne.n	800d69e <__udivmoddi4+0x152>
 800d5fe:	1bcb      	subs	r3, r1, r7
 800d600:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800d604:	fa1f f887 	uxth.w	r8, r7
 800d608:	2101      	movs	r1, #1
 800d60a:	fbb3 fcfe 	udiv	ip, r3, lr
 800d60e:	0c25      	lsrs	r5, r4, #16
 800d610:	fb0e 331c 	mls	r3, lr, ip, r3
 800d614:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800d618:	fb08 f30c 	mul.w	r3, r8, ip
 800d61c:	42ab      	cmp	r3, r5
 800d61e:	d907      	bls.n	800d630 <__udivmoddi4+0xe4>
 800d620:	197d      	adds	r5, r7, r5
 800d622:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800d626:	d202      	bcs.n	800d62e <__udivmoddi4+0xe2>
 800d628:	42ab      	cmp	r3, r5
 800d62a:	f200 80e7 	bhi.w	800d7fc <__udivmoddi4+0x2b0>
 800d62e:	4684      	mov	ip, r0
 800d630:	1aed      	subs	r5, r5, r3
 800d632:	b2a3      	uxth	r3, r4
 800d634:	fbb5 f0fe 	udiv	r0, r5, lr
 800d638:	fb0e 5510 	mls	r5, lr, r0, r5
 800d63c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800d640:	fb08 f800 	mul.w	r8, r8, r0
 800d644:	45a0      	cmp	r8, r4
 800d646:	d907      	bls.n	800d658 <__udivmoddi4+0x10c>
 800d648:	193c      	adds	r4, r7, r4
 800d64a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d64e:	d202      	bcs.n	800d656 <__udivmoddi4+0x10a>
 800d650:	45a0      	cmp	r8, r4
 800d652:	f200 80d7 	bhi.w	800d804 <__udivmoddi4+0x2b8>
 800d656:	4618      	mov	r0, r3
 800d658:	eba4 0408 	sub.w	r4, r4, r8
 800d65c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800d660:	e7c0      	b.n	800d5e4 <__udivmoddi4+0x98>
 800d662:	428b      	cmp	r3, r1
 800d664:	d908      	bls.n	800d678 <__udivmoddi4+0x12c>
 800d666:	2e00      	cmp	r6, #0
 800d668:	f000 80af 	beq.w	800d7ca <__udivmoddi4+0x27e>
 800d66c:	2100      	movs	r1, #0
 800d66e:	e9c6 0500 	strd	r0, r5, [r6]
 800d672:	4608      	mov	r0, r1
 800d674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d678:	fab3 f183 	clz	r1, r3
 800d67c:	2900      	cmp	r1, #0
 800d67e:	d14b      	bne.n	800d718 <__udivmoddi4+0x1cc>
 800d680:	42ab      	cmp	r3, r5
 800d682:	d302      	bcc.n	800d68a <__udivmoddi4+0x13e>
 800d684:	4282      	cmp	r2, r0
 800d686:	f200 80b7 	bhi.w	800d7f8 <__udivmoddi4+0x2ac>
 800d68a:	1a84      	subs	r4, r0, r2
 800d68c:	eb65 0303 	sbc.w	r3, r5, r3
 800d690:	2001      	movs	r0, #1
 800d692:	469e      	mov	lr, r3
 800d694:	2e00      	cmp	r6, #0
 800d696:	d0aa      	beq.n	800d5ee <__udivmoddi4+0xa2>
 800d698:	e9c6 4e00 	strd	r4, lr, [r6]
 800d69c:	e7a7      	b.n	800d5ee <__udivmoddi4+0xa2>
 800d69e:	f1c2 0c20 	rsb	ip, r2, #32
 800d6a2:	fa01 f302 	lsl.w	r3, r1, r2
 800d6a6:	4097      	lsls	r7, r2
 800d6a8:	fa20 f00c 	lsr.w	r0, r0, ip
 800d6ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800d6b0:	fa21 fc0c 	lsr.w	ip, r1, ip
 800d6b4:	4318      	orrs	r0, r3
 800d6b6:	fbbc f1fe 	udiv	r1, ip, lr
 800d6ba:	0c05      	lsrs	r5, r0, #16
 800d6bc:	fb0e cc11 	mls	ip, lr, r1, ip
 800d6c0:	fa1f f887 	uxth.w	r8, r7
 800d6c4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800d6c8:	fb01 f308 	mul.w	r3, r1, r8
 800d6cc:	42ab      	cmp	r3, r5
 800d6ce:	fa04 f402 	lsl.w	r4, r4, r2
 800d6d2:	d909      	bls.n	800d6e8 <__udivmoddi4+0x19c>
 800d6d4:	197d      	adds	r5, r7, r5
 800d6d6:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800d6da:	f080 808b 	bcs.w	800d7f4 <__udivmoddi4+0x2a8>
 800d6de:	42ab      	cmp	r3, r5
 800d6e0:	f240 8088 	bls.w	800d7f4 <__udivmoddi4+0x2a8>
 800d6e4:	3902      	subs	r1, #2
 800d6e6:	443d      	add	r5, r7
 800d6e8:	1aeb      	subs	r3, r5, r3
 800d6ea:	b285      	uxth	r5, r0
 800d6ec:	fbb3 f0fe 	udiv	r0, r3, lr
 800d6f0:	fb0e 3310 	mls	r3, lr, r0, r3
 800d6f4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800d6f8:	fb00 f308 	mul.w	r3, r0, r8
 800d6fc:	42ab      	cmp	r3, r5
 800d6fe:	d907      	bls.n	800d710 <__udivmoddi4+0x1c4>
 800d700:	197d      	adds	r5, r7, r5
 800d702:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800d706:	d271      	bcs.n	800d7ec <__udivmoddi4+0x2a0>
 800d708:	42ab      	cmp	r3, r5
 800d70a:	d96f      	bls.n	800d7ec <__udivmoddi4+0x2a0>
 800d70c:	3802      	subs	r0, #2
 800d70e:	443d      	add	r5, r7
 800d710:	1aeb      	subs	r3, r5, r3
 800d712:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800d716:	e778      	b.n	800d60a <__udivmoddi4+0xbe>
 800d718:	f1c1 0c20 	rsb	ip, r1, #32
 800d71c:	408b      	lsls	r3, r1
 800d71e:	fa22 f70c 	lsr.w	r7, r2, ip
 800d722:	431f      	orrs	r7, r3
 800d724:	fa20 f40c 	lsr.w	r4, r0, ip
 800d728:	fa05 f301 	lsl.w	r3, r5, r1
 800d72c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800d730:	fa25 f50c 	lsr.w	r5, r5, ip
 800d734:	431c      	orrs	r4, r3
 800d736:	0c23      	lsrs	r3, r4, #16
 800d738:	fbb5 f9fe 	udiv	r9, r5, lr
 800d73c:	fa1f f887 	uxth.w	r8, r7
 800d740:	fb0e 5519 	mls	r5, lr, r9, r5
 800d744:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800d748:	fb09 fa08 	mul.w	sl, r9, r8
 800d74c:	45aa      	cmp	sl, r5
 800d74e:	fa02 f201 	lsl.w	r2, r2, r1
 800d752:	fa00 f301 	lsl.w	r3, r0, r1
 800d756:	d908      	bls.n	800d76a <__udivmoddi4+0x21e>
 800d758:	197d      	adds	r5, r7, r5
 800d75a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800d75e:	d247      	bcs.n	800d7f0 <__udivmoddi4+0x2a4>
 800d760:	45aa      	cmp	sl, r5
 800d762:	d945      	bls.n	800d7f0 <__udivmoddi4+0x2a4>
 800d764:	f1a9 0902 	sub.w	r9, r9, #2
 800d768:	443d      	add	r5, r7
 800d76a:	eba5 050a 	sub.w	r5, r5, sl
 800d76e:	b2a4      	uxth	r4, r4
 800d770:	fbb5 f0fe 	udiv	r0, r5, lr
 800d774:	fb0e 5510 	mls	r5, lr, r0, r5
 800d778:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800d77c:	fb00 f808 	mul.w	r8, r0, r8
 800d780:	45a0      	cmp	r8, r4
 800d782:	d907      	bls.n	800d794 <__udivmoddi4+0x248>
 800d784:	193c      	adds	r4, r7, r4
 800d786:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800d78a:	d22d      	bcs.n	800d7e8 <__udivmoddi4+0x29c>
 800d78c:	45a0      	cmp	r8, r4
 800d78e:	d92b      	bls.n	800d7e8 <__udivmoddi4+0x29c>
 800d790:	3802      	subs	r0, #2
 800d792:	443c      	add	r4, r7
 800d794:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800d798:	eba4 0408 	sub.w	r4, r4, r8
 800d79c:	fba0 8902 	umull	r8, r9, r0, r2
 800d7a0:	454c      	cmp	r4, r9
 800d7a2:	46c6      	mov	lr, r8
 800d7a4:	464d      	mov	r5, r9
 800d7a6:	d319      	bcc.n	800d7dc <__udivmoddi4+0x290>
 800d7a8:	d016      	beq.n	800d7d8 <__udivmoddi4+0x28c>
 800d7aa:	b15e      	cbz	r6, 800d7c4 <__udivmoddi4+0x278>
 800d7ac:	ebb3 020e 	subs.w	r2, r3, lr
 800d7b0:	eb64 0405 	sbc.w	r4, r4, r5
 800d7b4:	fa04 fc0c 	lsl.w	ip, r4, ip
 800d7b8:	40ca      	lsrs	r2, r1
 800d7ba:	ea4c 0202 	orr.w	r2, ip, r2
 800d7be:	40cc      	lsrs	r4, r1
 800d7c0:	e9c6 2400 	strd	r2, r4, [r6]
 800d7c4:	2100      	movs	r1, #0
 800d7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	e70e      	b.n	800d5ee <__udivmoddi4+0xa2>
 800d7d0:	46ac      	mov	ip, r5
 800d7d2:	e6ed      	b.n	800d5b0 <__udivmoddi4+0x64>
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	e701      	b.n	800d5dc <__udivmoddi4+0x90>
 800d7d8:	4543      	cmp	r3, r8
 800d7da:	d2e6      	bcs.n	800d7aa <__udivmoddi4+0x25e>
 800d7dc:	ebb8 0e02 	subs.w	lr, r8, r2
 800d7e0:	eb69 0507 	sbc.w	r5, r9, r7
 800d7e4:	3801      	subs	r0, #1
 800d7e6:	e7e0      	b.n	800d7aa <__udivmoddi4+0x25e>
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	e7d3      	b.n	800d794 <__udivmoddi4+0x248>
 800d7ec:	4660      	mov	r0, ip
 800d7ee:	e78f      	b.n	800d710 <__udivmoddi4+0x1c4>
 800d7f0:	4681      	mov	r9, r0
 800d7f2:	e7ba      	b.n	800d76a <__udivmoddi4+0x21e>
 800d7f4:	4661      	mov	r1, ip
 800d7f6:	e777      	b.n	800d6e8 <__udivmoddi4+0x19c>
 800d7f8:	4608      	mov	r0, r1
 800d7fa:	e74b      	b.n	800d694 <__udivmoddi4+0x148>
 800d7fc:	f1ac 0c02 	sub.w	ip, ip, #2
 800d800:	443d      	add	r5, r7
 800d802:	e715      	b.n	800d630 <__udivmoddi4+0xe4>
 800d804:	3802      	subs	r0, #2
 800d806:	443c      	add	r4, r7
 800d808:	e726      	b.n	800d658 <__udivmoddi4+0x10c>
 800d80a:	bf00      	nop

0800d80c <__aeabi_idiv0>:
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop

0800d810 <_close>:
 800d810:	4b02      	ldr	r3, [pc, #8]	; (800d81c <_close+0xc>)
 800d812:	2258      	movs	r2, #88	; 0x58
 800d814:	601a      	str	r2, [r3, #0]
 800d816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d81a:	4770      	bx	lr
 800d81c:	2000161c 	.word	0x2000161c

0800d820 <_fstat>:
 800d820:	4b02      	ldr	r3, [pc, #8]	; (800d82c <_fstat+0xc>)
 800d822:	2258      	movs	r2, #88	; 0x58
 800d824:	601a      	str	r2, [r3, #0]
 800d826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d82a:	4770      	bx	lr
 800d82c:	2000161c 	.word	0x2000161c

0800d830 <_getpid>:
 800d830:	4b02      	ldr	r3, [pc, #8]	; (800d83c <_getpid+0xc>)
 800d832:	2258      	movs	r2, #88	; 0x58
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d83a:	4770      	bx	lr
 800d83c:	2000161c 	.word	0x2000161c

0800d840 <_isatty>:
 800d840:	4b02      	ldr	r3, [pc, #8]	; (800d84c <_isatty+0xc>)
 800d842:	2258      	movs	r2, #88	; 0x58
 800d844:	601a      	str	r2, [r3, #0]
 800d846:	2000      	movs	r0, #0
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	2000161c 	.word	0x2000161c

0800d850 <_kill>:
 800d850:	4b02      	ldr	r3, [pc, #8]	; (800d85c <_kill+0xc>)
 800d852:	2258      	movs	r2, #88	; 0x58
 800d854:	601a      	str	r2, [r3, #0]
 800d856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d85a:	4770      	bx	lr
 800d85c:	2000161c 	.word	0x2000161c

0800d860 <_lseek>:
 800d860:	4b02      	ldr	r3, [pc, #8]	; (800d86c <_lseek+0xc>)
 800d862:	2258      	movs	r2, #88	; 0x58
 800d864:	601a      	str	r2, [r3, #0]
 800d866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d86a:	4770      	bx	lr
 800d86c:	2000161c 	.word	0x2000161c

0800d870 <_open>:
 800d870:	4b02      	ldr	r3, [pc, #8]	; (800d87c <_open+0xc>)
 800d872:	2258      	movs	r2, #88	; 0x58
 800d874:	601a      	str	r2, [r3, #0]
 800d876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d87a:	4770      	bx	lr
 800d87c:	2000161c 	.word	0x2000161c

0800d880 <_read>:
 800d880:	4b02      	ldr	r3, [pc, #8]	; (800d88c <_read+0xc>)
 800d882:	2258      	movs	r2, #88	; 0x58
 800d884:	601a      	str	r2, [r3, #0]
 800d886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d88a:	4770      	bx	lr
 800d88c:	2000161c 	.word	0x2000161c

0800d890 <_write>:
 800d890:	4b02      	ldr	r3, [pc, #8]	; (800d89c <_write+0xc>)
 800d892:	2258      	movs	r2, #88	; 0x58
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d89a:	4770      	bx	lr
 800d89c:	2000161c 	.word	0x2000161c

0800d8a0 <_exit>:
 800d8a0:	e7fe      	b.n	800d8a0 <_exit>
 800d8a2:	bf00      	nop
 800d8a4:	42424242 	.word	0x42424242
 800d8a8:	42424242 	.word	0x42424242
 800d8ac:	00000000 	.word	0x00000000
 800d8b0:	0800dae4 	.word	0x0800dae4
 800d8b4:	10000000 	.word	0x10000000
 800d8b8:	00000093 	.word	0x00000093
 800d8bc:	00000110 	.word	0x00000110

0800d8c0 <DeviceDescriptor>:
 800d8c0:	01100112 40000002 0058058b 02010010     .......@..X.....
 800d8d0:	00000100                                ....

0800d8d4 <ConfigurationDescriptor>:
 800d8d4:	003e0209 80000102 00040932 02020100     ..>.....2.......
 800d8e4:	24050001 04011000 05060224 01000624     ...$....$...$...
 800d8f4:	03810507 09ff0008 02000104 0000000a     ................
 800d904:	02030507 07050040 40028205 00000500     ....@......@....

0800d914 <ProductString>:
 800d914:	00490320 00460000 00580000 00200000      .I...F...X... .
 800d924:	00430000 00440000 00430000 00000000     ..C...D...C.....
 800d934:	00000000                                ....

0800d938 <ManufacturerString>:
 800d938:	00490358 006e0000 00660000 00690000     X.I...n...f...i.
 800d948:	006e0000 00650000 006f0000 006e0000     ..n...e...o...n.
 800d958:	00200000 00540000 00650000 00630000     .. ...T...e...c.
 800d968:	00680000 006e0000 006f0000 006c0000     ..h...n...o...l.
 800d978:	006f0000 00670000 00690000 00650000     ..o...g...i...e.
 800d988:	00730000 00000000 00000000              ..s.........

0800d994 <LanguageString>:
 800d994:	04090304 00000000 0800dae4 0800dae4     ................

0800d9a4 <b64str.6139>:
 800d9a4:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
 800d9b4:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
 800d9c4:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
 800d9d4:	7a797877 33323130 37363534 5f2d3938     wxyz0123456789-_

0800d9e4 <b64>:
 800d9e4:	ffffffff ffffffff ffffffff ffffffff     ................
 800d9f4:	ffffffff ffffffff ffffffff ffffffff     ................
 800da04:	ffffffff ffffffff ffffffff ffff3eff     .............>..
 800da14:	37363534 3b3a3938 ffff3d3c ffffffff     456789:;<=......
 800da24:	020100ff 06050403 0a090807 0e0d0c0b     ................
 800da34:	1211100f 16151413 ff191817 3fffffff     ...............?
 800da44:	1c1b1aff 201f1e1d 24232221 28272625     ....... !"#$%&'(
 800da54:	2c2b2a29 302f2e2d ff333231 ffffffff     )*+,-./0123.....
 800da64:	ffffffff ffffffff ffffffff ffffffff     ................
 800da74:	ffffffff ffffffff ffffffff ffffffff     ................
 800da84:	ffffffff ffffffff ffffffff ffffffff     ................
 800da94:	ffffffff ffffffff ffffffff ffffffff     ................
 800daa4:	ffffffff ffffffff ffffffff ffffffff     ................
 800dab4:	ffffffff ffffffff ffffffff ffffffff     ................
 800dac4:	ffffffff ffffffff ffffffff ffffffff     ................
 800dad4:	ffffffff ffffffff ffffffff ffffffff     ................

0800dae4 <__stack_chk_guard>:
 800dae4:	deadbeef 736c6173 58303261 0000434d     ....salsa20XMC..
 800daf4:	65727473 6e2e6d61 65636e6f 203d2120     stream.nonce != 
 800db04:	6e697528 5f343674 30202974 00000055     (uint64_t) 0U...
 800db14:	646e6172 79626d6f 5f736574 736c6173     randombytes_sals
 800db24:	58303261 725f434d 6f646e61 00632e6d     a20XMC_random.c.
 800db34:	73696854 754a7349 54417473 74726968     ThisIsJustAThirt
 800db44:	6f775479 65747942 65655373 2e2e2e64     yTwoBytesSeed...
 800db54:	00000000 20746572 30203d3d 00000000     ....ret == 0....
 800db64:	0800dae4                                ....

0800db68 <__func__.7228>:
 800db68:	646e6172 79626d6f 5f736574 736c6173     randombytes_sals
 800db78:	58303261 725f434d 6f646e61 6e695f6d     a20XMC_random_in
 800db88:	00007469                                it..

0800db8c <__func__.7253>:
 800db8c:	646e6172 79626d6f 5f736574 736c6173     randombytes_sals
 800db9c:	58303261 725f434d 6f646e61 75625f6d     a20XMC_random_bu
 800dbac:	00000066                                f...

0800dbb0 <__func__.7262>:
 800dbb0:	646e6172 79626d6f 5f736574 736c6173     randombytes_sals
 800dbc0:	58303261 725f434d 6f646e61 65675f6d     a20XMC_random_ge
 800dbd0:	726f7774 00000064                       tword...

0800dbd8 <Driver_USBD0>:
 800dbd8:	0800174d 08001e29 08001a49 08001755     M...)...I...U...
 800dbe8:	0800176d 08001de1 080017dd 08001a6d     m...........m...
 800dbf8:	08001905 080017f5 08001785 08001cf5     ................
 800dc08:	08001d35 080018b1 08001a1d 08001a31     5...........1...
 800dc18:	000020a1 00020000 6b616c62 00623265     . ......blake2b.

0800dc28 <__func__.6147>:
 800dc28:	70797263 675f6f74 72656e65 61686369     crypto_genericha
 800dc38:	625f6873 656b616c 665f6232 6c616e69     sh_blake2b_final
 800dc48:	74756f00 206e656c 55203d3c 38544e49     .outlen <= UINT8
 800dc58:	58414d5f 79726300 5f6f7470 656e6567     _MAX.crypto_gene
 800dc68:	68636972 2f687361 6b616c62 2f623265     richash/blake2b/
 800dc78:	2f666572 656e6567 68636972 5f687361     ref/generichash_
 800dc88:	6b616c62 2e623265                        blake2b.c.

0800dc92 <nonce.6423>:
 800dc92:	7362694c 7569646f 4752446d              LibsodiumDRG

0800dc9e <__func__.6434>:
 800dc9e:	646e6172 79626d6f 00736574 5f667562     randombytes.buf_
 800dcae:	206e656c 53203d3c 5f455a49 0058414d     len <= SIZE_MAX.
 800dcbe:	646e6172 79626d6f 2f736574 646e6172     randombytes/rand
 800dcce:	79626d6f 2e736574                        ombytes.c.

0800dcd8 <__func__.7060>:
 800dcd8:	65666173 6165725f 79730064 6e617273     safe_read.sysran
 800dce8:	006d6f64 657a6973 28203e20 657a6973     dom.size > (size
 800dcf8:	2029745f 72005530 6f646e61 7479626d     _t) 0U.randombyt
 800dd08:	732f7365 61727379 6d6f646e 6e61722f     es/sysrandom/ran
 800dd18:	626d6f64 73657479 7379735f 646e6172     dombytes_sysrand
 800dd28:	632e6d6f 7a697300 3d3c2065 49535320     om.c.size <= SSI
 800dd38:	4d5f455a 2f005841 2f766564 6e617275     ZE_MAX./dev/uran
 800dd48:	006d6f64 7665642f 6e61722f 006d6f64     dom./dev/random.

0800dd58 <blake2b_IV>:
 800dd58:	f3bcc908 6a09e667 84caa73b bb67ae85     ....g..j;.....g.
 800dd68:	fe94f82b 3c6ef372 5f1d36f1 a54ff53a     +...r.n<.6._:.O.
 800dd78:	ade682d1 510e527f 2b3e6c1f 9b05688c     .....R.Q.l>+.h..
 800dd88:	fb41bd6b 1f83d9ab 137e2179 5be0cd19     k.A.....y!~....[

0800dd98 <__func__.6571>:
 800dd98:	70797263 675f6f74 72656e65 61686369     crypto_genericha
 800dda8:	625f6873 656b616c 5f5f6232 616e6966     sh_blake2b__fina
 800ddb8:	2d53006c 6675623e 206e656c 42203d3c     l.S->buflen <= B
 800ddc8:	454b414c 425f4232 4b434f4c 45545942     LAKE2B_BLOCKBYTE
 800ddd8:	72630053 6f747079 6e65675f 63697265     S.crypto_generic
 800dde8:	68736168 616c622f 6232656b 6665722f     hash/blake2b/ref
 800ddf8:	616c622f 6232656b 6665722d 0000632e     /blake2b-ref.c..
 800de08:	7566202c 6974636e 203a6e6f 00000000     , function: ....
 800de18:	65737361 6f697472 2522206e 66202273     assertion "%s" f
 800de28:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
 800de38:	696c202c 2520656e 25732564 00000a73     , line %d%s%s...

0800de48 <_global_impure_ptr>:
 800de48:	20000498                                ... 

0800de4c <blanks.7324>:
 800de4c:	20202020 20202020 20202020 20202020                     

0800de5c <zeroes.7325>:
 800de5c:	30303030 30303030 30303030 30303030     0000000000000000
 800de6c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800de7c:	00000000 33323130 37363534 62613938     ....0123456789ab
 800de8c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800de9c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0800deac <_ctype_>:
 800deac:	20202000 20202020 28282020 20282828     .         ((((( 
 800debc:	20202020 20202020 20202020 20202020                     
 800decc:	10108820 10101010 10101010 10101010      ...............
 800dedc:	04040410 04040404 10040404 10101010     ................
 800deec:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800defc:	01010101 01010101 01010101 10101010     ................
 800df0c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800df1c:	02020202 02020202 02020202 10101010     ................
 800df2c:	00000020 00000000 00000000 00000000      ...............
	...
