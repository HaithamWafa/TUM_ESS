
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006594  08000000  0c000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020468  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020468  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020468  2**0
                  CONTENTS
  5 .data         00000468  20000000  0c006594  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000630  20000468  0c0069fc  00020468  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020468  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000e00  30000000  0c0069fc  00030000  2**2
                  ALLOC
 10 .debug_aranges 000009a8  00000000  00000000  00020468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00022a29  00000000  00000000  00020e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003b78  00000000  00000000  00043839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000c66d  00000000  00000000  000473b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00002290  00000000  00000000  00053a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00083edd  00000000  00000000  00055cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00004c3f  00000000  00000000  000d9b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000007b8  00000000  00000000  000de7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .build_attributes 00000479  00000000  00000000  000def84  2**0
                  CONTENTS, READONLY
 19 .debug_macro  0001ca00  00000000  00000000  000df3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 05 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006594 	.word	0x0c006594
 800024c:	20000000 	.word	0x20000000
 8000250:	00000468 	.word	0x00000468
 8000254:	0c0069fc 	.word	0x0c0069fc
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c006594 	.word	0x0c006594
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c006594 	.word	0x0c006594
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000468 	.word	0x20000468
 800027c:	00000630 	.word	0x00000630
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	08005d91 	.word	0x08005d91
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	080061a1 	.word	0x080061a1
    ldr  r0, =main
 80002ac:	080002f9 	.word	0x080002f9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>

080002b2 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b083      	sub	sp, #12
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	460b      	mov	r3, r1
 80002bc:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80002be:	78fb      	ldrb	r3, [r7, #3]
 80002c0:	2201      	movs	r2, #1
 80002c2:	409a      	lsls	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	605a      	str	r2, [r3, #4]
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80002e6:	409a      	lsls	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	605a      	str	r2, [r3, #4]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <main>:

/**
 * Main program entry point. This routine configures the hardware required by
 * the application, then enters a loop to run the application tasks in sequence.
 */
int main(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
	// Init LED pins for debugging and NUM/CAPS visual report
	XMC_GPIO_SetMode(LED1,XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 80002fe:	2280      	movs	r2, #128	; 0x80
 8000300:	2101      	movs	r1, #1
 8000302:	480c      	ldr	r0, [pc, #48]	; (8000334 <main+0x3c>)
 8000304:	f001 feec 	bl	80020e0 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(LED2,XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 8000308:	2280      	movs	r2, #128	; 0x80
 800030a:	2100      	movs	r1, #0
 800030c:	4809      	ldr	r0, [pc, #36]	; (8000334 <main+0x3c>)
 800030e:	f001 fee7 	bl	80020e0 <XMC_GPIO_SetMode>
	USB_Init();
 8000312:	f000 f957 	bl	80005c4 <USB_Init>

	// Wait until host has enumerated HID device
	for(int i = 0; i < 10e6; ++i)
 8000316:	2300      	movs	r3, #0
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	e002      	b.n	8000322 <main+0x2a>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3301      	adds	r3, #1
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <main+0x40>)
 8000326:	4293      	cmp	r3, r2
 8000328:	dbf8      	blt.n	800031c <main+0x24>
		; 

	while (1) {
		HID_Device_USBTask(&Keyboard_HID_Interface);
 800032a:	4804      	ldr	r0, [pc, #16]	; (800033c <main+0x44>)
 800032c:	f002 f950 	bl	80025d0 <HID_Device_USBTask>
 8000330:	e7fb      	b.n	800032a <main+0x32>
 8000332:	bf00      	nop
 8000334:	48028100 	.word	0x48028100
 8000338:	00989680 	.word	0x00989680
 800033c:	2000000c 	.word	0x2000000c

08000340 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(
							USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
							uint8_t* const ReportID,
							const uint8_t ReportType,
							void* ReportData,
							uint16_t* const ReportSize ) {
 8000340:	b480      	push	{r7}
 8000342:	b087      	sub	sp, #28
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	4613      	mov	r3, r2
 800034e:	71fb      	strb	r3, [r7, #7]
	USB_KeyboardReport_Data_t* report = (USB_KeyboardReport_Data_t *)ReportData;
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	617b      	str	r3, [r7, #20]
	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
 8000354:	6a3b      	ldr	r3, [r7, #32]
 8000356:	2208      	movs	r2, #8
 8000358:	801a      	strh	r2, [r3, #0]
		GERMAN_KEYBOARD_SC_L, 
		GERMAN_KEYBOARD_SC_D, 
		GERMAN_KEYBOARD_SC_ENTER
	};

	if(indexToSend < 12) {
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <CALLBACK_HID_Device_CreateHIDReport+0x80>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b0b      	cmp	r3, #11
 8000360:	d826      	bhi.n	80003b0 <CALLBACK_HID_Device_CreateHIDReport+0x70>
		if(characterSent) {
 8000362:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <CALLBACK_HID_Device_CreateHIDReport+0x84>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d012      	beq.n	8000390 <CALLBACK_HID_Device_CreateHIDReport+0x50>
			report->Modifier = 0; 
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
			report->Reserved = 0; 
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	2200      	movs	r2, #0
 8000374:	705a      	strb	r2, [r3, #1]
			report->KeyCode[0] = 0; 
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	2200      	movs	r2, #0
 800037a:	709a      	strb	r2, [r3, #2]
			characterSent = 0;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <CALLBACK_HID_Device_CreateHIDReport+0x84>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
			++indexToSend; 
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <CALLBACK_HID_Device_CreateHIDReport+0x80>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <CALLBACK_HID_Device_CreateHIDReport+0x80>)
 800038c:	701a      	strb	r2, [r3, #0]
 800038e:	e00f      	b.n	80003b0 <CALLBACK_HID_Device_CreateHIDReport+0x70>
		} else {
			report->Modifier = 0; 
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
			report->Reserved = 0; 
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2200      	movs	r2, #0
 800039a:	705a      	strb	r2, [r3, #1]
			report->KeyCode[0] = stringToSend[indexToSend]; 
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <CALLBACK_HID_Device_CreateHIDReport+0x80>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <CALLBACK_HID_Device_CreateHIDReport+0x88>)
 80003a4:	5c9a      	ldrb	r2, [r3, r2]
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	709a      	strb	r2, [r3, #2]
			characterSent = 1;
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <CALLBACK_HID_Device_CreateHIDReport+0x84>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	701a      	strb	r2, [r3, #0]
		}
	}

	return true;
 80003b0:	2301      	movs	r3, #1
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	371c      	adds	r7, #28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	20000468 	.word	0x20000468
 80003c4:	20000469 	.word	0x20000469
 80003c8:	20000000 	.word	0x20000000

080003cc <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(
						USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
						const uint8_t ReportID,
						const uint8_t ReportType,
						const void* ReportData,
						const uint16_t ReportSize ) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	460b      	mov	r3, r1
 80003d8:	72fb      	strb	r3, [r7, #11]
 80003da:	4613      	mov	r3, r2
 80003dc:	72bb      	strb	r3, [r7, #10]
	uint8_t *report = (uint8_t*)ReportData;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	617b      	str	r3, [r7, #20]

	if(*report & HID_KEYBOARD_LED_NUMLOCK) 
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d004      	beq.n	80003f8 <CALLBACK_HID_Device_ProcessHIDReport+0x2c>
		XMC_GPIO_SetOutputHigh(LED1);
 80003ee:	2101      	movs	r1, #1
 80003f0:	480d      	ldr	r0, [pc, #52]	; (8000428 <CALLBACK_HID_Device_ProcessHIDReport+0x5c>)
 80003f2:	f7ff ff5e 	bl	80002b2 <XMC_GPIO_SetOutputHigh>
 80003f6:	e003      	b.n	8000400 <CALLBACK_HID_Device_ProcessHIDReport+0x34>
	else 
		XMC_GPIO_SetOutputLow(LED1);
 80003f8:	2101      	movs	r1, #1
 80003fa:	480b      	ldr	r0, [pc, #44]	; (8000428 <CALLBACK_HID_Device_ProcessHIDReport+0x5c>)
 80003fc:	f7ff ff6a 	bl	80002d4 <XMC_GPIO_SetOutputLow>

	if(*report & HID_KEYBOARD_LED_CAPSLOCK) 
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	f003 0302 	and.w	r3, r3, #2
 8000408:	2b00      	cmp	r3, #0
 800040a:	d004      	beq.n	8000416 <CALLBACK_HID_Device_ProcessHIDReport+0x4a>
		XMC_GPIO_SetOutputHigh(LED2);
 800040c:	2100      	movs	r1, #0
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <CALLBACK_HID_Device_ProcessHIDReport+0x5c>)
 8000410:	f7ff ff4f 	bl	80002b2 <XMC_GPIO_SetOutputHigh>
	else 
		XMC_GPIO_SetOutputLow(LED2);
}
 8000414:	e003      	b.n	800041e <CALLBACK_HID_Device_ProcessHIDReport+0x52>
		XMC_GPIO_SetOutputLow(LED2);
 8000416:	2100      	movs	r1, #0
 8000418:	4803      	ldr	r0, [pc, #12]	; (8000428 <CALLBACK_HID_Device_ProcessHIDReport+0x5c>)
 800041a:	f7ff ff5b 	bl	80002d4 <XMC_GPIO_SetOutputLow>
}
 800041e:	bf00      	nop
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	48028100 	.word	0x48028100

0800042c <SystemCoreClockSetup>:

void SystemCoreClockSetup(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	/* Setup settings for USB clock */
	XMC_SCU_CLOCK_Init(&clock_config);
 8000430:	480a      	ldr	r0, [pc, #40]	; (800045c <SystemCoreClockSetup+0x30>)
 8000432:	f000 fc49 	bl	8000cc8 <XMC_SCU_CLOCK_Init>

	XMC_SCU_CLOCK_EnableUsbPll();
 8000436:	f001 f90d 	bl	8001654 <XMC_SCU_CLOCK_EnableUsbPll>
	XMC_SCU_CLOCK_StartUsbPll(2, 64);
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	2002      	movs	r0, #2
 800043e:	f001 f92d 	bl	800169c <XMC_SCU_CLOCK_StartUsbPll>
	XMC_SCU_CLOCK_SetUsbClockDivider(4);
 8000442:	2004      	movs	r0, #4
 8000444:	f001 f844 	bl	80014d0 <XMC_SCU_CLOCK_SetUsbClockDivider>
	XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8000448:	2000      	movs	r0, #0
 800044a:	f000 ff49 	bl	80012e0 <XMC_SCU_CLOCK_SetUsbClockSource>
	XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 800044e:	2001      	movs	r0, #1
 8000450:	f001 f898 	bl	8001584 <XMC_SCU_CLOCK_EnableClock>

	SystemCoreClockUpdate();
 8000454:	f005 fdee 	bl	8006034 <SystemCoreClockUpdate>
}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	0800641c 	.word	0x0800641c

08000460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <__NVIC_GetPriorityGrouping+0x18>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	0a1b      	lsrs	r3, r3, #8
 800046a:	f003 0307 	and.w	r3, r3, #7
}
 800046e:	4618      	mov	r0, r3
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048a:	2b00      	cmp	r3, #0
 800048c:	db0b      	blt.n	80004a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	f003 021f 	and.w	r2, r3, #31
 8000494:	4907      	ldr	r1, [pc, #28]	; (80004b4 <__NVIC_EnableIRQ+0x38>)
 8000496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049a:	095b      	lsrs	r3, r3, #5
 800049c:	2001      	movs	r0, #1
 800049e:	fa00 f202 	lsl.w	r2, r0, r2
 80004a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e000e100 	.word	0xe000e100

080004b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	db0c      	blt.n	80004e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f003 021f 	and.w	r2, r3, #31
 80004d0:	4907      	ldr	r1, [pc, #28]	; (80004f0 <__NVIC_ClearPendingIRQ+0x38>)
 80004d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d6:	095b      	lsrs	r3, r3, #5
 80004d8:	2001      	movs	r0, #1
 80004da:	fa00 f202 	lsl.w	r2, r0, r2
 80004de:	3360      	adds	r3, #96	; 0x60
 80004e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	e000e100 	.word	0xe000e100

080004f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000504:	2b00      	cmp	r3, #0
 8000506:	db0a      	blt.n	800051e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	b2da      	uxtb	r2, r3
 800050c:	490c      	ldr	r1, [pc, #48]	; (8000540 <__NVIC_SetPriority+0x4c>)
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	0092      	lsls	r2, r2, #2
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	440b      	add	r3, r1
 8000518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800051c:	e00a      	b.n	8000534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4908      	ldr	r1, [pc, #32]	; (8000544 <__NVIC_SetPriority+0x50>)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	f003 030f 	and.w	r3, r3, #15
 800052a:	3b04      	subs	r3, #4
 800052c:	0092      	lsls	r2, r2, #2
 800052e:	b2d2      	uxtb	r2, r2
 8000530:	440b      	add	r3, r1
 8000532:	761a      	strb	r2, [r3, #24]
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	e000e100 	.word	0xe000e100
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000548:	b480      	push	{r7}
 800054a:	b089      	sub	sp, #36	; 0x24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	f1c3 0307 	rsb	r3, r3, #7
 8000562:	2b06      	cmp	r3, #6
 8000564:	bf28      	it	cs
 8000566:	2306      	movcs	r3, #6
 8000568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3306      	adds	r3, #6
 800056e:	2b06      	cmp	r3, #6
 8000570:	d902      	bls.n	8000578 <NVIC_EncodePriority+0x30>
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	3b01      	subs	r3, #1
 8000576:	e000      	b.n	800057a <NVIC_EncodePriority+0x32>
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800057c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	fa02 f303 	lsl.w	r3, r2, r3
 8000586:	43da      	mvns	r2, r3
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	401a      	ands	r2, r3
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000590:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	fa01 f303 	lsl.w	r3, r1, r3
 800059a:	43d9      	mvns	r1, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	4313      	orrs	r3, r2
         );
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3724      	adds	r7, #36	; 0x24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <USB0_0_IRQHandler>:
	.usbd_transfer_mode = XMC_USBD_USE_FIFO,
	.cb_xmc_device_event = USBD_SignalDeviceEventHandler,
	.cb_endpoint_event = USBD_SignalEndpointEvent_Handler
};

void USB0_0_IRQHandler(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	XMC_USBD_IRQHandler(&USB_runtime);
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <USB0_0_IRQHandler+0x10>)
 80005b6:	f004 fb13 	bl	8004be0 <XMC_USBD_IRQHandler>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000024 	.word	0x20000024

080005c4 <USB_Init>:

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	USBD_Initialize(&USB_runtime);
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <USB_Init+0x40>)
 80005ca:	f003 fc07 	bl	8003ddc <USBD_Initialize>

	/* Interrupts configuration*/
	NVIC_SetPriority( USB0_0_IRQn,
 80005ce:	f7ff ff47 	bl	8000460 <__NVIC_GetPriorityGrouping>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2200      	movs	r2, #0
 80005d6:	213f      	movs	r1, #63	; 0x3f
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ffb5 	bl	8000548 <NVIC_EncodePriority>
 80005de:	4603      	mov	r3, r0
 80005e0:	4619      	mov	r1, r3
 80005e2:	206b      	movs	r0, #107	; 0x6b
 80005e4:	f7ff ff86 	bl	80004f4 <__NVIC_SetPriority>
					  NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0) );
	NVIC_ClearPendingIRQ(USB0_0_IRQn);
 80005e8:	206b      	movs	r0, #107	; 0x6b
 80005ea:	f7ff ff65 	bl	80004b8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(USB0_0_IRQn);
 80005ee:	206b      	movs	r0, #107	; 0x6b
 80005f0:	f7ff ff44 	bl	800047c <__NVIC_EnableIRQ>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <USB_Init+0x44>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	4798      	blx	r3
			}
 80005fc:	bf00      	nop

	/* USB Connection*/
	USB_Attach();
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000024 	.word	0x20000024
 8000608:	20000740 	.word	0x20000740

0800060c <EVENT_USB_Device_>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_(void) {
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <EVENT_USB_Device_Connect>:
/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void) {
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
	//Device is ready!
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <EVENT_USB_Device_Reset>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	if(device.IsConfigured) {
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <EVENT_USB_Device_Reset+0x2c>)
 800062e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d008      	beq.n	800064e <EVENT_USB_Device_Reset+0x26>
		USB_Init();
 800063c:	f7ff ffc2 	bl	80005c4 <USB_Init>
		device.IsConfigured=0;
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <EVENT_USB_Device_Reset+0x2c>)
 8000642:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000646:	f36f 0300 	bfc	r3, #0, #1
 800064a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000740 	.word	0x20000740

08000658 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	bool ConfigSuccess = true;
 800065e:	2301      	movs	r3, #1
 8000660:	71fb      	strb	r3, [r7, #7]

	USBD_SetEndpointBuffer(KEYBOARD_IN_EPADDR, buffer, KEYBOARD_REPORT_SIZE);
 8000662:	2208      	movs	r2, #8
 8000664:	490d      	ldr	r1, [pc, #52]	; (800069c <EVENT_USB_Device_ConfigurationChanged+0x44>)
 8000666:	2081      	movs	r0, #129	; 0x81
 8000668:	f003 fc2e 	bl	8003ec8 <USBD_SetEndpointBuffer>

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <EVENT_USB_Device_ConfigurationChanged+0x48>)
 800066e:	f001 ff87 	bl	8002580 <HID_Device_ConfigureEndpoints>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4013      	ands	r3, r2
 800067a:	2b00      	cmp	r3, #0
 800067c:	bf14      	ite	ne
 800067e:	2301      	movne	r3, #1
 8000680:	2300      	moveq	r3, #0
 8000682:	71fb      	strb	r3, [r7, #7]

	device.IsConfigured = ConfigSuccess;
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <EVENT_USB_Device_ConfigurationChanged+0x4c>)
 8000686:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800068a:	79f9      	ldrb	r1, [r7, #7]
 800068c:	f361 0300 	bfi	r3, r1, #0, #1
 8000690:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200004b8 	.word	0x200004b8
 80006a0:	2000000c 	.word	0x2000000c
 80006a4:	20000740 	.word	0x20000740

080006a8 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <EVENT_USB_Device_ControlRequest+0x10>)
 80006ae:	f001 fd7b 	bl	80021a8 <HID_Device_ProcessControlRequest>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000000c 	.word	0x2000000c

080006bc <CALLBACK_HIDParser_FilterHIDReportItem>:

bool CALLBACK_HIDParser_FilterHIDReportItem(
									HID_ReportItem_t* const CurrentItem ) {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	return true;
 80006c4:	2301      	movs	r3, #1
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <CALLBACK_USB_GetDescriptor>:
  *  the control endpoint, this function is called so that the descriptor details
  *  can be passed back and the appropriate descriptor sent back to the USB host.
  **/
uint16_t CALLBACK_USB_GetDescriptor( const uint16_t wValue,
									 const uint8_t wIndex,
									 const void** const DescriptorAddress ) {
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	603a      	str	r2, [r7, #0]
 80006de:	80fb      	strh	r3, [r7, #6]
 80006e0:	460b      	mov	r3, r1
 80006e2:	717b      	strb	r3, [r7, #5]
	const uint8_t  DescriptorType   = (wValue >> 8);
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	0a1b      	lsrs	r3, r3, #8
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	727b      	strb	r3, [r7, #9]
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	723b      	strb	r3, [r7, #8]

	const void* Address = NULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
	uint16_t    Size    = NO_DESCRIPTOR;
 80006f4:	2300      	movs	r3, #0
 80006f6:	817b      	strh	r3, [r7, #10]

	switch (DescriptorType) {
 80006f8:	7a7b      	ldrb	r3, [r7, #9]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	2b21      	cmp	r3, #33	; 0x21
 80006fe:	d876      	bhi.n	80007ee <CALLBACK_USB_GetDescriptor+0x11a>
 8000700:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <CALLBACK_USB_GetDescriptor+0x34>)
 8000702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000706:	bf00      	nop
 8000708:	08000791 	.word	0x08000791
 800070c:	0800079b 	.word	0x0800079b
 8000710:	080007a5 	.word	0x080007a5
 8000714:	080007ef 	.word	0x080007ef
 8000718:	080007ef 	.word	0x080007ef
 800071c:	080007ef 	.word	0x080007ef
 8000720:	080007ef 	.word	0x080007ef
 8000724:	080007ef 	.word	0x080007ef
 8000728:	080007ef 	.word	0x080007ef
 800072c:	080007ef 	.word	0x080007ef
 8000730:	080007ef 	.word	0x080007ef
 8000734:	080007ef 	.word	0x080007ef
 8000738:	080007ef 	.word	0x080007ef
 800073c:	080007ef 	.word	0x080007ef
 8000740:	080007ef 	.word	0x080007ef
 8000744:	080007ef 	.word	0x080007ef
 8000748:	080007ef 	.word	0x080007ef
 800074c:	080007ef 	.word	0x080007ef
 8000750:	080007ef 	.word	0x080007ef
 8000754:	080007ef 	.word	0x080007ef
 8000758:	080007ef 	.word	0x080007ef
 800075c:	080007ef 	.word	0x080007ef
 8000760:	080007ef 	.word	0x080007ef
 8000764:	080007ef 	.word	0x080007ef
 8000768:	080007ef 	.word	0x080007ef
 800076c:	080007ef 	.word	0x080007ef
 8000770:	080007ef 	.word	0x080007ef
 8000774:	080007ef 	.word	0x080007ef
 8000778:	080007ef 	.word	0x080007ef
 800077c:	080007ef 	.word	0x080007ef
 8000780:	080007ef 	.word	0x080007ef
 8000784:	080007ef 	.word	0x080007ef
 8000788:	080007d9 	.word	0x080007d9
 800078c:	080007e3 	.word	0x080007e3
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <CALLBACK_USB_GetDescriptor+0x130>)
 8000792:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Device_t);
 8000794:	2312      	movs	r3, #18
 8000796:	817b      	strh	r3, [r7, #10]
			break;
 8000798:	e029      	b.n	80007ee <CALLBACK_USB_GetDescriptor+0x11a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <CALLBACK_USB_GetDescriptor+0x134>)
 800079c:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Configuration_t);
 800079e:	2322      	movs	r3, #34	; 0x22
 80007a0:	817b      	strh	r3, [r7, #10]
			break;
 80007a2:	e024      	b.n	80007ee <CALLBACK_USB_GetDescriptor+0x11a>
		case DTYPE_String:
			switch (DescriptorNumber) {
 80007a4:	7a3b      	ldrb	r3, [r7, #8]
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d010      	beq.n	80007cc <CALLBACK_USB_GetDescriptor+0xf8>
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	dc1e      	bgt.n	80007ec <CALLBACK_USB_GetDescriptor+0x118>
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <CALLBACK_USB_GetDescriptor+0xe4>
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d005      	beq.n	80007c2 <CALLBACK_USB_GetDescriptor+0xee>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = ProductString.Header.Size;
					break;
			}
			break;
 80007b6:	e019      	b.n	80007ec <CALLBACK_USB_GetDescriptor+0x118>
					Address = &LanguageString;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <CALLBACK_USB_GetDescriptor+0x138>)
 80007ba:	60fb      	str	r3, [r7, #12]
					Size    = LanguageString.Header.Size;
 80007bc:	2304      	movs	r3, #4
 80007be:	817b      	strh	r3, [r7, #10]
					break;
 80007c0:	e009      	b.n	80007d6 <CALLBACK_USB_GetDescriptor+0x102>
					Address = &ManufacturerString;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <CALLBACK_USB_GetDescriptor+0x13c>)
 80007c4:	60fb      	str	r3, [r7, #12]
					Size    = ManufacturerString.Header.Size;
 80007c6:	2350      	movs	r3, #80	; 0x50
 80007c8:	817b      	strh	r3, [r7, #10]
					break;
 80007ca:	e004      	b.n	80007d6 <CALLBACK_USB_GetDescriptor+0x102>
					Address = &ProductString;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <CALLBACK_USB_GetDescriptor+0x140>)
 80007ce:	60fb      	str	r3, [r7, #12]
					Size    = ProductString.Header.Size;
 80007d0:	2348      	movs	r3, #72	; 0x48
 80007d2:	817b      	strh	r3, [r7, #10]
					break;
 80007d4:	bf00      	nop
			break;
 80007d6:	e009      	b.n	80007ec <CALLBACK_USB_GetDescriptor+0x118>
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <CALLBACK_USB_GetDescriptor+0x144>)
 80007da:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 80007dc:	2309      	movs	r3, #9
 80007de:	817b      	strh	r3, [r7, #10]
			break;
 80007e0:	e005      	b.n	80007ee <CALLBACK_USB_GetDescriptor+0x11a>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <CALLBACK_USB_GetDescriptor+0x148>)
 80007e4:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(KeyboardReport);
 80007e6:	233f      	movs	r3, #63	; 0x3f
 80007e8:	817b      	strh	r3, [r7, #10]
			break;
 80007ea:	e000      	b.n	80007ee <CALLBACK_USB_GetDescriptor+0x11a>
			break;
 80007ec:	bf00      	nop
	}

	*DescriptorAddress = Address;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	601a      	str	r2, [r3, #0]
	return Size;
 80007f4:	897b      	ldrh	r3, [r7, #10]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	08006470 	.word	0x08006470
 8000808:	08006484 	.word	0x08006484
 800080c:	080064a8 	.word	0x080064a8
 8000810:	080064b0 	.word	0x080064b0
 8000814:	08006504 	.word	0x08006504
 8000818:	08006496 	.word	0x08006496
 800081c:	08006430 	.word	0x08006430

08000820 <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	50004600 	.word	0x50004600

0800083c <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 8000842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	50004600 	.word	0x50004600

08000858 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 800085e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f003 0303 	and.w	r3, r3, #3
 8000866:	b2db      	uxtb	r3, r3
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	50004600 	.word	0x50004600

08000878 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8000882:	691b      	ldr	r3, [r3, #16]
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	2000ffc0 	.word	0x2000ffc0
 800089c:	50004600 	.word	0x50004600

080008a0 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2000ffc0 	.word	0x2000ffc0

080008b8 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <XMC_SCU_GetMirrorStatus+0x14>)
 80008be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	50004000 	.word	0x50004000

080008d0 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80008d8:	f005 fbac 	bl	8006034 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <XMC_SCU_lDelay+0x40>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <XMC_SCU_lDelay+0x44>)
 80008e2:	fba2 2303 	umull	r2, r3, r2, r3
 80008e6:	0c9a      	lsrs	r2, r3, #18
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	fb02 f303 	mul.w	r3, r2, r3
 80008ee:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e003      	b.n	80008fe <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80008f6:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	429a      	cmp	r2, r3
 8000904:	d3f7      	bcc.n	80008f6 <XMC_SCU_lDelay+0x26>
  }
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000ffc0 	.word	0x2000ffc0
 8000914:	431bde83 	.word	0x431bde83

08000918 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000922:	689a      	ldr	r2, [r3, #8]
 8000924:	4904      	ldr	r1, [pc, #16]	; (8000938 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4313      	orrs	r3, r2
 800092a:	608b      	str	r3, [r1, #8]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	50004074 	.word	0x50004074

0800093c <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	43db      	mvns	r3, r3
 800094c:	4904      	ldr	r1, [pc, #16]	; (8000960 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 800094e:	4013      	ands	r3, r2
 8000950:	608b      	str	r3, [r1, #8]
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	50004074 	.word	0x50004074

08000964 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 800096e:	691a      	ldr	r2, [r3, #16]
 8000970:	4904      	ldr	r1, [pc, #16]	; (8000984 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	610b      	str	r3, [r1, #16]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	50004074 	.word	0x50004074

08000988 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800098e:	685b      	ldr	r3, [r3, #4]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	50004074 	.word	0x50004074

080009a0 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60d3      	str	r3, [r2, #12]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	50004074 	.word	0x50004074

080009c0 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <XMC_SCU_GetBootMode+0x18>)
 80009c6:	691b      	ldr	r3, [r3, #16]
 80009c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	50004000 	.word	0x50004000

080009dc <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <XMC_SCU_SetBootMode+0x1c>)
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	6113      	str	r3, [r2, #16]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	50004000 	.word	0x50004000

080009fc <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 8000a04:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <XMC_SCU_ReadGPR+0x20>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	330a      	adds	r3, #10
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	685b      	ldr	r3, [r3, #4]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	50004000 	.word	0x50004000

08000a20 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 8000a2a:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <XMC_SCU_WriteGPR+0x24>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	330a      	adds	r3, #10
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	605a      	str	r2, [r3, #4]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	50004000 	.word	0x50004000

08000a48 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3328      	adds	r3, #40	; 0x28
 8000a58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	4905      	ldr	r1, [pc, #20]	; (8000a7c <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000a66:	431a      	orrs	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3328      	adds	r3, #40	; 0x28
 8000a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	50004000 	.word	0x50004000

08000a80 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3328      	adds	r3, #40	; 0x28
 8000a90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a94:	2101      	movs	r1, #1
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4906      	ldr	r1, [pc, #24]	; (8000ab8 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3328      	adds	r3, #40	; 0x28
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	50004000 	.word	0x50004000

08000abc <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8000ad2:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000ad6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	50004000 	.word	0x50004000

08000aec <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000af8:	f023 0301 	bic.w	r3, r3, #1
 8000afc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	50004000 	.word	0x50004000

08000b10 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	50004000 	.word	0x50004000

08000b34 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 8000b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bf0c      	ite	eq
 8000b46:	2301      	moveq	r3, #1
 8000b48:	2300      	movne	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	50004000 	.word	0x50004000

08000b5c <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <XMC_SCU_IsTemperatureSensorReady+0x24>)
 8000b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	bf14      	ite	ne
 8000b6e:	2301      	movne	r3, #1
 8000b70:	2300      	moveq	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	50004000 	.word	0x50004000

08000b84 <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8000b8e:	f7ff ffd1 	bl	8000b34 <XMC_SCU_IsTemperatureSensorEnabled>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f083 0301 	eor.w	r3, r3, #1
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8000ba2:	f000 f831 	bl	8000c08 <XMC_SCU_IsTemperatureSensorBusy>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 8000bac:	2302      	movs	r3, #2
 8000bae:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8000bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	50004000 	.word	0x50004000

08000bd0 <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8000bd6:	f7ff ffad 	bl	8000b34 <XMC_SCU_IsTemperatureSensorEnabled>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f083 0301 	eor.w	r3, r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 8000be6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	e005      	b.n	8000bfa <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 8000bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bf8:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 8000bfa:	687b      	ldr	r3, [r7, #4]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	50004000 	.word	0x50004000

08000c08 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 8000c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	bf14      	ite	ne
 8000c1a:	2301      	movne	r3, #1
 8000c1c:	2300      	moveq	r3, #0
 8000c1e:	b2db      	uxtb	r3, r3
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	50004000 	.word	0x50004000

08000c30 <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	041b      	lsls	r3, r3, #16
 8000c3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c42:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <XMC_SCU_WriteToRetentionMemory+0x4c>)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <XMC_SCU_WriteToRetentionMemory+0x4c>)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8000c5c:	bf00      	nop
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <XMC_SCU_WriteToRetentionMemory+0x4c>)
 8000c60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f8      	bne.n	8000c5e <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	50004000 	.word	0x50004000

08000c80 <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	041b      	lsls	r3, r3, #16
 8000c8c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c90:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f023 0301 	bic.w	r3, r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8000ca2:	bf00      	nop
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8000ca6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1f8      	bne.n	8000ca4 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8000cb4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	50004000 	.word	0x50004000

08000cc8 <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 faf1 	bl	80012b8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000cd6:	f000 fd7f 	bl	80017d8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	79db      	ldrb	r3, [r3, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00a      	beq.n	8000cf8 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000ce2:	f000 ff77 	bl	8001bd4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000ce6:	bf00      	nop
 8000ce8:	f000 ff62 	bl	8001bb0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f083 0301 	eor.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1f7      	bne.n	8000ce8 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7a5b      	ldrb	r3, [r3, #9]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fb6f 	bl	80013e0 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000d02:	bf00      	nop
 8000d04:	f7ff fdd8 	bl	80008b8 <XMC_SCU_GetMirrorStatus>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1fa      	bne.n	8000d04 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7a1b      	ldrb	r3, [r3, #8]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fd0c 	bl	8001730 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7c1b      	ldrb	r3, [r3, #16]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fb7f 	bl	8001420 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7c5b      	ldrb	r3, [r3, #17]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fba6 	bl	8001478 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7c9b      	ldrb	r3, [r3, #18]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fb8b 	bl	800144c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7cdb      	ldrb	r3, [r3, #19]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fbb2 	bl	80014a4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	799b      	ldrb	r3, [r3, #6]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00a      	beq.n	8000d5e <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000d48:	f000 ffd8 	bl	8001cfc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000d4c:	bf00      	nop
 8000d4e:	f000 fffd 	bl	8001d4c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000d52:	4603      	mov	r3, r0
 8000d54:	f083 0301 	eor.w	r3, r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f7      	bne.n	8000d4e <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	78db      	ldrb	r3, [r3, #3]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d102      	bne.n	8000d6c <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000d66:	f001 f855 	bl	8001e14 <XMC_SCU_CLOCK_DisableSystemPll>
 8000d6a:	e011      	b.n	8000d90 <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000d6c:	f001 f840 	bl	8001df0 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	8898      	ldrh	r0, [r3, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000d7c:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000d82:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	f001 f854 	bl	8001e38 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d98:	d103      	bne.n	8000da2 <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000d9a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000d9e:	f000 fa8b 	bl	80012b8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000da2:	f005 f947 	bl	8006034 <SystemCoreClockUpdate>
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}
	...

08000db0 <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <XMC_SCU_TRAP_Enable+0x24>)
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	4904      	ldr	r1, [pc, #16]	; (8000dd4 <XMC_SCU_TRAP_Enable+0x24>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	608b      	str	r3, [r1, #8]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	50004160 	.word	0x50004160

08000dd8 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <XMC_SCU_TRAP_Disable+0x20>)
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	4904      	ldr	r1, [pc, #16]	; (8000df8 <XMC_SCU_TRAP_Disable+0x20>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	608b      	str	r3, [r1, #8]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	50004160 	.word	0x50004160

08000dfc <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <XMC_SCU_TRAP_GetStatus+0x14>)
 8000e02:	685b      	ldr	r3, [r3, #4]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	50004160 	.word	0x50004160

08000e14 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <XMC_SCU_TRAP_Trigger+0x1c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6113      	str	r3, [r2, #16]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	50004160 	.word	0x50004160

08000e34 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <XMC_SCU_TRAP_ClearStatus+0x1c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60d3      	str	r3, [r2, #12]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	50004160 	.word	0x50004160

08000e54 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	4904      	ldr	r1, [pc, #16]	; (8000e74 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	614b      	str	r3, [r1, #20]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	5000413c 	.word	0x5000413c

08000e78 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <XMC_SCU_PARITY_GetStatus+0x14>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
} 
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	5000413c 	.word	0x5000413c

08000e90 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <XMC_SCU_PARITY_Enable+0x20>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4904      	ldr	r1, [pc, #16]	; (8000eb0 <XMC_SCU_PARITY_Enable+0x20>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	600b      	str	r3, [r1, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	5000413c 	.word	0x5000413c

08000eb4 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <XMC_SCU_PARITY_Disable+0x24>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	4904      	ldr	r1, [pc, #16]	; (8000ed8 <XMC_SCU_PARITY_Disable+0x24>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	5000413c 	.word	0x5000413c

08000edc <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	4904      	ldr	r1, [pc, #16]	; (8000efc <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	608b      	str	r3, [r1, #8]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	5000413c 	.word	0x5000413c

08000f00 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	4904      	ldr	r1, [pc, #16]	; (8000f24 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	608b      	str	r3, [r1, #8]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	5000413c 	.word	0x5000413c

08000f28 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	4904      	ldr	r1, [pc, #16]	; (8000f48 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	614b      	str	r3, [r1, #20]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	50004074 	.word	0x50004074

08000f4c <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8000f56:	695a      	ldr	r2, [r3, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	4904      	ldr	r1, [pc, #16]	; (8000f70 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	614b      	str	r3, [r1, #20]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	50004074 	.word	0x50004074

08000f74 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	0f1b      	lsrs	r3, r3, #28
 8000f80:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000f88:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	601a      	str	r2, [r3, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	50004410 	.word	0x50004410

08000fb0 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	0f1b      	lsrs	r3, r3, #28
 8000fbc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000fc4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8000fd4:	4413      	add	r3, r2
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	601a      	str	r2, [r3, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	50004414 	.word	0x50004414

08000fec <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	0f1b      	lsrs	r3, r3, #28
 8000ff8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001000:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	461a      	mov	r2, r3
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8001010:	4413      	add	r3, r2
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4013      	ands	r3, r2
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf14      	ite	ne
 800101c:	2301      	movne	r3, #1
 800101e:	2300      	moveq	r3, #0
 8001020:	b2db      	uxtb	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	5000440c 	.word	0x5000440c

08001034 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 800103a:	f000 f839 	bl	80010b0 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 800103e:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d009      	beq.n	8001060 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001054:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	fbb2 f3f3 	udiv	r3, r2, r3
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e01f      	b.n	80010a0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	0e1b      	lsrs	r3, r3, #24
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3301      	adds	r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001078:	3301      	adds	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	0c1b      	lsrs	r3, r3, #16
 8001082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001086:	3301      	adds	r3, #1
 8001088:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	fb02 f203 	mul.w	r2, r2, r3
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	6839      	ldr	r1, [r7, #0]
 8001096:	fb01 f303 	mul.w	r3, r1, r3
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	50004710 	.word	0x50004710

080010b0 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 80010c2:	f005 f821 	bl	8006108 <OSCHP_GetFrequency>
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	e001      	b.n	80010ce <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 80010cc:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	50004710 	.word	0x50004710
 80010dc:	016e3600 	.word	0x016e3600

080010e0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 80010e6:	f005 f80f 	bl	8006108 <OSCHP_GetFrequency>
 80010ea:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d116      	bne.n	8001126 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001102:	3301      	adds	r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	0e1b      	lsrs	r3, r3, #24
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	3301      	adds	r3, #1
 8001112:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	fb02 f203 	mul.w	r2, r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fbb2 f3f3 	udiv	r3, r2, r3
 8001124:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	50004710 	.word	0x50004710

08001134 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 800113e:	f7ff fb9b 	bl	8000878 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001142:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	50004600 	.word	0x50004600

08001160 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 800116a:	f7ff fb59 	bl	8000820 <XMC_SCU_CLOCK_GetUsbClockSource>
 800116e:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001176:	d103      	bne.n	8001180 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001178:	f7ff ff5c 	bl	8001034 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	e005      	b.n	800118c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001186:	f7ff ffab 	bl	80010e0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 800118a:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8001194:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	50004600 	.word	0x50004600

080011a8 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80011ae:	f7ff ff41 	bl	8001034 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80011b2:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 80011bc:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	50004600 	.word	0x50004600

080011d0 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 80011da:	f7ff fb2f 	bl	800083c <XMC_SCU_CLOCK_GetWdtClockSource>
 80011de:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011e6:	d103      	bne.n	80011f0 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80011e8:	f7ff ff24 	bl	8001034 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	e00c      	b.n	800120a <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	e006      	b.n	800120a <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001202:	d102      	bne.n	800120a <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 8001204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001208:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 8001210:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	016e3600 	.word	0x016e3600
 8001224:	50004600 	.word	0x50004600

08001228 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 8001232:	f7ff fb11 	bl	8000858 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 8001236:	4603      	mov	r3, r0
 8001238:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	2b03      	cmp	r3, #3
 800123e:	d10d      	bne.n	800125c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001240:	f7ff fef8 	bl	8001034 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001244:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124a:	0c1b      	lsrs	r3, r3, #16
 800124c:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001250:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	fbb2 f3f3 	udiv	r3, r2, r3
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	e016      	b.n	800128a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d103      	bne.n	800126a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001262:	f7ff fb09 	bl	8000878 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	e00f      	b.n	800128a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d10c      	bne.n	800128a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001270:	f7ff ff36 	bl	80010e0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001274:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	0c1b      	lsrs	r3, r3, #16
 800127c:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001280:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	fbb2 f3f3 	udiv	r3, r2, r3
 8001288:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 800128a:	687b      	ldr	r3, [r7, #4]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	50004600 	.word	0x50004600

08001298 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800129c:	f7ff fb00 	bl	80008a0 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80012a0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80012aa:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	50004600 	.word	0x50004600

080012b8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80012c8:	4904      	ldr	r1, [pc, #16]	; (80012dc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	50004600 	.word	0x50004600

080012e0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80012f0:	4904      	ldr	r1, [pc, #16]	; (8001304 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	50004600 	.word	0x50004600

08001308 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001318:	4904      	ldr	r1, [pc, #16]	; (800132c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4313      	orrs	r3, r2
 800131e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	50004600 	.word	0x50004600

08001330 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 8001342:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001344:	4904      	ldr	r1, [pc, #16]	; (8001358 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001346:	4313      	orrs	r3, r2
 8001348:	628b      	str	r3, [r1, #40]	; 0x28
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	50004600 	.word	0x50004600

0800135c <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d108      	bne.n	800137e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 800137c:	e007      	b.n	800138e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	4a06      	ldr	r2, [pc, #24]	; (800139c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	60d3      	str	r3, [r2, #12]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	50004710 	.word	0x50004710

080013a0 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80013aa:	bf00      	nop
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80013ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f8      	bne.n	80013ac <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80013c4:	4905      	ldr	r1, [pc, #20]	; (80013dc <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60cb      	str	r3, [r1, #12]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	50004000 	.word	0x50004000
 80013dc:	50004300 	.word	0x50004300

080013e0 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80013ea:	bf00      	nop
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80013ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f8      	bne.n	80013ec <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8001402:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001404:	4905      	ldr	r1, [pc, #20]	; (800141c <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8001406:	4313      	orrs	r3, r2
 8001408:	60cb      	str	r3, [r1, #12]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	50004000 	.word	0x50004000
 800141c:	50004300 	.word	0x50004300

08001420 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001434:	4904      	ldr	r1, [pc, #16]	; (8001448 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8001436:	4313      	orrs	r3, r2
 8001438:	60cb      	str	r3, [r1, #12]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	50004600 	.word	0x50004600

0800144c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001460:	4904      	ldr	r1, [pc, #16]	; (8001474 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8001462:	4313      	orrs	r3, r2
 8001464:	620b      	str	r3, [r1, #32]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	50004600 	.word	0x50004600

08001478 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800148c:	4904      	ldr	r1, [pc, #16]	; (80014a0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 800148e:	4313      	orrs	r3, r2
 8001490:	610b      	str	r3, [r1, #16]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	50004600 	.word	0x50004600

080014a4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80014b8:	4904      	ldr	r1, [pc, #16]	; (80014cc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	614b      	str	r3, [r1, #20]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	50004600 	.word	0x50004600

080014d0 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80014e4:	4904      	ldr	r1, [pc, #16]	; (80014f8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	618b      	str	r3, [r1, #24]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	50004600 	.word	0x50004600

080014fc <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001510:	4904      	ldr	r1, [pc, #16]	; (8001524 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8001512:	4313      	orrs	r3, r2
 8001514:	61cb      	str	r3, [r1, #28]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	50004600 	.word	0x50004600

08001528 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800153c:	4904      	ldr	r1, [pc, #16]	; (8001550 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 800153e:	4313      	orrs	r3, r2
 8001540:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	50004600 	.word	0x50004600

08001554 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	3a01      	subs	r2, #1
 800156c:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800156e:	4904      	ldr	r1, [pc, #16]	; (8001580 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8001570:	4313      	orrs	r3, r2
 8001572:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	50004600 	.word	0x50004600

08001584 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	6053      	str	r3, [r2, #4]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	50004600 	.word	0x50004600

080015a4 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <XMC_SCU_CLOCK_DisableClock+0x1c>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	6093      	str	r3, [r2, #8]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	50004600 	.word	0x50004600

080015c4 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	bf14      	ite	ne
 80015da:	2301      	movne	r3, #1
 80015dc:	2300      	moveq	r3, #0
 80015de:	b2db      	uxtb	r3, r3
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	50004600 	.word	0x50004600

080015f0 <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001602:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800161c <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 8001606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160a:	ee17 3a90 	vmov	r3, s15
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	50004200 	.word	0x50004200
 800161c:	3bbe0ded 	.word	0x3bbe0ded

08001620 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	b2db      	uxtb	r3, r3
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001634:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001650 <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 8001638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163c:	ee17 3a90 	vmov	r3, s15
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	50004200 	.word	0x50004200
 8001650:	3cb851ec 	.word	0x3cb851ec

08001654 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	4a05      	ldr	r2, [pc, #20]	; (8001674 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 800165e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001662:	f023 0302 	bic.w	r3, r3, #2
 8001666:	6153      	str	r3, [r2, #20]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	50004710 	.word	0x50004710

08001678 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	4a05      	ldr	r2, [pc, #20]	; (8001698 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8001682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	6153      	str	r3, [r2, #20]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	50004710 	.word	0x50004710

0800169c <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a19      	ldr	r2, [pc, #100]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4a16      	ldr	r2, [pc, #88]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80016ca:	4911      	ldr	r1, [pc, #68]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016da:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016e2:	f023 0310 	bic.w	r3, r3, #16
 80016e6:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	4a08      	ldr	r2, [pc, #32]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f2:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80016f4:	bf00      	nop
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f9      	beq.n	80016f6 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8001702:	bf00      	nop
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	50004710 	.word	0x50004710

08001714 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 800171c:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	50004710 	.word	0x50004710
 800172c:	00010003 	.word	0x00010003

08001730 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001744:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d10e      	bne.n	800176a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a09      	ldr	r2, [pc, #36]	; (8001778 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001752:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001756:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8001758:	2064      	movs	r0, #100	; 0x64
 800175a:	f7ff f8b9 	bl	80008d0 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001764:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001768:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 800176a:	2064      	movs	r0, #100	; 0x64
 800176c:	f7ff f8b0 	bl	80008d0 <XMC_SCU_lDelay>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	50004710 	.word	0x50004710

0800177c <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <XMC_SCU_POWER_EnableUsb+0x18>)
 8001782:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001786:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	50004200 	.word	0x50004200

08001798 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <XMC_SCU_POWER_DisableUsb+0x18>)
 800179e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017a2:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	50004200 	.word	0x50004200

080017b4 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf14      	ite	ne
 80017c4:	2301      	movne	r3, #1
 80017c6:	2300      	moveq	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	50004710 	.word	0x50004710

080017d8 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d109      	bne.n	80017fc <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80017ee:	bf00      	nop
 80017f0:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f9      	beq.n	80017f0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00a      	beq.n	800181e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800180a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180e:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8001810:	bf00      	nop
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f9      	bne.n	8001812 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	50004200 	.word	0x50004200
 800182c:	50004400 	.word	0x50004400

08001830 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 8001836:	2201      	movs	r2, #1
 8001838:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 800183c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001840:	605a      	str	r2, [r3, #4]
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	50004200 	.word	0x50004200
 8001850:	50004400 	.word	0x50004400

08001854 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8001874:	2300      	movs	r3, #0
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	50004200 	.word	0x50004200
 800188c:	50004400 	.word	0x50004400

08001890 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001894:	bf00      	nop
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8001898:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f8      	bne.n	8001896 <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	6153      	str	r3, [r2, #20]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	50004000 	.word	0x50004000
 80018c0:	50004300 	.word	0x50004300

080018c4 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 80018c8:	bf00      	nop
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 80018cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f8      	bne.n	80018ca <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6153      	str	r3, [r2, #20]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	50004000 	.word	0x50004000
 80018f4:	50004300 	.word	0x50004300

080018f8 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8001900:	bf00      	nop
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 8001904:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f8      	bne.n	8001902 <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <XMC_SCU_HIB_ClearEventStatus+0x30>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6053      	str	r3, [r2, #4]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	50004000 	.word	0x50004000
 8001928:	50004300 	.word	0x50004300

0800192c <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8001934:	bf00      	nop
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 8001938:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f8      	bne.n	8001936 <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <XMC_SCU_HIB_TriggerEvent+0x30>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6093      	str	r3, [r2, #8]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	50004000 	.word	0x50004000
 800195c:	50004300 	.word	0x50004300

08001960 <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001968:	bf00      	nop
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <XMC_SCU_HIB_EnableEvent+0x30>)
 800196c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f8      	bne.n	800196a <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <XMC_SCU_HIB_EnableEvent+0x34>)
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4905      	ldr	r1, [pc, #20]	; (8001994 <XMC_SCU_HIB_EnableEvent+0x34>)
 8001980:	4313      	orrs	r3, r2
 8001982:	60cb      	str	r3, [r1, #12]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	50004000 	.word	0x50004000
 8001994:	50004300 	.word	0x50004300

08001998 <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80019a0:	bf00      	nop
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <XMC_SCU_HIB_DisableEvent+0x34>)
 80019a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f8      	bne.n	80019a2 <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <XMC_SCU_HIB_DisableEvent+0x38>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	43d2      	mvns	r2, r2
 80019b8:	4611      	mov	r1, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <XMC_SCU_HIB_DisableEvent+0x38>)
 80019bc:	400b      	ands	r3, r1
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	50004000 	.word	0x50004000
 80019d0:	50004300 	.word	0x50004300

080019d4 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80019d8:	bf00      	nop
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 80019dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f8      	bne.n	80019da <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	50004000 	.word	0x50004000
 8001a04:	50004300 	.word	0x50004300

08001a08 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 8001a18:	f7ff ffdc 	bl	80019d4 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001a2e:	bf00      	nop
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 8001a32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f8      	bne.n	8001a30 <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d106      	bne.n	8001a52 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 8001a50:	e005      	b.n	8001a5e <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a5c:	60d3      	str	r3, [r2, #12]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	50004000 	.word	0x50004000
 8001a70:	50004300 	.word	0x50004300

08001a74 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001a80:	bf00      	nop
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <XMC_SCU_HIB_SetPinMode+0x4c>)
 8001a84:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f8      	bne.n	8001a82 <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <XMC_SCU_HIB_SetPinMode+0x50>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	6839      	ldr	r1, [r7, #0]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001aae:	4905      	ldr	r1, [pc, #20]	; (8001ac4 <XMC_SCU_HIB_SetPinMode+0x50>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	50004000 	.word	0x50004000
 8001ac4:	50004300 	.word	0x50004300

08001ac8 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001ad8:	bf00      	nop
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8001adc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f8      	bne.n	8001ada <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	4013      	ands	r3, r2
                        (level << pin);
 8001afa:	88b9      	ldrh	r1, [r7, #4]
 8001afc:	79fa      	ldrb	r2, [r7, #7]
 8001afe:	fa01 f202 	lsl.w	r2, r1, r2
 8001b02:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001b04:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001b06:	430b      	orrs	r3, r1
 8001b08:	60d3      	str	r3, [r2, #12]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	50004000 	.word	0x50004000
 8001b1c:	50004300 	.word	0x50004300

08001b20 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001b2a:	bf00      	nop
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <XMC_SCU_HIB_SetInput0+0x48>)
 8001b2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f8      	bne.n	8001b2c <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d106      	bne.n	8001b4e <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <XMC_SCU_HIB_SetInput0+0x4c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <XMC_SCU_HIB_SetInput0+0x4c>)
 8001b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 8001b4c:	e005      	b.n	8001b5a <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <XMC_SCU_HIB_SetInput0+0x4c>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <XMC_SCU_HIB_SetInput0+0x4c>)
 8001b54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b58:	60d3      	str	r3, [r2, #12]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	50004000 	.word	0x50004000
 8001b6c:	50004300 	.word	0x50004300

08001b70 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001b7a:	bf00      	nop
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <XMC_SCU_HIB_SetSR0Input+0x38>)
 8001b7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f8      	bne.n	8001b7c <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	4905      	ldr	r1, [pc, #20]	; (8001bac <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	50004000 	.word	0x50004000
 8001bac:	50004300 	.word	0x50004300

08001bb0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	50004300 	.word	0x50004300

08001bd4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8001bd8:	bf00      	nop
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8001bdc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f8      	bne.n	8001bda <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001bee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bf2:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001bf4:	bf00      	nop
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8001bf8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f8      	bne.n	8001bf6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8001c10:	bf00      	nop
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8001c14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f8      	bne.n	8001c12 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001c22:	2208      	movs	r2, #8
 8001c24:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8001c26:	bf00      	nop
 8001c28:	f7fe fe46 	bl	80008b8 <XMC_SCU_GetMirrorStatus>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1fa      	bne.n	8001c28 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	50004000 	.word	0x50004000
 8001c3c:	50004300 	.word	0x50004300

08001c40 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8001c44:	bf00      	nop
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 8001c48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f8      	bne.n	8001c46 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8001c5a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001c5e:	61d3      	str	r3, [r2, #28]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	50004000 	.word	0x50004000
 8001c70:	50004300 	.word	0x50004300

08001c74 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8001c78:	bf00      	nop
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 8001c7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f8      	bne.n	8001c7a <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8001c8e:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8001c92:	61d3      	str	r3, [r2, #28]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	50004000 	.word	0x50004000
 8001ca4:	50004300 	.word	0x50004300

08001ca8 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8001cac:	bf00      	nop
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8001cb0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f8      	bne.n	8001cae <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8001cc6:	f043 0320 	orr.w	r3, r3, #32
 8001cca:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	50004000 	.word	0x50004000
 8001cdc:	50004300 	.word	0x50004300

08001ce0 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	50004300 	.word	0x50004300

08001cfc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0a:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8001d14:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8001d18:	f004 f9f6 	bl	8006108 <OSCHP_GetFrequency>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	0d1b      	lsrs	r3, r3, #20
 8001d26:	3b01      	subs	r3, #1
 8001d28:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8001d2a:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8001d2c:	4323      	orrs	r3, r4
 8001d2e:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4a02      	ldr	r2, [pc, #8]	; (8001d40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001d36:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001d3a:	6053      	str	r3, [r2, #4]
}
 8001d3c:	bf00      	nop
 8001d3e:	bd98      	pop	{r3, r4, r7, pc}
 8001d40:	50004710 	.word	0x50004710
 8001d44:	50004700 	.word	0x50004700
 8001d48:	6b5fca6b 	.word	0x6b5fca6b

08001d4c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001d58:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001d5c:	bf0c      	ite	eq
 8001d5e:	2301      	moveq	r3, #1
 8001d60:	2300      	movne	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	50004710 	.word	0x50004710

08001d74 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8001d7e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001d82:	6053      	str	r3, [r2, #4]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	50004700 	.word	0x50004700

08001d94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6053      	str	r3, [r2, #4]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	50004700 	.word	0x50004700

08001db4 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	6053      	str	r3, [r2, #4]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	50004700 	.word	0x50004700

08001dd4 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	50004700 	.word	0x50004700

08001df0 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	f023 0302 	bic.w	r3, r3, #2
 8001e02:	6053      	str	r3, [r2, #4]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	50004710 	.word	0x50004710

08001e14 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	6053      	str	r3, [r2, #4]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	50004710 	.word	0x50004710

08001e38 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60ba      	str	r2, [r7, #8]
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	4603      	mov	r3, r0
 8001e44:	81fb      	strh	r3, [r7, #14]
 8001e46:	460b      	mov	r3, r1
 8001e48:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8001e4a:	89fb      	ldrh	r3, [r7, #14]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fa85 	bl	800135c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8001e52:	7b7b      	ldrb	r3, [r7, #13]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	f040 8084 	bne.w	8001f62 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8001e60:	f004 f952 	bl	8006108 <OSCHP_GetFrequency>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	0c9b      	lsrs	r3, r3, #18
 8001e6e:	059b      	lsls	r3, r3, #22
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e002      	b.n	8001e7a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8001e74:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001e78:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	fb02 f203 	mul.w	r2, r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	4a43      	ldr	r2, [pc, #268]	; (8001f9c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	0d9b      	lsrs	r3, r3, #22
 8001e96:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001e98:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4a40      	ldr	r2, [pc, #256]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8001ea4:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a3d      	ldr	r2, [pc, #244]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001eaa:	f043 0310 	orr.w	r3, r3, #16
 8001eae:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8001eb6:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	3a01      	subs	r2, #1
 8001ebc:	0212      	lsls	r2, r2, #8
 8001ebe:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001ec6:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8001ece:	4934      	ldr	r1, [pc, #208]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001ed4:	4b32      	ldr	r3, [pc, #200]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a31      	ldr	r2, [pc, #196]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ede:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a2e      	ldr	r2, [pc, #184]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001ee6:	f023 0310 	bic.w	r3, r3, #16
 8001eea:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8001eec:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001ef2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001ef8:	bf00      	nop
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f9      	beq.n	8001efa <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8001f12:	bf00      	nop
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f9      	bne.n	8001f14 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	0d9b      	lsrs	r3, r3, #22
 8001f2c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8001f2e:	6a3a      	ldr	r2, [r7, #32]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d202      	bcs.n	8001f3c <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8001f36:	6938      	ldr	r0, [r7, #16]
 8001f38:	f000 f84a 	bl	8001fd0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	085b      	lsrs	r3, r3, #1
 8001f40:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	0d9b      	lsrs	r3, r3, #22
 8001f4a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8001f4c:	6a3a      	ldr	r2, [r7, #32]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d202      	bcs.n	8001f5a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8001f54:	6938      	ldr	r0, [r7, #16]
 8001f56:	f000 f83b 	bl	8001fd0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8001f5a:	6a38      	ldr	r0, [r7, #32]
 8001f5c:	f000 f838 	bl	8001fd0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8001f60:	e015      	b.n	8001f8e <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8001f6e:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8001f80:	bf00      	nop
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f9      	beq.n	8001f82 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	431bde83 	.word	0x431bde83
 8001f9c:	aaaaaaab 	.word	0xaaaaaaab
 8001fa0:	50004710 	.word	0x50004710
 8001fa4:	f08080ff 	.word	0xf08080ff
 8001fa8:	88888889 	.word	0x88888889
 8001fac:	b60b60b7 	.word	0xb60b60b7

08001fb0 <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8001fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbe:	6053      	str	r3, [r2, #4]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	50004710 	.word	0x50004710

08001fd0 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8001fe6:	4905      	ldr	r1, [pc, #20]	; (8001ffc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 8001fec:	2032      	movs	r0, #50	; 0x32
 8001fee:	f7fe fc6f 	bl	80008d0 <XMC_SCU_lDelay>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	50004710 	.word	0x50004710

08002000 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	50004710 	.word	0x50004710

08002024 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002032:	e002      	b.n	800203a <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3301      	adds	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b1f      	cmp	r3, #31
 800204e:	d9f1      	bls.n	8002034 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b20      	cmp	r3, #32
 8002054:	d102      	bne.n	800205c <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	72fb      	strb	r3, [r7, #11]
 800205a:	e006      	b.n	800206a <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 800205c:	4906      	ldr	r1, [pc, #24]	; (8002078 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8002066:	2300      	movs	r3, #0
 8002068:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 800206a:	7afb      	ldrb	r3, [r7, #11]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	200004c0 	.word	0x200004c0

0800207c <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8002088:	f7fe fc7e 	bl	8000988 <XMC_SCU_INTERUPT_GetEventStatus>
 800208c:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 800208e:	e01c      	b.n	80020ca <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d011      	beq.n	80020c4 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <XMC_SCU_IRQHandler+0x60>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 80020b4:	2201      	movs	r2, #1
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fc6f 	bl	80009a0 <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 80020c2:	e006      	b.n	80020d2 <XMC_SCU_IRQHandler+0x56>
    }   
    index++;    
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b1f      	cmp	r3, #31
 80020ce:	d9df      	bls.n	8002090 <XMC_SCU_IRQHandler+0x14>
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200004c0 	.word	0x200004c0

080020e0 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
 80020ec:	4613      	mov	r3, r2
 80020ee:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3204      	adds	r2, #4
 80020fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	21f8      	movs	r1, #248	; 0xf8
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	78f9      	ldrb	r1, [r7, #3]
 8002112:	0889      	lsrs	r1, r1, #2
 8002114:	b2c9      	uxtb	r1, r1
 8002116:	4608      	mov	r0, r1
 8002118:	ea02 0103 	and.w	r1, r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	1d02      	adds	r2, r0, #4
 8002120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3204      	adds	r2, #4
 8002130:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002134:	78b9      	ldrb	r1, [r7, #2]
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	78f9      	ldrb	r1, [r7, #3]
 8002144:	0889      	lsrs	r1, r1, #2
 8002146:	b2c9      	uxtb	r1, r1
 8002148:	4608      	mov	r0, r1
 800214a:	ea42 0103 	orr.w	r1, r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	1d02      	adds	r2, r0, #4
 8002152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	70fb      	strb	r3, [r7, #3]
 800216e:	4613      	mov	r3, r2
 8002170:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2103      	movs	r1, #3
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800218c:	78b9      	ldrb	r1, [r7, #2]
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 80021a8:	b5b0      	push	{r4, r5, r7, lr}
 80021aa:	b08e      	sub	sp, #56	; 0x38
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	6078      	str	r0, [r7, #4]
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 80021b0:	4bbb      	ldr	r3, [pc, #748]	; (80024a0 <HID_Device_ProcessControlRequest+0x2f8>)
 80021b2:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80021b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
	if (!(Endpoint_IsSETUPReceived()))
 80021c6:	f083 0301 	eor.w	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f040 81c0 	bne.w	8002552 <HID_Device_ProcessControlRequest+0x3aa>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 80021d2:	4bb4      	ldr	r3, [pc, #720]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 80021d4:	889b      	ldrh	r3, [r3, #4]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	429a      	cmp	r2, r3
 80021e0:	f040 81b9 	bne.w	8002556 <HID_Device_ProcessControlRequest+0x3ae>
	  return;

	switch (USB_ControlRequest.bRequest)
 80021e4:	4baf      	ldr	r3, [pc, #700]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 80021e6:	785b      	ldrb	r3, [r3, #1]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	2b0a      	cmp	r3, #10
 80021ec:	f200 81c0 	bhi.w	8002570 <HID_Device_ProcessControlRequest+0x3c8>
 80021f0:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <HID_Device_ProcessControlRequest+0x50>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	08002225 	.word	0x08002225
 80021fc:	080024d9 	.word	0x080024d9
 8002200:	080023f7 	.word	0x080023f7
 8002204:	08002571 	.word	0x08002571
 8002208:	08002571 	.word	0x08002571
 800220c:	08002571 	.word	0x08002571
 8002210:	08002571 	.word	0x08002571
 8002214:	08002571 	.word	0x08002571
 8002218:	0800231b 	.word	0x0800231b
 800221c:	080024a9 	.word	0x080024a9
 8002220:	0800246d 	.word	0x0800246d
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8002224:	4b9f      	ldr	r3, [pc, #636]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2ba1      	cmp	r3, #161	; 0xa1
 800222a:	f040 8196 	bne.w	800255a <HID_Device_ProcessControlRequest+0x3b2>
			{
 800222e:	466b      	mov	r3, sp
 8002230:	461d      	mov	r5, r3
				uint16_t ReportSize = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	81fb      	strh	r3, [r7, #14]
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 8002236:	4b9b      	ldr	r3, [pc, #620]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 8002238:	885b      	ldrh	r3, [r3, #2]
 800223a:	b29b      	uxth	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	737b      	strb	r3, [r7, #13]
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 8002240:	4b98      	ldr	r3, [pc, #608]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 8002242:	885b      	ldrh	r3, [r3, #2]
 8002244:	b29b      	uxth	r3, r3
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	b29b      	uxth	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7b1c      	ldrb	r4, [r3, #12]
 8002256:	4623      	mov	r3, r4
 8002258:	3b01      	subs	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	b2e0      	uxtb	r0, r4
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	00cb      	lsls	r3, r1, #3
 800226c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002270:	00c2      	lsls	r2, r0, #3
 8002272:	b2e0      	uxtb	r0, r4
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	00cb      	lsls	r3, r1, #3
 8002282:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002286:	00c2      	lsls	r2, r0, #3
 8002288:	4623      	mov	r3, r4
 800228a:	3307      	adds	r3, #7
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	ebad 0d03 	sub.w	sp, sp, r3
 8002294:	ab02      	add	r3, sp, #8
 8002296:	3300      	adds	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]

				memset(ReportData, 0, sizeof(ReportData));
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4622      	mov	r2, r4
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f004 f86b 	bl	800637c <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 80022a6:	69b8      	ldr	r0, [r7, #24]
 80022a8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022ac:	f107 010d 	add.w	r1, r7, #13
 80022b0:	f107 030e 	add.w	r3, r7, #14
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	4603      	mov	r3, r0
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7fe f841 	bl	8000340 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HID_Device_ProcessControlRequest+0x12e>
				{
					MEMCPY(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6898      	ldr	r0, [r3, #8]
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7b1b      	ldrb	r3, [r3, #12]
 80022d0:	461a      	mov	r2, r3
 80022d2:	f000 fa57 	bl	8002784 <thumb2_memcpy>
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80022d6:	2200      	movs	r2, #0
 80022d8:	4b71      	ldr	r3, [pc, #452]	; (80024a0 <HID_Device_ProcessControlRequest+0x2f8>)
 80022da:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80022de:	2200      	movs	r2, #0
 80022e0:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <HID_Device_ProcessControlRequest+0x2f8>)
 80022e2:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 80022e6:	bf00      	nop
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 80022e8:	4a6d      	ldr	r2, [pc, #436]	; (80024a0 <HID_Device_ProcessControlRequest+0x2f8>)
 80022ea:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80022ee:	f36f 0341 	bfc	r3, #1, #1
 80022f2:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 80022f6:	bf00      	nop

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
 80022f8:	7b7b      	ldrb	r3, [r7, #13]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HID_Device_ProcessControlRequest+0x15e>
				  Endpoint_Write_8(ReportID);
 80022fe:	7b7b      	ldrb	r3, [r7, #13]
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fc29 	bl	8002b58 <Endpoint_Write_8>

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	89fa      	ldrh	r2, [r7, #14]
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f000 ffb9 	bl	8003284 <Endpoint_Write_Control_Stream_LE>
				Endpoint_ClearOUT();
 8002312:	f000 fb2b 	bl	800296c <Endpoint_ClearOUT>
 8002316:	46ad      	mov	sp, r5
			}

			break;
 8002318:	e11f      	b.n	800255a <HID_Device_ProcessControlRequest+0x3b2>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 800231a:	4b62      	ldr	r3, [pc, #392]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b21      	cmp	r3, #33	; 0x21
 8002320:	f040 811d 	bne.w	800255e <HID_Device_ProcessControlRequest+0x3b6>
			{
 8002324:	466b      	mov	r3, sp
 8002326:	461d      	mov	r5, r3
				uint16_t ReportSize = USB_ControlRequest.wLength;
 8002328:	4b5e      	ldr	r3, [pc, #376]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 800232a:	799a      	ldrb	r2, [r3, #6]
 800232c:	79db      	ldrb	r3, [r3, #7]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	4313      	orrs	r3, r2
 8002332:	85fb      	strh	r3, [r7, #46]	; 0x2e
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 8002334:	4b5b      	ldr	r3, [pc, #364]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 8002336:	885b      	ldrh	r3, [r3, #2]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 800233e:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 8002340:	885b      	ldrh	r3, [r3, #2]
 8002342:	b29b      	uxth	r3, r3
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	b29b      	uxth	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3b01      	subs	r3, #1
 800234c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				uint8_t  ReportData[ReportSize];
 8002350:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8002352:	4623      	mov	r3, r4
 8002354:	3b01      	subs	r3, #1
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
 8002358:	b2a0      	uxth	r0, r4
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	00cb      	lsls	r3, r1, #3
 8002368:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800236c:	00c2      	lsls	r2, r0, #3
 800236e:	b2a0      	uxth	r0, r4
 8002370:	f04f 0100 	mov.w	r1, #0
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	00cb      	lsls	r3, r1, #3
 800237e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002382:	00c2      	lsls	r2, r0, #3
 8002384:	4623      	mov	r3, r4
 8002386:	3307      	adds	r3, #7
 8002388:	08db      	lsrs	r3, r3, #3
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	ebad 0d03 	sub.w	sp, sp, r3
 8002390:	ab02      	add	r3, sp, #8
 8002392:	3300      	adds	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
		device.IsSetupRecieved = 0;
 8002396:	4a42      	ldr	r2, [pc, #264]	; (80024a0 <HID_Device_ProcessControlRequest+0x2f8>)
 8002398:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800239c:	f36f 0341 	bfc	r3, #1, #1
 80023a0:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 80023a4:	bf00      	nop

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 ffb1 	bl	8003314 <Endpoint_Read_Control_Stream_LE>
				Endpoint_ClearIN();
 80023b2:	f000 fb27 	bl	8002a04 <Endpoint_ClearIN>

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
 80023b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bf14      	ite	ne
 80023be:	2301      	movne	r3, #1
 80023c0:	2300      	moveq	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	1898      	adds	r0, r3, r2
 80023ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bf14      	ite	ne
 80023d2:	2301      	movne	r3, #1
 80023d4:	2300      	moveq	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	b29b      	uxth	r3, r3
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 80023da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80023e4:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4603      	mov	r3, r0
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7fd ffed 	bl	80003cc <CALLBACK_HID_Device_ProcessHIDReport>
 80023f2:	46ad      	mov	sp, r5
			}

			break;
 80023f4:	e0b3      	b.n	800255e <HID_Device_ProcessControlRequest+0x3b6>
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2ba1      	cmp	r3, #161	; 0xa1
 80023fc:	f040 80b1 	bne.w	8002562 <HID_Device_ProcessControlRequest+0x3ba>
		device.IsSetupRecieved = 0;
 8002400:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <HID_Device_ProcessControlRequest+0x2f8>)
 8002402:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002406:	f36f 0341 	bfc	r3, #1, #1
 800240a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 800240e:	bf00      	nop
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 8002410:	bf00      	nop
	 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HID_Device_ProcessControlRequest+0x2f8>)
 8002414:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002418:	461a      	mov	r2, r3
 800241a:	232c      	movs	r3, #44	; 0x2c
 800241c:	fb03 f302 	mul.w	r3, r3, r2
 8002420:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <HID_Device_ProcessControlRequest+0x2f8>)
 8002422:	4413      	add	r3, r2
 8002424:	3304      	adds	r3, #4
 8002426:	617b      	str	r3, [r7, #20]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d108      	bne.n	8002448 <HID_Device_ProcessControlRequest+0x2a0>
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	791b      	ldrb	r3, [r3, #4]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HID_Device_ProcessControlRequest+0x2a0>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HID_Device_ProcessControlRequest+0x2a2>
 8002448:	2300      	movs	r3, #0
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1db      	bne.n	8002412 <HID_Device_ProcessControlRequest+0x26a>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7c1b      	ldrb	r3, [r3, #16]
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fb7a 	bl	8002b58 <Endpoint_Write_8>
				Endpoint_ClearIN();
 8002464:	f000 face 	bl	8002a04 <Endpoint_ClearIN>
	}
 8002468:	bf00      	nop
				Endpoint_ClearStatusStage();
			}

			break;
 800246a:	e07a      	b.n	8002562 <HID_Device_ProcessControlRequest+0x3ba>
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 800246c:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b21      	cmp	r3, #33	; 0x21
 8002472:	d178      	bne.n	8002566 <HID_Device_ProcessControlRequest+0x3be>
		device.IsSetupRecieved = 0;
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HID_Device_ProcessControlRequest+0x2f8>)
 8002476:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800247a:	f36f 0341 	bfc	r3, #1, #1
 800247e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 8002482:	bf00      	nop
	}
 8002484:	bf00      	nop
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HID_Device_ProcessControlRequest+0x2fc>)
 8002488:	885b      	ldrh	r3, [r3, #2]
 800248a:	b29b      	uxth	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	b2da      	uxtb	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	741a      	strb	r2, [r3, #16]
			}

			break;
 800249c:	e063      	b.n	8002566 <HID_Device_ProcessControlRequest+0x3be>
 800249e:	bf00      	nop
 80024a0:	20000740 	.word	0x20000740
 80024a4:	20000a90 	.word	0x20000a90
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80024a8:	4b33      	ldr	r3, [pc, #204]	; (8002578 <HID_Device_ProcessControlRequest+0x3d0>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b21      	cmp	r3, #33	; 0x21
 80024ae:	d15c      	bne.n	800256a <HID_Device_ProcessControlRequest+0x3c2>
		device.IsSetupRecieved = 0;
 80024b0:	4a32      	ldr	r2, [pc, #200]	; (800257c <HID_Device_ProcessControlRequest+0x3d4>)
 80024b2:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80024b6:	f36f 0341 	bfc	r3, #1, #1
 80024ba:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 80024be:	bf00      	nop
	}
 80024c0:	bf00      	nop
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HID_Device_ProcessControlRequest+0x3d0>)
 80024c4:	885b      	ldrh	r3, [r3, #2]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	119b      	asrs	r3, r3, #6
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	829a      	strh	r2, [r3, #20]
			}

			break;
 80024d6:	e048      	b.n	800256a <HID_Device_ProcessControlRequest+0x3c2>
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 80024d8:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HID_Device_ProcessControlRequest+0x3d0>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2ba1      	cmp	r3, #161	; 0xa1
 80024de:	d146      	bne.n	800256e <HID_Device_ProcessControlRequest+0x3c6>
		device.IsSetupRecieved = 0;
 80024e0:	4a26      	ldr	r2, [pc, #152]	; (800257c <HID_Device_ProcessControlRequest+0x3d4>)
 80024e2:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80024e6:	f36f 0341 	bfc	r3, #1, #1
 80024ea:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 80024ee:	bf00      	nop
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 80024f0:	bf00      	nop
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <HID_Device_ProcessControlRequest+0x3d4>)
 80024f4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80024f8:	461a      	mov	r2, r3
 80024fa:	232c      	movs	r3, #44	; 0x2c
 80024fc:	fb03 f302 	mul.w	r3, r3, r2
 8002500:	4a1e      	ldr	r2, [pc, #120]	; (800257c <HID_Device_ProcessControlRequest+0x3d4>)
 8002502:	4413      	add	r3, r2
 8002504:	3304      	adds	r3, #4
 8002506:	613b      	str	r3, [r7, #16]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d108      	bne.n	8002528 <HID_Device_ProcessControlRequest+0x380>
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	791b      	ldrb	r3, [r3, #4]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HID_Device_ProcessControlRequest+0x380>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HID_Device_ProcessControlRequest+0x382>
 8002528:	2300      	movs	r3, #0
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f083 0301 	eor.w	r3, r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1db      	bne.n	80024f2 <HID_Device_ProcessControlRequest+0x34a>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	8a9b      	ldrh	r3, [r3, #20]
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	b29b      	uxth	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fb07 	bl	8002b58 <Endpoint_Write_8>
				Endpoint_ClearIN();
 800254a:	f000 fa5b 	bl	8002a04 <Endpoint_ClearIN>
	}
 800254e:	bf00      	nop
				Endpoint_ClearStatusStage();
			}

			break;
 8002550:	e00d      	b.n	800256e <HID_Device_ProcessControlRequest+0x3c6>
	  return;
 8002552:	bf00      	nop
 8002554:	e00c      	b.n	8002570 <HID_Device_ProcessControlRequest+0x3c8>
	  return;
 8002556:	bf00      	nop
 8002558:	e00a      	b.n	8002570 <HID_Device_ProcessControlRequest+0x3c8>
			break;
 800255a:	bf00      	nop
 800255c:	e008      	b.n	8002570 <HID_Device_ProcessControlRequest+0x3c8>
			break;
 800255e:	bf00      	nop
 8002560:	e006      	b.n	8002570 <HID_Device_ProcessControlRequest+0x3c8>
			break;
 8002562:	bf00      	nop
 8002564:	e004      	b.n	8002570 <HID_Device_ProcessControlRequest+0x3c8>
			break;
 8002566:	bf00      	nop
 8002568:	e002      	b.n	8002570 <HID_Device_ProcessControlRequest+0x3c8>
			break;
 800256a:	bf00      	nop
 800256c:	e000      	b.n	8002570 <HID_Device_ProcessControlRequest+0x3c8>
			break;
 800256e:	bf00      	nop
	}
}
 8002570:	3730      	adds	r7, #48	; 0x30
 8002572:	46bd      	mov	sp, r7
 8002574:	bdb0      	pop	{r4, r5, r7, pc}
 8002576:	bf00      	nop
 8002578:	20000a90 	.word	0x20000a90
 800257c:	20000740 	.word	0x20000740

08002580 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3310      	adds	r3, #16
 800258c:	2208      	movs	r2, #8
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fef3 	bl	800637c <memset>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	741a      	strb	r2, [r3, #16]
	HIDInterfaceInfo->State.IdleCount           = 750;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f240 22ee 	movw	r2, #750	; 0x2ee
 80025a2:	829a      	strh	r2, [r3, #20]

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	719a      	strb	r2, [r3, #6]

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3302      	adds	r3, #2
 80025ae:	2101      	movs	r1, #1
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fbad 	bl	8002d10 <Endpoint_ConfigureEndpointTable>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f083 0301 	eor.w	r3, r3, #1
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HID_Device_ConfigureEndpoints+0x46>
	  return false;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HID_Device_ConfigureEndpoints+0x48>

	return true;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 80025d0:	b5b0      	push	{r4, r5, r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	6078      	str	r0, [r7, #4]
	if (USB_DeviceState != DEVICE_STATE_Configured)
 80025d8:	4b68      	ldr	r3, [pc, #416]	; (800277c <HID_Device_USBTask+0x1ac>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b04      	cmp	r3, #4
 80025e0:	f040 80c5 	bne.w	800276e <HID_Device_USBTask+0x19e>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	8a5c      	ldrh	r4, [r3, #18]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 80025e8:	4b65      	ldr	r3, [pc, #404]	; (8002780 <HID_Device_USBTask+0x1b0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	4798      	blx	r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	429c      	cmp	r4, r3
 80025f4:	f000 80bd 	beq.w	8002772 <HID_Device_USBTask+0x1a2>
		#else
		return;
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	789b      	ldrb	r3, [r3, #2]
 80025fc:	747b      	strb	r3, [r7, #17]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80025fe:	7c7b      	ldrb	r3, [r7, #17]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HID_Device_USBTask+0x1b0>)
 8002608:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800260c:	7c7b      	ldrb	r3, [r7, #17]
 800260e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b5a      	ldr	r3, [pc, #360]	; (8002780 <HID_Device_USBTask+0x1b0>)
 8002616:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 800261a:	bf00      	nop

	if (Endpoint_IsReadWriteAllowed())
 800261c:	f000 fa6a 	bl	8002af4 <Endpoint_IsReadWriteAllowed>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80a6 	beq.w	8002774 <HID_Device_USBTask+0x1a4>
	{
 8002628:	466b      	mov	r3, sp
 800262a:	461d      	mov	r5, r3
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7b1c      	ldrb	r4, [r3, #12]
 8002630:	4623      	mov	r3, r4
 8002632:	3b01      	subs	r3, #1
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	b2e0      	uxtb	r0, r4
 8002638:	f04f 0100 	mov.w	r1, #0
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	00cb      	lsls	r3, r1, #3
 8002646:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800264a:	00c2      	lsls	r2, r0, #3
 800264c:	b2e0      	uxtb	r0, r4
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	00cb      	lsls	r3, r1, #3
 800265c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002660:	00c2      	lsls	r2, r0, #3
 8002662:	4623      	mov	r3, r4
 8002664:	3307      	adds	r3, #7
 8002666:	08db      	lsrs	r3, r3, #3
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	ebad 0d03 	sub.w	sp, sp, r3
 800266e:	ab02      	add	r3, sp, #8
 8002670:	3300      	adds	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
		uint8_t  ReportID     = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
		uint16_t ReportINSize = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	81bb      	strh	r3, [r7, #12]

		memset(ReportINData, 0, sizeof(ReportINData));
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	4622      	mov	r2, r4
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f003 fe7a 	bl	800637c <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	f107 010f 	add.w	r1, r7, #15
 800268e:	f107 030c 	add.w	r3, r7, #12
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	2200      	movs	r2, #0
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7fd fe51 	bl	8000340 <CALLBACK_HID_Device_CreateHIDReport>
 800269e:	4603      	mov	r3, r0
 80026a0:	74fb      	strb	r3, [r7, #19]
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 80026a2:	2300      	movs	r3, #0
 80026a4:	77fb      	strb	r3, [r7, #31]
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	8a9b      	ldrh	r3, [r3, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HID_Device_USBTask+0xea>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	8adb      	ldrh	r3, [r3, #22]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HID_Device_USBTask+0xea>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HID_Device_USBTask+0xec>
 80026ba:	2300      	movs	r3, #0
 80026bc:	74bb      	strb	r3, [r7, #18]
 80026be:	7cbb      	ldrb	r3, [r7, #18]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	74bb      	strb	r3, [r7, #18]

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d014      	beq.n	80026f8 <HID_Device_USBTask+0x128>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	89ba      	ldrh	r2, [r7, #12]
 80026d6:	4619      	mov	r1, r3
 80026d8:	f003 fd86 	bl	80061e8 <memcmp>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	77fb      	strb	r3, [r7, #31]
			MEMCPY(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6898      	ldr	r0, [r3, #8]
 80026ec:	6979      	ldr	r1, [r7, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7b1b      	ldrb	r3, [r3, #12]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f000 f846 	bl	8002784 <thumb2_memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 80026f8:	89bb      	ldrh	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d02d      	beq.n	800275a <HID_Device_USBTask+0x18a>
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HID_Device_USBTask+0x140>
 8002704:	7ffb      	ldrb	r3, [r7, #31]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HID_Device_USBTask+0x140>
 800270a:	7cbb      	ldrb	r3, [r7, #18]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d024      	beq.n	800275a <HID_Device_USBTask+0x18a>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8a9a      	ldrh	r2, [r3, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	82da      	strh	r2, [r3, #22]

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	789b      	ldrb	r3, [r3, #2]
 800271c:	743b      	strb	r3, [r7, #16]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800271e:	7c3b      	ldrb	r3, [r7, #16]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HID_Device_USBTask+0x1b0>)
 8002728:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800272c:	7c3b      	ldrb	r3, [r7, #16]
 800272e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HID_Device_USBTask+0x1b0>)
 8002736:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 800273a:	bf00      	nop

			if (ReportID)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HID_Device_USBTask+0x17a>
			  Endpoint_Write_8(ReportID);
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fa07 	bl	8002b58 <Endpoint_Write_8>

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	89b9      	ldrh	r1, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fb85 	bl	8002e60 <Endpoint_Write_Stream_LE>

			Endpoint_ClearIN();
 8002756:	f000 f955 	bl	8002a04 <Endpoint_ClearIN>
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HID_Device_USBTask+0x1b0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	4798      	blx	r3
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	825a      	strh	r2, [r3, #18]
 800276a:	46ad      	mov	sp, r5
 800276c:	e002      	b.n	8002774 <HID_Device_USBTask+0x1a4>
	  return;
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <HID_Device_USBTask+0x1a4>
		return;
 8002772:	bf00      	nop
	}
}
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bdb0      	pop	{r4, r5, r7, pc}
 800277a:	bf00      	nop
 800277c:	20000a8d 	.word	0x20000a8d
 8002780:	20000740 	.word	0x20000740

08002784 <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8002784:	0913      	lsrs	r3, r2, #4
 8002786:	d011      	beq.n	80027ac <thumb2_memcpy+0x28>
 8002788:	f851 cb04 	ldr.w	ip, [r1], #4
 800278c:	f840 cb04 	str.w	ip, [r0], #4
 8002790:	f851 cb04 	ldr.w	ip, [r1], #4
 8002794:	f840 cb04 	str.w	ip, [r0], #4
 8002798:	f851 cb04 	ldr.w	ip, [r1], #4
 800279c:	f840 cb04 	str.w	ip, [r0], #4
 80027a0:	f851 cb04 	ldr.w	ip, [r1], #4
 80027a4:	f840 cb04 	str.w	ip, [r0], #4
 80027a8:	3b01      	subs	r3, #1
 80027aa:	d1ed      	bne.n	8002788 <thumb2_memcpy+0x4>
 80027ac:	f012 030f 	ands.w	r3, r2, #15
 80027b0:	d005      	beq.n	80027be <thumb2_memcpy+0x3a>
 80027b2:	f811 cb01 	ldrb.w	ip, [r1], #1
 80027b6:	f800 cb01 	strb.w	ip, [r0], #1
 80027ba:	3b01      	subs	r3, #1
 80027bc:	d1f9      	bne.n	80027b2 <thumb2_memcpy+0x2e>
 80027be:	4770      	bx	lr
        "    bne     3$\n"

        // Return to caller.
        "4$: bx      lr\n"
    );
}
 80027c0:	bf00      	nop
	...

080027c4 <__NVIC_EnableIRQ>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <__NVIC_EnableIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_DisableIRQ>:
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db12      	blt.n	8002838 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	490a      	ldr	r1, [pc, #40]	; (8002844 <__NVIC_DisableIRQ+0x44>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	3320      	adds	r3, #32
 8002828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800282c:	f3bf 8f4f 	dsb	sy
}
 8002830:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002832:	f3bf 8f6f 	isb	sy
}
 8002836:	bf00      	nop
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100

08002848 <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 800284e:	2364      	movs	r3, #100	; 0x64
 8002850:	75fb      	strb	r3, [r7, #23]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8002852:	4b44      	ldr	r3, [pc, #272]	; (8002964 <Endpoint_WaitUntilReady+0x11c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	4798      	blx	r3
 800285a:	4603      	mov	r3, r0
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 800285c:	82bb      	strh	r3, [r7, #20]
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800285e:	4b41      	ldr	r3, [pc, #260]	; (8002964 <Endpoint_WaitUntilReady+0x11c>)
 8002860:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002864:	461a      	mov	r2, r3
 8002866:	232c      	movs	r3, #44	; 0x2c
 8002868:	fb03 f302 	mul.w	r3, r3, r2
 800286c:	4a3d      	ldr	r2, [pc, #244]	; (8002964 <Endpoint_WaitUntilReady+0x11c>)
 800286e:	4413      	add	r3, r2
 8002870:	3304      	adds	r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
		return ep->Address & ENDPOINT_DIR_MASK;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800287c:	b2db      	uxtb	r3, r3

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 800287e:	2b80      	cmp	r3, #128	; 0x80
 8002880:	d122      	bne.n	80028c8 <Endpoint_WaitUntilReady+0x80>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002882:	4b38      	ldr	r3, [pc, #224]	; (8002964 <Endpoint_WaitUntilReady+0x11c>)
 8002884:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002888:	461a      	mov	r2, r3
 800288a:	232c      	movs	r3, #44	; 0x2c
 800288c:	fb03 f302 	mul.w	r3, r3, r2
 8002890:	4a34      	ldr	r2, [pc, #208]	; (8002964 <Endpoint_WaitUntilReady+0x11c>)
 8002892:	4413      	add	r3, r2
 8002894:	3304      	adds	r3, #4
 8002896:	60bb      	str	r3, [r7, #8]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <Endpoint_WaitUntilReady+0x70>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	791b      	ldrb	r3, [r3, #4]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <Endpoint_WaitUntilReady+0x70>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <Endpoint_WaitUntilReady+0x72>
 80028b8:	2300      	movs	r3, #0
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
		{
			if (Endpoint_IsINReady())
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01a      	beq.n	80028fa <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e048      	b.n	800295a <Endpoint_WaitUntilReady+0x112>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80028c8:	4b26      	ldr	r3, [pc, #152]	; (8002964 <Endpoint_WaitUntilReady+0x11c>)
 80028ca:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80028ce:	461a      	mov	r2, r3
 80028d0:	232c      	movs	r3, #44	; 0x2c
 80028d2:	fb03 f302 	mul.w	r3, r3, r2
 80028d6:	4a23      	ldr	r2, [pc, #140]	; (8002964 <Endpoint_WaitUntilReady+0x11c>)
 80028d8:	4413      	add	r3, r2
 80028da:	3304      	adds	r3, #4
 80028dc:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e02f      	b.n	800295a <Endpoint_WaitUntilReady+0x112>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <Endpoint_WaitUntilReady+0x120>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	74fb      	strb	r3, [r7, #19]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <Endpoint_WaitUntilReady+0xc2>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8002906:	2302      	movs	r3, #2
 8002908:	e027      	b.n	800295a <Endpoint_WaitUntilReady+0x112>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b05      	cmp	r3, #5
 800290e:	d101      	bne.n	8002914 <Endpoint_WaitUntilReady+0xcc>
		  return ENDPOINT_READYWAIT_BusSuspended;
 8002910:	2303      	movs	r3, #3
 8002912:	e022      	b.n	800295a <Endpoint_WaitUntilReady+0x112>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <Endpoint_WaitUntilReady+0x11c>)
 8002916:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800291a:	4619      	mov	r1, r3
 800291c:	4a11      	ldr	r2, [pc, #68]	; (8002964 <Endpoint_WaitUntilReady+0x11c>)
 800291e:	232c      	movs	r3, #44	; 0x2c
 8002920:	fb03 f301 	mul.w	r3, r3, r1
 8002924:	4413      	add	r3, r2
 8002926:	7a1b      	ldrb	r3, [r3, #8]
 8002928:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800292c:	b2db      	uxtb	r3, r3
		else if (Endpoint_IsStalled())
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <Endpoint_WaitUntilReady+0xee>
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8002932:	2301      	movs	r3, #1
 8002934:	e011      	b.n	800295a <Endpoint_WaitUntilReady+0x112>
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <Endpoint_WaitUntilReady+0x11c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	4798      	blx	r3
 800293e:	4603      	mov	r3, r0

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 8002940:	823b      	strh	r3, [r7, #16]

		if (CurrentFrameNumber != PreviousFrameNumber)
 8002942:	8a3a      	ldrh	r2, [r7, #16]
 8002944:	8abb      	ldrh	r3, [r7, #20]
 8002946:	429a      	cmp	r2, r3
 8002948:	d089      	beq.n	800285e <Endpoint_WaitUntilReady+0x16>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 800294a:	8a3b      	ldrh	r3, [r7, #16]
 800294c:	82bb      	strh	r3, [r7, #20]

			if (!(TimeoutMSRem--))
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	1e5a      	subs	r2, r3, #1
 8002952:	75fa      	strb	r2, [r7, #23]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d182      	bne.n	800285e <Endpoint_WaitUntilReady+0x16>
			  return ENDPOINT_READYWAIT_Timeout;
 8002958:	2304      	movs	r3, #4
		}
	}
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000740 	.word	0x20000740
 8002968:	20000a8d 	.word	0x20000a8d

0800296c <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002972:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <Endpoint_ClearOUT+0x94>)
 8002974:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002978:	461a      	mov	r2, r3
 800297a:	232c      	movs	r3, #44	; 0x2c
 800297c:	fb03 f302 	mul.w	r3, r3, r2
 8002980:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <Endpoint_ClearOUT+0x94>)
 8002982:	4413      	add	r3, r2
 8002984:	3304      	adds	r3, #4
 8002986:	607b      	str	r3, [r7, #4]
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	791b      	ldrb	r3, [r3, #4]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d02f      	beq.n	80029f6 <Endpoint_ClearOUT+0x8a>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <Endpoint_ClearOUT+0x94>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	7810      	ldrb	r0, [r2, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6911      	ldr	r1, [r2, #16]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6952      	ldr	r2, [r2, #20]
 80029a8:	4798      	blx	r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	461a      	mov	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	609a      	str	r2, [r3, #8]
	ep->OutOffset = 0;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	60da      	str	r2, [r3, #12]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d118      	bne.n	80029f8 <Endpoint_ClearOUT+0x8c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d114      	bne.n	80029f8 <Endpoint_ClearOUT+0x8c>
		ep->OutInUse = true;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	8893      	ldrh	r3, [r2, #4]
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	8093      	strh	r3, [r2, #4]
		ep->IsOutRecieved = 0;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	8893      	ldrh	r3, [r2, #4]
 80029dc:	f36f 1345 	bfc	r3, #5, #1
 80029e0:	8093      	strh	r3, [r2, #4]
		device.Driver->EndpointReadStart(ep->Address,
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <Endpoint_ClearOUT+0x94>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	7810      	ldrb	r0, [r2, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6952      	ldr	r2, [r2, #20]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4798      	blx	r3
 80029f4:	e000      	b.n	80029f8 <Endpoint_ClearOUT+0x8c>
		return;
 80029f6:	bf00      	nop
				ep->OutBufferLength);
	}
}
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000740 	.word	0x20000740

08002a04 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002a0a:	4b38      	ldr	r3, [pc, #224]	; (8002aec <Endpoint_ClearIN+0xe8>)
 8002a0c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002a10:	461a      	mov	r2, r3
 8002a12:	232c      	movs	r3, #44	; 0x2c
 8002a14:	fb03 f302 	mul.w	r3, r3, r2
 8002a18:	4a34      	ldr	r2, [pc, #208]	; (8002aec <Endpoint_ClearIN+0xe8>)
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d059      	beq.n	8002ae2 <Endpoint_ClearIN+0xde>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	791b      	ldrb	r3, [r3, #4]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d052      	beq.n	8002ae2 <Endpoint_ClearIN+0xde>
		return;
	ep->InInUse = true;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	8893      	ldrh	r3, [r2, #4]
 8002a40:	f043 0310 	orr.w	r3, r3, #16
 8002a44:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 8002a5c:	206b      	movs	r0, #107	; 0x6b
 8002a5e:	f7ff fecf 	bl	8002800 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <Endpoint_ClearIN+0xe8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
	data_count = device.Driver->EndpointWrite(ep->Address,
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a74:	4798      	blx	r3
 8002a76:	6038      	str	r0, [r7, #0]
	ep->InDataBuffer += data_count;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	441a      	add	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 8002a90:	206b      	movs	r0, #107	; 0x6b
 8002a92:	f7ff fe97 	bl	80027c4 <__NVIC_EnableIRQ>
	if((zlp_flag == true) && (ep->Number != 0))
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <Endpoint_ClearIN+0xec>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d121      	bne.n	8002ae4 <Endpoint_ClearIN+0xe0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01a      	beq.n	8002ae4 <Endpoint_ClearIN+0xe0>
	{
		/*Send a ZLP from here*/
	  while(ep->InInUse)
 8002aae:	bf00      	nop
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f8      	bne.n	8002ab0 <Endpoint_ClearIN+0xac>
	  {
		;
	  }
	  ep->InInUse = true;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	8893      	ldrh	r3, [r2, #4]
 8002ac2:	f043 0310 	orr.w	r3, r3, #16
 8002ac6:	8093      	strh	r3, [r2, #4]
	  device.Driver->EndpointWrite(ep->Address,
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <Endpoint_ClearIN+0xe8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	7810      	ldrb	r0, [r2, #0]
	  			ep->InDataBuffer,0);
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6a91      	ldr	r1, [r2, #40]	; 0x28
	  device.Driver->EndpointWrite(ep->Address,
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4798      	blx	r3
	  zlp_flag = false;
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <Endpoint_ClearIN+0xec>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	e000      	b.n	8002ae4 <Endpoint_ClearIN+0xe0>
		return;
 8002ae2:	bf00      	nop
	}
}
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000740 	.word	0x20000740
 8002af0:	20000474 	.word	0x20000474

08002af4 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <Endpoint_IsReadWriteAllowed+0x60>)
 8002afc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002b00:	461a      	mov	r2, r3
 8002b02:	232c      	movs	r3, #44	; 0x2c
 8002b04:	fb03 f302 	mul.w	r3, r3, r2
 8002b08:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <Endpoint_IsReadWriteAllowed+0x60>)
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 8002b10:	2300      	movs	r3, #0
 8002b12:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	bf34      	ite	cc
 8002b2e:	2301      	movcc	r3, #1
 8002b30:	2300      	movcs	r3, #0
 8002b32:	71fb      	strb	r3, [r7, #7]
 8002b34:	e006      	b.n	8002b44 <Endpoint_IsReadWriteAllowed+0x50>
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 8002b44:	79fb      	ldrb	r3, [r7, #7]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000740 	.word	0x20000740

08002b58 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <Endpoint_Write_8+0x68>)
 8002b64:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002b68:	461a      	mov	r2, r3
 8002b6a:	232c      	movs	r3, #44	; 0x2c
 8002b6c:	fb03 f302 	mul.w	r3, r3, r2
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <Endpoint_Write_8+0x68>)
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d20d      	bcs.n	8002ba4 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	4413      	add	r3, r2
 8002b92:	79fa      	ldrb	r2, [r7, #7]
 8002b94:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	619a      	str	r2, [r3, #24]

	      Success = true;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	f083 0301 	eor.w	r3, r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e5      	bne.n	8002b7c <Endpoint_Write_8+0x24>
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000740 	.word	0x20000740

08002bc4 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002bca:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <Endpoint_Read_8+0x6c>)
 8002bcc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	232c      	movs	r3, #44	; 0x2c
 8002bd4:	fb03 f302 	mul.w	r3, r3, r2
 8002bd8:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <Endpoint_Read_8+0x6c>)
 8002bda:	4413      	add	r3, r2
 8002bdc:	3304      	adds	r3, #4
 8002bde:	603b      	str	r3, [r7, #0]
	bool Success = false;
 8002be0:	2300      	movs	r3, #0
 8002be2:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	71bb      	strb	r3, [r7, #6]
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d012      	beq.n	8002c16 <Endpoint_Read_8+0x52>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	71bb      	strb	r3, [r7, #6]
          EndPoint->OutOffset++;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	60da      	str	r2, [r3, #12]
          EndPoint->OutBytesAvailable--;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	609a      	str	r2, [r3, #8]
		  Success = true;
 8002c12:	2301      	movs	r3, #1
 8002c14:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e2      	bne.n	8002be8 <Endpoint_Read_8+0x24>
	 return data;
 8002c22:	79bb      	ldrb	r3, [r7, #6]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	20000740 	.word	0x20000740

08002c34 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <Endpoint_Write_32_LE+0x68>)
 8002c3e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002c42:	461a      	mov	r2, r3
 8002c44:	232c      	movs	r3, #44	; 0x2c
 8002c46:	fb03 f302 	mul.w	r3, r3, r2
 8002c4a:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <Endpoint_Write_32_LE+0x68>)
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3304      	adds	r3, #4
 8002c50:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	3b03      	subs	r3, #3
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d20d      	bcs.n	8002c80 <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	601a      	str	r2, [r3, #0]
			EndPoint->InBytesAvailable+=4;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	619a      	str	r2, [r3, #24]

			Success = true;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e4      	bne.n	8002c56 <Endpoint_Write_32_LE+0x22>
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000740 	.word	0x20000740

08002ca0 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <Endpoint_Read_32_LE+0x6c>)
 8002ca8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002cac:	461a      	mov	r2, r3
 8002cae:	232c      	movs	r3, #44	; 0x2c
 8002cb0:	fb03 f302 	mul.w	r3, r3, r2
 8002cb4:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <Endpoint_Read_32_LE+0x6c>)
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3304      	adds	r3, #4
 8002cba:	607b      	str	r3, [r7, #4]
	bool Success = false;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d912      	bls.n	8002cf2 <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	1d1a      	adds	r2, r3, #4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	1f1a      	subs	r2, r3, #4
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	609a      	str	r2, [r3, #8]

			Success = true;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1e2      	bne.n	8002cc4 <Endpoint_Read_32_LE+0x24>
	return data;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	20000740 	.word	0x20000740

08002d10 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	e092      	b.n	8002e48 <Endpoint_ConfigureEndpointTable+0x138>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8002d3a:	4b48      	ldr	r3, [pc, #288]	; (8002e5c <Endpoint_ConfigureEndpointTable+0x14c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69dc      	ldr	r4, [r3, #28]
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	7818      	ldrb	r0, [r3, #0]
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	7919      	ldrb	r1, [r3, #4]
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	461a      	mov	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	885b      	ldrh	r3, [r3, #2]
 8002d76:	461a      	mov	r2, r3
 8002d78:	47a0      	blx	r4
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <Endpoint_ConfigureEndpointTable+0x74>
			return false;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e067      	b.n	8002e54 <Endpoint_ConfigureEndpointTable+0x144>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	461a      	mov	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	441a      	add	r2, r3
 8002d94:	7bbb      	ldrb	r3, [r7, #14]
 8002d96:	7810      	ldrb	r0, [r2, #0]
 8002d98:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <Endpoint_ConfigureEndpointTable+0x14c>)
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	3304      	adds	r3, #4
 8002da4:	4602      	mov	r2, r0
 8002da6:	701a      	strb	r2, [r3, #0]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	885a      	ldrh	r2, [r3, #2]
 8002dba:	7bbb      	ldrb	r3, [r7, #14]
 8002dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dc0:	b2d1      	uxtb	r1, r2
 8002dc2:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <Endpoint_ConfigureEndpointTable+0x14c>)
 8002dc4:	202c      	movs	r0, #44	; 0x2c
 8002dc6:	fb00 f303 	mul.w	r3, r0, r3
 8002dca:	441a      	add	r2, r3
 8002dcc:	8913      	ldrh	r3, [r2, #8]
 8002dce:	f361 138c 	bfi	r3, r1, #6, #7
 8002dd2:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 8002dd4:	7bbb      	ldrb	r3, [r7, #14]
 8002dd6:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <Endpoint_ConfigureEndpointTable+0x14c>)
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	441a      	add	r2, r3
 8002de0:	7a13      	ldrb	r3, [r2, #8]
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8002de8:	7bbb      	ldrb	r3, [r7, #14]
 8002dea:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <Endpoint_ConfigureEndpointTable+0x14c>)
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	441a      	add	r2, r3
 8002df4:	7a13      	ldrb	r3, [r2, #8]
 8002df6:	f043 0302 	orr.w	r3, r3, #2
 8002dfa:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	461a      	mov	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b25b      	sxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db16      	blt.n	8002e42 <Endpoint_ConfigureEndpointTable+0x132>
			device.Driver->EndpointReadStart(Table[i].Address,
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <Endpoint_ConfigureEndpointTable+0x14c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	461a      	mov	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	7bbb      	ldrb	r3, [r7, #14]
 8002e2e:	490b      	ldr	r1, [pc, #44]	; (8002e5c <Endpoint_ConfigureEndpointTable+0x14c>)
 8002e30:	202c      	movs	r0, #44	; 0x2c
 8002e32:	fb00 f303 	mul.w	r3, r0, r3
 8002e36:	440b      	add	r3, r1
 8002e38:	3318      	adds	r3, #24
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	47a0      	blx	r4
	for (i=0;i<Entries;i++) {
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	3301      	adds	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f4ff af68 	bcc.w	8002d22 <Endpoint_ConfigureEndpointTable+0x12>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8002e52:	2301      	movs	r3, #1
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd90      	pop	{r4, r7, pc}
 8002e5c:	20000740 	.word	0x20000740

08002e60 <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <Endpoint_Write_Stream_LE+0x10c>)
 8002e70:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002e74:	461a      	mov	r2, r3
 8002e76:	232c      	movs	r3, #44	; 0x2c
 8002e78:	fb03 f302 	mul.w	r3, r3, r2
 8002e7c:	4a3b      	ldr	r2, [pc, #236]	; (8002f6c <Endpoint_Write_Stream_LE+0x10c>)
 8002e7e:	4413      	add	r3, r2
 8002e80:	3304      	adds	r3, #4
 8002e82:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	83bb      	strh	r3, [r7, #28]
	if (BytesProcessed!=NULL) {
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d052      	beq.n	8002f3c <Endpoint_Write_Stream_LE+0xdc>
		Length -= *BytesProcessed;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	897a      	ldrh	r2, [r7, #10]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 8002ea6:	e049      	b.n	8002f3c <Endpoint_Write_Stream_LE+0xdc>
		if (ep->InInUse)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d000      	beq.n	8002eb8 <Endpoint_Write_Stream_LE+0x58>
			continue;
 8002eb6:	e041      	b.n	8002f3c <Endpoint_Write_Stream_LE+0xdc>
		if (Endpoint_IsReadWriteAllowed()) {
 8002eb8:	f7ff fe1c 	bl	8002af4 <Endpoint_IsReadWriteAllowed>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d029      	beq.n	8002f16 <Endpoint_Write_Stream_LE+0xb6>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	6a1a      	ldr	r2, [r3, #32]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	1ad2      	subs	r2, r2, r3
 8002ecc:	897b      	ldrh	r3, [r7, #10]
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	bf28      	it	cs
 8002ed2:	4613      	movcs	r3, r2
 8002ed4:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	461a      	mov	r2, r3
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	8bfa      	ldrh	r2, [r7, #30]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4413      	add	r3, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	8afb      	ldrh	r3, [r7, #22]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f7ff fc48 	bl	8002784 <thumb2_memcpy>
			ep->InBytesAvailable += Bytes;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	699a      	ldr	r2, [r3, #24]
 8002ef8:	8afb      	ldrh	r3, [r7, #22]
 8002efa:	441a      	add	r2, r3
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 8002f00:	8bfa      	ldrh	r2, [r7, #30]
 8002f02:	8afb      	ldrh	r3, [r7, #22]
 8002f04:	4413      	add	r3, r2
 8002f06:	83fb      	strh	r3, [r7, #30]
			prev_length = Length;
 8002f08:	897b      	ldrh	r3, [r7, #10]
 8002f0a:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 8002f0c:	897a      	ldrh	r2, [r7, #10]
 8002f0e:	8afb      	ldrh	r3, [r7, #22]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	817b      	strh	r3, [r7, #10]
 8002f14:	e012      	b.n	8002f3c <Endpoint_Write_Stream_LE+0xdc>
		}
		else {
			Endpoint_ClearIN();
 8002f16:	f7ff fd75 	bl	8002a04 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <Endpoint_Write_Stream_LE+0xca>
				*BytesProcessed = BytesTransfered;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8bfa      	ldrh	r2, [r7, #30]
 8002f24:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8002f26:	2305      	movs	r3, #5
 8002f28:	e01b      	b.n	8002f62 <Endpoint_Write_Stream_LE+0x102>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8002f2a:	f7ff fc8d 	bl	8002848 <Endpoint_WaitUntilReady>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	757b      	strb	r3, [r7, #21]
 8002f32:	7d7b      	ldrb	r3, [r7, #21]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <Endpoint_Write_Stream_LE+0xdc>
				return ErrorCode;
 8002f38:	7d7b      	ldrb	r3, [r7, #21]
 8002f3a:	e012      	b.n	8002f62 <Endpoint_Write_Stream_LE+0x102>
	while (Length) {
 8002f3c:	897b      	ldrh	r3, [r7, #10]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1b2      	bne.n	8002ea8 <Endpoint_Write_Stream_LE+0x48>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 8002f42:	897b      	ldrh	r3, [r7, #10]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <Endpoint_Write_Stream_LE+0x100>
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	889b      	ldrh	r3, [r3, #4]
 8002f4c:	f3c3 1386 	ubfx	r3, r3, #6, #7
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	8bba      	ldrh	r2, [r7, #28]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d102      	bne.n	8002f60 <Endpoint_Write_Stream_LE+0x100>
	{
	   zlp_flag = true;
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <Endpoint_Write_Stream_LE+0x110>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]
	}
	return ENDPOINT_RWSTREAM_NoError;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000740 	.word	0x20000740
 8002f70:	20000474 	.word	0x20000474

08002f74 <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 8002f84:	e00e      	b.n	8002fa4 <SwapCopy+0x30>
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	1ad2      	subs	r2, r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	780a      	ldrb	r2, [r1, #0]
 8002f9c:	701a      	strb	r2, [r3, #0]
		i++;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d3ec      	bcc.n	8002f86 <SwapCopy+0x12>
	}
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8002fca:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <Endpoint_Write_Stream_BE+0xe4>)
 8002fcc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	232c      	movs	r3, #44	; 0x2c
 8002fd4:	fb03 f302 	mul.w	r3, r3, r2
 8002fd8:	4a31      	ldr	r2, [pc, #196]	; (80030a0 <Endpoint_Write_Stream_BE+0xe4>)
 8002fda:	4413      	add	r3, r2
 8002fdc:	3304      	adds	r3, #4
 8002fde:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d050      	beq.n	8003090 <Endpoint_Write_Stream_BE+0xd4>
		Length -= *BytesProcessed;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	897a      	ldrh	r2, [r7, #10]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 8002ffe:	e047      	b.n	8003090 <Endpoint_Write_Stream_BE+0xd4>
		if (ep->InInUse)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d000      	beq.n	8003010 <Endpoint_Write_Stream_BE+0x54>
			continue;
 800300e:	e03f      	b.n	8003090 <Endpoint_Write_Stream_BE+0xd4>
		if (Endpoint_IsReadWriteAllowed()) {
 8003010:	f7ff fd70 	bl	8002af4 <Endpoint_IsReadWriteAllowed>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d027      	beq.n	800306a <Endpoint_Write_Stream_BE+0xae>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6a1a      	ldr	r2, [r3, #32]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	1ad2      	subs	r2, r2, r3
 8003024:	897b      	ldrh	r3, [r7, #10]
 8003026:	4293      	cmp	r3, r2
 8003028:	bf28      	it	cs
 800302a:	4613      	movcs	r3, r2
 800302c:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	461a      	mov	r2, r3
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4413      	add	r3, r2
 800303a:	4618      	mov	r0, r3
 800303c:	8bfa      	ldrh	r2, [r7, #30]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4413      	add	r3, r2
 8003042:	4619      	mov	r1, r3
 8003044:	8afb      	ldrh	r3, [r7, #22]
 8003046:	461a      	mov	r2, r3
 8003048:	f7ff ff94 	bl	8002f74 <SwapCopy>
			ep->InBytesAvailable += Bytes;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	699a      	ldr	r2, [r3, #24]
 8003050:	8afb      	ldrh	r3, [r7, #22]
 8003052:	441a      	add	r2, r3
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 8003058:	8bfa      	ldrh	r2, [r7, #30]
 800305a:	8afb      	ldrh	r3, [r7, #22]
 800305c:	4413      	add	r3, r2
 800305e:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 8003060:	897a      	ldrh	r2, [r7, #10]
 8003062:	8afb      	ldrh	r3, [r7, #22]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	817b      	strh	r3, [r7, #10]
 8003068:	e012      	b.n	8003090 <Endpoint_Write_Stream_BE+0xd4>
		}
		else {
			Endpoint_ClearIN();
 800306a:	f7ff fccb 	bl	8002a04 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <Endpoint_Write_Stream_BE+0xc2>
				*BytesProcessed = BytesTransfered;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8bfa      	ldrh	r2, [r7, #30]
 8003078:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800307a:	2305      	movs	r3, #5
 800307c:	e00c      	b.n	8003098 <Endpoint_Write_Stream_BE+0xdc>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 800307e:	f7ff fbe3 	bl	8002848 <Endpoint_WaitUntilReady>
 8003082:	4603      	mov	r3, r0
 8003084:	757b      	strb	r3, [r7, #21]
 8003086:	7d7b      	ldrb	r3, [r7, #21]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <Endpoint_Write_Stream_BE+0xd4>
				return ErrorCode;
 800308c:	7d7b      	ldrb	r3, [r7, #21]
 800308e:	e003      	b.n	8003098 <Endpoint_Write_Stream_BE+0xdc>
	while (Length) {
 8003090:	897b      	ldrh	r3, [r7, #10]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1b4      	bne.n	8003000 <Endpoint_Write_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000740 	.word	0x20000740

080030a4 <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	460b      	mov	r3, r1
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80030b2:	4b37      	ldr	r3, [pc, #220]	; (8003190 <Endpoint_Read_Stream_LE+0xec>)
 80030b4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80030b8:	461a      	mov	r2, r3
 80030ba:	232c      	movs	r3, #44	; 0x2c
 80030bc:	fb03 f302 	mul.w	r3, r3, r2
 80030c0:	4a33      	ldr	r2, [pc, #204]	; (8003190 <Endpoint_Read_Stream_LE+0xec>)
 80030c2:	4413      	add	r3, r2
 80030c4:	3304      	adds	r3, #4
 80030c6:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d053      	beq.n	800317e <Endpoint_Read_Stream_LE+0xda>
		Length -= *BytesProcessed;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	897a      	ldrh	r2, [r7, #10]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 80030e6:	e04a      	b.n	800317e <Endpoint_Read_Stream_LE+0xda>
		if (ep->OutInUse)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d000      	beq.n	80030f8 <Endpoint_Read_Stream_LE+0x54>
			continue;
 80030f6:	e042      	b.n	800317e <Endpoint_Read_Stream_LE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 80030f8:	f7ff fcfc 	bl	8002af4 <Endpoint_IsReadWriteAllowed>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d02a      	beq.n	8003158 <Endpoint_Read_Stream_LE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	897b      	ldrh	r3, [r7, #10]
 8003108:	4293      	cmp	r3, r2
 800310a:	bf28      	it	cs
 800310c:	4613      	movcs	r3, r2
 800310e:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003110:	8bfa      	ldrh	r2, [r7, #30]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	4618      	mov	r0, r3
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	461a      	mov	r2, r3
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4413      	add	r3, r2
 8003124:	4619      	mov	r1, r3
 8003126:	8afb      	ldrh	r3, [r7, #22]
 8003128:	461a      	mov	r2, r3
 800312a:	f7ff fb2b 	bl	8002784 <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	8afb      	ldrh	r3, [r7, #22]
 8003134:	1ad2      	subs	r2, r2, r3
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	8afb      	ldrh	r3, [r7, #22]
 8003140:	441a      	add	r2, r3
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 8003146:	8bfa      	ldrh	r2, [r7, #30]
 8003148:	8afb      	ldrh	r3, [r7, #22]
 800314a:	4413      	add	r3, r2
 800314c:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 800314e:	897a      	ldrh	r2, [r7, #10]
 8003150:	8afb      	ldrh	r3, [r7, #22]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	817b      	strh	r3, [r7, #10]
 8003156:	e012      	b.n	800317e <Endpoint_Read_Stream_LE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 8003158:	f7ff fc08 	bl	800296c <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <Endpoint_Read_Stream_LE+0xc8>
				*BytesProcessed = BytesTransfered;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	8bfa      	ldrh	r2, [r7, #30]
 8003166:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003168:	2305      	movs	r3, #5
 800316a:	e00c      	b.n	8003186 <Endpoint_Read_Stream_LE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 800316c:	f7ff fb6c 	bl	8002848 <Endpoint_WaitUntilReady>
 8003170:	4603      	mov	r3, r0
 8003172:	757b      	strb	r3, [r7, #21]
 8003174:	7d7b      	ldrb	r3, [r7, #21]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <Endpoint_Read_Stream_LE+0xda>
				return ErrorCode;
 800317a:	7d7b      	ldrb	r3, [r7, #21]
 800317c:	e003      	b.n	8003186 <Endpoint_Read_Stream_LE+0xe2>
	while (Length) {
 800317e:	897b      	ldrh	r3, [r7, #10]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1b1      	bne.n	80030e8 <Endpoint_Read_Stream_LE+0x44>
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000740 	.word	0x20000740

08003194 <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	460b      	mov	r3, r1
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80031a2:	4b37      	ldr	r3, [pc, #220]	; (8003280 <Endpoint_Read_Stream_BE+0xec>)
 80031a4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80031a8:	461a      	mov	r2, r3
 80031aa:	232c      	movs	r3, #44	; 0x2c
 80031ac:	fb03 f302 	mul.w	r3, r3, r2
 80031b0:	4a33      	ldr	r2, [pc, #204]	; (8003280 <Endpoint_Read_Stream_BE+0xec>)
 80031b2:	4413      	add	r3, r2
 80031b4:	3304      	adds	r3, #4
 80031b6:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d053      	beq.n	800326e <Endpoint_Read_Stream_BE+0xda>
		Length -= *BytesProcessed;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	897a      	ldrh	r2, [r7, #10]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 80031d6:	e04a      	b.n	800326e <Endpoint_Read_Stream_BE+0xda>
		if (ep->InInUse)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d000      	beq.n	80031e8 <Endpoint_Read_Stream_BE+0x54>
			continue;
 80031e6:	e042      	b.n	800326e <Endpoint_Read_Stream_BE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 80031e8:	f7ff fc84 	bl	8002af4 <Endpoint_IsReadWriteAllowed>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d02a      	beq.n	8003248 <Endpoint_Read_Stream_BE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	4293      	cmp	r3, r2
 80031fa:	bf28      	it	cs
 80031fc:	4613      	movcs	r3, r2
 80031fe:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003200:	8bfa      	ldrh	r2, [r7, #30]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	4618      	mov	r0, r3
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	461a      	mov	r2, r3
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	4413      	add	r3, r2
 8003214:	4619      	mov	r1, r3
 8003216:	8afb      	ldrh	r3, [r7, #22]
 8003218:	461a      	mov	r2, r3
 800321a:	f7ff feab 	bl	8002f74 <SwapCopy>
			ep->OutBytesAvailable -= Bytes;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	8afb      	ldrh	r3, [r7, #22]
 8003224:	1ad2      	subs	r2, r2, r3
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	8afb      	ldrh	r3, [r7, #22]
 8003230:	441a      	add	r2, r3
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 8003236:	8bfa      	ldrh	r2, [r7, #30]
 8003238:	8afb      	ldrh	r3, [r7, #22]
 800323a:	4413      	add	r3, r2
 800323c:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 800323e:	897a      	ldrh	r2, [r7, #10]
 8003240:	8afb      	ldrh	r3, [r7, #22]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	817b      	strh	r3, [r7, #10]
 8003246:	e012      	b.n	800326e <Endpoint_Read_Stream_BE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 8003248:	f7ff fb90 	bl	800296c <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d004      	beq.n	800325c <Endpoint_Read_Stream_BE+0xc8>
				*BytesProcessed = BytesTransfered;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	8bfa      	ldrh	r2, [r7, #30]
 8003256:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003258:	2305      	movs	r3, #5
 800325a:	e00c      	b.n	8003276 <Endpoint_Read_Stream_BE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 800325c:	f7ff faf4 	bl	8002848 <Endpoint_WaitUntilReady>
 8003260:	4603      	mov	r3, r0
 8003262:	757b      	strb	r3, [r7, #21]
 8003264:	7d7b      	ldrb	r3, [r7, #21]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <Endpoint_Read_Stream_BE+0xda>
				return ErrorCode;
 800326a:	7d7b      	ldrb	r3, [r7, #21]
 800326c:	e003      	b.n	8003276 <Endpoint_Read_Stream_BE+0xe2>
	while (Length) {
 800326e:	897b      	ldrh	r3, [r7, #10]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1b1      	bne.n	80031d8 <Endpoint_Read_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000740 	.word	0x20000740

08003284 <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <Endpoint_Write_Control_Stream_LE+0x6c>)
 8003292:	60bb      	str	r3, [r7, #8]
	uint16_t Bytes;

	while (Length) {
 8003294:	e024      	b.n	80032e0 <Endpoint_Write_Control_Stream_LE+0x5c>
		if (!EndPoint->InInUse) {
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d11d      	bne.n	80032e0 <Endpoint_Write_Control_Stream_LE+0x5c>
			if (EndPoint->InBufferLength > Length) {
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	887b      	ldrh	r3, [r7, #2]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d902      	bls.n	80032b4 <Endpoint_Write_Control_Stream_LE+0x30>
				Bytes = Length;
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	81fb      	strh	r3, [r7, #14]
 80032b2:	e002      	b.n	80032ba <Endpoint_Write_Control_Stream_LE+0x36>
			} else {
				Bytes = EndPoint->InBufferLength;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	81fb      	strh	r3, [r7, #14]
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	89fa      	ldrh	r2, [r7, #14]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fa5e 	bl	8002784 <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	89fb      	ldrh	r3, [r7, #14]
 80032ce:	441a      	add	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	619a      	str	r2, [r3, #24]
			Length -= Bytes;
 80032d4:	887a      	ldrh	r2, [r7, #2]
 80032d6:	89fb      	ldrh	r3, [r7, #14]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearIN();
 80032dc:	f7ff fb92 	bl	8002a04 <Endpoint_ClearIN>
	while (Length) {
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1d7      	bne.n	8003296 <Endpoint_Write_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000744 	.word	0x20000744

080032f4 <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 8003300:	887b      	ldrh	r3, [r7, #2]
 8003302:	4619      	mov	r1, r3
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff ffbd 	bl	8003284 <Endpoint_Write_Control_Stream_LE>
 800330a:	4603      	mov	r3, r0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 8003320:	4b15      	ldr	r3, [pc, #84]	; (8003378 <Endpoint_Read_Control_Stream_LE+0x64>)
 8003322:	60fb      	str	r3, [r7, #12]
	uint16_t Bytes;

	while (Length) {
 8003324:	e020      	b.n	8003368 <Endpoint_Read_Control_Stream_LE+0x54>
		if (EndPoint->IsOutRecieved) {
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d019      	beq.n	8003368 <Endpoint_Read_Control_Stream_LE+0x54>
			Bytes = EndPoint->OutBytesAvailable > Length
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	887b      	ldrh	r3, [r7, #2]
					? Length : EndPoint->OutBytesAvailable;
 800333a:	4293      	cmp	r3, r2
 800333c:	bf28      	it	cs
 800333e:	4613      	movcs	r3, r2
			Bytes = EndPoint->OutBytesAvailable > Length
 8003340:	817b      	strh	r3, [r7, #10]
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	897a      	ldrh	r2, [r7, #10]
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fa1a 	bl	8002784 <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	897b      	ldrh	r3, [r7, #10]
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	609a      	str	r2, [r3, #8]
			Length -= Bytes;
 800335c:	887a      	ldrh	r2, [r7, #2]
 800335e:	897b      	ldrh	r3, [r7, #10]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearOUT();
 8003364:	f7ff fb02 	bl	800296c <Endpoint_ClearOUT>
	while (Length) {
 8003368:	887b      	ldrh	r3, [r7, #2]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1db      	bne.n	8003326 <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000744 	.word	0x20000744

0800337c <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ffc1 	bl	8003314 <Endpoint_Read_Control_Stream_LE>
 8003392:	4603      	mov	r3, r0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	80fb      	strh	r3, [r7, #6]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80033a8:	4b32      	ldr	r3, [pc, #200]	; (8003474 <Endpoint_Null_Stream+0xd8>)
 80033aa:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80033ae:	461a      	mov	r2, r3
 80033b0:	232c      	movs	r3, #44	; 0x2c
 80033b2:	fb03 f302 	mul.w	r3, r3, r2
 80033b6:	4a2f      	ldr	r2, [pc, #188]	; (8003474 <Endpoint_Null_Stream+0xd8>)
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	613b      	str	r3, [r7, #16]
		uint16_t Bytes = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	81fb      	strh	r3, [r7, #14]
		uint16_t BytesTransfered = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	82fb      	strh	r3, [r7, #22]
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d04b      	beq.n	8003464 <Endpoint_Null_Stream+0xc8>
			Length -= *BytesProcessed;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	88fa      	ldrh	r2, [r7, #6]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	80fb      	strh	r3, [r7, #6]
			BytesTransfered = *BytesProcessed;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	82fb      	strh	r3, [r7, #22]
		}

		while (Length) {
 80033dc:	e042      	b.n	8003464 <Endpoint_Null_Stream+0xc8>
			if (ep->InInUse)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d000      	beq.n	80033ee <Endpoint_Null_Stream+0x52>
				continue;
 80033ec:	e03a      	b.n	8003464 <Endpoint_Null_Stream+0xc8>
			if (Endpoint_IsReadWriteAllowed()) {
 80033ee:	f7ff fb81 	bl	8002af4 <Endpoint_IsReadWriteAllowed>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d022      	beq.n	800343e <Endpoint_Null_Stream+0xa2>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	6a1a      	ldr	r2, [r3, #32]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	1ad2      	subs	r2, r2, r3
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	4293      	cmp	r3, r2
 8003406:	bf28      	it	cs
 8003408:	4613      	movcs	r3, r2
 800340a:	81fb      	strh	r3, [r7, #14]
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4413      	add	r3, r2
 8003416:	89fa      	ldrh	r2, [r7, #14]
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f002 ffae 	bl	800637c <memset>
				ep->InBytesAvailable += Bytes;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	89fb      	ldrh	r3, [r7, #14]
 8003426:	441a      	add	r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	619a      	str	r2, [r3, #24]
				BytesTransfered += Bytes;
 800342c:	8afa      	ldrh	r2, [r7, #22]
 800342e:	89fb      	ldrh	r3, [r7, #14]
 8003430:	4413      	add	r3, r2
 8003432:	82fb      	strh	r3, [r7, #22]
				Length -= Bytes;
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	89fb      	ldrh	r3, [r7, #14]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	80fb      	strh	r3, [r7, #6]
 800343c:	e012      	b.n	8003464 <Endpoint_Null_Stream+0xc8>
			}
			else {
				Endpoint_ClearIN();
 800343e:	f7ff fae1 	bl	8002a04 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <Endpoint_Null_Stream+0xb6>
					*BytesProcessed = BytesTransfered;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	8afa      	ldrh	r2, [r7, #22]
 800344c:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800344e:	2305      	movs	r3, #5
 8003450:	e00c      	b.n	800346c <Endpoint_Null_Stream+0xd0>
				}

				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003452:	f7ff f9f9 	bl	8002848 <Endpoint_WaitUntilReady>
 8003456:	4603      	mov	r3, r0
 8003458:	737b      	strb	r3, [r7, #13]
 800345a:	7b7b      	ldrb	r3, [r7, #13]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <Endpoint_Null_Stream+0xc8>
					return ErrorCode;
 8003460:	7b7b      	ldrb	r3, [r7, #13]
 8003462:	e003      	b.n	800346c <Endpoint_Null_Stream+0xd0>
		while (Length) {
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1b9      	bne.n	80033de <Endpoint_Null_Stream+0x42>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000740 	.word	0x20000740

08003478 <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <USBD_HandleEP0_Stall+0x28>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2101      	movs	r1, #1
 8003484:	2080      	movs	r0, #128	; 0x80
 8003486:	4798      	blx	r3
	device.EP0_State = IDLE;
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <USBD_HandleEP0_Stall+0x28>)
 800348a:	2201      	movs	r2, #1
 800348c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <USBD_HandleEP0_Stall+0x28>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	2118      	movs	r1, #24
 8003498:	2000      	movs	r0, #0
 800349a:	4798      	blx	r3
}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000740 	.word	0x20000740

080034a4 <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
	uint32_t length = 0,ret;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
	uint16_t status = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	813b      	strh	r3, [r7, #8]
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 80034b2:	4bab      	ldr	r3, [pc, #684]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 80034b4:	885b      	ldrh	r3, [r3, #2]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	74fb      	strb	r3, [r7, #19]

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
 80034ba:	f7fd f8f5 	bl	80006a8 <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 80034be:	4ba9      	ldr	r3, [pc, #676]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 80034c0:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80034c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 81fe 	beq.w	80038cc <USB_Device_ProcessControlRequest+0x428>
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 80034d0:	4ba3      	ldr	r3, [pc, #652]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	f200 81e9 	bhi.w	80038ac <USB_Device_ProcessControlRequest+0x408>
 80034da:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <USB_Device_ProcessControlRequest+0x3c>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	08003657 	.word	0x08003657
 80034e4:	08003515 	.word	0x08003515
 80034e8:	080038ad 	.word	0x080038ad
 80034ec:	080037e3 	.word	0x080037e3
 80034f0:	080038ad 	.word	0x080038ad
 80034f4:	0800373b 	.word	0x0800373b
 80034f8:	080035bb 	.word	0x080035bb
 80034fc:	080037a9 	.word	0x080037a9
 8003500:	080035ab 	.word	0x080035ab
 8003504:	08003771 	.word	0x08003771
 8003508:	0800361f 	.word	0x0800361f
 800350c:	080037af 	.word	0x080037af
 8003510:	080038a7 	.word	0x080038a7
	case REQ_ClearFeature:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8003514:	4b92      	ldr	r3, [pc, #584]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d133      	bne.n	8003588 <USB_Device_ProcessControlRequest+0xe4>
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 8003520:	4b8f      	ldr	r3, [pc, #572]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 8003522:	889b      	ldrh	r3, [r3, #4]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 800352c:	4b8e      	ldr	r3, [pc, #568]	; (8003768 <USB_Device_ProcessControlRequest+0x2c4>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b04      	cmp	r3, #4
 8003534:	d004      	beq.n	8003540 <USB_Device_ProcessControlRequest+0x9c>
 8003536:	4b8a      	ldr	r3, [pc, #552]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 8003538:	889b      	ldrh	r3, [r3, #4]
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d120      	bne.n	8003582 <USB_Device_ProcessControlRequest+0xde>
					device.Endpoints[Index].IsConfigured==1) {
 8003540:	897b      	ldrh	r3, [r7, #10]
 8003542:	4a88      	ldr	r2, [pc, #544]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	7a1b      	ldrb	r3, [r3, #8]
 800354e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003552:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8003554:	2b01      	cmp	r3, #1
 8003556:	d114      	bne.n	8003582 <USB_Device_ProcessControlRequest+0xde>
				device.Endpoints[Index].IsHalted = 0;
 8003558:	897b      	ldrh	r3, [r7, #10]
 800355a:	4a82      	ldr	r2, [pc, #520]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	441a      	add	r2, r3
 8003564:	7a13      	ldrb	r3, [r2, #8]
 8003566:	f36f 0382 	bfc	r3, #2, #1
 800356a:	7213      	strb	r3, [r2, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 800356c:	4b7d      	ldr	r3, [pc, #500]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	4a7b      	ldr	r2, [pc, #492]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 8003574:	8892      	ldrh	r2, [r2, #4]
 8003576:	b292      	uxth	r2, r2
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	2100      	movs	r1, #0
 800357c:	4610      	mov	r0, r2
 800357e:	4798      	blx	r3
			} else {
				USBD_HandleEP0_Stall();
			}
			break;
 8003580:	e19c      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
				USBD_HandleEP0_Stall();
 8003582:	f7ff ff79 	bl	8003478 <USBD_HandleEP0_Stall>
			break;
 8003586:	e199      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8003588:	4b75      	ldr	r3, [pc, #468]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d107      	bne.n	80035a4 <USB_Device_ProcessControlRequest+0x100>
			 device.RemoteWakeUp = 0;
 8003594:	4a73      	ldr	r2, [pc, #460]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 8003596:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800359a:	f36f 0382 	bfc	r3, #2, #1
 800359e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			 break;
 80035a2:	e18b      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		}
		USBD_HandleEP0_Stall();
 80035a4:	f7ff ff68 	bl	8003478 <USBD_HandleEP0_Stall>
		break;
 80035a8:	e188      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>

	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 80035aa:	4b6e      	ldr	r3, [pc, #440]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	2201      	movs	r2, #1
 80035b2:	496e      	ldr	r1, [pc, #440]	; (800376c <USB_Device_ProcessControlRequest+0x2c8>)
 80035b4:	2000      	movs	r0, #0
 80035b6:	4798      	blx	r3
		break;
 80035b8:	e180      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>

	case REQ_GetDescriptor:
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 80035ba:	4b69      	ldr	r3, [pc, #420]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 80035bc:	885b      	ldrh	r3, [r3, #2]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	4a67      	ldr	r2, [pc, #412]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 80035c2:	8892      	ldrh	r2, [r2, #4]
 80035c4:	b292      	uxth	r2, r2
 80035c6:	b2d1      	uxtb	r1, r2
 80035c8:	1d3a      	adds	r2, r7, #4
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fd f882 	bl	80006d4 <CALLBACK_USB_GetDescriptor>
 80035d0:	4603      	mov	r3, r0
 80035d2:	617b      	str	r3, [r7, #20]
		if (length==0)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <USB_Device_ProcessControlRequest+0x13c>
			USBD_HandleEP0_Stall();
 80035da:	f7ff ff4d 	bl	8003478 <USBD_HandleEP0_Stall>
					length : USB_ControlRequest.wLength;
			ret = device.Driver->EndpointWrite(0,buffer,length);
			device.Endpoints[0].InDataLeft = length - ret;
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
		}
		break;
 80035de:	e16d      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
			length = length < USB_ControlRequest.wLength ?
 80035e0:	4b5f      	ldr	r3, [pc, #380]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 80035e2:	88db      	ldrh	r3, [r3, #6]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	4293      	cmp	r3, r2
 80035ec:	bf28      	it	cs
 80035ee:	4613      	movcs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
			ret = device.Driver->EndpointWrite(0,buffer,length);
 80035f2:	4b5c      	ldr	r3, [pc, #368]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	2000      	movs	r0, #0
 80035fe:	4798      	blx	r3
 8003600:	4603      	mov	r3, r0
 8003602:	60fb      	str	r3, [r7, #12]
			device.Endpoints[0].InDataLeft = length - ret;
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	4a56      	ldr	r2, [pc, #344]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 800360c:	6293      	str	r3, [r2, #40]	; 0x28
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	461a      	mov	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	461a      	mov	r2, r3
 8003618:	4b52      	ldr	r3, [pc, #328]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 800361c:	e14e      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>

	case REQ_GetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 800361e:	4b52      	ldr	r3, [pc, #328]	; (8003768 <USB_Device_ProcessControlRequest+0x2c4>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b04      	cmp	r3, #4
 8003626:	d10d      	bne.n	8003644 <USB_Device_ProcessControlRequest+0x1a0>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 8003628:	4b4e      	ldr	r3, [pc, #312]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	4a4c      	ldr	r2, [pc, #304]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 8003630:	8892      	ldrh	r2, [r2, #4]
 8003632:	b292      	uxth	r2, r2
 8003634:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8003638:	494a      	ldr	r1, [pc, #296]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 800363a:	4411      	add	r1, r2
 800363c:	2201      	movs	r2, #1
 800363e:	2000      	movs	r0, #0
 8003640:	4798      	blx	r3
			break;
 8003642:	e13b      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <USB_Device_ProcessControlRequest+0x2c4>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b03      	cmp	r3, #3
 800364c:	f040 8131 	bne.w	80038b2 <USB_Device_ProcessControlRequest+0x40e>
			USBD_HandleEP0_Stall();
 8003650:	f7ff ff12 	bl	8003478 <USBD_HandleEP0_Stall>
			break;
 8003654:	e132      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		}
		break;

	case REQ_GetStatus:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8003656:	4b42      	ldr	r3, [pc, #264]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d11b      	bne.n	800369a <USB_Device_ProcessControlRequest+0x1f6>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 8003662:	4b40      	ldr	r3, [pc, #256]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 8003664:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003668:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	b21a      	sxth	r2, r3
 8003672:	4b3c      	ldr	r3, [pc, #240]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 8003674:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003678:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800367c:	b2db      	uxtb	r3, r3
 800367e:	b21b      	sxth	r3, r3
 8003680:	4313      	orrs	r3, r2
 8003682:	b21b      	sxth	r3, r3
 8003684:	b29b      	uxth	r3, r3
 8003686:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8003688:	4b36      	ldr	r3, [pc, #216]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f107 0108 	add.w	r1, r7, #8
 8003692:	2202      	movs	r2, #2
 8003694:	2000      	movs	r0, #0
 8003696:	4798      	blx	r3
			break;
 8003698:	e110      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 800369a:	4b31      	ldr	r3, [pc, #196]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10f      	bne.n	80036c6 <USB_Device_ProcessControlRequest+0x222>
 80036a6:	4b30      	ldr	r3, [pc, #192]	; (8003768 <USB_Device_ProcessControlRequest+0x2c4>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d10a      	bne.n	80036c6 <USB_Device_ProcessControlRequest+0x222>
			status = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 80036b4:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f107 0108 	add.w	r1, r7, #8
 80036be:	2202      	movs	r2, #2
 80036c0:	2000      	movs	r0, #0
 80036c2:	4798      	blx	r3
			break;
 80036c4:	e0fa      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		}
		/* print endpoint status only when(or):
		 * - Device_Address_state and ep == 0
		 * - Device_configured_state and ep is configured
		 */
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 80036c6:	4b26      	ldr	r3, [pc, #152]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d130      	bne.n	8003734 <USB_Device_ProcessControlRequest+0x290>
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 80036d4:	889b      	ldrh	r3, [r3, #4]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <USB_Device_ProcessControlRequest+0x2c4>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d004      	beq.n	80036f2 <USB_Device_ProcessControlRequest+0x24e>
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <USB_Device_ProcessControlRequest+0x2bc>)
 80036ea:	889b      	ldrh	r3, [r3, #4]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d120      	bne.n	8003734 <USB_Device_ProcessControlRequest+0x290>
					device.Endpoints[Index].IsConfigured==1) {
 80036f2:	897b      	ldrh	r3, [r7, #10]
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	7a1b      	ldrb	r3, [r3, #8]
 8003700:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003704:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8003706:	2b01      	cmp	r3, #1
 8003708:	d114      	bne.n	8003734 <USB_Device_ProcessControlRequest+0x290>
				status = device.Endpoints[Index].IsHalted;
 800370a:	897b      	ldrh	r3, [r7, #10]
 800370c:	4a15      	ldr	r2, [pc, #84]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 800370e:	212c      	movs	r1, #44	; 0x2c
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4413      	add	r3, r2
 8003716:	7a1b      	ldrb	r3, [r3, #8]
 8003718:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800371c:	b2db      	uxtb	r3, r3
 800371e:	b29b      	uxth	r3, r3
 8003720:	813b      	strh	r3, [r7, #8]
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f107 0108 	add.w	r1, r7, #8
 800372c:	2202      	movs	r2, #2
 800372e:	2000      	movs	r0, #0
 8003730:	4798      	blx	r3
				break;
 8003732:	e0c3      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
			}
		}
		/* default stall */
		USBD_HandleEP0_Stall();
 8003734:	f7ff fea0 	bl	8003478 <USBD_HandleEP0_Stall>
		break;
 8003738:	e0c0      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>

	case REQ_SetAddress:
		if (Value == 0)
 800373a:	7cfb      	ldrb	r3, [r7, #19]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <USB_Device_ProcessControlRequest+0x2a4>
			USB_DeviceState = DEVICE_STATE_Default;
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <USB_Device_ProcessControlRequest+0x2c4>)
 8003742:	2202      	movs	r2, #2
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	e002      	b.n	800374e <USB_Device_ProcessControlRequest+0x2aa>
		else
			USB_DeviceState = DEVICE_STATE_Addressed;
 8003748:	4b07      	ldr	r3, [pc, #28]	; (8003768 <USB_Device_ProcessControlRequest+0x2c4>)
 800374a:	2203      	movs	r2, #3
 800374c:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <USB_Device_ProcessControlRequest+0x2c0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	7cfa      	ldrb	r2, [r7, #19]
 8003756:	2100      	movs	r1, #0
 8003758:	4610      	mov	r0, r2
 800375a:	4798      	blx	r3
		break;
 800375c:	e0ae      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
 800375e:	bf00      	nop
 8003760:	20000a90 	.word	0x20000a90
 8003764:	20000740 	.word	0x20000740
 8003768:	20000a8d 	.word	0x20000a8d
 800376c:	20000879 	.word	0x20000879

	case REQ_SetConfiguration:
		/* Regardless the state update the configuration to unconfigure endpoints */
		device.Configuration = Value;
 8003770:	4a58      	ldr	r2, [pc, #352]	; (80038d4 <USB_Device_ProcessControlRequest+0x430>)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 8003778:	f7fc ff6e 	bl	8000658 <EVENT_USB_Device_ConfigurationChanged>
		/* when config 0 is choosen, we are back in address state */
		if (Value == 0) {
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <USB_Device_ProcessControlRequest+0x2e6>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8003782:	4b55      	ldr	r3, [pc, #340]	; (80038d8 <USB_Device_ProcessControlRequest+0x434>)
 8003784:	2203      	movs	r2, #3
 8003786:	701a      	strb	r2, [r3, #0]
			break;
 8003788:	e098      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		}
		/* go ahead only with vailid config. (must be set in event) */
		if (device.IsConfigured == 1)
 800378a:	4b52      	ldr	r3, [pc, #328]	; (80038d4 <USB_Device_ProcessControlRequest+0x430>)
 800378c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <USB_Device_ProcessControlRequest+0x2fe>
			USB_DeviceState = DEVICE_STATE_Configured;
 800379a:	4b4f      	ldr	r3, [pc, #316]	; (80038d8 <USB_Device_ProcessControlRequest+0x434>)
 800379c:	2204      	movs	r2, #4
 800379e:	701a      	strb	r2, [r3, #0]
		else
			USBD_HandleEP0_Stall();
		break;
 80037a0:	e08c      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
			USBD_HandleEP0_Stall();
 80037a2:	f7ff fe69 	bl	8003478 <USBD_HandleEP0_Stall>
		break;
 80037a6:	e089      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>

	case REQ_SetDescriptor:
		/* Set Descriptor not supported, so stall */
		USBD_HandleEP0_Stall();
 80037a8:	f7ff fe66 	bl	8003478 <USBD_HandleEP0_Stall>
		break;
 80037ac:	e086      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>

	case REQ_SetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 80037ae:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <USB_Device_ProcessControlRequest+0x434>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d10c      	bne.n	80037d2 <USB_Device_ProcessControlRequest+0x32e>
			/* TODO: Check if interface and altsetting exists and configuration is allowed, else stall */
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 80037b8:	4b48      	ldr	r3, [pc, #288]	; (80038dc <USB_Device_ProcessControlRequest+0x438>)
 80037ba:	885b      	ldrh	r3, [r3, #2]
 80037bc:	b29a      	uxth	r2, r3
 80037be:	4b47      	ldr	r3, [pc, #284]	; (80038dc <USB_Device_ProcessControlRequest+0x438>)
 80037c0:	889b      	ldrh	r3, [r3, #4]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	4619      	mov	r1, r3
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <USB_Device_ProcessControlRequest+0x430>)
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 80037d0:	e074      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 80037d2:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <USB_Device_ProcessControlRequest+0x434>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d16c      	bne.n	80038b6 <USB_Device_ProcessControlRequest+0x412>
			USBD_HandleEP0_Stall();
 80037dc:	f7ff fe4c 	bl	8003478 <USBD_HandleEP0_Stall>
			break;
 80037e0:	e06c      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		}
		break;

	case REQ_SetFeature:
		/* we do not support test mode */
		if (Value == FEATURE_SEL_TestMode) {
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d102      	bne.n	80037ee <USB_Device_ProcessControlRequest+0x34a>
			USBD_HandleEP0_Stall();
 80037e8:	f7ff fe46 	bl	8003478 <USBD_HandleEP0_Stall>
			break;
 80037ec:	e066      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		}
		/* configured state */
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 80037ee:	4b3a      	ldr	r3, [pc, #232]	; (80038d8 <USB_Device_ProcessControlRequest+0x434>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d137      	bne.n	8003868 <USB_Device_ProcessControlRequest+0x3c4>
			switch (Value) {
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <USB_Device_ProcessControlRequest+0x36e>
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d15b      	bne.n	80038ba <USB_Device_ProcessControlRequest+0x416>
			case FEATURE_SEL_DeviceRemoteWakeup:
				device.RemoteWakeUp = 1;
 8003802:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <USB_Device_ProcessControlRequest+0x430>)
 8003804:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				break;
 8003810:	e029      	b.n	8003866 <USB_Device_ProcessControlRequest+0x3c2>
			case FEATURE_SEL_EndpointHalt:
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8003812:	4b32      	ldr	r3, [pc, #200]	; (80038dc <USB_Device_ProcessControlRequest+0x438>)
 8003814:	889b      	ldrh	r3, [r3, #4]
 8003816:	b29b      	uxth	r3, r3
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	817b      	strh	r3, [r7, #10]
				if (device.Endpoints[Index].IsConfigured == 0)
 800381e:	897b      	ldrh	r3, [r7, #10]
 8003820:	4a2c      	ldr	r2, [pc, #176]	; (80038d4 <USB_Device_ProcessControlRequest+0x430>)
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	7a1b      	ldrb	r3, [r3, #8]
 800382c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <USB_Device_ProcessControlRequest+0x398>
					USBD_HandleEP0_Stall();
 8003836:	f7ff fe1f 	bl	8003478 <USBD_HandleEP0_Stall>
				else {
					device.Endpoints[Index].IsHalted = 1;
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
				}
				break;
 800383a:	e013      	b.n	8003864 <USB_Device_ProcessControlRequest+0x3c0>
					device.Endpoints[Index].IsHalted = 1;
 800383c:	897b      	ldrh	r3, [r7, #10]
 800383e:	4a25      	ldr	r2, [pc, #148]	; (80038d4 <USB_Device_ProcessControlRequest+0x430>)
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	441a      	add	r2, r3
 8003848:	7a13      	ldrb	r3, [r2, #8]
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	7213      	strb	r3, [r2, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8003850:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <USB_Device_ProcessControlRequest+0x430>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	4a21      	ldr	r2, [pc, #132]	; (80038dc <USB_Device_ProcessControlRequest+0x438>)
 8003858:	8892      	ldrh	r2, [r2, #4]
 800385a:	b292      	uxth	r2, r2
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	2101      	movs	r1, #1
 8003860:	4610      	mov	r0, r2
 8003862:	4798      	blx	r3
				break;
 8003864:	bf00      	nop
			}
			break;
 8003866:	e028      	b.n	80038ba <USB_Device_ProcessControlRequest+0x416>
		}
		/* when addressed, only ep0 can be halted */
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <USB_Device_ProcessControlRequest+0x434>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b03      	cmp	r3, #3
 8003870:	d116      	bne.n	80038a0 <USB_Device_ProcessControlRequest+0x3fc>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d113      	bne.n	80038a0 <USB_Device_ProcessControlRequest+0x3fc>
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8003878:	4b18      	ldr	r3, [pc, #96]	; (80038dc <USB_Device_ProcessControlRequest+0x438>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	f003 0303 	and.w	r3, r3, #3
			if (Value == FEATURE_SEL_EndpointHalt &&
 8003880:	2b02      	cmp	r3, #2
 8003882:	d10d      	bne.n	80038a0 <USB_Device_ProcessControlRequest+0x3fc>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 8003884:	4b15      	ldr	r3, [pc, #84]	; (80038dc <USB_Device_ProcessControlRequest+0x438>)
 8003886:	889b      	ldrh	r3, [r3, #4]
 8003888:	b29b      	uxth	r3, r3
 800388a:	b2db      	uxtb	r3, r3
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 800388c:	2b00      	cmp	r3, #0
 800388e:	d107      	bne.n	80038a0 <USB_Device_ProcessControlRequest+0x3fc>
				device.Endpoints[0].IsHalted = 1;
 8003890:	4a10      	ldr	r2, [pc, #64]	; (80038d4 <USB_Device_ProcessControlRequest+0x430>)
 8003892:	7a13      	ldrb	r3, [r2, #8]
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	7213      	strb	r3, [r2, #8]
				USBD_HandleEP0_Stall();
 800389a:	f7ff fded 	bl	8003478 <USBD_HandleEP0_Stall>
				break;
 800389e:	e00d      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
			}
		}
		/* default behaviour is stall */
		USBD_HandleEP0_Stall();
 80038a0:	f7ff fdea 	bl	8003478 <USBD_HandleEP0_Stall>
		break;
 80038a4:	e00a      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>

	case REQ_SynchFrame:
		/* Not yet supported */
		USBD_HandleEP0_Stall();
 80038a6:	f7ff fde7 	bl	8003478 <USBD_HandleEP0_Stall>
		break;
 80038aa:	e007      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>

	default:
		USBD_HandleEP0_Stall();
 80038ac:	f7ff fde4 	bl	8003478 <USBD_HandleEP0_Stall>
 80038b0:	e004      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		break;
 80038b2:	bf00      	nop
 80038b4:	e002      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
		break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <USB_Device_ProcessControlRequest+0x418>
			break;
 80038ba:	bf00      	nop
	}
	device.IsSetupRecieved = 0;
 80038bc:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <USB_Device_ProcessControlRequest+0x430>)
 80038be:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80038c2:	f36f 0341 	bfc	r3, #1, #1
 80038c6:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 80038ca:	e000      	b.n	80038ce <USB_Device_ProcessControlRequest+0x42a>
		return;
 80038cc:	bf00      	nop
}
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000740 	.word	0x20000740
 80038d8:	20000a8d 	.word	0x20000a8d
 80038dc:	20000a90 	.word	0x20000a90

080038e0 <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
	if (device.EP0_State == IN_DATA) {
 80038e4:	4b10      	ldr	r3, [pc, #64]	; (8003928 <USBD_HandleEP0_IN+0x48>)
 80038e6:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d109      	bne.n	8003902 <USBD_HandleEP0_IN+0x22>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <USBD_HandleEP0_IN+0x48>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	2100      	movs	r1, #0
 80038f6:	2000      	movs	r0, #0
 80038f8:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <USBD_HandleEP0_IN+0x48>)
 80038fc:	2205      	movs	r2, #5
 80038fe:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == IN_STATUS) {
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <USBD_HandleEP0_IN+0x48>)
 8003904:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8003908:	2b03      	cmp	r3, #3
 800390a:	d10b      	bne.n	8003924 <USBD_HandleEP0_IN+0x44>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <USBD_HandleEP0_IN+0x48>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	4a05      	ldr	r2, [pc, #20]	; (8003928 <USBD_HandleEP0_IN+0x48>)
 8003914:	7912      	ldrb	r2, [r2, #4]
 8003916:	2118      	movs	r1, #24
 8003918:	4610      	mov	r0, r2
 800391a:	4798      	blx	r3
		device.EP0_State = IDLE;
 800391c:	4b02      	ldr	r3, [pc, #8]	; (8003928 <USBD_HandleEP0_IN+0x48>)
 800391e:	2201      	movs	r2, #1
 8003920:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000740 	.word	0x20000740

0800392c <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
	if (device.EP0_State == OUT_DATA) {
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <USBD_HandleEP0_OUT+0x50>)
 8003932:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8003936:	2b04      	cmp	r3, #4
 8003938:	d10c      	bne.n	8003954 <USBD_HandleEP0_OUT+0x28>
		/* Now we have the data for handling the request */
		USB_Device_ProcessControlRequest();
 800393a:	f7ff fdb3 	bl	80034a4 <USB_Device_ProcessControlRequest>
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <USBD_HandleEP0_OUT+0x50>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	2200      	movs	r2, #0
 8003946:	2100      	movs	r1, #0
 8003948:	2000      	movs	r0, #0
 800394a:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <USBD_HandleEP0_OUT+0x50>)
 800394e:	2203      	movs	r2, #3
 8003950:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == OUT_STATUS) {
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <USBD_HandleEP0_OUT+0x50>)
 8003956:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800395a:	2b05      	cmp	r3, #5
 800395c:	d10b      	bne.n	8003976 <USBD_HandleEP0_OUT+0x4a>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 800395e:	4b07      	ldr	r3, [pc, #28]	; (800397c <USBD_HandleEP0_OUT+0x50>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	4a05      	ldr	r2, [pc, #20]	; (800397c <USBD_HandleEP0_OUT+0x50>)
 8003966:	7912      	ldrb	r2, [r2, #4]
 8003968:	2118      	movs	r1, #24
 800396a:	4610      	mov	r0, r2
 800396c:	4798      	blx	r3
		device.EP0_State = IDLE;
 800396e:	4b03      	ldr	r3, [pc, #12]	; (800397c <USBD_HandleEP0_OUT+0x50>)
 8003970:	2201      	movs	r2, #1
 8003972:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000740 	.word	0x20000740

08003980 <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 8003986:	4b21      	ldr	r3, [pc, #132]	; (8003a0c <USBD_HandleEP0_SETUP+0x8c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	2208      	movs	r2, #8
 800398e:	4920      	ldr	r1, [pc, #128]	; (8003a10 <USBD_HandleEP0_SETUP+0x90>)
 8003990:	2000      	movs	r0, #0
 8003992:	4798      	blx	r3
 8003994:	6078      	str	r0, [r7, #4]
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 8003996:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <USBD_HandleEP0_SETUP+0x8c>)
 8003998:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800399c:	f043 0302 	orr.w	r3, r3, #2
 80039a0:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	if (ret_val != 8 )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d12c      	bne.n	8003a04 <USBD_HandleEP0_SETUP+0x84>
		return;

	/* preprocess */
	/* if length is zero we have only a in_status phase */
	if (USB_ControlRequest.wLength==0) {
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <USBD_HandleEP0_SETUP+0x90>)
 80039ac:	88db      	ldrh	r3, [r3, #6]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10d      	bne.n	80039d0 <USBD_HandleEP0_SETUP+0x50>
		device.EP0_State = IN_STATUS;
 80039b4:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <USBD_HandleEP0_SETUP+0x8c>)
 80039b6:	2203      	movs	r2, #3
 80039b8:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 80039bc:	f7ff fd72 	bl	80034a4 <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 80039c0:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <USBD_HandleEP0_SETUP+0x8c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	2200      	movs	r2, #0
 80039c8:	2100      	movs	r1, #0
 80039ca:	2000      	movs	r0, #0
 80039cc:	4798      	blx	r3
 80039ce:	e01a      	b.n	8003a06 <USBD_HandleEP0_SETUP+0x86>
	} else {
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 80039d0:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <USBD_HandleEP0_SETUP+0x90>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b25b      	sxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da06      	bge.n	80039e8 <USBD_HandleEP0_SETUP+0x68>
			device.EP0_State = IN_DATA;
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <USBD_HandleEP0_SETUP+0x8c>)
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			USB_Device_ProcessControlRequest();
 80039e2:	f7ff fd5f 	bl	80034a4 <USB_Device_ProcessControlRequest>
 80039e6:	e00e      	b.n	8003a06 <USBD_HandleEP0_SETUP+0x86>
		}
		else {
			device.EP0_State = OUT_DATA;
 80039e8:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <USBD_HandleEP0_SETUP+0x8c>)
 80039ea:	2204      	movs	r2, #4
 80039ec:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <USBD_HandleEP0_SETUP+0x8c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	4a06      	ldr	r2, [pc, #24]	; (8003a10 <USBD_HandleEP0_SETUP+0x90>)
 80039f8:	88d2      	ldrh	r2, [r2, #6]
 80039fa:	b292      	uxth	r2, r2
 80039fc:	4611      	mov	r1, r2
 80039fe:	2000      	movs	r0, #0
 8003a00:	4798      	blx	r3
 8003a02:	e000      	b.n	8003a06 <USBD_HandleEP0_SETUP+0x86>
		return;
 8003a04:	bf00      	nop
		}
	}
}
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000740 	.word	0x20000740
 8003a10:	20000a90 	.word	0x20000a90

08003a14 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
	int i;
	switch (event) {
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	2b09      	cmp	r3, #9
 8003a22:	f200 80fd 	bhi.w	8003c20 <USBD_SignalDeviceEventHandler+0x20c>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <USBD_SignalDeviceEventHandler+0x18>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003b83 	.word	0x08003b83
 8003a30:	08003b71 	.word	0x08003b71
 8003a34:	08003b5f 	.word	0x08003b5f
 8003a38:	08003b65 	.word	0x08003b65
 8003a3c:	08003a55 	.word	0x08003a55
 8003a40:	08003c21 	.word	0x08003c21
 8003a44:	08003c09 	.word	0x08003c09
 8003a48:	08003bf9 	.word	0x08003bf9
 8003a4c:	08003c21 	.word	0x08003c21
 8003a50:	08003b59 	.word	0x08003b59
	case XMC_USBD_EVENT_RESET:
		USB_DeviceState = DEVICE_STATE_Default;
 8003a54:	4b74      	ldr	r3, [pc, #464]	; (8003c28 <USBD_SignalDeviceEventHandler+0x214>)
 8003a56:	2202      	movs	r2, #2
 8003a58:	701a      	strb	r2, [r3, #0]
		device.EP0_State = IDLE;
 8003a5a:	4b74      	ldr	r3, [pc, #464]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 8003a62:	4a72      	ldr	r2, [pc, #456]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003a64:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003a68:	f36f 0382 	bfc	r3, #2, #1
 8003a6c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		/* Reset endpoints and configuration */
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e050      	b.n	8003b18 <USBD_SignalDeviceEventHandler+0x104>
			device.Endpoints[i].InInUse = 0;
 8003a76:	4a6d      	ldr	r2, [pc, #436]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	212c      	movs	r1, #44	; 0x2c
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	441a      	add	r2, r3
 8003a82:	8913      	ldrh	r3, [r2, #8]
 8003a84:	f36f 1304 	bfc	r3, #4, #1
 8003a88:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].OutInUse = 0;
 8003a8a:	4a68      	ldr	r2, [pc, #416]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	212c      	movs	r1, #44	; 0x2c
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	441a      	add	r2, r3
 8003a96:	8913      	ldrh	r3, [r2, #8]
 8003a98:	f36f 03c3 	bfc	r3, #3, #1
 8003a9c:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].IsHalted = 0;
 8003a9e:	4a63      	ldr	r2, [pc, #396]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	212c      	movs	r1, #44	; 0x2c
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	441a      	add	r2, r3
 8003aaa:	7a13      	ldrb	r3, [r2, #8]
 8003aac:	f36f 0382 	bfc	r3, #2, #1
 8003ab0:	7213      	strb	r3, [r2, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d02c      	beq.n	8003b12 <USBD_SignalDeviceEventHandler+0xfe>
 8003ab8:	4a5c      	ldr	r2, [pc, #368]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	212c      	movs	r1, #44	; 0x2c
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	7a1b      	ldrb	r3, [r3, #8]
 8003ac6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <USBD_SignalDeviceEventHandler+0xfe>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 8003ad0:	4b56      	ldr	r3, [pc, #344]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4955      	ldr	r1, [pc, #340]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	202c      	movs	r0, #44	; 0x2c
 8003adc:	fb00 f202 	mul.w	r2, r0, r2
 8003ae0:	440a      	add	r2, r1
 8003ae2:	3204      	adds	r2, #4
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 8003aea:	4a50      	ldr	r2, [pc, #320]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	441a      	add	r2, r3
 8003af6:	7a13      	ldrb	r3, [r2, #8]
 8003af8:	f36f 0300 	bfc	r3, #0, #1
 8003afc:	7213      	strb	r3, [r2, #8]
				device.Endpoints[i].IsEnabled = 0;
 8003afe:	4a4b      	ldr	r2, [pc, #300]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	212c      	movs	r1, #44	; 0x2c
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	441a      	add	r2, r3
 8003b0a:	7a13      	ldrb	r3, [r2, #8]
 8003b0c:	f36f 0341 	bfc	r3, #1, #1
 8003b10:	7213      	strb	r3, [r2, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3301      	adds	r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b06      	cmp	r3, #6
 8003b1c:	ddab      	ble.n	8003a76 <USBD_SignalDeviceEventHandler+0x62>
			}
		}
		device.Configuration = 0;
 8003b1e:	4b43      	ldr	r3, [pc, #268]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
		for (i=0;i<NUM_INTERFACES;i++) {
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	e009      	b.n	8003b40 <USBD_SignalDeviceEventHandler+0x12c>
			device.InterfaceSettings[i] = 0;
 8003b2c:	4a3f      	ldr	r2, [pc, #252]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
		for (i=0;i<NUM_INTERFACES;i++) {
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	ddf2      	ble.n	8003b2c <USBD_SignalDeviceEventHandler+0x118>
		}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8003b46:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	4a37      	ldr	r2, [pc, #220]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003b4e:	7912      	ldrb	r2, [r2, #4]
 8003b50:	2118      	movs	r1, #24
 8003b52:	4610      	mov	r0, r2
 8003b54:	4798      	blx	r3
		break;
 8003b56:	e064      	b.n	8003c22 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SOF:
		EVENT_USB_Device_StartOfFrame();
 8003b58:	f002 f8fc 	bl	8005d54 <USB_Event_Stub>
		break;
 8003b5c:	e061      	b.n	8003c22 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_CONNECT:
		EVENT_USB_Device_Connect();
 8003b5e:	f7fc fd5c 	bl	800061a <EVENT_USB_Device_Connect>
		break;
 8003b62:	e05e      	b.n	8003c22 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_DISCONNECT:
		USB_DeviceState = DEVICE_STATE_Powered;
 8003b64:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <USBD_SignalDeviceEventHandler+0x214>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Disconnect();
 8003b6a:	f002 f8f3 	bl	8005d54 <USB_Event_Stub>
		break;
 8003b6e:	e058      	b.n	8003c22 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_POWER_OFF:
		 USB_DeviceState = DEVICE_STATE_Unattached;
 8003b70:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <USBD_SignalDeviceEventHandler+0x214>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
		 device.Driver->EndpointUnconfigure(0);
 8003b76:	4b2d      	ldr	r3, [pc, #180]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	4798      	blx	r3
		 break;
 8003b80:	e04f      	b.n	8003c22 <USBD_SignalDeviceEventHandler+0x20e>
    case XMC_USBD_EVENT_POWER_ON:
		 USB_DeviceState = DEVICE_STATE_Powered;
 8003b82:	4b29      	ldr	r3, [pc, #164]	; (8003c28 <USBD_SignalDeviceEventHandler+0x214>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 8003b88:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4827      	ldr	r0, [pc, #156]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003b90:	f002 fbf4 	bl	800637c <memset>
		 device.Driver = &Driver_USBD0;
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003b96:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <USBD_SignalDeviceEventHandler+0x21c>)
 8003b98:	601a      	str	r2, [r3, #0]
		 device.EP0_State = IDLE;
 8003b9a:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003ba4:	4a23      	ldr	r2, [pc, #140]	; (8003c34 <USBD_SignalDeviceEventHandler+0x220>)
 8003ba6:	621a      	str	r2, [r3, #32]
		 device.Endpoints[0].InBufferLength = 256;
 8003ba8:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8003bb0:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003bb2:	4a21      	ldr	r2, [pc, #132]	; (8003c38 <USBD_SignalDeviceEventHandler+0x224>)
 8003bb4:	615a      	str	r2, [r3, #20]
		 device.Endpoints[0].OutBufferLength = 256;
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bbc:	619a      	str	r2, [r3, #24]
		 device.Endpoints[0].Direction = 0;
 8003bbe:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003bc0:	7913      	ldrb	r3, [r2, #4]
 8003bc2:	f36f 13c7 	bfc	r3, #7, #1
 8003bc6:	7113      	strb	r3, [r2, #4]
		 device.Endpoints[0].IsConfigured = 1;
 8003bc8:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003bca:	7a13      	ldrb	r3, [r2, #8]
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].IsEnabled = 1;
 8003bd2:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003bd4:	7a13      	ldrb	r3, [r2, #8]
 8003bd6:	f043 0302 	orr.w	r3, r3, #2
 8003bda:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].MaxPacketSize = 64;
 8003bdc:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003bde:	8913      	ldrh	r3, [r2, #8]
 8003be0:	2140      	movs	r1, #64	; 0x40
 8003be2:	f361 138c 	bfi	r3, r1, #6, #7
 8003be6:	8113      	strh	r3, [r2, #8]

		  /* then configure endpoint 0 */
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8003be8:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	2240      	movs	r2, #64	; 0x40
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	4798      	blx	r3
					   (uint8_t)XMC_USBD_MAX_PACKET_SIZE);

		break;
 8003bf6:	e014      	b.n	8003c22 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_REMOTE_WAKEUP:
		break;
	case XMC_USBD_EVENT_RESUME:
		USB_DeviceState = device.PreSuspendDeviceState;
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003bfa:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <USBD_SignalDeviceEventHandler+0x214>)
 8003c00:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_WakeUp();
 8003c02:	f002 f8a7 	bl	8005d54 <USB_Event_Stub>
		break;
 8003c06:	e00c      	b.n	8003c22 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SUSPEND:
		device.PreSuspendDeviceState = USB_DeviceState;
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <USBD_SignalDeviceEventHandler+0x214>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <USBD_SignalDeviceEventHandler+0x218>)
 8003c10:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <USBD_SignalDeviceEventHandler+0x214>)
 8003c16:	2205      	movs	r2, #5
 8003c18:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Suspend();
 8003c1a:	f002 f89b 	bl	8005d54 <USB_Event_Stub>
		break;
 8003c1e:	e000      	b.n	8003c22 <USBD_SignalDeviceEventHandler+0x20e>
	default:
		return;
 8003c20:	bf00      	nop
	}
}
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000a8d 	.word	0x20000a8d
 8003c2c:	20000740 	.word	0x20000740
 8003c30:	08006550 	.word	0x08006550
 8003c34:	20000540 	.word	0x20000540
 8003c38:	20000640 	.word	0x20000640

08003c3c <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	460a      	mov	r2, r1
 8003c46:	71fb      	strb	r3, [r7, #7]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71bb      	strb	r3, [r7, #6]
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	222c      	movs	r2, #44	; 0x2c
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	4a5e      	ldr	r2, [pc, #376]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	617b      	str	r3, [r7, #20]
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 8003c60:	4b5c      	ldr	r3, [pc, #368]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003c62:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003c66:	74fb      	strb	r3, [r7, #19]
	temp_dir = device.CurrentDirection;
 8003c68:	4b5a      	ldr	r3, [pc, #360]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003c6a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8003c6e:	74bb      	strb	r3, [r7, #18]
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	4b56      	ldr	r3, [pc, #344]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003c7a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4b53      	ldr	r3, [pc, #332]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003c88:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	/* choose what to do based on the event */
	switch (ep_event) {
 8003c8c:	79bb      	ldrb	r3, [r7, #6]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d03f      	beq.n	8003d12 <USBD_SignalEndpointEvent_Handler+0xd6>
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	f300 8093 	bgt.w	8003dbe <USBD_SignalEndpointEvent_Handler+0x182>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <USBD_SignalEndpointEvent_Handler+0x66>
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d00f      	beq.n	8003cc0 <USBD_SignalEndpointEvent_Handler+0x84>
 8003ca0:	e08d      	b.n	8003dbe <USBD_SignalEndpointEvent_Handler+0x182>
	case XMC_USBD_EP_EVENT_SETUP:
		ep->OutInUse = 0;
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	8893      	ldrh	r3, [r2, #4]
 8003ca6:	f36f 03c3 	bfc	r3, #3, #1
 8003caa:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8003cac:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003cae:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <USBD_SignalEndpointEvent_Handler+0x80>
		case 0:
			USBD_HandleEP0_SETUP();
 8003cb6:	f7ff fe63 	bl	8003980 <USBD_HandleEP0_SETUP>
			break;
 8003cba:	e000      	b.n	8003cbe <USBD_SignalEndpointEvent_Handler+0x82>
		default:
			break;
 8003cbc:	bf00      	nop
		}
		break;
 8003cbe:	e07e      	b.n	8003dbe <USBD_SignalEndpointEvent_Handler+0x182>
	case XMC_USBD_EP_EVENT_OUT:
		ep->IsOutRecieved = 1;
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	8893      	ldrh	r3, [r2, #4]
 8003cc4:	f043 0320 	orr.w	r3, r3, #32
 8003cc8:	8093      	strh	r3, [r2, #4]
		if (ep->OutBytesAvailable == 0) {
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d110      	bne.n	8003cf4 <USBD_SignalEndpointEvent_Handler+0xb8>
			ep->OutOffset = 0; /* clear offset, new data is there */
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	60da      	str	r2, [r3, #12]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	7810      	ldrb	r0, [r2, #0]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	6911      	ldr	r1, [r2, #16]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	6952      	ldr	r2, [r2, #20]
 8003cea:	4798      	blx	r3
 8003cec:	4603      	mov	r3, r0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	609a      	str	r2, [r3, #8]
		}
		ep->OutInUse = 0;
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	8893      	ldrh	r3, [r2, #4]
 8003cf8:	f36f 03c3 	bfc	r3, #3, #1
 8003cfc:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8003cfe:	4b35      	ldr	r3, [pc, #212]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003d00:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <USBD_SignalEndpointEvent_Handler+0xd2>
		case 0:
			USBD_HandleEP0_OUT();
 8003d08:	f7ff fe10 	bl	800392c <USBD_HandleEP0_OUT>
			break;
 8003d0c:	e000      	b.n	8003d10 <USBD_SignalEndpointEvent_Handler+0xd4>
		default:
			break;
 8003d0e:	bf00      	nop
		}
		break;
 8003d10:	e055      	b.n	8003dbe <USBD_SignalEndpointEvent_Handler+0x182>
	case XMC_USBD_EP_EVENT_IN:
		/* loop write transfers */
		if (ep->InDataLeft> 0) {
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d017      	beq.n	8003d4a <USBD_SignalEndpointEvent_Handler+0x10e>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	7810      	ldrb	r0, [r2, #0]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d2c:	4798      	blx	r3
 8003d2e:	60f8      	str	r0, [r7, #12]
			ep->InDataLeft -= data_count;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad2      	subs	r2, r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
			ep->InDataBuffer+= data_count;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	441a      	add	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28
			return;
 8003d48:	e041      	b.n	8003dce <USBD_SignalEndpointEvent_Handler+0x192>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d120      	bne.n	8003d9a <USBD_SignalEndpointEvent_Handler+0x15e>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01c      	beq.n	8003d9a <USBD_SignalEndpointEvent_Handler+0x15e>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <USBD_SignalEndpointEvent_Handler+0x19c>)
 8003d66:	88d2      	ldrh	r2, [r2, #6]
 8003d68:	b292      	uxth	r2, r2
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d015      	beq.n	8003d9a <USBD_SignalEndpointEvent_Handler+0x15e>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	8892      	ldrh	r2, [r2, #4]
 8003d76:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d80:	fb02 f201 	mul.w	r2, r2, r1
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <USBD_SignalEndpointEvent_Handler+0x15e>
			/* if the amount of data for endpoint 0 is exact the requested amount, then no zlp has to be send */
			device.Driver->EndpointWrite(ep->Address,0,0);
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	7810      	ldrb	r0, [r2, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2100      	movs	r1, #0
 8003d98:	4798      	blx	r3
		}
		ep->InBytesAvailable = 0;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	619a      	str	r2, [r3, #24]
		ep->InInUse = 0;
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	8893      	ldrh	r3, [r2, #4]
 8003da4:	f36f 1304 	bfc	r3, #4, #1
 8003da8:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003dac:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d102      	bne.n	8003dba <USBD_SignalEndpointEvent_Handler+0x17e>
		case 0:
			USBD_HandleEP0_IN();
 8003db4:	f7ff fd94 	bl	80038e0 <USBD_HandleEP0_IN>
			break;
 8003db8:	e000      	b.n	8003dbc <USBD_SignalEndpointEvent_Handler+0x180>
		default:
			break;
 8003dba:	bf00      	nop
		}
		break;
 8003dbc:	bf00      	nop
	}
	device.CurrentEndpoint = temp_num;
 8003dbe:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	f882 313c 	strb.w	r3, [r2, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 8003dc6:	4a03      	ldr	r2, [pc, #12]	; (8003dd4 <USBD_SignalEndpointEvent_Handler+0x198>)
 8003dc8:	7cbb      	ldrb	r3, [r7, #18]
 8003dca:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
}
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000740 	.word	0x20000740
 8003dd8:	20000a90 	.word	0x20000a90

08003ddc <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
	int32_t status = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
	memset(&device,0x0,sizeof(USB_Device_t));
 8003de8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dec:	2100      	movs	r1, #0
 8003dee:	4829      	ldr	r0, [pc, #164]	; (8003e94 <USBD_Initialize+0xb8>)
 8003df0:	f002 fac4 	bl	800637c <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 8003df4:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <USBD_Initialize+0xbc>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 8003dfa:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <USBD_Initialize+0xb8>)
 8003dfc:	4a27      	ldr	r2, [pc, #156]	; (8003e9c <USBD_Initialize+0xc0>)
 8003dfe:	601a      	str	r2, [r3, #0]
	device.EP0_State = IDLE;
 8003e00:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8003e08:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e0a:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <USBD_Initialize+0xc4>)
 8003e0c:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = 256;
 8003e0e:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e18:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <USBD_Initialize+0xc8>)
 8003e1a:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = 256;
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e22:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = 0;
 8003e24:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e26:	7913      	ldrb	r3, [r2, #4]
 8003e28:	f36f 13c7 	bfc	r3, #7, #1
 8003e2c:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = 1;
 8003e2e:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e30:	7a13      	ldrb	r3, [r2, #8]
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = 1;
 8003e38:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e3a:	7a13      	ldrb	r3, [r2, #8]
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 8003e42:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e44:	8913      	ldrh	r3, [r2, #8]
 8003e46:	2140      	movs	r1, #64	; 0x40
 8003e48:	f361 138c 	bfi	r3, r1, #6, #7
 8003e4c:	8113      	strh	r3, [r2, #8]

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	4798      	blx	r3
 8003e58:	4603      	mov	r3, r0
 8003e5a:	60fb      	str	r3, [r7, #12]
	if (status != XMC_USBD_STATUS_OK)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <USBD_Initialize+0x8c>
		return -1;
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e66:	e011      	b.n	8003e8c <USBD_Initialize+0xb0>

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	2240      	movs	r2, #64	; 0x40
 8003e70:	2100      	movs	r1, #0
 8003e72:	2000      	movs	r0, #0
 8003e74:	4798      	blx	r3
			(uint8_t)XMC_USBD_MAX_PACKET_SIZE);
	if (status != XMC_USBD_STATUS_OK) {
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <USBD_Initialize+0xae>
		device.Driver->Uninitialize();
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <USBD_Initialize+0xb8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	4798      	blx	r3
		return -1;
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e88:	e000      	b.n	8003e8c <USBD_Initialize+0xb0>
	}

	return 0;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000740 	.word	0x20000740
 8003e98:	20000a8d 	.word	0x20000a8d
 8003e9c:	08006550 	.word	0x08006550
 8003ea0:	20000540 	.word	0x20000540
 8003ea4:	20000640 	.word	0x20000640

08003ea8 <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
	if (device.Driver->IsEnumDone())
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <USB_IsEnumDone+0x1c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	4798      	blx	r3
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <USB_IsEnumDone+0x16>
		return 1;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <USB_IsEnumDone+0x18>
	else
		return 0;
 8003ebe:	2300      	movs	r3, #0
 }
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20000740 	.word	0x20000740

08003ec8 <USBD_SetEndpointBuffer>:
 *
 * \param[in] addr Endpoint address
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	6039      	str	r1, [r7, #0]
 8003ed2:	71fb      	strb	r3, [r7, #7]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	80bb      	strh	r3, [r7, #4]
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	73fb      	strb	r3, [r7, #15]
	if (addr & ENDPOINT_DIR_MASK) {
 8003ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	da12      	bge.n	8003f0e <USBD_SetEndpointBuffer+0x46>
		device.Endpoints[number].InBuffer = buf;
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <USBD_SetEndpointBuffer+0x78>)
 8003eec:	212c      	movs	r1, #44	; 0x2c
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3320      	adds	r3, #32
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].InBufferLength = len;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	88ba      	ldrh	r2, [r7, #4]
 8003efe:	4910      	ldr	r1, [pc, #64]	; (8003f40 <USBD_SetEndpointBuffer+0x78>)
 8003f00:	202c      	movs	r0, #44	; 0x2c
 8003f02:	fb00 f303 	mul.w	r3, r0, r3
 8003f06:	440b      	add	r3, r1
 8003f08:	3324      	adds	r3, #36	; 0x24
 8003f0a:	601a      	str	r2, [r3, #0]
	} else {
		device.Endpoints[number].OutBuffer = buf;
		device.Endpoints[number].OutBufferLength = len;
	}
}
 8003f0c:	e011      	b.n	8003f32 <USBD_SetEndpointBuffer+0x6a>
		device.Endpoints[number].OutBuffer = buf;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <USBD_SetEndpointBuffer+0x78>)
 8003f12:	212c      	movs	r1, #44	; 0x2c
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].OutBufferLength = len;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	88ba      	ldrh	r2, [r7, #4]
 8003f24:	4906      	ldr	r1, [pc, #24]	; (8003f40 <USBD_SetEndpointBuffer+0x78>)
 8003f26:	202c      	movs	r0, #44	; 0x2c
 8003f28:	fb00 f303 	mul.w	r3, r0, r3
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3318      	adds	r3, #24
 8003f30:	601a      	str	r2, [r3, #0]
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000740 	.word	0x20000740

08003f44 <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	73fb      	strb	r3, [r7, #15]
 8003f54:	e01c      	b.n	8003f90 <XMC_USBD_lDeviceActive+0x4c>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <XMC_USBD_lDeviceActive+0x64>)
 8003f5a:	2134      	movs	r1, #52	; 0x34
 8003f5c:	fb01 f303 	mul.w	r3, r1, r3
 8003f60:	4413      	add	r3, r2
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10b      	bne.n	8003f86 <XMC_USBD_lDeviceActive+0x42>
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	4a0d      	ldr	r2, [pc, #52]	; (8003fa8 <XMC_USBD_lDeviceActive+0x64>)
 8003f72:	2134      	movs	r1, #52	; 0x34
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <XMC_USBD_lDeviceActive+0x46>
    {
      result = 1U;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7b1b      	ldrb	r3, [r3, #12]
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d3dd      	bcc.n	8003f56 <XMC_USBD_lDeviceActive+0x12>
    }
  }
  return result;
 8003f9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	20000884 	.word	0x20000884

08003fac <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 8003fac:	b480      	push	{r7}
 8003fae:	b08b      	sub	sp, #44	; 0x2c
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2234      	movs	r2, #52	; 0x34
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	4a34      	ldr	r2, [pc, #208]	; (8004090 <XMC_USBD_lReadFifo+0xe4>)
 8003fc0:	4413      	add	r3, r2
 8003fc2:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8003fc4:	4b32      	ldr	r3, [pc, #200]	; (8004090 <XMC_USBD_lReadFifo+0xe4>)
 8003fc6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8003fca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8003fcc:	4a30      	ldr	r2, [pc, #192]	; (8004090 <XMC_USBD_lReadFifo+0xe4>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3370      	adds	r3, #112	; 0x70
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8003fe8:	7b7b      	ldrb	r3, [r7, #13]
 8003fea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d047      	beq.n	8004084 <XMC_USBD_lReadFifo+0xd8>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d043      	beq.n	8004084 <XMC_USBD_lReadFifo+0xd8>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	e00a      	b.n	8004018 <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	601a      	str	r2, [r3, #0]
    for (i = 0U;i < word_count; i++)
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	3301      	adds	r3, #1
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	429a      	cmp	r2, r3
 800401e:	d3f0      	bcc.n	8004002 <XMC_USBD_lReadFifo+0x56>
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	429a      	cmp	r2, r3
 8004026:	d021      	beq.n	800406c <XMC_USBD_lReadFifo+0xc0>
    {
      temp_data = *fifo;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	613b      	str	r3, [r7, #16]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 800402e:	2300      	movs	r3, #0
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
 8004032:	e015      	b.n	8004060 <XMC_USBD_lReadFifo+0xb4>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	22ff      	movs	r2, #255	; 0xff
 800403a:	409a      	lsls	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	401a      	ands	r2, r3
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	fa22 f003 	lsr.w	r0, r2, r3
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	0099      	lsls	r1, r3, #2
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	440b      	add	r3, r1
 8004054:	4413      	add	r3, r2
 8004056:	b2c2      	uxtb	r2, r0
 8004058:	701a      	strb	r2, [r3, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	3301      	adds	r3, #1
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	4413      	add	r3, r2
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d8e3      	bhi.n	8004034 <XMC_USBD_lReadFifo+0x88>
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	441a      	add	r2, r3
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	441a      	add	r2, r3
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004084:	bf00      	nop
 8004086:	372c      	adds	r7, #44	; 0x2c
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	20000884 	.word	0x20000884

08004094 <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 8004094:	b480      	push	{r7}
 8004096:	b089      	sub	sp, #36	; 0x24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	4a23      	ldr	r2, [pc, #140]	; (8004134 <XMC_USBD_lWriteFifo+0xa0>)
 80040a8:	3378      	adds	r3, #120	; 0x78
 80040aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ae:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <XMC_USBD_lWriteFifo+0xa0>)
 80040bc:	336a      	adds	r3, #106	; 0x6a
 80040be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d102      	bne.n	80040de <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e023      	b.n	8004126 <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3303      	adds	r3, #3
 80040e2:	089b      	lsrs	r3, r3, #2
 80040e4:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 80040e6:	893b      	ldrh	r3, [r7, #8]
 80040e8:	461a      	mov	r2, r3
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d904      	bls.n	80040fa <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 80040f0:	893b      	ldrh	r3, [r7, #8]
 80040f2:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	e00c      	b.n	800411a <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	601a      	str	r2, [r3, #0]
      i++;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3301      	adds	r3, #1
 800410e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	1d1a      	adds	r2, r3, #4
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	625a      	str	r2, [r3, #36]	; 0x24
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	429a      	cmp	r2, r3
 8004120:	d3ee      	bcc.n	8004100 <XMC_USBD_lWriteFifo+0x6c>
    }
    result=byte_count;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	617b      	str	r3, [r7, #20]
  }
  return result;
 8004126:	697b      	ldr	r3, [r7, #20]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3724      	adds	r7, #36	; 0x24
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	20000884 	.word	0x20000884

08004138 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f043 0320 	orr.w	r3, r3, #32
 800414c:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f362 138a 	bfi	r3, r2, #6, #5
 800415c:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 800415e:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <XMC_USBD_lFlushTXFifo+0x7c>)
 8004160:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e002      	b.n	8004174 <XMC_USBD_lFlushTXFifo+0x3c>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3301      	adds	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800417a:	d3f8      	bcc.n	800416e <XMC_USBD_lFlushTXFifo+0x36>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 800417c:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <XMC_USBD_lFlushTXFifo+0x7c>)
 800417e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f4      	bne.n	800417c <XMC_USBD_lFlushTXFifo+0x44>
    count = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 8004196:	bf00      	nop
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	60fa      	str	r2, [r7, #12]
 800419e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041a2:	d3f9      	bcc.n	8004198 <XMC_USBD_lFlushTXFifo+0x60>
  {
    /* wait 3 phy clocks */
  }
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000884 	.word	0x20000884

080041b8 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f043 0310 	orr.w	r3, r3, #16
 80041c8:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <XMC_USBD_lFlushRXFifo+0x68>)
 80041cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 80041d4:	2300      	movs	r3, #0
 80041d6:	607b      	str	r3, [r7, #4]
 80041d8:	e002      	b.n	80041e0 <XMC_USBD_lFlushRXFifo+0x28>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3301      	adds	r3, #1
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041e6:	d3f8      	bcc.n	80041da <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 80041e8:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <XMC_USBD_lFlushRXFifo+0x68>)
 80041ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1ea      	bne.n	80041d4 <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 8004202:	bf00      	nop
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800420e:	d3f9      	bcc.n	8004204 <XMC_USBD_lFlushRXFifo+0x4c>
  {
    /* wait 3 phy clocks */
  }
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000884 	.word	0x20000884

08004224 <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 800422a:	2301      	movs	r3, #1
 800422c:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8004236:	e005      	b.n	8004244 <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	80fb      	strh	r3, [r7, #6]
    i++;
 800423e:	797b      	ldrb	r3, [r7, #5]
 8004240:	3301      	adds	r3, #1
 8004242:	717b      	strb	r3, [r7, #5]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8004244:	797b      	ldrb	r3, [r7, #5]
 8004246:	2b06      	cmp	r3, #6
 8004248:	d807      	bhi.n	800425a <XMC_USBD_lAssignTXFifo+0x36>
 800424a:	4b11      	ldr	r3, [pc, #68]	; (8004290 <XMC_USBD_lAssignTXFifo+0x6c>)
 800424c:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	4013      	ands	r3, r2
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1ee      	bne.n	8004238 <XMC_USBD_lAssignTXFifo+0x14>
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 800425a:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <XMC_USBD_lAssignTXFifo+0x6c>)
 800425c:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	4013      	ands	r3, r2
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <XMC_USBD_lAssignTXFifo+0x6c>)
 800426c:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	4313      	orrs	r3, r2
 8004274:	b29a      	uxth	r2, r3
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <XMC_USBD_lAssignTXFifo+0x6c>)
 8004278:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 800427c:	797b      	ldrb	r3, [r7, #5]
 800427e:	713b      	strb	r3, [r7, #4]
  }
  return result;
 8004280:	793b      	ldrb	r3, [r7, #4]
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000884 	.word	0x20000884

08004294 <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <XMC_USBD_lUnassignFifo+0x34>)
 80042a0:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	2101      	movs	r1, #1
 80042a8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	4013      	ands	r3, r2
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <XMC_USBD_lUnassignFifo+0x34>)
 80042b8:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	20000884 	.word	0x20000884

080042cc <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6892      	ldr	r2, [r2, #8]
 80042e6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d909      	bls.n	8004302 <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6892      	ldr	r2, [r2, #8]
 80042f6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004300:	e003      	b.n	800430a <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d118      	bne.n	800434a <XMC_USBD_lStartReadXfer+0x7e>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 8004318:	f107 0310 	add.w	r3, r7, #16
 800431c:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	7893      	ldrb	r3, [r2, #2]
 8004322:	2101      	movs	r1, #1
 8004324:	f361 03c4 	bfi	r3, r1, #3, #2
 8004328:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	78d3      	ldrb	r3, [r2, #3]
 800432e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004332:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800433c:	b2d9      	uxtb	r1, r3
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	7813      	ldrb	r3, [r2, #0]
 8004342:	f361 0306 	bfi	r3, r1, #0, #7
 8004346:	7013      	strb	r3, [r2, #0]
 8004348:	e032      	b.n	80043b0 <XMC_USBD_lStartReadXfer+0xe4>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <XMC_USBD_lStartReadXfer+0x9a>
    {
      data.b.xfersize = 0U;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f36f 0312 	bfc	r3, #0, #19
 8004358:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 800435a:	8a7b      	ldrh	r3, [r7, #18]
 800435c:	2201      	movs	r2, #1
 800435e:	f362 03cc 	bfi	r3, r2, #3, #10
 8004362:	827b      	strh	r3, [r7, #18]
 8004364:	e024      	b.n	80043b0 <XMC_USBD_lStartReadXfer+0xe4>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6852      	ldr	r2, [r2, #4]
 8004374:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	4413      	add	r3, r2
 800437c:	3b01      	subs	r3, #1
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6852      	ldr	r2, [r2, #4]
 8004382:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	fbb3 f3f2 	udiv	r3, r3, r2
 800438c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004390:	b29a      	uxth	r2, r3
 8004392:	8a7b      	ldrh	r3, [r7, #18]
 8004394:	f362 03cc 	bfi	r3, r2, #3, #10
 8004398:	827b      	strh	r3, [r7, #18]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f362 0312 	bfi	r3, r2, #0, #19
 80043ae:	613b      	str	r3, [r7, #16]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80043b0:	4b22      	ldr	r3, [pc, #136]	; (800443c <XMC_USBD_lStartReadXfer+0x170>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	7b5b      	ldrb	r3, [r3, #13]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10d      	bne.n	80043d6 <XMC_USBD_lStartReadXfer+0x10a>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <XMC_USBD_lStartReadXfer+0x174>)
 80043ca:	3370      	adds	r3, #112	; 0x70
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	460a      	mov	r2, r1
 80043d4:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	4a17      	ldr	r2, [pc, #92]	; (8004440 <XMC_USBD_lStartReadXfer+0x174>)
 80043e2:	3370      	adds	r3, #112	; 0x70
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	4a11      	ldr	r2, [pc, #68]	; (8004440 <XMC_USBD_lStartReadXfer+0x174>)
 80043fa:	3370      	adds	r3, #112	; 0x70
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	f043 0304 	orr.w	r3, r3, #4
 800440c:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004414:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800441e:	b2db      	uxtb	r3, r3
 8004420:	4a07      	ldr	r2, [pc, #28]	; (8004440 <XMC_USBD_lStartReadXfer+0x174>)
 8004422:	3370      	adds	r3, #112	; 0x70
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	601a      	str	r2, [r3, #0]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000880 	.word	0x20000880
 8004440:	20000884 	.word	0x20000884

08004444 <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004458:	b2db      	uxtb	r3, r3
 800445a:	4a5e      	ldr	r2, [pc, #376]	; (80045d4 <XMC_USBD_lStartWriteXfer+0x190>)
 800445c:	336a      	adds	r3, #106	; 0x6a
 800445e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6892      	ldr	r2, [r2, #8]
 8004474:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004478:	4293      	cmp	r3, r2
 800447a:	d204      	bcs.n	8004486 <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	629a      	str	r2, [r3, #40]	; 0x28
 8004484:	e008      	b.n	8004498 <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6892      	ldr	r2, [r2, #8]
 800448e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004492:	441a      	add	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f36f 0312 	bfc	r3, #0, #19
 80044a6:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 80044a8:	89fb      	ldrh	r3, [r7, #14]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f362 03cc 	bfi	r3, r2, #3, #10
 80044b0:	81fb      	strh	r3, [r7, #14]
 80044b2:	e06b      	b.n	800458c <XMC_USBD_lStartWriteXfer+0x148>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d110      	bne.n	80044e4 <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 80044c2:	89fb      	ldrh	r3, [r7, #14]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f362 03cc 	bfi	r3, r2, #3, #10
 80044ca:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f362 0312 	bfi	r3, r2, #0, #19
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e02a      	b.n	800453a <XMC_USBD_lStartWriteXfer+0xf6>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f362 0312 	bfi	r3, r2, #0, #19
 80044f8:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	b29a      	uxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	b29b      	uxth	r3, r3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	b29b      	uxth	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 8004514:	b2db      	uxtb	r3, r3
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29b      	uxth	r3, r3
 800451c:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6852      	ldr	r2, [r2, #4]
 8004522:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8004526:	b2d2      	uxtb	r2, r2
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8004528:	fb93 f3f2 	sdiv	r3, r3, r2
 800452c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004530:	b29a      	uxth	r2, r3
 8004532:	89fb      	ldrh	r3, [r7, #14]
 8004534:	f362 03cc 	bfi	r3, r2, #3, #10
 8004538:	81fb      	strh	r3, [r7, #14]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <XMC_USBD_lStartWriteXfer+0x194>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	7b5b      	ldrb	r3, [r3, #13]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10c      	bne.n	800455e <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004550:	b2db      	uxtb	r3, r3
 8004552:	4a20      	ldr	r2, [pc, #128]	; (80045d4 <XMC_USBD_lStartWriteXfer+0x190>)
 8004554:	336a      	adds	r3, #106	; 0x6a
 8004556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800455a:	460a      	mov	r2, r1
 800455c:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800455e:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <XMC_USBD_lStartWriteXfer+0x194>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	7b5b      	ldrb	r3, [r3, #13]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d111      	bne.n	800458c <XMC_USBD_lStartWriteXfer+0x148>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8004568:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <XMC_USBD_lStartWriteXfer+0x190>)
 800456a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800456e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004578:	b2db      	uxtb	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	2301      	movs	r3, #1
 800457e:	fa03 f202 	lsl.w	r2, r3, r2
 8004582:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <XMC_USBD_lStartWriteXfer+0x190>)
 8004584:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004588:	430a      	orrs	r2, r1
 800458a:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004594:	b2db      	uxtb	r3, r3
 8004596:	4a0f      	ldr	r2, [pc, #60]	; (80045d4 <XMC_USBD_lStartWriteXfer+0x190>)
 8004598:	336a      	adds	r3, #106	; 0x6a
 800459a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 80045a2:	7afb      	ldrb	r3, [r7, #11]
 80045a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a8:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 80045aa:	7afb      	ldrb	r3, [r7, #11]
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	4a05      	ldr	r2, [pc, #20]	; (80045d4 <XMC_USBD_lStartWriteXfer+0x190>)
 80045be:	336a      	adds	r3, #106	; 0x6a
 80045c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	601a      	str	r2, [r3, #0]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	20000884 	.word	0x20000884
 80045d8:	20000880 	.word	0x20000880

080045dc <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 80045e4:	4b50      	ldr	r3, [pc, #320]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 80045e6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 80045ee:	7d3b      	ldrb	r3, [r7, #20]
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 80045f6:	4b4c      	ldr	r3, [pc, #304]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 80045f8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e01a      	b.n	800463c <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8004606:	4a48      	ldr	r2, [pc, #288]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	3370      	adds	r3, #112	; 0x70
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	61bb      	str	r3, [r7, #24]
		epctl.b.snak = 1U;
 8004616:	7efb      	ldrb	r3, [r7, #27]
 8004618:	f043 0308 	orr.w	r3, r3, #8
 800461c:	76fb      	strb	r3, [r7, #27]
		epctl.b.stall = 0U;
 800461e:	7ebb      	ldrb	r3, [r7, #26]
 8004620:	f36f 1345 	bfc	r3, #5, #1
 8004624:	76bb      	strb	r3, [r7, #26]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8004626:	4a40      	ldr	r2, [pc, #256]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	3370      	adds	r3, #112	; 0x70
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	601a      	str	r2, [r3, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3301      	adds	r3, #1
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b06      	cmp	r3, #6
 8004640:	d9e1      	bls.n	8004606 <XMC_USBD_lHandleUSBReset+0x2a>
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8004642:	4b39      	ldr	r3, [pc, #228]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004644:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004648:	2240      	movs	r2, #64	; 0x40
 800464a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 8004650:	2310      	movs	r3, #16
 8004652:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 8004654:	2340      	movs	r3, #64	; 0x40
 8004656:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8004658:	4b33      	ldr	r3, [pc, #204]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 800465a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8004662:	2301      	movs	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	e011      	b.n	800468c <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	3304      	adds	r3, #4
 800466c:	019b      	lsls	r3, r3, #6
 800466e:	089a      	lsrs	r2, r3, #2
 8004670:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004672:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3b01      	subs	r3, #1
 800467a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800467e:	3340      	adds	r3, #64	; 0x40
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	605a      	str	r2, [r3, #4]
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3301      	adds	r3, #1
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	2b06      	cmp	r3, #6
 8004690:	d9ea      	bls.n	8004668 <XMC_USBD_lHandleUSBReset+0x8c>
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8004692:	2010      	movs	r0, #16
 8004694:	f7ff fd50 	bl	8004138 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8004698:	2000      	movs	r0, #0
 800469a:	f7ff fd4d 	bl	8004138 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 800469e:	f7ff fd8b 	bl	80041b8 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 80046a6:	7b3b      	ldrb	r3, [r7, #12]
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 80046ae:	7bbb      	ldrb	r3, [r7, #14]
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 80046b6:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 80046b8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 80046c0:	200f      	movs	r0, #15
 80046c2:	f000 fbf9 	bl	8004eb8 <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 80046c6:	200f      	movs	r0, #15
 80046c8:	f000 fc0e 	bl	8004ee8 <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 80046cc:	4b16      	ldr	r3, [pc, #88]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 80046ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 80046d6:	893b      	ldrh	r3, [r7, #8]
 80046d8:	f36f 130a 	bfc	r3, #4, #7
 80046dc:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 80046e0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	7b5b      	ldrb	r3, [r3, #13]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d104      	bne.n	80046fa <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 80046f0:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 80046f2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80046f6:	2200      	movs	r2, #0
 80046f8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 80046fa:	4a0b      	ldr	r2, [pc, #44]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 80046fc:	6853      	ldr	r3, [r2, #4]
 80046fe:	f36f 1304 	bfc	r3, #4, #1
 8004702:	6053      	str	r3, [r2, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8004704:	4a08      	ldr	r2, [pc, #32]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004706:	6853      	ldr	r3, [r2, #4]
 8004708:	f36f 03c3 	bfc	r3, #3, #1
 800470c:	6053      	str	r3, [r2, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004710:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004714:	2004      	movs	r0, #4
 8004716:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8004718:	2004      	movs	r0, #4
 800471a:	f000 fb21 	bl	8004d60 <XMC_USBD_ClearEvent>
}
 800471e:	bf00      	nop
 8004720:	3720      	adds	r7, #32
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000884 	.word	0x20000884

0800472c <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 8004732:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <XMC_USBD_lHandleOTGInt+0x44>)
 8004734:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 800473c:	793b      	ldrb	r3, [r7, #4]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00b      	beq.n	8004760 <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <XMC_USBD_lHandleOTGInt+0x44>)
 800474a:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800474e:	f36f 0382 	bfc	r3, #2, #1
 8004752:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <XMC_USBD_lHandleOTGInt+0x44>)
 8004758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800475c:	2001      	movs	r0, #1
 800475e:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fb62 	bl	8004e2c <XMC_USBD_lClearEventOTG>

}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000884 	.word	0x20000884

08004774 <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 800477a:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <XMC_USBD_lHandleEnumDone+0x74>)
 800477c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8004784:	88bb      	ldrh	r3, [r7, #4]
 8004786:	f36f 030a 	bfc	r3, #0, #11
 800478a:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 800478c:	4b16      	ldr	r3, [pc, #88]	; (80047e8 <XMC_USBD_lHandleEnumDone+0x74>)
 800478e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 8004796:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <XMC_USBD_lHandleEnumDone+0x74>)
 8004798:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 80047a4:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <XMC_USBD_lHandleEnumDone+0x74>)
 80047a6:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 80047b2:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <XMC_USBD_lHandleEnumDone+0x74>)
 80047b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047b8:	2002      	movs	r0, #2
 80047ba:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <XMC_USBD_lHandleEnumDone+0x74>)
 80047be:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 80047c6:	787b      	ldrb	r3, [r7, #1]
 80047c8:	2209      	movs	r2, #9
 80047ca:	f362 0385 	bfi	r3, r2, #2, #4
 80047ce:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <XMC_USBD_lHandleEnumDone+0x74>)
 80047d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 80047da:	200b      	movs	r0, #11
 80047dc:	f000 fac0 	bl	8004d60 <XMC_USBD_ClearEvent>
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000884 	.word	0x20000884

080047ec <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08c      	sub	sp, #48	; 0x30
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 80047f4:	4b69      	ldr	r3, [pc, #420]	; (800499c <XMC_USBD_lHandleOEPInt+0x1b0>)
 80047f6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	61fb      	str	r3, [r7, #28]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 80047fe:	4b67      	ldr	r3, [pc, #412]	; (800499c <XMC_USBD_lHandleOEPInt+0x1b0>)
 8004800:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8004808:	4b64      	ldr	r3, [pc, #400]	; (800499c <XMC_USBD_lHandleOEPInt+0x1b0>)
 800480a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	617b      	str	r3, [r7, #20]
  
  mask = daint.ep.out & daintmsk.ep.out;
 8004812:	8bfa      	ldrh	r2, [r7, #30]
 8004814:	8b7b      	ldrh	r3, [r7, #26]
 8004816:	4013      	ands	r3, r2
 8004818:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
 
  while ((uint16_t)mask >> ep_num)
 8004824:	e0aa      	b.n	800497c <XMC_USBD_lHandleOEPInt+0x190>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 8004826:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800482c:	fa42 f303 	asr.w	r3, r2, r3
 8004830:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 8004832:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 800483a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8098 	beq.w	8004972 <XMC_USBD_lHandleOEPInt+0x186>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 8004842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004846:	2234      	movs	r2, #52	; 0x34
 8004848:	fb02 f303 	mul.w	r3, r2, r3
 800484c:	4a53      	ldr	r2, [pc, #332]	; (800499c <XMC_USBD_lHandleOEPInt+0x1b0>)
 800484e:	4413      	add	r3, r2
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8004852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004856:	4a51      	ldr	r2, [pc, #324]	; (800499c <XMC_USBD_lHandleOEPInt+0x1b0>)
 8004858:	3370      	adds	r3, #112	; 0x70
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	7b5b      	ldrb	r3, [r3, #13]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d108      	bne.n	8004882 <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8004870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004874:	4a49      	ldr	r2, [pc, #292]	; (800499c <XMC_USBD_lHandleOEPInt+0x1b0>)
 8004876:	3370      	adds	r3, #112	; 0x70
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	60fb      	str	r3, [r7, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8004882:	7c3b      	ldrb	r3, [r7, #16]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d02f      	beq.n	80048ee <XMC_USBD_lHandleOEPInt+0x102>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 800488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004890:	7913      	ldrb	r3, [r2, #4]
 8004892:	f36f 1345 	bfc	r3, #5, #1
 8004896:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	7b5b      	ldrb	r3, [r3, #13]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <XMC_USBD_lHandleOEPInt+0xca>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	78db      	ldrb	r3, [r3, #3]
 80048a6:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80048aa:	b2db      	uxtb	r3, r3
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 80048ac:	f1c3 0303 	rsb	r3, r3, #3
 80048b0:	00da      	lsls	r2, r3, #3
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	611a      	str	r2, [r3, #16]
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	7b5b      	ldrb	r3, [r3, #13]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d106      	bne.n	80048cc <XMC_USBD_lHandleOEPInt+0xe0>
		{
			ep->outBytesAvailable += ep->xferCount;
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	441a      	add	r2, r3
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	6853      	ldr	r3, [r2, #4]
 80048d0:	f36f 1304 	bfc	r3, #4, #1
 80048d4:	6053      	str	r3, [r2, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 80048d6:	4b31      	ldr	r3, [pc, #196]	; (800499c <XMC_USBD_lHandleOEPInt+0x1b0>)
 80048d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80048dc:	2100      	movs	r1, #0
 80048de:	2000      	movs	r0, #0
 80048e0:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 80048e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048e6:	4619      	mov	r1, r3
 80048e8:	2008      	movs	r0, #8
 80048ea:	f000 facd 	bl	8004e88 <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 80048ee:	7c3b      	ldrb	r3, [r7, #16]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d034      	beq.n	8004964 <XMC_USBD_lHandleOEPInt+0x178>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7b5b      	ldrb	r3, [r3, #13]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d115      	bne.n	800492e <XMC_USBD_lHandleOEPInt+0x142>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	441a      	add	r2, r3
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	441a      	add	r2, r3
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	429a      	cmp	r2, r3
 8004938:	d111      	bne.n	800495e <XMC_USBD_lHandleOEPInt+0x172>
        {
          ep->outBytesAvailable = ep->xferCount;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	6853      	ldr	r3, [r2, #4]
 8004946:	f36f 1304 	bfc	r3, #4, #1
 800494a:	6053      	str	r3, [r2, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 800494c:	4b13      	ldr	r3, [pc, #76]	; (800499c <XMC_USBD_lHandleOEPInt+0x1b0>)
 800494e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004952:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004956:	2101      	movs	r1, #1
 8004958:	4610      	mov	r0, r2
 800495a:	4798      	blx	r3
 800495c:	e002      	b.n	8004964 <XMC_USBD_lHandleOEPInt+0x178>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 800495e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004960:	f7ff fcb4 	bl	80042cc <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fa8b 	bl	8004e88 <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 8004972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004976:	3301      	adds	r3, #1
 8004978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 800497c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800497e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004982:	fa42 f303 	asr.w	r3, r2, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f47f af4d 	bne.w	8004826 <XMC_USBD_lHandleOEPInt+0x3a>
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 800498c:	200d      	movs	r0, #13
 800498e:	f000 f9e7 	bl	8004d60 <XMC_USBD_ClearEvent>
}
 8004992:	bf00      	nop
 8004994:	3730      	adds	r7, #48	; 0x30
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000884 	.word	0x20000884

080049a0 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08c      	sub	sp, #48	; 0x30
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 80049a8:	4b6b      	ldr	r3, [pc, #428]	; (8004b58 <XMC_USBD_lHandleIEPInt+0x1b8>)
 80049aa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	617b      	str	r3, [r7, #20]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 80049b2:	4b69      	ldr	r3, [pc, #420]	; (8004b58 <XMC_USBD_lHandleIEPInt+0x1b8>)
 80049b4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	613b      	str	r3, [r7, #16]
  
  dieptsiz.d32 = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 80049c0:	8abb      	ldrh	r3, [r7, #20]
 80049c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  while ((uint16_t)mask >> ep_num)
 80049ca:	e0b6      	b.n	8004b3a <XMC_USBD_lHandleIEPInt+0x19a>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 80049cc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80049ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049d2:	fa42 f303 	asr.w	r3, r2, r3
 80049d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 80049d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 80049e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80a4 	beq.w	8004b30 <XMC_USBD_lHandleIEPInt+0x190>
    {
      ep = &xmc_device.ep[ep_num];
 80049e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049ec:	2234      	movs	r2, #52	; 0x34
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	4a59      	ldr	r2, [pc, #356]	; (8004b58 <XMC_USBD_lHandleIEPInt+0x1b8>)
 80049f4:	4413      	add	r3, r2
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 80049f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049fc:	4a56      	ldr	r2, [pc, #344]	; (8004b58 <XMC_USBD_lHandleIEPInt+0x1b8>)
 80049fe:	336a      	adds	r3, #106	; 0x6a
 8004a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8004a08:	4b53      	ldr	r3, [pc, #332]	; (8004b58 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004a0a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a12:	7812      	ldrb	r2, [r2, #0]
 8004a14:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8004a1c:	01db      	lsls	r3, r3, #7
 8004a1e:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	431a      	orrs	r2, r3
      diepint.d32 = inepint &
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	7b5b      	ldrb	r3, [r3, #13]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d107      	bne.n	8004a44 <XMC_USBD_lHandleIEPInt+0xa4>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8004a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a38:	4a47      	ldr	r2, [pc, #284]	; (8004b58 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004a3a:	336a      	adds	r3, #106	; 0x6a
 8004a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	60bb      	str	r3, [r7, #8]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7b5b      	ldrb	r3, [r3, #13]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d115      	bne.n	8004a78 <XMC_USBD_lHandleIEPInt+0xd8>
      {
        if (diepint.b.emptyintr)
 8004a4c:	7b3b      	ldrb	r3, [r7, #12]
 8004a4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00f      	beq.n	8004a78 <XMC_USBD_lHandleIEPInt+0xd8>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 8004a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a5a:	f7ff fb1b 	bl	8004094 <XMC_USBD_lWriteFifo>
 8004a5e:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	441a      	add	r2, r3
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	441a      	add	r2, r3
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 8004a78:	7b3b      	ldrb	r3, [r7, #12]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d04e      	beq.n	8004b22 <XMC_USBD_lHandleIEPInt+0x182>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7b5b      	ldrb	r3, [r3, #13]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d11d      	bne.n	8004ac8 <XMC_USBD_lHandleIEPInt+0x128>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8004a8c:	897a      	ldrh	r2, [r7, #10]
 8004a8e:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8004a92:	4013      	ands	r3, r2
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d116      	bne.n	8004ac8 <XMC_USBD_lHandleIEPInt+0x128>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d111      	bne.n	8004ac8 <XMC_USBD_lHandleIEPInt+0x128>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	441a      	add	r2, r3
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	441a      	add	r2, r3
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d123      	bne.n	8004b1c <XMC_USBD_lHandleIEPInt+0x17c>
        {
          ep->inInUse = 0U;
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad6:	6853      	ldr	r3, [r2, #4]
 8004ad8:	f36f 03c3 	bfc	r3, #3, #1
 8004adc:	6053      	str	r3, [r2, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	7b5b      	ldrb	r3, [r3, #13]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d10e      	bne.n	8004b04 <XMC_USBD_lHandleIEPInt+0x164>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8004ae6:	4b1c      	ldr	r3, [pc, #112]	; (8004b58 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004ae8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004aec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004af2:	2201      	movs	r2, #1
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	43da      	mvns	r2, r3
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8004afa:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004afc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8004b00:	400a      	ands	r2, r1
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8004b02:	635a      	str	r2, [r3, #52]	; 0x34
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8004b04:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004b06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004b0a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	2102      	movs	r1, #2
 8004b16:	4610      	mov	r0, r2
 8004b18:	4798      	blx	r3
 8004b1a:	e002      	b.n	8004b22 <XMC_USBD_lHandleIEPInt+0x182>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 8004b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b1e:	f7ff fc91 	bl	8004444 <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004b28:	4611      	mov	r1, r2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 f994 	bl	8004e58 <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 8004b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b34:	3301      	adds	r3, #1
 8004b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 8004b3a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b40:	fa42 f303 	asr.w	r3, r2, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f47f af41 	bne.w	80049cc <XMC_USBD_lHandleIEPInt+0x2c>
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 8004b4a:	200e      	movs	r0, #14
 8004b4c:	f000 f908 	bl	8004d60 <XMC_USBD_ClearEvent>
}
 8004b50:	bf00      	nop
 8004b52:	3730      	adds	r7, #48	; 0x30
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000884 	.word	0x20000884

08004b5c <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 8004b62:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <XMC_USBD_lHandleRxFLvl+0x80>)
 8004b64:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 8004b6c:	79bb      	ldrb	r3, [r7, #6]
 8004b6e:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	2b05      	cmp	r3, #5
 8004b78:	d82a      	bhi.n	8004bd0 <XMC_USBD_lHandleRxFLvl+0x74>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <XMC_USBD_lHandleRxFLvl+0x24>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004bd1 	.word	0x08004bd1
 8004b84:	08004b99 	.word	0x08004b99
 8004b88:	08004bd1 	.word	0x08004bd1
 8004b8c:	08004bd1 	.word	0x08004bd1
 8004b90:	08004bd1 	.word	0x08004bd1
 8004b94:	08004bb5 	.word	0x08004bb5
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8004b98:	793b      	ldrb	r3, [r7, #4]
 8004b9a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	88bb      	ldrh	r3, [r7, #4]
 8004ba4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f7ff f9fd 	bl	8003fac <XMC_USBD_lReadFifo>
      break;
 8004bb2:	e00e      	b.n	8004bd2 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8004bb4:	793b      	ldrb	r3, [r7, #4]
 8004bb6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	88bb      	ldrh	r3, [r7, #4]
 8004bc0:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f7ff f9ef 	bl	8003fac <XMC_USBD_lReadFifo>
      break;
 8004bce:	e000      	b.n	8004bd2 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 8004bd0:	bf00      	nop
	}
  /* no need to clear */
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000884 	.word	0x20000884

08004be0 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8004be8:	4b50      	ldr	r3, [pc, #320]	; (8004d2c <XMC_USBD_IRQHandler+0x14c>)
 8004bea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8004bf2:	4b4e      	ldr	r3, [pc, #312]	; (8004d2c <XMC_USBD_IRQHandler+0x14c>)
 8004bf4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
	
  if (data.b.sofintr)
 8004c00:	7a3b      	ldrb	r3, [r7, #8]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8004c0c:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <XMC_USBD_IRQHandler+0x14c>)
 8004c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c12:	2009      	movs	r0, #9
 8004c14:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8004c16:	2009      	movs	r0, #9
 8004c18:	f000 f8a2 	bl	8004d60 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	7b5b      	ldrb	r3, [r3, #13]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d119      	bne.n	8004c58 <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 8004c24:	7a3b      	ldrb	r3, [r7, #8]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d013      	beq.n	8004c58 <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8004c30:	7b3b      	ldrb	r3, [r7, #12]
 8004c32:	f36f 1304 	bfc	r3, #4, #1
 8004c36:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8004c38:	4b3c      	ldr	r3, [pc, #240]	; (8004d2c <XMC_USBD_IRQHandler+0x14c>)
 8004c3a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 8004c42:	f7ff ff8b 	bl	8004b5c <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 8004c46:	7b3b      	ldrb	r3, [r7, #12]
 8004c48:	f043 0310 	orr.w	r3, r3, #16
 8004c4c:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8004c4e:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <XMC_USBD_IRQHandler+0x14c>)
 8004c50:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 8004c58:	7a7b      	ldrb	r3, [r7, #9]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8004c64:	200a      	movs	r0, #10
 8004c66:	f000 f87b 	bl	8004d60 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 8004c6a:	7a7b      	ldrb	r3, [r7, #9]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8004c76:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <XMC_USBD_IRQHandler+0x14c>)
 8004c78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c7c:	2006      	movs	r0, #6
 8004c7e:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8004c80:	2006      	movs	r0, #6
 8004c82:	f000 f86d 	bl	8004d60 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8004c92:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <XMC_USBD_IRQHandler+0x14c>)
 8004c94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c98:	2008      	movs	r0, #8
 8004c9a:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8004c9c:	2008      	movs	r0, #8
 8004c9e:	f000 f85f 	bl	8004d60 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 8004ca2:	7afb      	ldrb	r3, [r7, #11]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00e      	beq.n	8004ccc <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 8004cae:	4a1f      	ldr	r2, [pc, #124]	; (8004d2c <XMC_USBD_IRQHandler+0x14c>)
 8004cb0:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8004cb4:	f043 0304 	orr.w	r3, r3, #4
 8004cb8:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <XMC_USBD_IRQHandler+0x14c>)
 8004cbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f000 f84a 	bl	8004d60 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 8004ccc:	7a7b      	ldrb	r3, [r7, #9]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff fc7f 	bl	80045dc <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 8004cde:	7a7b      	ldrb	r3, [r7, #9]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 8004cea:	f7ff fd43 	bl	8004774 <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 8004cee:	7abb      	ldrb	r3, [r7, #10]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff fe50 	bl	80049a0 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 8004d00:	7abb      	ldrb	r3, [r7, #10]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fd6d 	bl	80047ec <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 8004d12:	7a3b      	ldrb	r3, [r7, #8]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 8004d1e:	f7ff fd05 	bl	800472c <XMC_USBD_lHandleOTGInt>
  }

}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000884 	.word	0x20000884

08004d30 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8004d34:	4803      	ldr	r0, [pc, #12]	; (8004d44 <XMC_USBD_Enable+0x14>)
 8004d36:	f7fc f93b 	bl	8000fb0 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8004d3a:	f7fc fd1f 	bl	800177c <XMC_SCU_POWER_EnableUsb>
}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000080 	.word	0x20000080

08004d48 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8004d4c:	4803      	ldr	r0, [pc, #12]	; (8004d5c <XMC_USBD_Disable+0x14>)
 8004d4e:	f7fc f911 	bl	8000f74 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 8004d52:	f7fc fd21 	bl	8001798 <XMC_SCU_POWER_DisableUsb>
}
 8004d56:	bf00      	nop
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000080 	.word	0x20000080

08004d60 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
  switch(event)
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	2b0d      	cmp	r3, #13
 8004d72:	d84c      	bhi.n	8004e0e <XMC_USBD_ClearEvent+0xae>
 8004d74:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <XMC_USBD_ClearEvent+0x1c>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004db5 	.word	0x08004db5
 8004d80:	08004e0f 	.word	0x08004e0f
 8004d84:	08004e0f 	.word	0x08004e0f
 8004d88:	08004e0f 	.word	0x08004e0f
 8004d8c:	08004dbf 	.word	0x08004dbf
 8004d90:	08004e0f 	.word	0x08004e0f
 8004d94:	08004dc9 	.word	0x08004dc9
 8004d98:	08004dd3 	.word	0x08004dd3
 8004d9c:	08004ddd 	.word	0x08004ddd
 8004da0:	08004de7 	.word	0x08004de7
 8004da4:	08004df1 	.word	0x08004df1
 8004da8:	08004dfb 	.word	0x08004dfb
 8004dac:	08004e0f 	.word	0x08004e0f
 8004db0:	08004e05 	.word	0x08004e05
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dba:	73fb      	strb	r3, [r7, #15]
	  break;
 8004dbc:	e028      	b.n	8004e10 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 8004dbe:	7b7b      	ldrb	r3, [r7, #13]
 8004dc0:	f043 0310 	orr.w	r3, r3, #16
 8004dc4:	737b      	strb	r3, [r7, #13]
	  break;
 8004dc6:	e023      	b.n	8004e10 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8004dc8:	7b7b      	ldrb	r3, [r7, #13]
 8004dca:	f043 0308 	orr.w	r3, r3, #8
 8004dce:	737b      	strb	r3, [r7, #13]
	  break;
 8004dd0:	e01e      	b.n	8004e10 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd8:	73fb      	strb	r3, [r7, #15]
	  break;
 8004dda:	e019      	b.n	8004e10 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de2:	73fb      	strb	r3, [r7, #15]
	  break;
 8004de4:	e014      	b.n	8004e10 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 8004de6:	7b3b      	ldrb	r3, [r7, #12]
 8004de8:	f043 0308 	orr.w	r3, r3, #8
 8004dec:	733b      	strb	r3, [r7, #12]
	  break;
 8004dee:	e00f      	b.n	8004e10 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8004df0:	7b7b      	ldrb	r3, [r7, #13]
 8004df2:	f043 0304 	orr.w	r3, r3, #4
 8004df6:	737b      	strb	r3, [r7, #13]
	  break;
 8004df8:	e00a      	b.n	8004e10 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 8004dfa:	7b7b      	ldrb	r3, [r7, #13]
 8004dfc:	f043 0320 	orr.w	r3, r3, #32
 8004e00:	737b      	strb	r3, [r7, #13]
	  break;
 8004e02:	e005      	b.n	8004e10 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 8004e04:	7bbb      	ldrb	r3, [r7, #14]
 8004e06:	f043 0308 	orr.w	r3, r3, #8
 8004e0a:	73bb      	strb	r3, [r7, #14]
	  break;
 8004e0c:	e000      	b.n	8004e10 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 8004e0e:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <XMC_USBD_ClearEvent+0xc8>)
 8004e12:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	615a      	str	r2, [r3, #20]
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000884 	.word	0x20000884

08004e2c <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <XMC_USBD_lClearEventOTG+0x28>)
 8004e3e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000884 	.word	0x20000884

08004e58 <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	4a06      	ldr	r2, [pc, #24]	; (8004e84 <XMC_USBD_ClearEventINEP+0x2c>)
 8004e6c:	336a      	adds	r3, #106	; 0x6a
 8004e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	609a      	str	r2, [r3, #8]
}
 8004e76:	bf00      	nop
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000884 	.word	0x20000884

08004e88 <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	4a06      	ldr	r2, [pc, #24]	; (8004eb4 <XMC_USBD_ClearEventOUTEP+0x2c>)
 8004e9c:	3370      	adds	r3, #112	; 0x70
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	609a      	str	r2, [r3, #8]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	20000884 	.word	0x20000884

08004eb8 <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8004ec6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004eca:	6959      	ldr	r1, [r3, #20]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8004ed0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	615a      	str	r2, [r3, #20]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	20000884 	.word	0x20000884

08004ee8 <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <XMC_USBD_EnableEventINEP+0x2c>)
 8004ef6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004efa:	6919      	ldr	r1, [r3, #16]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <XMC_USBD_EnableEventINEP+0x2c>)
 8004f00:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004f04:	430a      	orrs	r2, r1
 8004f06:	611a      	str	r2, [r3, #16]
}
 8004f08:	bf00      	nop
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	20000884 	.word	0x20000884

08004f18 <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 8004f22:	793b      	ldrb	r3, [r7, #4]
 8004f24:	f043 0304 	orr.w	r3, r3, #4
 8004f28:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 8004f2a:	793b      	ldrb	r3, [r7, #4]
 8004f2c:	f043 0308 	orr.w	r3, r3, #8
 8004f30:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
 8004f32:	793b      	ldrb	r3, [r7, #4]
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 1U;
 8004f3a:	793b      	ldrb	r3, [r7, #4]
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	713b      	strb	r3, [r7, #4]
#else
  cap.event_power_off = 0U;
  cap.event_power_on = 0U;
#endif
  cap.event_high_speed = 0U;
 8004f42:	793b      	ldrb	r3, [r7, #4]
 8004f44:	f36f 1345 	bfc	r3, #5, #1
 8004f48:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 8004f4a:	797b      	ldrb	r3, [r7, #5]
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 8004f52:	793b      	ldrb	r3, [r7, #4]
 8004f54:	f043 0310 	orr.w	r3, r3, #16
 8004f58:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 8004f5a:	793b      	ldrb	r3, [r7, #4]
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 8004f62:	793b      	ldrb	r3, [r7, #4]
 8004f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f68:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f36f 235f 	bfc	r3, #9, #23
 8004f70:	607b      	str	r3, [r7, #4]
  return cap;
 8004f72:	687b      	ldr	r3, [r7, #4]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 8004f88:	f7ff fed2 	bl	8004d30 <XMC_USBD_Enable>
  
  usbd_init = obj;
 8004f8c:	4a87      	ldr	r2, [pc, #540]	; (80051ac <XMC_USBD_Init+0x22c>)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
 8004f96:	e00c      	b.n	8004fb2 <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8004f98:	4a85      	ldr	r2, [pc, #532]	; (80051b0 <XMC_USBD_Init+0x230>)
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	2140      	movs	r1, #64	; 0x40
 8004f9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8004fa2:	4a84      	ldr	r2, [pc, #528]	; (80051b4 <XMC_USBD_Init+0x234>)
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	2140      	movs	r1, #64	; 0x40
 8004fa8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	3301      	adds	r3, #1
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	2b06      	cmp	r3, #6
 8004fb6:	d9ef      	bls.n	8004f98 <XMC_USBD_Init+0x18>
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8004fb8:	f44f 7202 	mov.w	r2, #520	; 0x208
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	487e      	ldr	r0, [pc, #504]	; (80051b8 <XMC_USBD_Init+0x238>)
 8004fc0:	f001 f9dc 	bl	800637c <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	4a7b      	ldr	r2, [pc, #492]	; (80051b8 <XMC_USBD_Init+0x238>)
 8004fca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	4a79      	ldr	r2, [pc, #484]	; (80051b8 <XMC_USBD_Init+0x238>)
 8004fd4:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a75      	ldr	r2, [pc, #468]	; (80051b8 <XMC_USBD_Init+0x238>)
 8004fe4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fee:	4a72      	ldr	r2, [pc, #456]	; (80051b8 <XMC_USBD_Init+0x238>)
 8004ff0:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	e00c      	b.n	8005014 <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	3348      	adds	r3, #72	; 0x48
 8004ffe:	015b      	lsls	r3, r3, #5
 8005000:	6a3a      	ldr	r2, [r7, #32]
 8005002:	441a      	add	r2, r3
 8005004:	496c      	ldr	r1, [pc, #432]	; (80051b8 <XMC_USBD_Init+0x238>)
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	336a      	adds	r3, #106	; 0x6a
 800500a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	3301      	adds	r3, #1
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	2b06      	cmp	r3, #6
 8005018:	d9ef      	bls.n	8004ffa <XMC_USBD_Init+0x7a>
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800501a:	2300      	movs	r3, #0
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
 800501e:	e00d      	b.n	800503c <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	3358      	adds	r3, #88	; 0x58
 8005024:	015b      	lsls	r3, r3, #5
 8005026:	6a3a      	ldr	r2, [r7, #32]
 8005028:	441a      	add	r2, r3
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 800502a:	4963      	ldr	r1, [pc, #396]	; (80051b8 <XMC_USBD_Init+0x238>)
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	3370      	adds	r3, #112	; 0x70
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	3301      	adds	r3, #1
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	2b06      	cmp	r3, #6
 8005040:	d9ee      	bls.n	8005020 <XMC_USBD_Init+0xa0>
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8005042:	2300      	movs	r3, #0
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
 8005046:	e00c      	b.n	8005062 <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	3301      	adds	r3, #1
 800504c:	031b      	lsls	r3, r3, #12
 800504e:	6a3a      	ldr	r2, [r7, #32]
 8005050:	441a      	add	r2, r3
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8005052:	4959      	ldr	r1, [pc, #356]	; (80051b8 <XMC_USBD_Init+0x238>)
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	3378      	adds	r3, #120	; 0x78
 8005058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	3301      	adds	r3, #1
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	2b06      	cmp	r3, #6
 8005066:	d9ef      	bls.n	8005048 <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8005068:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <XMC_USBD_Init+0x238>)
 800506a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 8005072:	7f3b      	ldrb	r3, [r7, #28]
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 800507a:	7f3b      	ldrb	r3, [r7, #28]
 800507c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005080:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	7b5b      	ldrb	r3, [r3, #13]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 800508a:	7f3b      	ldrb	r3, [r7, #28]
 800508c:	f043 0320 	orr.w	r3, r3, #32
 8005090:	773b      	strb	r3, [r7, #28]
 8005092:	e003      	b.n	800509c <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 8005094:	7f3b      	ldrb	r3, [r7, #28]
 8005096:	f36f 1345 	bfc	r3, #5, #1
 800509a:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 800509c:	4b46      	ldr	r3, [pc, #280]	; (80051b8 <XMC_USBD_Init+0x238>)
 800509e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 80050a6:	4b44      	ldr	r3, [pc, #272]	; (80051b8 <XMC_USBD_Init+0x238>)
 80050a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 80050b0:	7efb      	ldrb	r3, [r7, #27]
 80050b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b6:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 80050b8:	7e7b      	ldrb	r3, [r7, #25]
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 80050c0:	4b3d      	ldr	r3, [pc, #244]	; (80051b8 <XMC_USBD_Init+0x238>)
 80050c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 80050ca:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <XMC_USBD_Init+0x238>)
 80050cc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 80050d4:	7d3b      	ldrb	r3, [r7, #20]
 80050d6:	f043 0303 	orr.w	r3, r3, #3
 80050da:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 80050dc:	7dbb      	ldrb	r3, [r7, #22]
 80050de:	f36f 13c7 	bfc	r3, #7, #1
 80050e2:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 80050e4:	4b34      	ldr	r3, [pc, #208]	; (80051b8 <XMC_USBD_Init+0x238>)
 80050e6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 80050ee:	4b32      	ldr	r3, [pc, #200]	; (80051b8 <XMC_USBD_Init+0x238>)
 80050f0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 80050f8:	7c3b      	ldrb	r3, [r7, #16]
 80050fa:	f043 0302 	orr.w	r3, r3, #2
 80050fe:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8005100:	4b2d      	ldr	r3, [pc, #180]	; (80051b8 <XMC_USBD_Init+0x238>)
 8005102:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 800510a:	2010      	movs	r0, #16
 800510c:	f7ff f814 	bl	8004138 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8005110:	f7ff f852 	bl	80041b8 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8005114:	4b28      	ldr	r3, [pc, #160]	; (80051b8 <XMC_USBD_Init+0x238>)
 8005116:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800511a:	2200      	movs	r2, #0
 800511c:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 800511e:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <XMC_USBD_Init+0x238>)
 8005120:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005128:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 800512e:	7b3b      	ldrb	r3, [r7, #12]
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 8005136:	7b3b      	ldrb	r3, [r7, #12]
 8005138:	f043 0304 	orr.w	r3, r3, #4
 800513c:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005144:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 8005146:	7b7b      	ldrb	r3, [r7, #13]
 8005148:	f043 0310 	orr.w	r3, r3, #16
 800514c:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 800514e:	7b7b      	ldrb	r3, [r7, #13]
 8005150:	f043 0320 	orr.w	r3, r3, #32
 8005154:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 8005156:	7b7b      	ldrb	r3, [r7, #13]
 8005158:	f043 0304 	orr.w	r3, r3, #4
 800515c:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 800515e:	7b7b      	ldrb	r3, [r7, #13]
 8005160:	f043 0308 	orr.w	r3, r3, #8
 8005164:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516c:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 800516e:	7b3b      	ldrb	r3, [r7, #12]
 8005170:	f043 0308 	orr.w	r3, r3, #8
 8005174:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	7b5b      	ldrb	r3, [r3, #13]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d103      	bne.n	8005186 <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 800517e:	7b3b      	ldrb	r3, [r7, #12]
 8005180:	f043 0310 	orr.w	r3, r3, #16
 8005184:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 8005186:	7bbb      	ldrb	r3, [r7, #14]
 8005188:	f043 0308 	orr.w	r3, r3, #8
 800518c:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 800518e:	7bbb      	ldrb	r3, [r7, #14]
 8005190:	f043 0304 	orr.w	r3, r3, #4
 8005194:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 8005196:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <XMC_USBD_Init+0x238>)
 8005198:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3728      	adds	r7, #40	; 0x28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000880 	.word	0x20000880
 80051b0:	20000478 	.word	0x20000478
 80051b4:	20000494 	.word	0x20000494
 80051b8:	20000884 	.word	0x20000884

080051bc <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80051c2:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <XMC_USBD_Uninitialize+0x38>)
 80051c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 80051cc:	793b      	ldrb	r3, [r7, #4]
 80051ce:	f043 0302 	orr.w	r3, r3, #2
 80051d2:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80051d4:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <XMC_USBD_Uninitialize+0x38>)
 80051d6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 80051de:	f44f 7202 	mov.w	r2, #520	; 0x208
 80051e2:	2100      	movs	r1, #0
 80051e4:	4803      	ldr	r0, [pc, #12]	; (80051f4 <XMC_USBD_Uninitialize+0x38>)
 80051e6:	f001 f8c9 	bl	800637c <memset>
  return XMC_USBD_STATUS_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	20000884 	.word	0x20000884

080051f8 <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <XMC_USBD_DeviceConnect+0x30>)
 8005200:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 8005208:	793b      	ldrb	r3, [r7, #4]
 800520a:	f36f 0341 	bfc	r3, #1, #1
 800520e:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <XMC_USBD_DeviceConnect+0x30>)
 8005212:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	20000884 	.word	0x20000884

0800522c <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <XMC_USBD_DeviceDisconnect+0x30>)
 8005234:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 800523c:	793b      	ldrb	r3, [r7, #4]
 800523e:	f043 0302 	orr.w	r3, r3, #2
 8005242:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <XMC_USBD_DeviceDisconnect+0x30>)
 8005246:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	20000884 	.word	0x20000884

08005260 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 800526c:	7b3b      	ldrb	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	f362 03c4 	bfi	r3, r2, #3, #2
 8005274:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 8005276:	4b12      	ldr	r3, [pc, #72]	; (80052c0 <XMC_USBD_DeviceGetState+0x60>)
 8005278:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800527c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005280:	b2da      	uxtb	r2, r3
 8005282:	7b3b      	ldrb	r3, [r7, #12]
 8005284:	f362 0341 	bfi	r3, r2, #1, #1
 8005288:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fe fe5a 	bl	8003f44 <XMC_USBD_lDeviceActive>
 8005290:	4603      	mov	r3, r0
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	7b3b      	ldrb	r3, [r7, #12]
 800529a:	f362 0382 	bfi	r3, r2, #2, #1
 800529e:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <XMC_USBD_DeviceGetState+0x60>)
 80052a2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80052a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	7b3b      	ldrb	r3, [r7, #12]
 80052ae:	f362 0300 	bfi	r3, r2, #0, #1
 80052b2:	733b      	strb	r3, [r7, #12]
  return state;
 80052b4:	68fb      	ldr	r3, [r7, #12]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000884 	.word	0x20000884

080052c4 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	6039      	str	r1, [r7, #0]
 80052ce:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	2234      	movs	r2, #52	; 0x34
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
 80052dc:	4a1a      	ldr	r2, [pc, #104]	; (8005348 <XMC_USBD_EndpointReadStart+0x84>)
 80052de:	4413      	add	r3, r2
 80052e0:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <XMC_USBD_EndpointReadStart+0x3a>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	791b      	ldrb	r3, [r3, #4]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <XMC_USBD_EndpointReadStart+0x40>
  {
    result = XMC_USBD_STATUS_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	73fb      	strb	r3, [r7, #15]
 8005302:	e01c      	b.n	800533e <XMC_USBD_EndpointReadStart+0x7a>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d902      	bls.n	8005314 <XMC_USBD_EndpointReadStart+0x50>
    {
      size = ep->outBufferSize;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2200      	movs	r2, #0
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2200      	movs	r2, #0
 8005332:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 8005334:	68b8      	ldr	r0, [r7, #8]
 8005336:	f7fe ffc9 	bl	80042cc <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 800533e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000884 	.word	0x20000884

0800534c <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2234      	movs	r2, #52	; 0x34
 800535e:	fb02 f303 	mul.w	r3, r2, r3
 8005362:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <XMC_USBD_EndpointRead+0x74>)
 8005364:	4413      	add	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	429a      	cmp	r2, r3
 8005370:	d902      	bls.n	8005378 <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	4413      	add	r3, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	4619      	mov	r1, r3
 8005386:	68b8      	ldr	r0, [r7, #8]
 8005388:	f000 ff5e 	bl	8006248 <memcpy>
  ep->outBytesAvailable -= length;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	1ad2      	subs	r2, r2, r3
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d006      	beq.n	80053ae <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	699a      	ldr	r2, [r3, #24]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	441a      	add	r2, r3
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	619a      	str	r2, [r3, #24]
 80053ac:	e002      	b.n	80053b4 <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2200      	movs	r2, #0
 80053b2:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 80053b4:	687b      	ldr	r3, [r7, #4]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000884 	.word	0x20000884

080053c4 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	2234      	movs	r2, #52	; 0x34
 80053da:	fb02 f303 	mul.w	r3, r2, r3
 80053de:	4a21      	ldr	r2, [pc, #132]	; (8005464 <XMC_USBD_EndpointWrite+0xa0>)
 80053e0:	4413      	add	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	791b      	ldrb	r3, [r3, #4]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d102      	bne.n	80053f8 <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e030      	b.n	800545a <XMC_USBD_EndpointWrite+0x96>
  }
  else if (ep->inInUse == 1U)
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b01      	cmp	r3, #1
 8005404:	d102      	bne.n	800540c <XMC_USBD_EndpointWrite+0x48>
  {
    result=(int32_t)0;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e026      	b.n	800545a <XMC_USBD_EndpointWrite+0x96>
  }
  else
  {
    if (length > ep->inBufferSize)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	429a      	cmp	r2, r3
 8005414:	d902      	bls.n	800541c <XMC_USBD_EndpointWrite+0x58>
    {
      length = ep->inBufferSize;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 ff0f 	bl	8006248 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2200      	movs	r2, #0
 800543c:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2200      	movs	r2, #0
 8005442:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	6853      	ldr	r3, [r2, #4]
 8005448:	f043 0308 	orr.w	r3, r3, #8
 800544c:	6053      	str	r3, [r2, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 800544e:	6938      	ldr	r0, [r7, #16]
 8005450:	f7fe fff8 	bl	8004444 <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	617b      	str	r3, [r7, #20]
  }
  return result;
 800545a:	697b      	ldr	r3, [r7, #20]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20000884 	.word	0x20000884

08005468 <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	460a      	mov	r2, r1
 8005472:	71fb      	strb	r3, [r7, #7]
 8005474:	4613      	mov	r3, r2
 8005476:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8005478:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <XMC_USBD_DeviceSetAddress+0x48>)
 800547a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8005482:	79bb      	ldrb	r3, [r7, #6]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10c      	bne.n	80054a2 <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800548e:	b2da      	uxtb	r2, r3
 8005490:	89bb      	ldrh	r3, [r7, #12]
 8005492:	f362 130a 	bfi	r3, r2, #4, #7
 8005496:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <XMC_USBD_DeviceSetAddress+0x48>)
 800549a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	20000884 	.word	0x20000884

080054b4 <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	4603      	mov	r3, r0
 80054bc:	460a      	mov	r2, r1
 80054be:	71fb      	strb	r3, [r7, #7]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	2234      	movs	r2, #52	; 0x34
 80054cc:	fb02 f303 	mul.w	r3, r2, r3
 80054d0:	4a4a      	ldr	r2, [pc, #296]	; (80055fc <XMC_USBD_EndpointStall+0x148>)
 80054d2:	4413      	add	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  if (stall)
 80054d6:	79bb      	ldrb	r3, [r7, #6]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d040      	beq.n	800555e <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 80054dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	da1a      	bge.n	800551a <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	4a43      	ldr	r2, [pc, #268]	; (80055fc <XMC_USBD_EndpointStall+0x148>)
 80054f0:	336a      	adds	r3, #106	; 0x6a
 80054f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 80054fa:	7abb      	ldrb	r3, [r7, #10]
 80054fc:	f043 0320 	orr.w	r3, r3, #32
 8005500:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800550a:	b2db      	uxtb	r3, r3
 800550c:	4a3b      	ldr	r2, [pc, #236]	; (80055fc <XMC_USBD_EndpointStall+0x148>)
 800550e:	336a      	adds	r3, #106	; 0x6a
 8005510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	e01b      	b.n	8005552 <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005522:	b2db      	uxtb	r3, r3
 8005524:	4a35      	ldr	r2, [pc, #212]	; (80055fc <XMC_USBD_EndpointStall+0x148>)
 8005526:	3370      	adds	r3, #112	; 0x70
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8005532:	7abb      	ldrb	r3, [r7, #10]
 8005534:	f043 0320 	orr.w	r3, r3, #32
 8005538:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005542:	b2db      	uxtb	r3, r3
 8005544:	4a2d      	ldr	r2, [pc, #180]	; (80055fc <XMC_USBD_EndpointStall+0x148>)
 8005546:	3370      	adds	r3, #112	; 0x70
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	7913      	ldrb	r3, [r2, #4]
 8005556:	f043 0320 	orr.w	r3, r3, #32
 800555a:	7113      	strb	r3, [r2, #4]
 800555c:	e047      	b.n	80055ee <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 800555e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005562:	2b00      	cmp	r3, #0
 8005564:	da1e      	bge.n	80055a4 <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800556e:	b2db      	uxtb	r3, r3
 8005570:	4a22      	ldr	r2, [pc, #136]	; (80055fc <XMC_USBD_EndpointStall+0x148>)
 8005572:	336a      	adds	r3, #106	; 0x6a
 8005574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 800557c:	7abb      	ldrb	r3, [r7, #10]
 800557e:	f36f 1345 	bfc	r3, #5, #1
 8005582:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8005584:	7afb      	ldrb	r3, [r7, #11]
 8005586:	f043 0310 	orr.w	r3, r3, #16
 800558a:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005594:	b2db      	uxtb	r3, r3
 8005596:	4a19      	ldr	r2, [pc, #100]	; (80055fc <XMC_USBD_EndpointStall+0x148>)
 8005598:	336a      	adds	r3, #106	; 0x6a
 800559a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e01f      	b.n	80055e4 <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	4a13      	ldr	r2, [pc, #76]	; (80055fc <XMC_USBD_EndpointStall+0x148>)
 80055b0:	3370      	adds	r3, #112	; 0x70
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 80055bc:	7abb      	ldrb	r3, [r7, #10]
 80055be:	f36f 1345 	bfc	r3, #5, #1
 80055c2:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 80055c4:	7afb      	ldrb	r3, [r7, #11]
 80055c6:	f043 0310 	orr.w	r3, r3, #16
 80055ca:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	4a09      	ldr	r2, [pc, #36]	; (80055fc <XMC_USBD_EndpointStall+0x148>)
 80055d8:	3370      	adds	r3, #112	; 0x70
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	7913      	ldrb	r3, [r2, #4]
 80055e8:	f36f 1345 	bfc	r3, #5, #1
 80055ec:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	20000884 	.word	0x20000884

08005600 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	2234      	movs	r2, #52	; 0x34
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <XMC_USBD_EndpointAbort+0x84>)
 8005618:	4413      	add	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d004      	beq.n	8005634 <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	6853      	ldr	r3, [r2, #4]
 800562e:	f36f 03c3 	bfc	r3, #3, #1
 8005632:	6053      	str	r3, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	6853      	ldr	r3, [r2, #4]
 8005646:	f36f 1304 	bfc	r3, #4, #1
 800564a:	6053      	str	r3, [r2, #4]
  }
  ep->isStalled = 0U;
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	7913      	ldrb	r3, [r2, #4]
 8005650:	f36f 1345 	bfc	r3, #5, #1
 8005654:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000884 	.word	0x20000884

08005688 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
 8005692:	460b      	mov	r3, r1
 8005694:	71bb      	strb	r3, [r7, #6]
 8005696:	4613      	mov	r3, r2
 8005698:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800569a:	4b9d      	ldr	r3, [pc, #628]	; (8005910 <XMC_USBD_EndpointConfigure+0x288>)
 800569c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	613b      	str	r3, [r7, #16]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	2234      	movs	r2, #52	; 0x34
 80056ac:	fb02 f303 	mul.w	r3, r2, r3
 80056b0:	4a97      	ldr	r2, [pc, #604]	; (8005910 <XMC_USBD_EndpointConfigure+0x288>)
 80056b2:	4413      	add	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 80056b6:	2234      	movs	r2, #52	; 0x34
 80056b8:	2100      	movs	r1, #0
 80056ba:	6978      	ldr	r0, [r7, #20]
 80056bc:	f000 fe5e 	bl	800637c <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	79fa      	ldrb	r2, [r7, #7]
 80056c4:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	7913      	ldrb	r3, [r2, #4]
 80056ca:	f043 0304 	orr.w	r3, r3, #4
 80056ce:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 80056d0:	88bb      	ldrh	r3, [r7, #4]
 80056d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d6:	b2d9      	uxtb	r1, r3
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	6853      	ldr	r3, [r2, #4]
 80056dc:	f361 23d1 	bfi	r3, r1, #11, #7
 80056e0:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <XMC_USBD_EndpointConfigure+0x72>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	6893      	ldr	r3, [r2, #8]
 80056ee:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 80056f2:	f361 0312 	bfi	r3, r1, #0, #19
 80056f6:	6093      	str	r3, [r2, #8]
 80056f8:	e005      	b.n	8005706 <XMC_USBD_EndpointConfigure+0x7e>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	6893      	ldr	r3, [r2, #8]
 80056fe:	2140      	movs	r1, #64	; 0x40
 8005700:	f361 0312 	bfi	r3, r1, #0, #19
 8005704:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800570e:	b2db      	uxtb	r3, r3
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	4a80      	ldr	r2, [pc, #512]	; (8005914 <XMC_USBD_EndpointConfigure+0x28c>)
 8005714:	441a      	add	r2, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005722:	b2db      	uxtb	r3, r3
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	4a7c      	ldr	r2, [pc, #496]	; (8005918 <XMC_USBD_EndpointConfigure+0x290>)
 8005728:	441a      	add	r2, r3
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005736:	b2db      	uxtb	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	4b78      	ldr	r3, [pc, #480]	; (800591c <XMC_USBD_EndpointConfigure+0x294>)
 800573c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800574c:	b2db      	uxtb	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	4b73      	ldr	r3, [pc, #460]	; (8005920 <XMC_USBD_EndpointConfigure+0x298>)
 8005752:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <XMC_USBD_EndpointConfigure+0xe6>
 8005768:	79bb      	ldrb	r3, [r7, #6]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d17c      	bne.n	8005868 <XMC_USBD_EndpointConfigure+0x1e0>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005776:	b2db      	uxtb	r3, r3
 8005778:	4a65      	ldr	r2, [pc, #404]	; (8005910 <XMC_USBD_EndpointConfigure+0x288>)
 800577a:	336a      	adds	r3, #106	; 0x6a
 800577c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8005784:	7b7b      	ldrb	r3, [r7, #13]
 8005786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578a:	737b      	strb	r3, [r7, #13]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800578c:	79bb      	ldrb	r3, [r7, #6]
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	b2da      	uxtb	r2, r3
 8005794:	7bbb      	ldrb	r3, [r7, #14]
 8005796:	f362 0383 	bfi	r3, r2, #2, #2
 800579a:	73bb      	strb	r3, [r7, #14]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 800579c:	79bb      	ldrb	r3, [r7, #6]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d124      	bne.n	80057ec <XMC_USBD_EndpointConfigure+0x164>
    {
			switch(ep_max_packet_size)
 80057a2:	88bb      	ldrh	r3, [r7, #4]
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	d00a      	beq.n	80057be <XMC_USBD_EndpointConfigure+0x136>
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	dc28      	bgt.n	80057fe <XMC_USBD_EndpointConfigure+0x176>
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d00b      	beq.n	80057c8 <XMC_USBD_EndpointConfigure+0x140>
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	dc24      	bgt.n	80057fe <XMC_USBD_EndpointConfigure+0x176>
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d013      	beq.n	80057e0 <XMC_USBD_EndpointConfigure+0x158>
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d00b      	beq.n	80057d4 <XMC_USBD_EndpointConfigure+0x14c>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 80057bc:	e01f      	b.n	80057fe <XMC_USBD_EndpointConfigure+0x176>
				data.b.mps = 0x0U;
 80057be:	89bb      	ldrh	r3, [r7, #12]
 80057c0:	f36f 030a 	bfc	r3, #0, #11
 80057c4:	81bb      	strh	r3, [r7, #12]
				break;
 80057c6:	e01b      	b.n	8005800 <XMC_USBD_EndpointConfigure+0x178>
				data.b.mps = 0x1U;
 80057c8:	89bb      	ldrh	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f362 030a 	bfi	r3, r2, #0, #11
 80057d0:	81bb      	strh	r3, [r7, #12]
				break;
 80057d2:	e015      	b.n	8005800 <XMC_USBD_EndpointConfigure+0x178>
				data.b.mps = 0x2U;
 80057d4:	89bb      	ldrh	r3, [r7, #12]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f362 030a 	bfi	r3, r2, #0, #11
 80057dc:	81bb      	strh	r3, [r7, #12]
				break;
 80057de:	e00f      	b.n	8005800 <XMC_USBD_EndpointConfigure+0x178>
				data.b.mps = 0x3U;
 80057e0:	89bb      	ldrh	r3, [r7, #12]
 80057e2:	2203      	movs	r2, #3
 80057e4:	f362 030a 	bfi	r3, r2, #0, #11
 80057e8:	81bb      	strh	r3, [r7, #12]
				break;
 80057ea:	e009      	b.n	8005800 <XMC_USBD_EndpointConfigure+0x178>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 80057ec:	88bb      	ldrh	r3, [r7, #4]
 80057ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	89bb      	ldrh	r3, [r7, #12]
 80057f6:	f362 030a 	bfi	r3, r2, #0, #11
 80057fa:	81bb      	strh	r3, [r7, #12]
 80057fc:	e000      	b.n	8005800 <XMC_USBD_EndpointConfigure+0x178>
				break;
 80057fe:	bf00      	nop
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	f043 0310 	orr.w	r3, r3, #16
 8005806:	73fb      	strb	r3, [r7, #15]
		/* clear stall */
		data.b.stall = 0U;
 8005808:	7bbb      	ldrb	r3, [r7, #14]
 800580a:	f36f 1345 	bfc	r3, #5, #1
 800580e:	73bb      	strb	r3, [r7, #14]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8005810:	f7fe fd08 	bl	8004224 <XMC_USBD_lAssignTXFifo>
 8005814:	4603      	mov	r3, r0
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	b2d9      	uxtb	r1, r3
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	8893      	ldrh	r3, [r2, #4]
 8005820:	f361 1389 	bfi	r3, r1, #6, #4
 8005824:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	889b      	ldrh	r3, [r3, #4]
 800582a:	f3c3 1383 	ubfx	r3, r3, #6, #4
 800582e:	b2da      	uxtb	r2, r3
 8005830:	89fb      	ldrh	r3, [r7, #14]
 8005832:	f362 1389 	bfi	r3, r2, #6, #4
 8005836:	81fb      	strh	r3, [r7, #14]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005840:	b2db      	uxtb	r3, r3
 8005842:	4a33      	ldr	r2, [pc, #204]	; (8005910 <XMC_USBD_EndpointConfigure+0x288>)
 8005844:	336a      	adds	r3, #106	; 0x6a
 8005846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 800584e:	8a3a      	ldrh	r2, [r7, #16]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005858:	b2db      	uxtb	r3, r3
 800585a:	4619      	mov	r1, r3
 800585c:	2301      	movs	r3, #1
 800585e:	408b      	lsls	r3, r1
 8005860:	b29b      	uxth	r3, r3
 8005862:	4313      	orrs	r3, r2
 8005864:	b29b      	uxth	r3, r3
 8005866:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <XMC_USBD_EndpointConfigure+0x1f4>
 8005876:	79bb      	ldrb	r3, [r7, #6]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d175      	bne.n	8005968 <XMC_USBD_EndpointConfigure+0x2e0>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005884:	b2db      	uxtb	r3, r3
 8005886:	4a22      	ldr	r2, [pc, #136]	; (8005910 <XMC_USBD_EndpointConfigure+0x288>)
 8005888:	3370      	adds	r3, #112	; 0x70
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60bb      	str	r3, [r7, #8]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8005894:	7a7b      	ldrb	r3, [r7, #9]
 8005896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589a:	727b      	strb	r3, [r7, #9]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800589c:	79bb      	ldrb	r3, [r7, #6]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	7abb      	ldrb	r3, [r7, #10]
 80058a6:	f362 0383 	bfi	r3, r2, #2, #2
 80058aa:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80058ac:	79bb      	ldrb	r3, [r7, #6]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d124      	bne.n	80058fc <XMC_USBD_EndpointConfigure+0x274>
		{
			switch(ep_max_packet_size)
 80058b2:	88bb      	ldrh	r3, [r7, #4]
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	d00a      	beq.n	80058ce <XMC_USBD_EndpointConfigure+0x246>
 80058b8:	2b40      	cmp	r3, #64	; 0x40
 80058ba:	dc33      	bgt.n	8005924 <XMC_USBD_EndpointConfigure+0x29c>
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d00b      	beq.n	80058d8 <XMC_USBD_EndpointConfigure+0x250>
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	dc2f      	bgt.n	8005924 <XMC_USBD_EndpointConfigure+0x29c>
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d013      	beq.n	80058f0 <XMC_USBD_EndpointConfigure+0x268>
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d00b      	beq.n	80058e4 <XMC_USBD_EndpointConfigure+0x25c>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 80058cc:	e02a      	b.n	8005924 <XMC_USBD_EndpointConfigure+0x29c>
					data.b.mps = 0x0U;
 80058ce:	893b      	ldrh	r3, [r7, #8]
 80058d0:	f36f 030a 	bfc	r3, #0, #11
 80058d4:	813b      	strh	r3, [r7, #8]
					break;
 80058d6:	e026      	b.n	8005926 <XMC_USBD_EndpointConfigure+0x29e>
					data.b.mps = 0x1U;
 80058d8:	893b      	ldrh	r3, [r7, #8]
 80058da:	2201      	movs	r2, #1
 80058dc:	f362 030a 	bfi	r3, r2, #0, #11
 80058e0:	813b      	strh	r3, [r7, #8]
					break;
 80058e2:	e020      	b.n	8005926 <XMC_USBD_EndpointConfigure+0x29e>
					data.b.mps = 0x2U;
 80058e4:	893b      	ldrh	r3, [r7, #8]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f362 030a 	bfi	r3, r2, #0, #11
 80058ec:	813b      	strh	r3, [r7, #8]
					break;
 80058ee:	e01a      	b.n	8005926 <XMC_USBD_EndpointConfigure+0x29e>
					data.b.mps = 0x3U;
 80058f0:	893b      	ldrh	r3, [r7, #8]
 80058f2:	2203      	movs	r2, #3
 80058f4:	f362 030a 	bfi	r3, r2, #0, #11
 80058f8:	813b      	strh	r3, [r7, #8]
					break;
 80058fa:	e014      	b.n	8005926 <XMC_USBD_EndpointConfigure+0x29e>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 80058fc:	88bb      	ldrh	r3, [r7, #4]
 80058fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005902:	b29a      	uxth	r2, r3
 8005904:	893b      	ldrh	r3, [r7, #8]
 8005906:	f362 030a 	bfi	r3, r2, #0, #11
 800590a:	813b      	strh	r3, [r7, #8]
 800590c:	e00b      	b.n	8005926 <XMC_USBD_EndpointConfigure+0x29e>
 800590e:	bf00      	nop
 8005910:	20000884 	.word	0x20000884
 8005914:	30000700 	.word	0x30000700
 8005918:	30000000 	.word	0x30000000
 800591c:	20000494 	.word	0x20000494
 8005920:	20000478 	.word	0x20000478
					break;
 8005924:	bf00      	nop
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8005926:	7afb      	ldrb	r3, [r7, #11]
 8005928:	f043 0310 	orr.w	r3, r3, #16
 800592c:	72fb      	strb	r3, [r7, #11]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 800592e:	7abb      	ldrb	r3, [r7, #10]
 8005930:	f36f 1345 	bfc	r3, #5, #1
 8005934:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800593e:	b2db      	uxtb	r3, r3
 8005940:	4a0e      	ldr	r2, [pc, #56]	; (800597c <XMC_USBD_EndpointConfigure+0x2f4>)
 8005942:	3370      	adds	r3, #112	; 0x70
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 800594e:	8a7a      	ldrh	r2, [r7, #18]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005958:	b2db      	uxtb	r3, r3
 800595a:	4619      	mov	r1, r3
 800595c:	2301      	movs	r3, #1
 800595e:	408b      	lsls	r3, r1
 8005960:	b29b      	uxth	r3, r3
 8005962:	4313      	orrs	r3, r2
 8005964:	b29b      	uxth	r3, r3
 8005966:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <XMC_USBD_EndpointConfigure+0x2f4>)
 800596a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000884 	.word	0x20000884

08005980 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	2234      	movs	r2, #52	; 0x34
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	4a54      	ldr	r2, [pc, #336]	; (8005ae8 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005998:	4413      	add	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80059a0:	4b51      	ldr	r3, [pc, #324]	; (8005ae8 <XMC_USBD_EndpointUnconfigure+0x168>)
 80059a2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	2301      	movs	r3, #1
 80059b8:	4093      	lsls	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	791b      	ldrb	r3, [r3, #4]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	77fb      	strb	r3, [r7, #31]
 80059ce:	e085      	b.n	8005adc <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 80059d0:	7c7b      	ldrb	r3, [r7, #17]
 80059d2:	f36f 13c7 	bfc	r3, #7, #1
 80059d6:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 80059d8:	7cfb      	ldrb	r3, [r7, #19]
 80059da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059de:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 80059e0:	7cfb      	ldrb	r3, [r7, #19]
 80059e2:	f043 0308 	orr.w	r3, r3, #8
 80059e6:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 80059e8:	7cbb      	ldrb	r3, [r7, #18]
 80059ea:	f36f 1345 	bfc	r3, #5, #1
 80059ee:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	7913      	ldrb	r3, [r2, #4]
 80059f4:	f36f 0382 	bfc	r3, #2, #1
 80059f8:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	7913      	ldrb	r3, [r2, #4]
 80059fe:	f36f 1345 	bfc	r3, #5, #1
 8005a02:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	6853      	ldr	r3, [r2, #4]
 8005a08:	f36f 1304 	bfc	r3, #4, #1
 8005a0c:	6053      	str	r3, [r2, #4]
    ep->inInUse =  0U;
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	6853      	ldr	r3, [r2, #4]
 8005a12:	f36f 03c3 	bfc	r3, #3, #1
 8005a16:	6053      	str	r3, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <XMC_USBD_EndpointUnconfigure+0xb4>
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	791b      	ldrb	r3, [r3, #4]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d112      	bne.n	8005a5a <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005a40:	336a      	adds	r3, #106	; 0x6a
 8005a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8005a4a:	89ba      	ldrh	r2, [r7, #12]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	4013      	ands	r3, r2
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d006      	beq.n	8005a76 <XMC_USBD_EndpointUnconfigure+0xf6>
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	791b      	ldrb	r3, [r3, #4]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d123      	bne.n	8005abe <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005a82:	3370      	adds	r3, #112	; 0x70
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8005a8e:	89fa      	ldrh	r2, [r7, #14]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	4013      	ands	r3, r2
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	81fb      	strh	r3, [r7, #14]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005a9e:	4b13      	ldr	r3, [pc, #76]	; (8005aec <XMC_USBD_EndpointUnconfigure+0x16c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	7b5b      	ldrb	r3, [r3, #13]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10a      	bne.n	8005abe <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8005aa8:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005aaa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005aae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	43da      	mvns	r2, r3
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005ab6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005aba:	400a      	ands	r2, r1
 8005abc:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005ac0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	889b      	ldrh	r3, [r3, #4]
 8005acc:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe fbde 	bl	8004294 <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 8005adc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000884 	.word	0x20000884
 8005aec:	20000880 	.word	0x20000880

08005af0 <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8005af6:	4b08      	ldr	r3, [pc, #32]	; (8005b18 <XMC_USBD_GetFrameNumber+0x28>)
 8005af8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	80fb      	strh	r3, [r7, #6]
  return result;
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	20000884 	.word	0x20000884

08005b1c <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <XMC_USBD_IsEnumDone+0x34>)
 8005b22:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <XMC_USBD_IsEnumDone+0x28>
 8005b30:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <XMC_USBD_IsEnumDone+0x34>)
 8005b32:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005b36:	f003 0304 	and.w	r3, r3, #4
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <XMC_USBD_IsEnumDone+0x28>
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <XMC_USBD_IsEnumDone+0x2a>
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	20000884 	.word	0x20000884

08005b54 <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	81fb      	strh	r3, [r7, #14]

				if (*BytesRem < CurrDescriptorSize)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	89fa      	ldrh	r2, [r7, #14]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d902      	bls.n	8005b76 <USB_GetNextDescriptor+0x22>
				  CurrDescriptorSize = *BytesRem;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	81fb      	strh	r3, [r7, #14]

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	89fb      	ldrh	r3, [r7, #14]
 8005b7e:	4413      	add	r3, r2
 8005b80:	461a      	mov	r2, r3
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	601a      	str	r2, [r3, #0]
				*BytesRem      -= CurrDescriptorSize;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	881a      	ldrh	r2, [r3, #0]
 8005b8a:	89fb      	ldrh	r3, [r7, #14]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	801a      	strh	r2, [r3, #0]
			}
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USB_GetNextDescriptorOfType>:
#endif

void USB_GetNextDescriptorOfType(uint16_t* const BytesRem,
                                 void** const CurrConfigLoc,
                                 const uint8_t Type)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	71fb      	strb	r3, [r7, #7]
    while (*BytesRem)
 8005bae:	e009      	b.n	8005bc4 <USB_GetNextDescriptorOfType+0x24>
    {
        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7ff ffce 	bl	8005b54 <USB_GetNextDescriptor>

        if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	785b      	ldrb	r3, [r3, #1]
 8005bbe:	79fa      	ldrb	r2, [r7, #7]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d004      	beq.n	8005bce <USB_GetNextDescriptorOfType+0x2e>
    while (*BytesRem)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f1      	bne.n	8005bb0 <USB_GetNextDescriptorOfType+0x10>
 8005bcc:	e000      	b.n	8005bd0 <USB_GetNextDescriptorOfType+0x30>
          return;
 8005bce:	bf00      	nop
    }
}
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <USB_GetNextDescriptorOfTypeBefore>:

void USB_GetNextDescriptorOfTypeBefore(uint16_t* const BytesRem,
                                       void** const CurrConfigLoc,
                                       const uint8_t Type,
                                       const uint8_t BeforeType)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	4611      	mov	r1, r2
 8005be2:	461a      	mov	r2, r3
 8005be4:	460b      	mov	r3, r1
 8005be6:	71fb      	strb	r3, [r7, #7]
 8005be8:	4613      	mov	r3, r2
 8005bea:	71bb      	strb	r3, [r7, #6]
    while (*BytesRem)
 8005bec:	e013      	b.n	8005c16 <USB_GetNextDescriptorOfTypeBefore+0x40>
    {
        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff ffaf 	bl	8005b54 <USB_GetNextDescriptor>

        if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	79fa      	ldrb	r2, [r7, #7]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d00e      	beq.n	8005c20 <USB_GetNextDescriptorOfTypeBefore+0x4a>
        {
            return;
        }
        else if (DESCRIPTOR_TYPE(*CurrConfigLoc) == BeforeType)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	79ba      	ldrb	r2, [r7, #6]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d103      	bne.n	8005c16 <USB_GetNextDescriptorOfTypeBefore+0x40>
        {
            *BytesRem = 0;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	801a      	strh	r2, [r3, #0]
            return;
 8005c14:	e005      	b.n	8005c22 <USB_GetNextDescriptorOfTypeBefore+0x4c>
    while (*BytesRem)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e7      	bne.n	8005bee <USB_GetNextDescriptorOfTypeBefore+0x18>
 8005c1e:	e000      	b.n	8005c22 <USB_GetNextDescriptorOfTypeBefore+0x4c>
            return;
 8005c20:	bf00      	nop
        }
    }
}
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USB_GetNextDescriptorOfTypeAfter>:

void USB_GetNextDescriptorOfTypeAfter(uint16_t* const BytesRem,
                                      void** const CurrConfigLoc,
                                      const uint8_t Type,
                                      const uint8_t AfterType)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4611      	mov	r1, r2
 8005c34:	461a      	mov	r2, r3
 8005c36:	460b      	mov	r3, r1
 8005c38:	71fb      	strb	r3, [r7, #7]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	71bb      	strb	r3, [r7, #6]
    USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);
 8005c3e:	79bb      	ldrb	r3, [r7, #6]
 8005c40:	461a      	mov	r2, r3
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f7ff ffab 	bl	8005ba0 <USB_GetNextDescriptorOfType>

    if (*BytesRem)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <USB_GetNextDescriptorOfTypeAfter+0x36>
      USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	461a      	mov	r2, r3
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff ffa1 	bl	8005ba0 <USB_GetNextDescriptorOfType>
}
 8005c5e:	bf00      	nop
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
    uint8_t ErrorCode;

    while (*BytesRem)
 8005c72:	e01e      	b.n	8005cb2 <USB_GetNextDescriptorComp+0x4c>
    {
        uint8_t* PrevDescLoc  = *CurrConfigLoc;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	617b      	str	r3, [r7, #20]
        uint16_t PrevBytesRem = *BytesRem;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	827b      	strh	r3, [r7, #18]

        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7ff ff66 	bl	8005b54 <USB_GetNextDescriptor>

        if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4798      	blx	r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	747b      	strb	r3, [r7, #17]
 8005c96:	7c7b      	ldrb	r3, [r7, #17]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d00a      	beq.n	8005cb2 <USB_GetNextDescriptorComp+0x4c>
        {
            if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
 8005c9c:	7c7b      	ldrb	r3, [r7, #17]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d105      	bne.n	8005cae <USB_GetNextDescriptorComp+0x48>
            {
                *CurrConfigLoc = PrevDescLoc;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	601a      	str	r2, [r3, #0]
                *BytesRem      = PrevBytesRem;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8a7a      	ldrh	r2, [r7, #18]
 8005cac:	801a      	strh	r2, [r3, #0]
            }

            return ErrorCode;
 8005cae:	7c7b      	ldrb	r3, [r7, #17]
 8005cb0:	e004      	b.n	8005cbc <USB_GetNextDescriptorComp+0x56>
    while (*BytesRem)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1dc      	bne.n	8005c74 <USB_GetNextDescriptorComp+0xe>
        }
    }

    return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
 8005cba:	2302      	movs	r3, #2
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
 8005cc8:	f000 f802 	bl	8005cd0 <USB_DeviceTask>
	#endif
}
 8005ccc:	bf00      	nop
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USB_DeviceTask>:

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 8005cd6:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <USB_DeviceTask+0x7c>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d031      	beq.n	8005d44 <USB_DeviceTask+0x74>
		return device.CurrentDirection | device.CurrentEndpoint;
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <USB_DeviceTask+0x80>)
 8005ce2:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8005ce6:	4b1a      	ldr	r3, [pc, #104]	; (8005d50 <USB_DeviceTask+0x80>)
 8005ce8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005cec:	4313      	orrs	r3, r2
 8005cee:	b2db      	uxtb	r3, r3
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
 8005cf0:	71fb      	strb	r3, [r7, #7]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4b16      	ldr	r3, [pc, #88]	; (8005d50 <USB_DeviceTask+0x80>)
 8005cf6:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <USB_DeviceTask+0x80>)
 8005cfe:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 8005d02:	bf00      	nop
		return device.IsSetupRecieved;
 8005d04:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <USB_DeviceTask+0x80>)
 8005d06:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8005d0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bf14      	ite	ne
 8005d14:	2301      	movne	r3, #1
 8005d16:	2300      	moveq	r3, #0
 8005d18:	b2db      	uxtb	r3, r3

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <USB_DeviceTask+0x52>
	  USB_Device_ProcessControlRequest();
 8005d1e:	f7fd fbc1 	bl	80034a4 <USB_Device_ProcessControlRequest>
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	71bb      	strb	r3, [r7, #6]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8005d26:	79bb      	ldrb	r3, [r7, #6]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <USB_DeviceTask+0x80>)
 8005d30:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8005d34:	79bb      	ldrb	r3, [r7, #6]
 8005d36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <USB_DeviceTask+0x80>)
 8005d3e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 8005d42:	e000      	b.n	8005d46 <USB_DeviceTask+0x76>
	  return;
 8005d44:	bf00      	nop

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20000a8d 	.word	0x20000a8d
 8005d50:	20000740 	.word	0x20000740

08005d54 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0

}
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e003      	b.n	8005d78 <delay+0x16>
  {
    __NOP();
 8005d70:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d8f7      	bhi.n	8005d70 <delay+0xe>
  }
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8005d90:	b598      	push	{r3, r4, r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8005d94:	4a06      	ldr	r2, [pc, #24]	; (8005db0 <SystemInit+0x20>)
 8005d96:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005d9a:	4614      	mov	r4, r2
 8005d9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8005da2:	f000 f807 	bl	8005db4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8005da6:	f7fa fb41 	bl	800042c <SystemCoreClockSetup>
}
 8005daa:	bf00      	nop
 8005dac:	bd98      	pop	{r3, r4, r7, pc}
 8005dae:	bf00      	nop
 8005db0:	2000ffc4 	.word	0x2000ffc4

08005db4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005dba:	b672      	cpsid	i
}
 8005dbc:	bf00      	nop
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8005dbe:	4b18      	ldr	r3, [pc, #96]	; (8005e20 <SystemCoreSetup+0x6c>)
 8005dc0:	4a18      	ldr	r2, [pc, #96]	; (8005e24 <SystemCoreSetup+0x70>)
 8005dc2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dc4:	f3bf 8f4f 	dsb	sy
}
 8005dc8:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8005dca:	b662      	cpsie	i
}
 8005dcc:	bf00      	nop
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8005dce:	4b14      	ldr	r3, [pc, #80]	; (8005e20 <SystemCoreSetup+0x6c>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd4:	4a12      	ldr	r2, [pc, #72]	; (8005e20 <SystemCoreSetup+0x6c>)
 8005dd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8005dde:	4b10      	ldr	r3, [pc, #64]	; (8005e20 <SystemCoreSetup+0x6c>)
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <SystemCoreSetup+0x6c>)
 8005de4:	f023 0308 	bic.w	r3, r3, #8
 8005de8:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8005dea:	4b0f      	ldr	r3, [pc, #60]	; (8005e28 <SystemCoreSetup+0x74>)
 8005dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df0:	3314      	adds	r3, #20
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f023 030f 	bic.w	r3, r3, #15
 8005dfc:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f043 0303 	orr.w	r3, r3, #3
 8005e04:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8005e06:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <SystemCoreSetup+0x74>)
 8005e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0c:	3314      	adds	r3, #20
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	601a      	str	r2, [r3, #0]
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000ed00 	.word	0xe000ed00
 8005e24:	08000000 	.word	0x08000000
 8005e28:	58001000 	.word	0x58001000

__WEAK void SystemCoreClockSetup(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8005e30:	4b75      	ldr	r3, [pc, #468]	; (8006008 <SystemCoreSetup+0x254>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10c      	bne.n	8005e56 <SystemCoreSetup+0xa2>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8005e3c:	4b72      	ldr	r3, [pc, #456]	; (8006008 <SystemCoreSetup+0x254>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	4a71      	ldr	r2, [pc, #452]	; (8006008 <SystemCoreSetup+0x254>)
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8005e48:	bf00      	nop
 8005e4a:	4b6f      	ldr	r3, [pc, #444]	; (8006008 <SystemCoreSetup+0x254>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f9      	beq.n	8005e4a <SystemCoreSetup+0x96>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8005e56:	4b6d      	ldr	r3, [pc, #436]	; (800600c <SystemCoreSetup+0x258>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <SystemCoreSetup+0xc2>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8005e62:	4b6a      	ldr	r3, [pc, #424]	; (800600c <SystemCoreSetup+0x258>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	4a69      	ldr	r2, [pc, #420]	; (800600c <SystemCoreSetup+0x258>)
 8005e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e6c:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8005e6e:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8005e72:	f7ff ff76 	bl	8005d62 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8005e76:	4b66      	ldr	r3, [pc, #408]	; (8006010 <SystemCoreSetup+0x25c>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	4a65      	ldr	r2, [pc, #404]	; (8006010 <SystemCoreSetup+0x25c>)
 8005e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e80:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8005e82:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005e86:	f7ff ff6c 	bl	8005d62 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8005e8a:	4b61      	ldr	r3, [pc, #388]	; (8006010 <SystemCoreSetup+0x25c>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4a60      	ldr	r2, [pc, #384]	; (8006010 <SystemCoreSetup+0x25c>)
 8005e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e94:	f023 0302 	bic.w	r3, r3, #2
 8005e98:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8005e9a:	4b5e      	ldr	r3, [pc, #376]	; (8006014 <SystemCoreSetup+0x260>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d029      	beq.n	8005efa <SystemCoreSetup+0x146>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8005ea6:	4b5b      	ldr	r3, [pc, #364]	; (8006014 <SystemCoreSetup+0x260>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	4a5a      	ldr	r2, [pc, #360]	; (8006014 <SystemCoreSetup+0x260>)
 8005eac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005eb0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005eb4:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8005eb6:	f000 f927 	bl	8006108 <OSCHP_GetFrequency>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	4a56      	ldr	r2, [pc, #344]	; (8006018 <SystemCoreSetup+0x264>)
 8005ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec2:	0d1b      	lsrs	r3, r3, #20
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	041a      	lsls	r2, r3, #16
 8005ec8:	4b52      	ldr	r3, [pc, #328]	; (8006014 <SystemCoreSetup+0x260>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4951      	ldr	r1, [pc, #324]	; (8006014 <SystemCoreSetup+0x260>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8005ed2:	4b4f      	ldr	r3, [pc, #316]	; (8006010 <SystemCoreSetup+0x25c>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	4a4e      	ldr	r2, [pc, #312]	; (8006010 <SystemCoreSetup+0x25c>)
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8005ede:	4b4c      	ldr	r3, [pc, #304]	; (8006010 <SystemCoreSetup+0x25c>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4a4b      	ldr	r2, [pc, #300]	; (8006010 <SystemCoreSetup+0x25c>)
 8005ee4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ee8:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8005eea:	bf00      	nop
 8005eec:	4b48      	ldr	r3, [pc, #288]	; (8006010 <SystemCoreSetup+0x25c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8005ef4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8005ef8:	d1f8      	bne.n	8005eec <SystemCoreSetup+0x138>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005efa:	4b45      	ldr	r3, [pc, #276]	; (8006010 <SystemCoreSetup+0x25c>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	4a44      	ldr	r2, [pc, #272]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8005f06:	4b42      	ldr	r3, [pc, #264]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	4a41      	ldr	r2, [pc, #260]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f0c:	f043 0310 	orr.w	r3, r3, #16
 8005f10:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005f12:	4b3f      	ldr	r3, [pc, #252]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f14:	4a41      	ldr	r2, [pc, #260]	; (800601c <SystemCoreSetup+0x268>)
 8005f16:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8005f18:	4b3d      	ldr	r3, [pc, #244]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	4a3c      	ldr	r2, [pc, #240]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f22:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8005f24:	4b3a      	ldr	r3, [pc, #232]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4a39      	ldr	r2, [pc, #228]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f2a:	f023 0310 	bic.w	r3, r3, #16
 8005f2e:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8005f30:	4b37      	ldr	r3, [pc, #220]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	4a36      	ldr	r2, [pc, #216]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f3a:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8005f3c:	bf00      	nop
 8005f3e:	4b34      	ldr	r3, [pc, #208]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0f9      	beq.n	8005f3e <SystemCoreSetup+0x18a>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005f4a:	4b31      	ldr	r3, [pc, #196]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4a30      	ldr	r2, [pc, #192]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8005f56:	bf00      	nop
 8005f58:	4b2d      	ldr	r3, [pc, #180]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f9      	bne.n	8005f58 <SystemCoreSetup+0x1a4>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8005f64:	4b2e      	ldr	r3, [pc, #184]	; (8006020 <SystemCoreSetup+0x26c>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	4a2d      	ldr	r2, [pc, #180]	; (8006020 <SystemCoreSetup+0x26c>)
 8005f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f6e:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8005f70:	4b2b      	ldr	r3, [pc, #172]	; (8006020 <SystemCoreSetup+0x26c>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8005f76:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <SystemCoreSetup+0x26c>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8005f7c:	4b28      	ldr	r3, [pc, #160]	; (8006020 <SystemCoreSetup+0x26c>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8005f82:	4b27      	ldr	r3, [pc, #156]	; (8006020 <SystemCoreSetup+0x26c>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <SystemCoreSetup+0x26c>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8005f8e:	4b24      	ldr	r3, [pc, #144]	; (8006020 <SystemCoreSetup+0x26c>)
 8005f90:	2203      	movs	r2, #3
 8005f92:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8005f94:	4b1e      	ldr	r3, [pc, #120]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a1d      	ldr	r2, [pc, #116]	; (8006010 <SystemCoreSetup+0x25c>)
 8005f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9e:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005fa0:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <SystemCoreSetup+0x25c>)
 8005fa2:	4a20      	ldr	r2, [pc, #128]	; (8006024 <SystemCoreSetup+0x270>)
 8005fa4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8005fa6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005faa:	f7ff feda 	bl	8005d62 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8005fae:	bf00      	nop
 8005fb0:	4b17      	ldr	r3, [pc, #92]	; (8006010 <SystemCoreSetup+0x25c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0f9      	beq.n	8005fb0 <SystemCoreSetup+0x1fc>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005fbc:	4b14      	ldr	r3, [pc, #80]	; (8006010 <SystemCoreSetup+0x25c>)
 8005fbe:	4a1a      	ldr	r2, [pc, #104]	; (8006028 <SystemCoreSetup+0x274>)
 8005fc0:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8005fc2:	f241 1094 	movw	r0, #4500	; 0x1194
 8005fc6:	f7ff fecc 	bl	8005d62 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8005fca:	bf00      	nop
 8005fcc:	4b10      	ldr	r3, [pc, #64]	; (8006010 <SystemCoreSetup+0x25c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0f9      	beq.n	8005fcc <SystemCoreSetup+0x218>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <SystemCoreSetup+0x25c>)
 8005fda:	4a14      	ldr	r2, [pc, #80]	; (800602c <SystemCoreSetup+0x278>)
 8005fdc:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8005fde:	f241 7070 	movw	r0, #6000	; 0x1770
 8005fe2:	f7ff febe 	bl	8005d62 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8005fe6:	bf00      	nop
 8005fe8:	4b09      	ldr	r3, [pc, #36]	; (8006010 <SystemCoreSetup+0x25c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f9      	beq.n	8005fe8 <SystemCoreSetup+0x234>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8005ff4:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <SystemCoreSetup+0x27c>)
 8005ff6:	2205      	movs	r2, #5
 8005ff8:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <SystemCoreSetup+0x26c>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8006000:	f000 f818 	bl	8006034 <SystemCoreClockUpdate>
}
 8006004:	bf00      	nop
 8006006:	bd80      	pop	{r7, pc}
 8006008:	50004200 	.word	0x50004200
 800600c:	50004400 	.word	0x50004400
 8006010:	50004710 	.word	0x50004710
 8006014:	50004700 	.word	0x50004700
 8006018:	6b5fca6b 	.word	0x6b5fca6b
 800601c:	01134f00 	.word	0x01134f00
 8006020:	50004600 	.word	0x50004600
 8006024:	01074f00 	.word	0x01074f00
 8006028:	01044f00 	.word	0x01044f00
 800602c:	01034f00 	.word	0x01034f00
 8006030:	50004160 	.word	0x50004160

08006034 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800603a:	4b2f      	ldr	r3, [pc, #188]	; (80060f8 <SystemCoreClockUpdate+0xc4>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d03e      	beq.n	80060c4 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8006046:	4b2d      	ldr	r3, [pc, #180]	; (80060fc <SystemCoreClockUpdate+0xc8>)
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8006052:	4b2b      	ldr	r3, [pc, #172]	; (8006100 <SystemCoreClockUpdate+0xcc>)
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	e002      	b.n	800605e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8006058:	f000 f856 	bl	8006108 <OSCHP_GetFrequency>
 800605c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800605e:	4b27      	ldr	r3, [pc, #156]	; (80060fc <SystemCoreClockUpdate+0xc8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	d020      	beq.n	80060ac <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800606a:	4b24      	ldr	r3, [pc, #144]	; (80060fc <SystemCoreClockUpdate+0xc8>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	0e1b      	lsrs	r3, r3, #24
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	3301      	adds	r3, #1
 8006076:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8006078:	4b20      	ldr	r3, [pc, #128]	; (80060fc <SystemCoreClockUpdate+0xc8>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	0a1b      	lsrs	r3, r3, #8
 800607e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006082:	3301      	adds	r3, #1
 8006084:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8006086:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <SystemCoreClockUpdate+0xc8>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	0c1b      	lsrs	r3, r3, #16
 800608c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006090:	3301      	adds	r3, #1
 8006092:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	fb02 f303 	mul.w	r3, r2, r3
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	fbb2 f2f3 	udiv	r2, r2, r3
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	fb02 f303 	mul.w	r3, r2, r3
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e00d      	b.n	80060c8 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80060ac:	4b13      	ldr	r3, [pc, #76]	; (80060fc <SystemCoreClockUpdate+0xc8>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b4:	3301      	adds	r3, #1
 80060b6:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	e001      	b.n	80060c8 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80060c4:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <SystemCoreClockUpdate+0xcc>)
 80060c6:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80060c8:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <SystemCoreClockUpdate+0xc4>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	3301      	adds	r3, #1
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d6:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80060d8:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <SystemCoreClockUpdate+0xc4>)
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	3301      	adds	r3, #1
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e8:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80060ea:	4a06      	ldr	r2, [pc, #24]	; (8006104 <SystemCoreClockUpdate+0xd0>)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6013      	str	r3, [r2, #0]
}
 80060f0:	bf00      	nop
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	50004600 	.word	0x50004600
 80060fc:	50004710 	.word	0x50004710
 8006100:	016e3600 	.word	0x016e3600
 8006104:	2000ffc0 	.word	0x2000ffc0

08006108 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 800610c:	4b02      	ldr	r3, [pc, #8]	; (8006118 <OSCHP_GetFrequency+0x10>)
}
 800610e:	4618      	mov	r0, r3
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	00b71b00 	.word	0x00b71b00

0800611c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8006124:	4b14      	ldr	r3, [pc, #80]	; (8006178 <_sbrk+0x5c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 800612c:	4b12      	ldr	r3, [pc, #72]	; (8006178 <_sbrk+0x5c>)
 800612e:	4a13      	ldr	r2, [pc, #76]	; (800617c <_sbrk+0x60>)
 8006130:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8006132:	4b11      	ldr	r3, [pc, #68]	; (8006178 <_sbrk+0x5c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3303      	adds	r3, #3
 800613c:	f023 0303 	bic.w	r3, r3, #3
 8006140:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <_sbrk+0x5c>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	4a0d      	ldr	r2, [pc, #52]	; (8006180 <_sbrk+0x64>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d207      	bcs.n	8006160 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8006150:	4b09      	ldr	r3, [pc, #36]	; (8006178 <_sbrk+0x5c>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4413      	add	r3, r2
 8006158:	4a07      	ldr	r2, [pc, #28]	; (8006178 <_sbrk+0x5c>)
 800615a:	6013      	str	r3, [r2, #0]
    return (base);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	e006      	b.n	800616e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8006160:	f000 f818 	bl	8006194 <__errno>
 8006164:	4603      	mov	r3, r0
 8006166:	220c      	movs	r2, #12
 8006168:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
 800616a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	200004b4 	.word	0x200004b4
 800617c:	20000a98 	.word	0x20000a98
 8006180:	2000ffc0 	.word	0x2000ffc0

08006184 <_init>:

/* Init */
void _init(void)
{}
 8006184:	b480      	push	{r7}
 8006186:	af00      	add	r7, sp, #0
 8006188:	bf00      	nop
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
	...

08006194 <__errno>:
 8006194:	4b01      	ldr	r3, [pc, #4]	; (800619c <__errno+0x8>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	20000038 	.word	0x20000038

080061a0 <__libc_init_array>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	4e0d      	ldr	r6, [pc, #52]	; (80061d8 <__libc_init_array+0x38>)
 80061a4:	4d0d      	ldr	r5, [pc, #52]	; (80061dc <__libc_init_array+0x3c>)
 80061a6:	1b76      	subs	r6, r6, r5
 80061a8:	10b6      	asrs	r6, r6, #2
 80061aa:	d006      	beq.n	80061ba <__libc_init_array+0x1a>
 80061ac:	2400      	movs	r4, #0
 80061ae:	3401      	adds	r4, #1
 80061b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b4:	4798      	blx	r3
 80061b6:	42a6      	cmp	r6, r4
 80061b8:	d1f9      	bne.n	80061ae <__libc_init_array+0xe>
 80061ba:	4e09      	ldr	r6, [pc, #36]	; (80061e0 <__libc_init_array+0x40>)
 80061bc:	4d09      	ldr	r5, [pc, #36]	; (80061e4 <__libc_init_array+0x44>)
 80061be:	1b76      	subs	r6, r6, r5
 80061c0:	f7ff ffe0 	bl	8006184 <_init>
 80061c4:	10b6      	asrs	r6, r6, #2
 80061c6:	d006      	beq.n	80061d6 <__libc_init_array+0x36>
 80061c8:	2400      	movs	r4, #0
 80061ca:	3401      	adds	r4, #1
 80061cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d0:	4798      	blx	r3
 80061d2:	42a6      	cmp	r6, r4
 80061d4:	d1f9      	bne.n	80061ca <__libc_init_array+0x2a>
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	20000468 	.word	0x20000468
 80061dc:	20000468 	.word	0x20000468
 80061e0:	20000468 	.word	0x20000468
 80061e4:	20000468 	.word	0x20000468

080061e8 <memcmp>:
 80061e8:	2a03      	cmp	r2, #3
 80061ea:	b470      	push	{r4, r5, r6}
 80061ec:	d912      	bls.n	8006214 <memcmp+0x2c>
 80061ee:	ea40 0501 	orr.w	r5, r0, r1
 80061f2:	07ad      	lsls	r5, r5, #30
 80061f4:	4604      	mov	r4, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	d120      	bne.n	800623c <memcmp+0x54>
 80061fa:	4619      	mov	r1, r3
 80061fc:	4620      	mov	r0, r4
 80061fe:	f853 5b04 	ldr.w	r5, [r3], #4
 8006202:	f854 6b04 	ldr.w	r6, [r4], #4
 8006206:	42ae      	cmp	r6, r5
 8006208:	d118      	bne.n	800623c <memcmp+0x54>
 800620a:	3a04      	subs	r2, #4
 800620c:	2a03      	cmp	r2, #3
 800620e:	4620      	mov	r0, r4
 8006210:	4619      	mov	r1, r3
 8006212:	d8f2      	bhi.n	80061fa <memcmp+0x12>
 8006214:	1e54      	subs	r4, r2, #1
 8006216:	b172      	cbz	r2, 8006236 <memcmp+0x4e>
 8006218:	7803      	ldrb	r3, [r0, #0]
 800621a:	780a      	ldrb	r2, [r1, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	bf08      	it	eq
 8006220:	1824      	addeq	r4, r4, r0
 8006222:	d006      	beq.n	8006232 <memcmp+0x4a>
 8006224:	e00c      	b.n	8006240 <memcmp+0x58>
 8006226:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800622a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800622e:	4293      	cmp	r3, r2
 8006230:	d106      	bne.n	8006240 <memcmp+0x58>
 8006232:	42a0      	cmp	r0, r4
 8006234:	d1f7      	bne.n	8006226 <memcmp+0x3e>
 8006236:	2000      	movs	r0, #0
 8006238:	bc70      	pop	{r4, r5, r6}
 800623a:	4770      	bx	lr
 800623c:	1e54      	subs	r4, r2, #1
 800623e:	e7eb      	b.n	8006218 <memcmp+0x30>
 8006240:	1a98      	subs	r0, r3, r2
 8006242:	bc70      	pop	{r4, r5, r6}
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop

08006248 <memcpy>:
 8006248:	4684      	mov	ip, r0
 800624a:	ea41 0300 	orr.w	r3, r1, r0
 800624e:	f013 0303 	ands.w	r3, r3, #3
 8006252:	d16d      	bne.n	8006330 <memcpy+0xe8>
 8006254:	3a40      	subs	r2, #64	; 0x40
 8006256:	d341      	bcc.n	80062dc <memcpy+0x94>
 8006258:	f851 3b04 	ldr.w	r3, [r1], #4
 800625c:	f840 3b04 	str.w	r3, [r0], #4
 8006260:	f851 3b04 	ldr.w	r3, [r1], #4
 8006264:	f840 3b04 	str.w	r3, [r0], #4
 8006268:	f851 3b04 	ldr.w	r3, [r1], #4
 800626c:	f840 3b04 	str.w	r3, [r0], #4
 8006270:	f851 3b04 	ldr.w	r3, [r1], #4
 8006274:	f840 3b04 	str.w	r3, [r0], #4
 8006278:	f851 3b04 	ldr.w	r3, [r1], #4
 800627c:	f840 3b04 	str.w	r3, [r0], #4
 8006280:	f851 3b04 	ldr.w	r3, [r1], #4
 8006284:	f840 3b04 	str.w	r3, [r0], #4
 8006288:	f851 3b04 	ldr.w	r3, [r1], #4
 800628c:	f840 3b04 	str.w	r3, [r0], #4
 8006290:	f851 3b04 	ldr.w	r3, [r1], #4
 8006294:	f840 3b04 	str.w	r3, [r0], #4
 8006298:	f851 3b04 	ldr.w	r3, [r1], #4
 800629c:	f840 3b04 	str.w	r3, [r0], #4
 80062a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80062a4:	f840 3b04 	str.w	r3, [r0], #4
 80062a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80062ac:	f840 3b04 	str.w	r3, [r0], #4
 80062b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80062b4:	f840 3b04 	str.w	r3, [r0], #4
 80062b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80062bc:	f840 3b04 	str.w	r3, [r0], #4
 80062c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80062c4:	f840 3b04 	str.w	r3, [r0], #4
 80062c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80062cc:	f840 3b04 	str.w	r3, [r0], #4
 80062d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80062d4:	f840 3b04 	str.w	r3, [r0], #4
 80062d8:	3a40      	subs	r2, #64	; 0x40
 80062da:	d2bd      	bcs.n	8006258 <memcpy+0x10>
 80062dc:	3230      	adds	r2, #48	; 0x30
 80062de:	d311      	bcc.n	8006304 <memcpy+0xbc>
 80062e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80062e4:	f840 3b04 	str.w	r3, [r0], #4
 80062e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80062ec:	f840 3b04 	str.w	r3, [r0], #4
 80062f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80062f4:	f840 3b04 	str.w	r3, [r0], #4
 80062f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80062fc:	f840 3b04 	str.w	r3, [r0], #4
 8006300:	3a10      	subs	r2, #16
 8006302:	d2ed      	bcs.n	80062e0 <memcpy+0x98>
 8006304:	320c      	adds	r2, #12
 8006306:	d305      	bcc.n	8006314 <memcpy+0xcc>
 8006308:	f851 3b04 	ldr.w	r3, [r1], #4
 800630c:	f840 3b04 	str.w	r3, [r0], #4
 8006310:	3a04      	subs	r2, #4
 8006312:	d2f9      	bcs.n	8006308 <memcpy+0xc0>
 8006314:	3204      	adds	r2, #4
 8006316:	d008      	beq.n	800632a <memcpy+0xe2>
 8006318:	07d2      	lsls	r2, r2, #31
 800631a:	bf1c      	itt	ne
 800631c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8006320:	f800 3b01 	strbne.w	r3, [r0], #1
 8006324:	d301      	bcc.n	800632a <memcpy+0xe2>
 8006326:	880b      	ldrh	r3, [r1, #0]
 8006328:	8003      	strh	r3, [r0, #0]
 800632a:	4660      	mov	r0, ip
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	2a08      	cmp	r2, #8
 8006332:	d313      	bcc.n	800635c <memcpy+0x114>
 8006334:	078b      	lsls	r3, r1, #30
 8006336:	d08d      	beq.n	8006254 <memcpy+0xc>
 8006338:	f010 0303 	ands.w	r3, r0, #3
 800633c:	d08a      	beq.n	8006254 <memcpy+0xc>
 800633e:	f1c3 0304 	rsb	r3, r3, #4
 8006342:	1ad2      	subs	r2, r2, r3
 8006344:	07db      	lsls	r3, r3, #31
 8006346:	bf1c      	itt	ne
 8006348:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800634c:	f800 3b01 	strbne.w	r3, [r0], #1
 8006350:	d380      	bcc.n	8006254 <memcpy+0xc>
 8006352:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006356:	f820 3b02 	strh.w	r3, [r0], #2
 800635a:	e77b      	b.n	8006254 <memcpy+0xc>
 800635c:	3a04      	subs	r2, #4
 800635e:	d3d9      	bcc.n	8006314 <memcpy+0xcc>
 8006360:	3a01      	subs	r2, #1
 8006362:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006366:	f800 3b01 	strb.w	r3, [r0], #1
 800636a:	d2f9      	bcs.n	8006360 <memcpy+0x118>
 800636c:	780b      	ldrb	r3, [r1, #0]
 800636e:	7003      	strb	r3, [r0, #0]
 8006370:	784b      	ldrb	r3, [r1, #1]
 8006372:	7043      	strb	r3, [r0, #1]
 8006374:	788b      	ldrb	r3, [r1, #2]
 8006376:	7083      	strb	r3, [r0, #2]
 8006378:	4660      	mov	r0, ip
 800637a:	4770      	bx	lr

0800637c <memset>:
 800637c:	b4f0      	push	{r4, r5, r6, r7}
 800637e:	0786      	lsls	r6, r0, #30
 8006380:	d046      	beq.n	8006410 <memset+0x94>
 8006382:	1e54      	subs	r4, r2, #1
 8006384:	2a00      	cmp	r2, #0
 8006386:	d03c      	beq.n	8006402 <memset+0x86>
 8006388:	b2ca      	uxtb	r2, r1
 800638a:	4603      	mov	r3, r0
 800638c:	e002      	b.n	8006394 <memset+0x18>
 800638e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8006392:	d336      	bcc.n	8006402 <memset+0x86>
 8006394:	f803 2b01 	strb.w	r2, [r3], #1
 8006398:	079d      	lsls	r5, r3, #30
 800639a:	d1f8      	bne.n	800638e <memset+0x12>
 800639c:	2c03      	cmp	r4, #3
 800639e:	d929      	bls.n	80063f4 <memset+0x78>
 80063a0:	b2cd      	uxtb	r5, r1
 80063a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80063a6:	2c0f      	cmp	r4, #15
 80063a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80063ac:	d933      	bls.n	8006416 <memset+0x9a>
 80063ae:	f1a4 0610 	sub.w	r6, r4, #16
 80063b2:	0936      	lsrs	r6, r6, #4
 80063b4:	f103 0720 	add.w	r7, r3, #32
 80063b8:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 80063bc:	f103 0210 	add.w	r2, r3, #16
 80063c0:	e942 5504 	strd	r5, r5, [r2, #-16]
 80063c4:	e942 5502 	strd	r5, r5, [r2, #-8]
 80063c8:	3210      	adds	r2, #16
 80063ca:	42ba      	cmp	r2, r7
 80063cc:	d1f8      	bne.n	80063c0 <memset+0x44>
 80063ce:	1c72      	adds	r2, r6, #1
 80063d0:	f014 0f0c 	tst.w	r4, #12
 80063d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80063d8:	f004 060f 	and.w	r6, r4, #15
 80063dc:	d013      	beq.n	8006406 <memset+0x8a>
 80063de:	1f33      	subs	r3, r6, #4
 80063e0:	f023 0303 	bic.w	r3, r3, #3
 80063e4:	3304      	adds	r3, #4
 80063e6:	4413      	add	r3, r2
 80063e8:	f842 5b04 	str.w	r5, [r2], #4
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d1fb      	bne.n	80063e8 <memset+0x6c>
 80063f0:	f006 0403 	and.w	r4, r6, #3
 80063f4:	b12c      	cbz	r4, 8006402 <memset+0x86>
 80063f6:	b2c9      	uxtb	r1, r1
 80063f8:	441c      	add	r4, r3
 80063fa:	f803 1b01 	strb.w	r1, [r3], #1
 80063fe:	429c      	cmp	r4, r3
 8006400:	d1fb      	bne.n	80063fa <memset+0x7e>
 8006402:	bcf0      	pop	{r4, r5, r6, r7}
 8006404:	4770      	bx	lr
 8006406:	4634      	mov	r4, r6
 8006408:	4613      	mov	r3, r2
 800640a:	2c00      	cmp	r4, #0
 800640c:	d1f3      	bne.n	80063f6 <memset+0x7a>
 800640e:	e7f8      	b.n	8006402 <memset+0x86>
 8006410:	4614      	mov	r4, r2
 8006412:	4603      	mov	r3, r0
 8006414:	e7c2      	b.n	800639c <memset+0x20>
 8006416:	461a      	mov	r2, r3
 8006418:	4626      	mov	r6, r4
 800641a:	e7e0      	b.n	80063de <memset+0x62>

0800641c <clock_config>:
 800641c:	0250 0104 0000 0001 0000 0000 0000 0001     P...............
 800642c:	0101 0101                                   ....

08006430 <KeyboardReport>:
 8006430:	0105 0609 01a1 0705 e019 e729 0015 0125     ..........)...%.
 8006440:	0175 0895 0281 0195 0875 0181 0805 0119     u.......u.......
 8006450:	0529 0595 0175 0291 0195 0375 0191 0015     )...u.....u.....
 8006460:	ff25 0705 0019 ff29 0695 0875 0081 00c0     %.....)...u.....

08006470 <DeviceDescriptor>:
 8006470:	0112 0110 0000 4000 03eb 2042 0001 0201     .......@..B ....
 8006480:	0100 0000                                   ....

08006484 <ConfigurationDescriptor>:
 8006484:	0209 0022 0101 c000 0932 0004 0100 0103     ..".....2.......
 8006494:	0001 2109 0111 0100 3f22 0700 8105 0803     ...!...."?......
 80064a4:	0100 0000                                   ....

080064a8 <LanguageString>:
 80064a8:	0304 0409 0000 0000                         ........

080064b0 <ManufacturerString>:
 80064b0:	0350 004d 0000 0061 0000 006e 0000 0075     P.M...a...n...u.
 80064c0:	0000 0066 0000 0061 0000 0063 0000 0074     ..f...a...c...t.
 80064d0:	0000 0075 0000 0072 0000 0065 0000 0072     ..u...r...e...r.
 80064e0:	0000 0020 0000 0053 0000 0074 0000 0072     .. ...S...t...r.
 80064f0:	0000 0069 0000 006e 0000 0067 0000 0000     ..i...n...g.....
 8006500:	0000 0000                                   ....

08006504 <ProductString>:
 8006504:	0348 0044 0000 0065 0000 0073 0000 0063     H.D...e...s...c.
 8006514:	0000 0072 0000 0069 0000 0070 0000 0074     ..r...i...p...t.
 8006524:	0000 006f 0000 0072 0000 0020 0000 0053     ..o...r... ...S.
 8006534:	0000 0074 0000 0072 0000 0069 0000 006e     ..t...r...i...n.
 8006544:	0000 0067 0000 0000 0000 0000               ..g.........

08006550 <Driver_USBD0>:
 8006550:	4f19 0800 4f81 0800 51bd 0800 51f9 0800     .O...O...Q...Q..
 8006560:	522d 0800 5261 0800 5469 0800 5689 0800     -R..aR..iT...V..
 8006570:	5981 0800 54b5 0800 52c5 0800 534d 0800     .Y...T...R..MS..
 8006580:	53c5 0800 5601 0800 5af1 0800 5b1d 0800     .S...V...Z...[..

08006590 <_global_impure_ptr>:
 8006590:	0040 2000                                   @.. 
