
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fdc  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00023ed0  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00023ed0  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00023ed0  2**0
                  CONTENTS
  5 .data         00003ed0  20000000  0c000fdc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000208  20003ed0  0c004eac  00023ed0  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00023ed0  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  00023ed0  2**0
                  CONTENTS
 10 .debug_aranges 000001f0  00000000  00000000  00023ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   000071fa  00000000  00000000  000240c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001356  00000000  00000000  0002b2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00001fe4  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  0000043c  00000000  00000000  0002e5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00076a5c  00000000  00000000  0002ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00000872  00000000  00000000  000a548c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000000f8  00000000  00000000  000a5cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .build_attributes 000001f2  00000000  00000000  000a5df6  2**0
                  CONTENTS, READONLY
 19 .debug_macro  00018e9a  00000000  00000000  000a5fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	91 04 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c000fdc 	.word	0x0c000fdc
 800024c:	20000000 	.word	0x20000000
 8000250:	00003ed0 	.word	0x00003ed0
 8000254:	0c004eac 	.word	0x0c004eac
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c000fdc 	.word	0x0c000fdc
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c000fdc 	.word	0x0c000fdc
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20003ed0 	.word	0x20003ed0
 800027c:	00000208 	.word	0x00000208
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	08000a59 	.word	0x08000a59
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	08000e69 	.word	0x08000e69
    ldr  r0, =main
 80002ac:	080002d9 	.word	0x080002d9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>

080002b2 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b083      	sub	sp, #12
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	460b      	mov	r3, r1
 80002bc:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80002be:	78fb      	ldrb	r3, [r7, #3]
 80002c0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80002c4:	409a      	lsls	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	605a      	str	r2, [r3, #4]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
	...

080002d8 <main>:
#include "partB.h"

int main(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 
  char* p = NULL;
 80002de:	2300      	movs	r3, #0
 80002e0:	603b      	str	r3, [r7, #0]
  DelayInit();
 80002e2:	f000 f8e7 	bl	80004b4 <DelayInit>
  XMC_GPIO_Init(XMC_GPIO_PORT1, 1, &LED_config);
 80002e6:	4a2c      	ldr	r2, [pc, #176]	; (8000398 <main+0xc0>)
 80002e8:	2101      	movs	r1, #1
 80002ea:	482c      	ldr	r0, [pc, #176]	; (800039c <main+0xc4>)
 80002ec:	f000 fab8 	bl	8000860 <XMC_GPIO_Init>
  while(1) {
 
    for (int i = 0; i < strlen(msg); i++)
 80002f0:	2300      	movs	r3, #0
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	e03b      	b.n	800036e <main+0x96>
    {
        p = getMORSE(msg[i]);
 80002f6:	4a2a      	ldr	r2, [pc, #168]	; (80003a0 <main+0xc8>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4413      	add	r3, r2
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f8b2 	bl	8000468 <getMORSE>
 8000304:	6038      	str	r0, [r7, #0]
        //printf("the morse code is %s \n", p);
        SEND(p);
 8000306:	6838      	ldr	r0, [r7, #0]
 8000308:	f000 f912 	bl	8000530 <SEND>
        if((int)msg[i]!=32 && (((int)msg[i+1] >= 65 && (int)msg[i+1] <= 90) || ((int)msg[i+1] >= 97 && (int)msg[i+1] <= 122) )) {
 800030c:	4a24      	ldr	r2, [pc, #144]	; (80003a0 <main+0xc8>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4413      	add	r3, r2
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b20      	cmp	r3, #32
 8000316:	d027      	beq.n	8000368 <main+0x90>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	3301      	adds	r3, #1
 800031c:	4a20      	ldr	r2, [pc, #128]	; (80003a0 <main+0xc8>)
 800031e:	5cd3      	ldrb	r3, [r2, r3]
 8000320:	2b40      	cmp	r3, #64	; 0x40
 8000322:	d905      	bls.n	8000330 <main+0x58>
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3301      	adds	r3, #1
 8000328:	4a1d      	ldr	r2, [pc, #116]	; (80003a0 <main+0xc8>)
 800032a:	5cd3      	ldrb	r3, [r2, r3]
 800032c:	2b5a      	cmp	r3, #90	; 0x5a
 800032e:	d90b      	bls.n	8000348 <main+0x70>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3301      	adds	r3, #1
 8000334:	4a1a      	ldr	r2, [pc, #104]	; (80003a0 <main+0xc8>)
 8000336:	5cd3      	ldrb	r3, [r2, r3]
 8000338:	2b60      	cmp	r3, #96	; 0x60
 800033a:	d915      	bls.n	8000368 <main+0x90>
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	3301      	adds	r3, #1
 8000340:	4a17      	ldr	r2, [pc, #92]	; (80003a0 <main+0xc8>)
 8000342:	5cd3      	ldrb	r3, [r2, r3]
 8000344:	2b7a      	cmp	r3, #122	; 0x7a
 8000346:	d80f      	bhi.n	8000368 <main+0x90>
        XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1);
 8000348:	2101      	movs	r1, #1
 800034a:	4814      	ldr	r0, [pc, #80]	; (800039c <main+0xc4>)
 800034c:	f7ff ffb1 	bl	80002b2 <XMC_GPIO_ToggleOutput>
        history=0;
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <main+0xcc>)
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
        DelayMs(DEBUG_TIME_FACTOR*300); //turning off LED for 300ms between consecutive letters
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <main+0xd0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800035e:	fb02 f303 	mul.w	r3, r2, r3
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f8d0 	bl	8000508 <DelayMs>
    for (int i = 0; i < strlen(msg); i++)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	3301      	adds	r3, #1
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2b0a      	cmp	r3, #10
 8000372:	d9c0      	bls.n	80002f6 <main+0x1e>
    }
}  

  XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1); //turning off the LED after message is sent before retransmission
 8000374:	2101      	movs	r1, #1
 8000376:	4809      	ldr	r0, [pc, #36]	; (800039c <main+0xc4>)
 8000378:	f7ff ff9b 	bl	80002b2 <XMC_GPIO_ToggleOutput>
  history=0;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <main+0xcc>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
  DelayMs(DEBUG_TIME_FACTOR*5000);
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <main+0xd0>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f241 3288 	movw	r2, #5000	; 0x1388
 800038a:	fb02 f303 	mul.w	r3, r2, r3
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f8ba 	bl	8000508 <DelayMs>
    for (int i = 0; i < strlen(msg); i++)
 8000394:	e7ac      	b.n	80002f0 <main+0x18>
 8000396:	bf00      	nop
 8000398:	08000fc0 	.word	0x08000fc0
 800039c:	48028100 	.word	0x48028100
 80003a0:	08000f9c 	.word	0x08000f9c
 80003a4:	20003ed0 	.word	0x20003ed0
 80003a8:	20000000 	.word	0x20000000

080003ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	6039      	str	r1, [r7, #0]
 80003b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db0a      	blt.n	80003d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <__NVIC_SetPriority+0x4c>)
 80003c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ca:	0092      	lsls	r2, r2, #2
 80003cc:	b2d2      	uxtb	r2, r2
 80003ce:	440b      	add	r3, r1
 80003d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003d4:	e00a      	b.n	80003ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4908      	ldr	r1, [pc, #32]	; (80003fc <__NVIC_SetPriority+0x50>)
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	f003 030f 	and.w	r3, r3, #15
 80003e2:	3b04      	subs	r3, #4
 80003e4:	0092      	lsls	r2, r2, #2
 80003e6:	b2d2      	uxtb	r2, r2
 80003e8:	440b      	add	r3, r1
 80003ea:	761a      	strb	r2, [r3, #24]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	e000e100 	.word	0xe000e100
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3b01      	subs	r3, #1
 800040c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000410:	d301      	bcc.n	8000416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000412:	2301      	movs	r3, #1
 8000414:	e00f      	b.n	8000436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <SysTick_Config+0x40>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3b01      	subs	r3, #1
 800041c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041e:	213f      	movs	r1, #63	; 0x3f
 8000420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000424:	f7ff ffc2 	bl	80003ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <SysTick_Config+0x40>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042e:	4b04      	ldr	r3, [pc, #16]	; (8000440 <SysTick_Config+0x40>)
 8000430:	2207      	movs	r2, #7
 8000432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	e000e010 	.word	0xe000e010

08000444 <XMC_GPIO_ToggleOutput>:
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	460b      	mov	r3, r1
 800044e:	70fb      	strb	r3, [r7, #3]
  port->OMR = 0x10001U << pin;
 8000450:	78fb      	ldrb	r3, [r7, #3]
 8000452:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000456:	409a      	lsls	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	605a      	str	r2, [r3, #4]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <getMORSE>:
         .output_level=XMC_GPIO_OUTPUT_LEVEL_LOW,\
         .output_strength=XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE};

//functions implementation
char* getMORSE(char c)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]

return MORSE_DICT[(int)c];
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2264      	movs	r2, #100	; 0x64
 8000476:	fb02 f303 	mul.w	r3, r2, r3
 800047a:	4a04      	ldr	r2, [pc, #16]	; (800048c <getMORSE+0x24>)
 800047c:	4413      	add	r3, r2
}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000004 	.word	0x20000004

08000490 <SysTick_Handler>:

// SysTick_Handler function will be called every 1 us
void SysTick_Handler()
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
    if (usTicks != 0)
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <SysTick_Handler+0x20>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d004      	beq.n	80004a6 <SysTick_Handler+0x16>
    {
        usTicks--;
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <SysTick_Handler+0x20>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a03      	ldr	r2, [pc, #12]	; (80004b0 <SysTick_Handler+0x20>)
 80004a4:	6013      	str	r3, [r2, #0]
    }
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	20004070 	.word	0x20004070

080004b4 <DelayInit>:

void DelayInit()
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
    
    SystemCoreClockUpdate();
 80004b8:	f000 fc20 	bl	8000cfc <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 1000000);
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <DelayInit+0x20>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <DelayInit+0x24>)
 80004c2:	fba2 2303 	umull	r2, r3, r2, r3
 80004c6:	0c9b      	lsrs	r3, r3, #18
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff99 	bl	8000400 <SysTick_Config>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	2000ffc0 	.word	0x2000ffc0
 80004d8:	431bde83 	.word	0x431bde83

080004dc <DelayUs>:

void DelayUs(uint32_t us)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    usTicks = us;
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <DelayUs+0x28>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6013      	str	r3, [r2, #0]
    while (usTicks);
 80004ea:	bf00      	nop
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <DelayUs+0x28>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1fb      	bne.n	80004ec <DelayUs+0x10>
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20004070 	.word	0x20004070

08000508 <DelayMs>:

void DelayMs(uint32_t ms)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
    
    while (ms--)
 8000510:	e003      	b.n	800051a <DelayMs+0x12>
    {
        DelayUs(1000);
 8000512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000516:	f7ff ffe1 	bl	80004dc <DelayUs>
    while (ms--)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	1e5a      	subs	r2, r3, #1
 800051e:	607a      	str	r2, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d1f6      	bne.n	8000512 <DelayMs+0xa>
    }
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <SEND>:
void SEND(char* p)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
for (int i = 0; i < strlen(p); i++)
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e067      	b.n	800060e <SEND+0xde>
{
    //case I get a 1 after a zero
if (p[i] == '1' && history == 0) {
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	4413      	add	r3, r2
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b31      	cmp	r3, #49	; 0x31
 8000548:	d116      	bne.n	8000578 <SEND+0x48>
 800054a:	4b37      	ldr	r3, [pc, #220]	; (8000628 <SEND+0xf8>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	f083 0301 	eor.w	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d00f      	beq.n	8000578 <SEND+0x48>

    XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1);
 8000558:	2101      	movs	r1, #1
 800055a:	4834      	ldr	r0, [pc, #208]	; (800062c <SEND+0xfc>)
 800055c:	f7ff ff72 	bl	8000444 <XMC_GPIO_ToggleOutput>
    DelayMs(DEBUG_TIME_FACTOR*100);
 8000560:	4b33      	ldr	r3, [pc, #204]	; (8000630 <SEND+0x100>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2264      	movs	r2, #100	; 0x64
 8000566:	fb02 f303 	mul.w	r3, r2, r3
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ffcc 	bl	8000508 <DelayMs>
    
    history=1;
 8000570:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <SEND+0xf8>)
 8000572:	2201      	movs	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	e047      	b.n	8000608 <SEND+0xd8>
}
else if (p[i] == '1' && history ==1){
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b31      	cmp	r3, #49	; 0x31
 8000582:	d10f      	bne.n	80005a4 <SEND+0x74>
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SEND+0xf8>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d00b      	beq.n	80005a4 <SEND+0x74>
    DelayMs(DEBUG_TIME_FACTOR*100);
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SEND+0x100>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2264      	movs	r2, #100	; 0x64
 8000592:	fb02 f303 	mul.w	r3, r2, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ffb6 	bl	8000508 <DelayMs>
    
    history=1;
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <SEND+0xf8>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
 80005a2:	e031      	b.n	8000608 <SEND+0xd8>

}
//case I get a zero after a 1
else if (p[i] == '0' && history ==1){
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b30      	cmp	r3, #48	; 0x30
 80005ae:	d113      	bne.n	80005d8 <SEND+0xa8>
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <SEND+0xf8>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00f      	beq.n	80005d8 <SEND+0xa8>
    XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1);
 80005b8:	2101      	movs	r1, #1
 80005ba:	481c      	ldr	r0, [pc, #112]	; (800062c <SEND+0xfc>)
 80005bc:	f7ff ff42 	bl	8000444 <XMC_GPIO_ToggleOutput>
    DelayMs(DEBUG_TIME_FACTOR*100);
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <SEND+0x100>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2264      	movs	r2, #100	; 0x64
 80005c6:	fb02 f303 	mul.w	r3, r2, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ff9c 	bl	8000508 <DelayMs>
    
    history=0;
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <SEND+0xf8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	e017      	b.n	8000608 <SEND+0xd8>

}
else if (p[i] == '0' && history ==0){
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b30      	cmp	r3, #48	; 0x30
 80005e2:	d111      	bne.n	8000608 <SEND+0xd8>
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <SEND+0xf8>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	f083 0301 	eor.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00a      	beq.n	8000608 <SEND+0xd8>
    DelayMs(DEBUG_TIME_FACTOR*100);
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <SEND+0x100>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2264      	movs	r2, #100	; 0x64
 80005f8:	fb02 f303 	mul.w	r3, r2, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff83 	bl	8000508 <DelayMs>
    
    history=0;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <SEND+0xf8>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
for (int i = 0; i < strlen(p); i++)
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 fc56 	bl	8000ec0 <strlen>
 8000614:	4602      	mov	r2, r0
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	d890      	bhi.n	800053e <SEND+0xe>
}
}
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20003ed0 	.word	0x20003ed0
 800062c:	48028100 	.word	0x48028100
 8000630:	20000000 	.word	0x20000000

08000634 <MORSE>:
void MORSE(int option)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    char* p = NULL;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]

    if (option ==1) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d142      	bne.n	80006cc <MORSE+0x98>
     for (int i = 0; i < strlen(msg); i++)
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	e03b      	b.n	80006c4 <MORSE+0x90>
    {
        p = getMORSE(msg[i]);
 800064c:	4a42      	ldr	r2, [pc, #264]	; (8000758 <MORSE+0x124>)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	4413      	add	r3, r2
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff07 	bl	8000468 <getMORSE>
 800065a:	60f8      	str	r0, [r7, #12]
        //printf("the morse code is %s \n", p);
        SEND(p);
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f7ff ff67 	bl	8000530 <SEND>
        if((int)msg[i]!=32 && (((int)msg[i+1] >= 65 && (int)msg[i+1] <= 90) || ((int)msg[i+1] >= 97 && (int)msg[i+1] <= 122) )) {
 8000662:	4a3d      	ldr	r2, [pc, #244]	; (8000758 <MORSE+0x124>)
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	4413      	add	r3, r2
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b20      	cmp	r3, #32
 800066c:	d027      	beq.n	80006be <MORSE+0x8a>
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	3301      	adds	r3, #1
 8000672:	4a39      	ldr	r2, [pc, #228]	; (8000758 <MORSE+0x124>)
 8000674:	5cd3      	ldrb	r3, [r2, r3]
 8000676:	2b40      	cmp	r3, #64	; 0x40
 8000678:	d905      	bls.n	8000686 <MORSE+0x52>
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	4a36      	ldr	r2, [pc, #216]	; (8000758 <MORSE+0x124>)
 8000680:	5cd3      	ldrb	r3, [r2, r3]
 8000682:	2b5a      	cmp	r3, #90	; 0x5a
 8000684:	d90b      	bls.n	800069e <MORSE+0x6a>
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	4a33      	ldr	r2, [pc, #204]	; (8000758 <MORSE+0x124>)
 800068c:	5cd3      	ldrb	r3, [r2, r3]
 800068e:	2b60      	cmp	r3, #96	; 0x60
 8000690:	d915      	bls.n	80006be <MORSE+0x8a>
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	4a30      	ldr	r2, [pc, #192]	; (8000758 <MORSE+0x124>)
 8000698:	5cd3      	ldrb	r3, [r2, r3]
 800069a:	2b7a      	cmp	r3, #122	; 0x7a
 800069c:	d80f      	bhi.n	80006be <MORSE+0x8a>
        XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1);
 800069e:	2101      	movs	r1, #1
 80006a0:	482e      	ldr	r0, [pc, #184]	; (800075c <MORSE+0x128>)
 80006a2:	f7ff fecf 	bl	8000444 <XMC_GPIO_ToggleOutput>
        history=0;
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <MORSE+0x12c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
        DelayMs(DEBUG_TIME_FACTOR*300); //turning off LED for 300ms between consecutive letters
 80006ac:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <MORSE+0x130>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff25 	bl	8000508 <DelayMs>
     for (int i = 0; i < strlen(msg); i++)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	3301      	adds	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2b0a      	cmp	r3, #10
 80006c8:	d9c0      	bls.n	800064c <MORSE+0x18>
 80006ca:	e036      	b.n	800073a <MORSE+0x106>
        
    }
    }
    }
   else if (option ==2)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d133      	bne.n	800073a <MORSE+0x106>
   {
       for (int i = 0; i < strlen(msgB); i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	e029      	b.n	800072c <MORSE+0xf8>
    {
        p = getMORSE(msgB[i]);
 80006d8:	4a23      	ldr	r2, [pc, #140]	; (8000768 <MORSE+0x134>)
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fec1 	bl	8000468 <getMORSE>
 80006e6:	60f8      	str	r0, [r7, #12]
        //printf("the morse code is %s \n", p);
        SEND(p);
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f7ff ff21 	bl	8000530 <SEND>
        if((int)msgB[i+1] >= 48 && (int)msgB[i+1] <= 57)  {
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <MORSE+0x134>)
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	2b2f      	cmp	r3, #47	; 0x2f
 80006f8:	d915      	bls.n	8000726 <MORSE+0xf2>
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a1a      	ldr	r2, [pc, #104]	; (8000768 <MORSE+0x134>)
 8000700:	5cd3      	ldrb	r3, [r2, r3]
 8000702:	2b39      	cmp	r3, #57	; 0x39
 8000704:	d80f      	bhi.n	8000726 <MORSE+0xf2>
        XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1);
 8000706:	2101      	movs	r1, #1
 8000708:	4814      	ldr	r0, [pc, #80]	; (800075c <MORSE+0x128>)
 800070a:	f7ff fe9b 	bl	8000444 <XMC_GPIO_ToggleOutput>
        history=0;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MORSE+0x12c>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
        DelayMs(DEBUG_TIME_FACTOR*300); //turning off LED for 300ms between consecutive numbers
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MORSE+0x130>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800071c:	fb02 f303 	mul.w	r3, r2, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fef1 	bl	8000508 <DelayMs>
       for (int i = 0; i < strlen(msgB); i++)
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	3301      	adds	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	480e      	ldr	r0, [pc, #56]	; (8000768 <MORSE+0x134>)
 800072e:	f000 fbc7 	bl	8000ec0 <strlen>
 8000732:	4602      	mov	r2, r0
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	429a      	cmp	r2, r3
 8000738:	d8ce      	bhi.n	80006d8 <MORSE+0xa4>
    }

   } 
}  

XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1); //turning off the LED after message is sent before retransmission
 800073a:	2101      	movs	r1, #1
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <MORSE+0x128>)
 800073e:	f7ff fe81 	bl	8000444 <XMC_GPIO_ToggleOutput>
history=0;
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MORSE+0x12c>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
busy=0;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <MORSE+0x138>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]

}
 800074e:	bf00      	nop
 8000750:	3718      	adds	r7, #24
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	08000fcc 	.word	0x08000fcc
 800075c:	48028100 	.word	0x48028100
 8000760:	20003ed0 	.word	0x20003ed0
 8000764:	20000000 	.word	0x20000000
 8000768:	20004074 	.word	0x20004074
 800076c:	20003ed1 	.word	0x20003ed1

08000770 <recordTime>:
void recordTime(float millisec, int location){
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]

    log[location]=millisec;
 800077a:	4a06      	ldr	r2, [pc, #24]	; (8000794 <recordTime+0x24>)
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]

}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20003ee0 	.word	0x20003ee0

08000798 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
 80007a4:	4613      	mov	r3, r2
 80007a6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3204      	adds	r2, #4
 80007b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	f003 0303 	and.w	r3, r3, #3
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	21f8      	movs	r1, #248	; 0xf8
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	78f9      	ldrb	r1, [r7, #3]
 80007ca:	0889      	lsrs	r1, r1, #2
 80007cc:	b2c9      	uxtb	r1, r1
 80007ce:	4608      	mov	r0, r1
 80007d0:	ea02 0103 	and.w	r1, r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	1d02      	adds	r2, r0, #4
 80007d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3204      	adds	r2, #4
 80007e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007ec:	78b9      	ldrb	r1, [r7, #2]
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	78f9      	ldrb	r1, [r7, #3]
 80007fc:	0889      	lsrs	r1, r1, #2
 80007fe:	b2c9      	uxtb	r1, r1
 8000800:	4608      	mov	r0, r1
 8000802:	ea42 0103 	orr.w	r1, r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1d02      	adds	r2, r0, #4
 800080a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	460b      	mov	r3, r1
 8000824:	70fb      	strb	r3, [r7, #3]
 8000826:	4613      	mov	r3, r2
 8000828:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	2103      	movs	r1, #3
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	43db      	mvns	r3, r3
 800083a:	401a      	ands	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000844:	78b9      	ldrb	r1, [r7, #2]
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	431a      	orrs	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	460b      	mov	r3, r1
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800086e:	7afb      	ldrb	r3, [r7, #11]
 8000870:	089b      	lsrs	r3, r3, #2
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3204      	adds	r2, #4
 800087a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800087e:	7afb      	ldrb	r3, [r7, #11]
 8000880:	f003 0303 	and.w	r3, r3, #3
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	21f8      	movs	r1, #248	; 0xf8
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	7af9      	ldrb	r1, [r7, #11]
 8000890:	0889      	lsrs	r1, r1, #2
 8000892:	b2c9      	uxtb	r1, r1
 8000894:	4608      	mov	r0, r1
 8000896:	ea02 0103 	and.w	r1, r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	1d02      	adds	r2, r0, #4
 800089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80008a6:	7afb      	ldrb	r3, [r7, #11]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	2103      	movs	r1, #3
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	401a      	ands	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4a38      	ldr	r2, [pc, #224]	; (800099c <XMC_GPIO_Init+0x13c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d003      	beq.n	80008c8 <XMC_GPIO_Init+0x68>
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4a37      	ldr	r2, [pc, #220]	; (80009a0 <XMC_GPIO_Init+0x140>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d10a      	bne.n	80008de <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008cc:	7afb      	ldrb	r3, [r7, #11]
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	401a      	ands	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	661a      	str	r2, [r3, #96]	; 0x60
 80008dc:	e03c      	b.n	8000958 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685a      	ldr	r2, [r3, #4]
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	409a      	lsls	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80008ea:	7afb      	ldrb	r3, [r7, #11]
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3210      	adds	r2, #16
 80008f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008fa:	7afb      	ldrb	r3, [r7, #11]
 80008fc:	f003 0307 	and.w	r3, r3, #7
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	2107      	movs	r1, #7
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	7af9      	ldrb	r1, [r7, #11]
 800090c:	08c9      	lsrs	r1, r1, #3
 800090e:	b2c9      	uxtb	r1, r1
 8000910:	4608      	mov	r0, r1
 8000912:	ea02 0103 	and.w	r1, r2, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f100 0210 	add.w	r2, r0, #16
 800091c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000920:	7afb      	ldrb	r3, [r7, #11]
 8000922:	08db      	lsrs	r3, r3, #3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3210      	adds	r2, #16
 800092c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7a1b      	ldrb	r3, [r3, #8]
 8000934:	4619      	mov	r1, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	f003 0307 	and.w	r3, r3, #7
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	7af9      	ldrb	r1, [r7, #11]
 8000944:	08c9      	lsrs	r1, r1, #3
 8000946:	b2c9      	uxtb	r1, r1
 8000948:	4608      	mov	r0, r1
 800094a:	ea42 0103 	orr.w	r1, r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f100 0210 	add.w	r2, r0, #16
 8000954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000958:	7afb      	ldrb	r3, [r7, #11]
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	b2db      	uxtb	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	3204      	adds	r2, #4
 8000964:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	7afb      	ldrb	r3, [r7, #11]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	7af9      	ldrb	r1, [r7, #11]
 800097c:	0889      	lsrs	r1, r1, #2
 800097e:	b2c9      	uxtb	r1, r1
 8000980:	4608      	mov	r0, r1
 8000982:	ea42 0103 	orr.w	r1, r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	1d02      	adds	r2, r0, #4
 800098a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	48028e00 	.word	0x48028e00
 80009a0:	48028f00 	.word	0x48028f00

080009a4 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	70fb      	strb	r3, [r7, #3]
 80009b0:	4613      	mov	r3, r2
 80009b2:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3210      	adds	r2, #16
 80009c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	2107      	movs	r1, #7
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	78f9      	ldrb	r1, [r7, #3]
 80009d6:	08c9      	lsrs	r1, r1, #3
 80009d8:	b2c9      	uxtb	r1, r1
 80009da:	4608      	mov	r0, r1
 80009dc:	ea02 0103 	and.w	r1, r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f100 0210 	add.w	r2, r0, #16
 80009e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	08db      	lsrs	r3, r3, #3
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3210      	adds	r2, #16
 80009f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009fa:	78b9      	ldrb	r1, [r7, #2]
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	fa01 f303 	lsl.w	r3, r1, r3
 8000a08:	78f9      	ldrb	r1, [r7, #3]
 8000a0a:	08c9      	lsrs	r1, r1, #3
 8000a0c:	b2c9      	uxtb	r1, r1
 8000a0e:	4608      	mov	r0, r1
 8000a10:	ea42 0103 	orr.w	r1, r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f100 0210 	add.w	r2, r0, #16
 8000a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b085      	sub	sp, #20
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	e003      	b.n	8000a40 <delay+0x16>
  {
    __NOP();
 8000a38:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d8f7      	bhi.n	8000a38 <delay+0xe>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000a58:	b598      	push	{r3, r4, r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a62:	4614      	mov	r4, r2
 8000a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8000a6a:	f000 f807 	bl	8000a7c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000a6e:	f000 f841 	bl	8000af4 <SystemCoreClockSetup>
}
 8000a72:	bf00      	nop
 8000a74:	bd98      	pop	{r3, r4, r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000ffc4 	.word	0x2000ffc4

08000a7c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a82:	b672      	cpsid	i
}
 8000a84:	bf00      	nop
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <SystemCoreSetup+0x6c>)
 8000a88:	4a18      	ldr	r2, [pc, #96]	; (8000aec <SystemCoreSetup+0x70>)
 8000a8a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8c:	f3bf 8f4f 	dsb	sy
}
 8000a90:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000a92:	b662      	cpsie	i
}
 8000a94:	bf00      	nop
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <SystemCoreSetup+0x6c>)
 8000a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <SystemCoreSetup+0x6c>)
 8000a9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <SystemCoreSetup+0x6c>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <SystemCoreSetup+0x6c>)
 8000aac:	f023 0308 	bic.w	r3, r3, #8
 8000ab0:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <SystemCoreSetup+0x74>)
 8000ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ab8:	3314      	adds	r3, #20
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f023 030f 	bic.w	r3, r3, #15
 8000ac4:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f043 0303 	orr.w	r3, r3, #3
 8000acc:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SystemCoreSetup+0x74>)
 8000ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ad4:	3314      	adds	r3, #20
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	08000000 	.word	0x08000000
 8000af0:	58001000 	.word	0x58001000

08000af4 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000af8:	4b75      	ldr	r3, [pc, #468]	; (8000cd0 <SystemCoreClockSetup+0x1dc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10c      	bne.n	8000b1e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000b04:	4b72      	ldr	r3, [pc, #456]	; (8000cd0 <SystemCoreClockSetup+0x1dc>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a71      	ldr	r2, [pc, #452]	; (8000cd0 <SystemCoreClockSetup+0x1dc>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000b10:	bf00      	nop
 8000b12:	4b6f      	ldr	r3, [pc, #444]	; (8000cd0 <SystemCoreClockSetup+0x1dc>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d0f9      	beq.n	8000b12 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b1e:	4b6d      	ldr	r3, [pc, #436]	; (8000cd4 <SystemCoreClockSetup+0x1e0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d009      	beq.n	8000b3e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b2a:	4b6a      	ldr	r3, [pc, #424]	; (8000cd4 <SystemCoreClockSetup+0x1e0>)
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	4a69      	ldr	r2, [pc, #420]	; (8000cd4 <SystemCoreClockSetup+0x1e0>)
 8000b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b34:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000b36:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8000b3a:	f7ff ff76 	bl	8000a2a <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b3e:	4b66      	ldr	r3, [pc, #408]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4a65      	ldr	r2, [pc, #404]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000b44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b48:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8000b4a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000b4e:	f7ff ff6c 	bl	8000a2a <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b52:	4b61      	ldr	r3, [pc, #388]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	4a60      	ldr	r2, [pc, #384]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b5c:	f023 0302 	bic.w	r3, r3, #2
 8000b60:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000b62:	4b5e      	ldr	r3, [pc, #376]	; (8000cdc <SystemCoreClockSetup+0x1e8>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d029      	beq.n	8000bc2 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8000b6e:	4b5b      	ldr	r3, [pc, #364]	; (8000cdc <SystemCoreClockSetup+0x1e8>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4a5a      	ldr	r2, [pc, #360]	; (8000cdc <SystemCoreClockSetup+0x1e8>)
 8000b74:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000b78:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b7c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8000b7e:	f000 f927 	bl	8000dd0 <OSCHP_GetFrequency>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a56      	ldr	r2, [pc, #344]	; (8000ce0 <SystemCoreClockSetup+0x1ec>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	0d1b      	lsrs	r3, r3, #20
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	041a      	lsls	r2, r3, #16
 8000b90:	4b52      	ldr	r3, [pc, #328]	; (8000cdc <SystemCoreClockSetup+0x1e8>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	4951      	ldr	r1, [pc, #324]	; (8000cdc <SystemCoreClockSetup+0x1e8>)
 8000b96:	4313      	orrs	r3, r2
 8000b98:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8000b9a:	4b4f      	ldr	r3, [pc, #316]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	4a4e      	ldr	r2, [pc, #312]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000ba0:	f023 0301 	bic.w	r3, r3, #1
 8000ba4:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000ba6:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	4a4b      	ldr	r2, [pc, #300]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000bac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bb0:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000bb2:	bf00      	nop
 8000bb4:	4b48      	ldr	r3, [pc, #288]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000bbc:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000bc0:	d1f8      	bne.n	8000bb4 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bc2:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4a44      	ldr	r2, [pc, #272]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bce:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	4a41      	ldr	r2, [pc, #260]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bda:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000bdc:	4a41      	ldr	r2, [pc, #260]	; (8000ce4 <SystemCoreClockSetup+0x1f0>)
 8000bde:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000be0:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4a3c      	ldr	r2, [pc, #240]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bea:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bec:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	4a39      	ldr	r2, [pc, #228]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000bf2:	f023 0310 	bic.w	r3, r3, #16
 8000bf6:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	4a36      	ldr	r2, [pc, #216]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c02:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c04:	bf00      	nop
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f9      	beq.n	8000c06 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000c18:	f023 0301 	bic.w	r3, r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c1e:	bf00      	nop
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1f9      	bne.n	8000c20 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <SystemCoreClockSetup+0x1f4>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4a2d      	ldr	r2, [pc, #180]	; (8000ce8 <SystemCoreClockSetup+0x1f4>)
 8000c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c36:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <SystemCoreClockSetup+0x1f4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <SystemCoreClockSetup+0x1f4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <SystemCoreClockSetup+0x1f4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <SystemCoreClockSetup+0x1f4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <SystemCoreClockSetup+0x1f4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <SystemCoreClockSetup+0x1f4>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c66:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000c6a:	4a20      	ldr	r2, [pc, #128]	; (8000cec <SystemCoreClockSetup+0x1f8>)
 8000c6c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8000c6e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c72:	f7ff feda 	bl	8000a2a <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c76:	bf00      	nop
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f9      	beq.n	8000c78 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000c86:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <SystemCoreClockSetup+0x1fc>)
 8000c88:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8000c8a:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c8e:	f7ff fecc 	bl	8000a2a <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c92:	bf00      	nop
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f9      	beq.n	8000c94 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000ca2:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <SystemCoreClockSetup+0x200>)
 8000ca4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8000ca6:	f241 7070 	movw	r0, #6000	; 0x1770
 8000caa:	f7ff febe 	bl	8000a2a <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000cae:	bf00      	nop
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <SystemCoreClockSetup+0x1e4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f9      	beq.n	8000cb0 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <SystemCoreClockSetup+0x204>)
 8000cbe:	2205      	movs	r2, #5
 8000cc0:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <SystemCoreClockSetup+0x1f4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000cc8:	f000 f818 	bl	8000cfc <SystemCoreClockUpdate>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	50004200 	.word	0x50004200
 8000cd4:	50004400 	.word	0x50004400
 8000cd8:	50004710 	.word	0x50004710
 8000cdc:	50004700 	.word	0x50004700
 8000ce0:	6b5fca6b 	.word	0x6b5fca6b
 8000ce4:	01134f00 	.word	0x01134f00
 8000ce8:	50004600 	.word	0x50004600
 8000cec:	01074f00 	.word	0x01074f00
 8000cf0:	01044f00 	.word	0x01044f00
 8000cf4:	01034f00 	.word	0x01034f00
 8000cf8:	50004160 	.word	0x50004160

08000cfc <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <SystemCoreClockUpdate+0xc4>)
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d03e      	beq.n	8000d8c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <SystemCoreClockUpdate+0xc8>)
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <SystemCoreClockUpdate+0xcc>)
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	e002      	b.n	8000d26 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000d20:	f000 f856 	bl	8000dd0 <OSCHP_GetFrequency>
 8000d24:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <SystemCoreClockUpdate+0xc8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d020      	beq.n	8000d74 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <SystemCoreClockUpdate+0xc8>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	0e1b      	lsrs	r3, r3, #24
 8000d38:	f003 030f 	and.w	r3, r3, #15
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000d40:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <SystemCoreClockUpdate+0xc8>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <SystemCoreClockUpdate+0xc8>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	0c1b      	lsrs	r3, r3, #16
 8000d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d58:	3301      	adds	r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	fb02 f303 	mul.w	r3, r2, r3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	fb02 f303 	mul.w	r3, r2, r3
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	e00d      	b.n	8000d90 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <SystemCoreClockUpdate+0xc8>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e001      	b.n	8000d90 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <SystemCoreClockUpdate+0xcc>)
 8000d8e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <SystemCoreClockUpdate+0xc4>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	3301      	adds	r3, #1
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <SystemCoreClockUpdate+0xc4>)
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	3301      	adds	r3, #1
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000db2:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <SystemCoreClockUpdate+0xd0>)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	50004600 	.word	0x50004600
 8000dc4:	50004710 	.word	0x50004710
 8000dc8:	016e3600 	.word	0x016e3600
 8000dcc:	2000ffc0 	.word	0x2000ffc0

08000dd0 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8000dd4:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <OSCHP_GetFrequency+0x10>)
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	00b71b00 	.word	0x00b71b00

08000de4 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <_sbrk+0x5c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <_sbrk+0x5c>)
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <_sbrk+0x60>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x5c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3303      	adds	r3, #3
 8000e04:	f023 0303 	bic.w	r3, r3, #3
 8000e08:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <_sbrk+0x5c>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <_sbrk+0x64>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <_sbrk+0x5c>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <_sbrk+0x5c>)
 8000e22:	6013      	str	r3, [r2, #0]
    return (base);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	e006      	b.n	8000e36 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8000e28:	f000 f818 	bl	8000e5c <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20003edc 	.word	0x20003edc
 8000e44:	200040d8 	.word	0x200040d8
 8000e48:	2000ffc0 	.word	0x2000ffc0

08000e4c <_init>:

/* Init */
void _init(void)
{}
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <__errno>:
 8000e5c:	4b01      	ldr	r3, [pc, #4]	; (8000e64 <__errno+0x8>)
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20003aa0 	.word	0x20003aa0

08000e68 <__libc_init_array>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	4e0d      	ldr	r6, [pc, #52]	; (8000ea0 <__libc_init_array+0x38>)
 8000e6c:	4d0d      	ldr	r5, [pc, #52]	; (8000ea4 <__libc_init_array+0x3c>)
 8000e6e:	1b76      	subs	r6, r6, r5
 8000e70:	10b6      	asrs	r6, r6, #2
 8000e72:	d006      	beq.n	8000e82 <__libc_init_array+0x1a>
 8000e74:	2400      	movs	r4, #0
 8000e76:	3401      	adds	r4, #1
 8000e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e7c:	4798      	blx	r3
 8000e7e:	42a6      	cmp	r6, r4
 8000e80:	d1f9      	bne.n	8000e76 <__libc_init_array+0xe>
 8000e82:	4e09      	ldr	r6, [pc, #36]	; (8000ea8 <__libc_init_array+0x40>)
 8000e84:	4d09      	ldr	r5, [pc, #36]	; (8000eac <__libc_init_array+0x44>)
 8000e86:	1b76      	subs	r6, r6, r5
 8000e88:	f7ff ffe0 	bl	8000e4c <_init>
 8000e8c:	10b6      	asrs	r6, r6, #2
 8000e8e:	d006      	beq.n	8000e9e <__libc_init_array+0x36>
 8000e90:	2400      	movs	r4, #0
 8000e92:	3401      	adds	r4, #1
 8000e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e98:	4798      	blx	r3
 8000e9a:	42a6      	cmp	r6, r4
 8000e9c:	d1f9      	bne.n	8000e92 <__libc_init_array+0x2a>
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	20003ed0 	.word	0x20003ed0
 8000ea4:	20003ed0 	.word	0x20003ed0
 8000ea8:	20003ed0 	.word	0x20003ed0
 8000eac:	20003ed0 	.word	0x20003ed0
	...

08000ec0 <strlen>:
 8000ec0:	f890 f000 	pld	[r0]
 8000ec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000ec8:	f020 0107 	bic.w	r1, r0, #7
 8000ecc:	f06f 0c00 	mvn.w	ip, #0
 8000ed0:	f010 0407 	ands.w	r4, r0, #7
 8000ed4:	f891 f020 	pld	[r1, #32]
 8000ed8:	f040 8049 	bne.w	8000f6e <strlen+0xae>
 8000edc:	f04f 0400 	mov.w	r4, #0
 8000ee0:	f06f 0007 	mvn.w	r0, #7
 8000ee4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000ee8:	f891 f040 	pld	[r1, #64]	; 0x40
 8000eec:	f100 0008 	add.w	r0, r0, #8
 8000ef0:	fa82 f24c 	uadd8	r2, r2, ip
 8000ef4:	faa4 f28c 	sel	r2, r4, ip
 8000ef8:	fa83 f34c 	uadd8	r3, r3, ip
 8000efc:	faa2 f38c 	sel	r3, r2, ip
 8000f00:	bb4b      	cbnz	r3, 8000f56 <strlen+0x96>
 8000f02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000f06:	fa82 f24c 	uadd8	r2, r2, ip
 8000f0a:	f100 0008 	add.w	r0, r0, #8
 8000f0e:	faa4 f28c 	sel	r2, r4, ip
 8000f12:	fa83 f34c 	uadd8	r3, r3, ip
 8000f16:	faa2 f38c 	sel	r3, r2, ip
 8000f1a:	b9e3      	cbnz	r3, 8000f56 <strlen+0x96>
 8000f1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000f20:	fa82 f24c 	uadd8	r2, r2, ip
 8000f24:	f100 0008 	add.w	r0, r0, #8
 8000f28:	faa4 f28c 	sel	r2, r4, ip
 8000f2c:	fa83 f34c 	uadd8	r3, r3, ip
 8000f30:	faa2 f38c 	sel	r3, r2, ip
 8000f34:	b97b      	cbnz	r3, 8000f56 <strlen+0x96>
 8000f36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000f3a:	f101 0120 	add.w	r1, r1, #32
 8000f3e:	fa82 f24c 	uadd8	r2, r2, ip
 8000f42:	f100 0008 	add.w	r0, r0, #8
 8000f46:	faa4 f28c 	sel	r2, r4, ip
 8000f4a:	fa83 f34c 	uadd8	r3, r3, ip
 8000f4e:	faa2 f38c 	sel	r3, r2, ip
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0c6      	beq.n	8000ee4 <strlen+0x24>
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	bf04      	itt	eq
 8000f5a:	3004      	addeq	r0, #4
 8000f5c:	461a      	moveq	r2, r3
 8000f5e:	ba12      	rev	r2, r2
 8000f60:	fab2 f282 	clz	r2, r2
 8000f64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000f68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000f6c:	4770      	bx	lr
 8000f6e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000f72:	f004 0503 	and.w	r5, r4, #3
 8000f76:	f1c4 0000 	rsb	r0, r4, #0
 8000f7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000f7e:	f014 0f04 	tst.w	r4, #4
 8000f82:	f891 f040 	pld	[r1, #64]	; 0x40
 8000f86:	fa0c f505 	lsl.w	r5, ip, r5
 8000f8a:	ea62 0205 	orn	r2, r2, r5
 8000f8e:	bf1c      	itt	ne
 8000f90:	ea63 0305 	ornne	r3, r3, r5
 8000f94:	4662      	movne	r2, ip
 8000f96:	f04f 0400 	mov.w	r4, #0
 8000f9a:	e7a9      	b.n	8000ef0 <strlen+0x30>
 8000f9c:	41432049 	.word	0x41432049
 8000fa0:	4f4d204e 	.word	0x4f4d204e
 8000fa4:	00455352 	.word	0x00455352

08000fa8 <out_config>:
 8000fa8:	00000080 00010000 00000000              ............

08000fb4 <in_config>:
 8000fb4:	00000000 00010000 00000000              ............

08000fc0 <LED_config>:
 8000fc0:	00000080 00010000 00000000 41432049     ............I CA
 8000fd0:	4f4d204e 00455352                       N MORSE.

08000fd8 <_global_impure_ptr>:
 8000fd8:	20003aa8                                .:. 
