
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a08  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00023ed0  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00023ed0  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00023ed0  2**0
                  CONTENTS
  5 .data         00003ed0  20000000  0c001a08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000208  20003ed0  0c0058d8  00023ed0  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00023ed0  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  00023ed0  2**0
                  CONTENTS
 10 .debug_aranges 00000290  00000000  00000000  00023ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00008721  00000000  00000000  00024160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001841  00000000  00000000  0002c881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00002758  00000000  00000000  0002e0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  000005f0  00000000  00000000  0003081c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00076c0a  00000000  00000000  00030e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00000cd0  00000000  00000000  000a7a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000000f8  00000000  00000000  000a86e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .build_attributes 000002a8  00000000  00000000  000a87de  2**0
                  CONTENTS, READONLY
 19 .debug_macro  00018e9a  00000000  00000000  000a8a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	71 05 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     q...............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001a08 	.word	0x0c001a08
 800024c:	20000000 	.word	0x20000000
 8000250:	00003ed0 	.word	0x00003ed0
 8000254:	0c0058d8 	.word	0x0c0058d8
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c001a08 	.word	0x0c001a08
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c001a08 	.word	0x0c001a08
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20003ed0 	.word	0x20003ed0
 800027c:	00000208 	.word	0x00000208
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	08000b39 	.word	0x08000b39
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	08001785 	.word	0x08001785
    ldr  r0, =main
 80002ac:	080002d9 	.word	0x080002d9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>

080002b2 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b083      	sub	sp, #12
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	460b      	mov	r3, r1
 80002bc:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002c2:	78fb      	ldrb	r3, [r7, #3]
 80002c4:	fa22 f303 	lsr.w	r3, r2, r3
 80002c8:	f003 0301 	and.w	r3, r3, #1
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <main>:
#include "partB.h"

int main(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0

    int presses=0, time=0;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
    float sample=0.0, previous_reading=0.0;
 80002e6:	f04f 0300 	mov.w	r3, #0
 80002ea:	603b      	str	r3, [r7, #0]
 80002ec:	f04f 0300 	mov.w	r3, #0
 80002f0:	60bb      	str	r3, [r7, #8]

    KIN1_InitCycleCounter(); 
 80002f2:	4b59      	ldr	r3, [pc, #356]	; (8000458 <main+0x180>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a58      	ldr	r2, [pc, #352]	; (8000458 <main+0x180>)
 80002f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002fc:	6013      	str	r3, [r2, #0]
    KIN1_ResetCycleCounter(); 
 80002fe:	4b57      	ldr	r3, [pc, #348]	; (800045c <main+0x184>)
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
    KIN1_EnableCycleCounter(); 
 8000304:	4b56      	ldr	r3, [pc, #344]	; (8000460 <main+0x188>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a55      	ldr	r2, [pc, #340]	; (8000460 <main+0x188>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6013      	str	r3, [r2, #0]
    DelayInit();
 8000310:	f000 f940 	bl	8000594 <DelayInit>
    XMC_GPIO_Init(GPIO_LED1,     &out_config);
 8000314:	4a53      	ldr	r2, [pc, #332]	; (8000464 <main+0x18c>)
 8000316:	2101      	movs	r1, #1
 8000318:	4853      	ldr	r0, [pc, #332]	; (8000468 <main+0x190>)
 800031a:	f000 fb11 	bl	8000940 <XMC_GPIO_Init>
    XMC_GPIO_Init(GPIO_LED2,     &out_config);
 800031e:	4a51      	ldr	r2, [pc, #324]	; (8000464 <main+0x18c>)
 8000320:	2100      	movs	r1, #0
 8000322:	4851      	ldr	r0, [pc, #324]	; (8000468 <main+0x190>)
 8000324:	f000 fb0c 	bl	8000940 <XMC_GPIO_Init>
    XMC_GPIO_Init(GPIO_BUTTON1,  &in_config);
 8000328:	4a50      	ldr	r2, [pc, #320]	; (800046c <main+0x194>)
 800032a:	210e      	movs	r1, #14
 800032c:	484e      	ldr	r0, [pc, #312]	; (8000468 <main+0x190>)
 800032e:	f000 fb07 	bl	8000940 <XMC_GPIO_Init>
    XMC_GPIO_Init(GPIO_BUTTON2,  &in_config);
 8000332:	4a4e      	ldr	r2, [pc, #312]	; (800046c <main+0x194>)
 8000334:	210f      	movs	r1, #15
 8000336:	484c      	ldr	r0, [pc, #304]	; (8000468 <main+0x190>)
 8000338:	f000 fb02 	bl	8000940 <XMC_GPIO_Init>
    XMC_GPIO_Init(XMC_GPIO_PORT1, 1, &LED_config);
 800033c:	4a4c      	ldr	r2, [pc, #304]	; (8000470 <main+0x198>)
 800033e:	2101      	movs	r1, #1
 8000340:	4849      	ldr	r0, [pc, #292]	; (8000468 <main+0x190>)
 8000342:	f000 fafd 	bl	8000940 <XMC_GPIO_Init>
    
 //check_time=KIN1_GetCycleCounter()/120000000.0; //the cycle counter overflows at 35.8s!!

  while(1) {

    sample=KIN1_GetCycleCounter()/120000.0;
 8000346:	4b45      	ldr	r3, [pc, #276]	; (800045c <main+0x184>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 ff38 	bl	80011c0 <__aeabi_ui2d>
 8000350:	f04f 0200 	mov.w	r2, #0
 8000354:	4b47      	ldr	r3, [pc, #284]	; (8000474 <main+0x19c>)
 8000356:	f001 f8d7 	bl	8001508 <__aeabi_ddiv>
 800035a:	4602      	mov	r2, r0
 800035c:	460b      	mov	r3, r1
 800035e:	4610      	mov	r0, r2
 8000360:	4619      	mov	r1, r3
 8000362:	f001 f9b9 	bl	80016d8 <__aeabi_d2f>
 8000366:	4603      	mov	r3, r0
 8000368:	603b      	str	r3, [r7, #0]
    millisec=millisec+sample-previous_reading;
 800036a:	4b43      	ldr	r3, [pc, #268]	; (8000478 <main+0x1a0>)
 800036c:	ed93 7a00 	vldr	s14, [r3]
 8000370:	edd7 7a00 	vldr	s15, [r7]
 8000374:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000378:	edd7 7a02 	vldr	s15, [r7, #8]
 800037c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000380:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <main+0x1a0>)
 8000382:	edc3 7a00 	vstr	s15, [r3]
    previous_reading=sample;
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	60bb      	str	r3, [r7, #8]
    if(sample>=10000) 
 800038a:	edd7 7a00 	vldr	s15, [r7]
 800038e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800047c <main+0x1a4>
 8000392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800039a:	db05      	blt.n	80003a8 <main+0xd0>
    {
      KIN1_ResetCycleCounter();
 800039c:	4b2f      	ldr	r3, [pc, #188]	; (800045c <main+0x184>)
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
      previous_reading=0;
 80003a2:	f04f 0300 	mov.w	r3, #0
 80003a6:	60bb      	str	r3, [r7, #8]
    }

//case if button 1 is pressed
    if(XMC_GPIO_GetInput(GPIO_BUTTON1) == 0) {
 80003a8:	210e      	movs	r1, #14
 80003aa:	482f      	ldr	r0, [pc, #188]	; (8000468 <main+0x190>)
 80003ac:	f7ff ff81 	bl	80002b2 <XMC_GPIO_GetInput>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d10e      	bne.n	80003d4 <main+0xfc>
    
       recordTime(millisec, presses);
 80003b6:	4b30      	ldr	r3, [pc, #192]	; (8000478 <main+0x1a0>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	68f9      	ldr	r1, [r7, #12]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fa47 	bl	8000850 <recordTime>
       presses++;
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	3301      	adds	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
       busy=1;
 80003c8:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <main+0x1a8>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
       MORSE(1);
 80003ce:	2001      	movs	r0, #1
 80003d0:	f000 f9a0 	bl	8000714 <MORSE>
     
    } 
//case if button 2 is pressed
    if(XMC_GPIO_GetInput(GPIO_BUTTON2) == 0) {
 80003d4:	210f      	movs	r1, #15
 80003d6:	4824      	ldr	r0, [pc, #144]	; (8000468 <main+0x190>)
 80003d8:	f7ff ff6b 	bl	80002b2 <XMC_GPIO_GetInput>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1b1      	bne.n	8000346 <main+0x6e>

      if(presses>=2)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	dd1b      	ble.n	8000420 <main+0x148>
      {
          time = (int)(log[presses-1] - log[presses-2])-200;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	4a25      	ldr	r2, [pc, #148]	; (8000484 <main+0x1ac>)
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	4413      	add	r3, r2
 80003f2:	ed93 7a00 	vldr	s14, [r3]
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	3b02      	subs	r3, #2
 80003fa:	4a22      	ldr	r2, [pc, #136]	; (8000484 <main+0x1ac>)
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	4413      	add	r3, r2
 8000400:	edd3 7a00 	vldr	s15, [r3]
 8000404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800040c:	ee17 3a90 	vmov	r3, s15
 8000410:	3bc8      	subs	r3, #200	; 0xc8
 8000412:	607b      	str	r3, [r7, #4]
          itoa(time, msgB, 10);
 8000414:	220a      	movs	r2, #10
 8000416:	491c      	ldr	r1, [pc, #112]	; (8000488 <main+0x1b0>)
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f001 f9f3 	bl	8001804 <itoa>
 800041e:	e017      	b.n	8000450 <main+0x178>
      }
      else if (presses ==1)
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d10d      	bne.n	8000442 <main+0x16a>
      {
          time = (int)log[0];
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <main+0x1ac>)
 8000428:	edd3 7a00 	vldr	s15, [r3]
 800042c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000430:	ee17 3a90 	vmov	r3, s15
 8000434:	607b      	str	r3, [r7, #4]
          itoa(time, msgB, 10);
 8000436:	220a      	movs	r2, #10
 8000438:	4913      	ldr	r1, [pc, #76]	; (8000488 <main+0x1b0>)
 800043a:	6878      	ldr	r0, [r7, #4]
 800043c:	f001 f9e2 	bl	8001804 <itoa>
 8000440:	e006      	b.n	8000450 <main+0x178>
      }
      else
      {
          time =0;
 8000442:	2300      	movs	r3, #0
 8000444:	607b      	str	r3, [r7, #4]
          itoa(time, msgB, 10);
 8000446:	220a      	movs	r2, #10
 8000448:	490f      	ldr	r1, [pc, #60]	; (8000488 <main+0x1b0>)
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f001 f9da 	bl	8001804 <itoa>
      }

      MORSE(2);
 8000450:	2002      	movs	r0, #2
 8000452:	f000 f95f 	bl	8000714 <MORSE>
    sample=KIN1_GetCycleCounter()/120000.0;
 8000456:	e776      	b.n	8000346 <main+0x6e>
 8000458:	e000edfc 	.word	0xe000edfc
 800045c:	e0001004 	.word	0xe0001004
 8000460:	e0001000 	.word	0xe0001000
 8000464:	080019ac 	.word	0x080019ac
 8000468:	48028100 	.word	0x48028100
 800046c:	080019b8 	.word	0x080019b8
 8000470:	080019c4 	.word	0x080019c4
 8000474:	40fd4c00 	.word	0x40fd4c00
 8000478:	20003ed4 	.word	0x20003ed4
 800047c:	461c4000 	.word	0x461c4000
 8000480:	20003ed1 	.word	0x20003ed1
 8000484:	20003ee0 	.word	0x20003ee0
 8000488:	20004074 	.word	0x20004074

0800048c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	6039      	str	r1, [r7, #0]
 8000496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049c:	2b00      	cmp	r3, #0
 800049e:	db0a      	blt.n	80004b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	490c      	ldr	r1, [pc, #48]	; (80004d8 <__NVIC_SetPriority+0x4c>)
 80004a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004aa:	0092      	lsls	r2, r2, #2
 80004ac:	b2d2      	uxtb	r2, r2
 80004ae:	440b      	add	r3, r1
 80004b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004b4:	e00a      	b.n	80004cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4908      	ldr	r1, [pc, #32]	; (80004dc <__NVIC_SetPriority+0x50>)
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	f003 030f 	and.w	r3, r3, #15
 80004c2:	3b04      	subs	r3, #4
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	b2d2      	uxtb	r2, r2
 80004c8:	440b      	add	r3, r1
 80004ca:	761a      	strb	r2, [r3, #24]
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	e000e100 	.word	0xe000e100
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004f0:	d301      	bcc.n	80004f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004f2:	2301      	movs	r3, #1
 80004f4:	e00f      	b.n	8000516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <SysTick_Config+0x40>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004fe:	213f      	movs	r1, #63	; 0x3f
 8000500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000504:	f7ff ffc2 	bl	800048c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <SysTick_Config+0x40>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <SysTick_Config+0x40>)
 8000510:	2207      	movs	r2, #7
 8000512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	e000e010 	.word	0xe000e010

08000524 <XMC_GPIO_ToggleOutput>:
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]
  port->OMR = 0x10001U << pin;
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000536:	409a      	lsls	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	605a      	str	r2, [r3, #4]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <getMORSE>:
         .output_level=XMC_GPIO_OUTPUT_LEVEL_LOW,\
         .output_strength=XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE};

//functions implementation
char* getMORSE(char c)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]

return MORSE_DICT[(int)c];
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2264      	movs	r2, #100	; 0x64
 8000556:	fb02 f303 	mul.w	r3, r2, r3
 800055a:	4a04      	ldr	r2, [pc, #16]	; (800056c <getMORSE+0x24>)
 800055c:	4413      	add	r3, r2
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000004 	.word	0x20000004

08000570 <SysTick_Handler>:

// SysTick_Handler function will be called every 1 us
void SysTick_Handler()
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
    if (usTicks != 0)
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <SysTick_Handler+0x20>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d004      	beq.n	8000586 <SysTick_Handler+0x16>
    {
        usTicks--;
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <SysTick_Handler+0x20>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3b01      	subs	r3, #1
 8000582:	4a03      	ldr	r2, [pc, #12]	; (8000590 <SysTick_Handler+0x20>)
 8000584:	6013      	str	r3, [r2, #0]
    }
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	20004070 	.word	0x20004070

08000594 <DelayInit>:

void DelayInit()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
    
    SystemCoreClockUpdate();
 8000598:	f000 fc20 	bl	8000ddc <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 1000000);
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <DelayInit+0x20>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <DelayInit+0x24>)
 80005a2:	fba2 2303 	umull	r2, r3, r2, r3
 80005a6:	0c9b      	lsrs	r3, r3, #18
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ff99 	bl	80004e0 <SysTick_Config>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000ffc0 	.word	0x2000ffc0
 80005b8:	431bde83 	.word	0x431bde83

080005bc <DelayUs>:

void DelayUs(uint32_t us)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    usTicks = us;
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <DelayUs+0x28>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
    while (usTicks);
 80005ca:	bf00      	nop
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <DelayUs+0x28>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1fb      	bne.n	80005cc <DelayUs+0x10>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20004070 	.word	0x20004070

080005e8 <DelayMs>:

void DelayMs(uint32_t ms)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    
    while (ms--)
 80005f0:	e003      	b.n	80005fa <DelayMs+0x12>
    {
        DelayUs(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f6:	f7ff ffe1 	bl	80005bc <DelayUs>
    while (ms--)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	1e5a      	subs	r2, r3, #1
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f6      	bne.n	80005f2 <DelayMs+0xa>
    }
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <SEND>:
void SEND(char* p)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
for (int i = 0; i < strlen(p); i++)
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e067      	b.n	80006ee <SEND+0xde>
{
    //case I get a 1 after a zero
if (p[i] == '1' && history == 0) {
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b31      	cmp	r3, #49	; 0x31
 8000628:	d116      	bne.n	8000658 <SEND+0x48>
 800062a:	4b37      	ldr	r3, [pc, #220]	; (8000708 <SEND+0xf8>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f083 0301 	eor.w	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00f      	beq.n	8000658 <SEND+0x48>

    XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1);
 8000638:	2101      	movs	r1, #1
 800063a:	4834      	ldr	r0, [pc, #208]	; (800070c <SEND+0xfc>)
 800063c:	f7ff ff72 	bl	8000524 <XMC_GPIO_ToggleOutput>
    DelayMs(DEBUG_TIME_FACTOR*100);
 8000640:	4b33      	ldr	r3, [pc, #204]	; (8000710 <SEND+0x100>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2264      	movs	r2, #100	; 0x64
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffcc 	bl	80005e8 <DelayMs>
    
    history=1;
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <SEND+0xf8>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e047      	b.n	80006e8 <SEND+0xd8>
}
else if (p[i] == '1' && history ==1){
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b31      	cmp	r3, #49	; 0x31
 8000662:	d10f      	bne.n	8000684 <SEND+0x74>
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SEND+0xf8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <SEND+0x74>
    DelayMs(DEBUG_TIME_FACTOR*100);
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SEND+0x100>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2264      	movs	r2, #100	; 0x64
 8000672:	fb02 f303 	mul.w	r3, r2, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffb6 	bl	80005e8 <DelayMs>
    
    history=1;
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SEND+0xf8>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	e031      	b.n	80006e8 <SEND+0xd8>

}
//case I get a zero after a 1
else if (p[i] == '0' && history ==1){
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b30      	cmp	r3, #48	; 0x30
 800068e:	d113      	bne.n	80006b8 <SEND+0xa8>
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <SEND+0xf8>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d00f      	beq.n	80006b8 <SEND+0xa8>
    XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1);
 8000698:	2101      	movs	r1, #1
 800069a:	481c      	ldr	r0, [pc, #112]	; (800070c <SEND+0xfc>)
 800069c:	f7ff ff42 	bl	8000524 <XMC_GPIO_ToggleOutput>
    DelayMs(DEBUG_TIME_FACTOR*100);
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <SEND+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2264      	movs	r2, #100	; 0x64
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff9c 	bl	80005e8 <DelayMs>
    
    history=0;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <SEND+0xf8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e017      	b.n	80006e8 <SEND+0xd8>

}
else if (p[i] == '0' && history ==0){
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b30      	cmp	r3, #48	; 0x30
 80006c2:	d111      	bne.n	80006e8 <SEND+0xd8>
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <SEND+0xf8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00a      	beq.n	80006e8 <SEND+0xd8>
    DelayMs(DEBUG_TIME_FACTOR*100);
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SEND+0x100>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2264      	movs	r2, #100	; 0x64
 80006d8:	fb02 f303 	mul.w	r3, r2, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff83 	bl	80005e8 <DelayMs>
    
    history=0;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <SEND+0xf8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
for (int i = 0; i < strlen(p); i++)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3301      	adds	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f001 f8a6 	bl	8001840 <strlen>
 80006f4:	4602      	mov	r2, r0
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d890      	bhi.n	800061e <SEND+0xe>
}
}
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20003ed0 	.word	0x20003ed0
 800070c:	48028100 	.word	0x48028100
 8000710:	20000000 	.word	0x20000000

08000714 <MORSE>:
void MORSE(int option)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    char* p = NULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]

    if (option ==1) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d142      	bne.n	80007ac <MORSE+0x98>
     for (int i = 0; i < strlen(msg); i++)
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	e03b      	b.n	80007a4 <MORSE+0x90>
    {
        p = getMORSE(msg[i]);
 800072c:	4a42      	ldr	r2, [pc, #264]	; (8000838 <MORSE+0x124>)
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff07 	bl	8000548 <getMORSE>
 800073a:	60f8      	str	r0, [r7, #12]
        //printf("the morse code is %s \n", p);
        SEND(p);
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f7ff ff67 	bl	8000610 <SEND>
        if((int)msg[i]!=32 && (((int)msg[i+1] >= 65 && (int)msg[i+1] <= 90) || ((int)msg[i+1] >= 97 && (int)msg[i+1] <= 122) )) {
 8000742:	4a3d      	ldr	r2, [pc, #244]	; (8000838 <MORSE+0x124>)
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b20      	cmp	r3, #32
 800074c:	d027      	beq.n	800079e <MORSE+0x8a>
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	4a39      	ldr	r2, [pc, #228]	; (8000838 <MORSE+0x124>)
 8000754:	5cd3      	ldrb	r3, [r2, r3]
 8000756:	2b40      	cmp	r3, #64	; 0x40
 8000758:	d905      	bls.n	8000766 <MORSE+0x52>
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3301      	adds	r3, #1
 800075e:	4a36      	ldr	r2, [pc, #216]	; (8000838 <MORSE+0x124>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	2b5a      	cmp	r3, #90	; 0x5a
 8000764:	d90b      	bls.n	800077e <MORSE+0x6a>
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3301      	adds	r3, #1
 800076a:	4a33      	ldr	r2, [pc, #204]	; (8000838 <MORSE+0x124>)
 800076c:	5cd3      	ldrb	r3, [r2, r3]
 800076e:	2b60      	cmp	r3, #96	; 0x60
 8000770:	d915      	bls.n	800079e <MORSE+0x8a>
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	3301      	adds	r3, #1
 8000776:	4a30      	ldr	r2, [pc, #192]	; (8000838 <MORSE+0x124>)
 8000778:	5cd3      	ldrb	r3, [r2, r3]
 800077a:	2b7a      	cmp	r3, #122	; 0x7a
 800077c:	d80f      	bhi.n	800079e <MORSE+0x8a>
        XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1);
 800077e:	2101      	movs	r1, #1
 8000780:	482e      	ldr	r0, [pc, #184]	; (800083c <MORSE+0x128>)
 8000782:	f7ff fecf 	bl	8000524 <XMC_GPIO_ToggleOutput>
        history=0;
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <MORSE+0x12c>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
        DelayMs(DEBUG_TIME_FACTOR*300); //turning off LED for 300ms between consecutive letters
 800078c:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <MORSE+0x130>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000794:	fb02 f303 	mul.w	r3, r2, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff25 	bl	80005e8 <DelayMs>
     for (int i = 0; i < strlen(msg); i++)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3301      	adds	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	2b0a      	cmp	r3, #10
 80007a8:	d9c0      	bls.n	800072c <MORSE+0x18>
 80007aa:	e036      	b.n	800081a <MORSE+0x106>
        
    }
    }
    }
   else if (option ==2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d133      	bne.n	800081a <MORSE+0x106>
   {
       for (int i = 0; i < strlen(msgB); i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e029      	b.n	800080c <MORSE+0xf8>
    {
        p = getMORSE(msgB[i]);
 80007b8:	4a23      	ldr	r2, [pc, #140]	; (8000848 <MORSE+0x134>)
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fec1 	bl	8000548 <getMORSE>
 80007c6:	60f8      	str	r0, [r7, #12]
        //printf("the morse code is %s \n", p);
        SEND(p);
 80007c8:	68f8      	ldr	r0, [r7, #12]
 80007ca:	f7ff ff21 	bl	8000610 <SEND>
        if((int)msgB[i+1] >= 48 && (int)msgB[i+1] <= 57)  {
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <MORSE+0x134>)
 80007d4:	5cd3      	ldrb	r3, [r2, r3]
 80007d6:	2b2f      	cmp	r3, #47	; 0x2f
 80007d8:	d915      	bls.n	8000806 <MORSE+0xf2>
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <MORSE+0x134>)
 80007e0:	5cd3      	ldrb	r3, [r2, r3]
 80007e2:	2b39      	cmp	r3, #57	; 0x39
 80007e4:	d80f      	bhi.n	8000806 <MORSE+0xf2>
        XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1);
 80007e6:	2101      	movs	r1, #1
 80007e8:	4814      	ldr	r0, [pc, #80]	; (800083c <MORSE+0x128>)
 80007ea:	f7ff fe9b 	bl	8000524 <XMC_GPIO_ToggleOutput>
        history=0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MORSE+0x12c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
        DelayMs(DEBUG_TIME_FACTOR*300); //turning off LED for 300ms between consecutive numbers
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MORSE+0x130>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007fc:	fb02 f303 	mul.w	r3, r2, r3
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fef1 	bl	80005e8 <DelayMs>
       for (int i = 0; i < strlen(msgB); i++)
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	3301      	adds	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <MORSE+0x134>)
 800080e:	f001 f817 	bl	8001840 <strlen>
 8000812:	4602      	mov	r2, r0
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	429a      	cmp	r2, r3
 8000818:	d8ce      	bhi.n	80007b8 <MORSE+0xa4>
    }

   } 
}  

XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 1); //turning off the LED after message is sent before retransmission
 800081a:	2101      	movs	r1, #1
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <MORSE+0x128>)
 800081e:	f7ff fe81 	bl	8000524 <XMC_GPIO_ToggleOutput>
history=0;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <MORSE+0x12c>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
busy=0;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <MORSE+0x138>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]

}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	080019d0 	.word	0x080019d0
 800083c:	48028100 	.word	0x48028100
 8000840:	20003ed0 	.word	0x20003ed0
 8000844:	20000000 	.word	0x20000000
 8000848:	20004074 	.word	0x20004074
 800084c:	20003ed1 	.word	0x20003ed1

08000850 <recordTime>:
void recordTime(float millisec, int location){
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]

    log[location]=millisec;
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <recordTime+0x24>)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4413      	add	r3, r2
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	601a      	str	r2, [r3, #0]

 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20003ee0 	.word	0x20003ee0

08000878 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
 8000884:	4613      	mov	r3, r2
 8000886:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	b2db      	uxtb	r3, r3
 800088e:	461a      	mov	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3204      	adds	r2, #4
 8000894:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	f003 0303 	and.w	r3, r3, #3
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	21f8      	movs	r1, #248	; 0xf8
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	78f9      	ldrb	r1, [r7, #3]
 80008aa:	0889      	lsrs	r1, r1, #2
 80008ac:	b2c9      	uxtb	r1, r1
 80008ae:	4608      	mov	r0, r1
 80008b0:	ea02 0103 	and.w	r1, r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	1d02      	adds	r2, r0, #4
 80008b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3204      	adds	r2, #4
 80008c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008cc:	78b9      	ldrb	r1, [r7, #2]
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	78f9      	ldrb	r1, [r7, #3]
 80008dc:	0889      	lsrs	r1, r1, #2
 80008de:	b2c9      	uxtb	r1, r1
 80008e0:	4608      	mov	r0, r1
 80008e2:	ea42 0103 	orr.w	r1, r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	1d02      	adds	r2, r0, #4
 80008ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	460b      	mov	r3, r1
 8000904:	70fb      	strb	r3, [r7, #3]
 8000906:	4613      	mov	r3, r2
 8000908:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	2103      	movs	r1, #3
 8000914:	fa01 f303 	lsl.w	r3, r1, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	401a      	ands	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000924:	78b9      	ldrb	r1, [r7, #2]
 8000926:	78fb      	ldrb	r3, [r7, #3]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	431a      	orrs	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	460b      	mov	r3, r1
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800094e:	7afb      	ldrb	r3, [r7, #11]
 8000950:	089b      	lsrs	r3, r3, #2
 8000952:	b2db      	uxtb	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3204      	adds	r2, #4
 800095a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	21f8      	movs	r1, #248	; 0xf8
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	7af9      	ldrb	r1, [r7, #11]
 8000970:	0889      	lsrs	r1, r1, #2
 8000972:	b2c9      	uxtb	r1, r1
 8000974:	4608      	mov	r0, r1
 8000976:	ea02 0103 	and.w	r1, r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	1d02      	adds	r2, r0, #4
 800097e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000986:	7afb      	ldrb	r3, [r7, #11]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2103      	movs	r1, #3
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	401a      	ands	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4a38      	ldr	r2, [pc, #224]	; (8000a7c <XMC_GPIO_Init+0x13c>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d003      	beq.n	80009a8 <XMC_GPIO_Init+0x68>
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4a37      	ldr	r2, [pc, #220]	; (8000a80 <XMC_GPIO_Init+0x140>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d10a      	bne.n	80009be <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009ac:	7afb      	ldrb	r3, [r7, #11]
 80009ae:	2101      	movs	r1, #1
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	661a      	str	r2, [r3, #96]	; 0x60
 80009bc:	e03c      	b.n	8000a38 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	7afb      	ldrb	r3, [r7, #11]
 80009c4:	409a      	lsls	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80009ca:	7afb      	ldrb	r3, [r7, #11]
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	461a      	mov	r2, r3
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	3210      	adds	r2, #16
 80009d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009da:	7afb      	ldrb	r3, [r7, #11]
 80009dc:	f003 0307 	and.w	r3, r3, #7
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	2107      	movs	r1, #7
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	7af9      	ldrb	r1, [r7, #11]
 80009ec:	08c9      	lsrs	r1, r1, #3
 80009ee:	b2c9      	uxtb	r1, r1
 80009f0:	4608      	mov	r0, r1
 80009f2:	ea02 0103 	and.w	r1, r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f100 0210 	add.w	r2, r0, #16
 80009fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000a00:	7afb      	ldrb	r3, [r7, #11]
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3210      	adds	r2, #16
 8000a0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7a1b      	ldrb	r3, [r3, #8]
 8000a14:	4619      	mov	r1, r3
 8000a16:	7afb      	ldrb	r3, [r7, #11]
 8000a18:	f003 0307 	and.w	r3, r3, #7
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	7af9      	ldrb	r1, [r7, #11]
 8000a24:	08c9      	lsrs	r1, r1, #3
 8000a26:	b2c9      	uxtb	r1, r1
 8000a28:	4608      	mov	r0, r1
 8000a2a:	ea42 0103 	orr.w	r1, r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f100 0210 	add.w	r2, r0, #16
 8000a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000a38:	7afb      	ldrb	r3, [r7, #11]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3204      	adds	r2, #4
 8000a44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	7afb      	ldrb	r3, [r7, #11]
 8000a50:	f003 0303 	and.w	r3, r3, #3
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	7af9      	ldrb	r1, [r7, #11]
 8000a5c:	0889      	lsrs	r1, r1, #2
 8000a5e:	b2c9      	uxtb	r1, r1
 8000a60:	4608      	mov	r0, r1
 8000a62:	ea42 0103 	orr.w	r1, r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	1d02      	adds	r2, r0, #4
 8000a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	48028e00 	.word	0x48028e00
 8000a80:	48028f00 	.word	0x48028f00

08000a84 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
 8000a90:	4613      	mov	r3, r2
 8000a92:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3210      	adds	r2, #16
 8000aa0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	2107      	movs	r1, #7
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	78f9      	ldrb	r1, [r7, #3]
 8000ab6:	08c9      	lsrs	r1, r1, #3
 8000ab8:	b2c9      	uxtb	r1, r1
 8000aba:	4608      	mov	r0, r1
 8000abc:	ea02 0103 	and.w	r1, r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f100 0210 	add.w	r2, r0, #16
 8000ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000aca:	78fb      	ldrb	r3, [r7, #3]
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3210      	adds	r2, #16
 8000ad6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ada:	78b9      	ldrb	r1, [r7, #2]
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	78f9      	ldrb	r1, [r7, #3]
 8000aea:	08c9      	lsrs	r1, r1, #3
 8000aec:	b2c9      	uxtb	r1, r1
 8000aee:	4608      	mov	r0, r1
 8000af0:	ea42 0103 	orr.w	r1, r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f100 0210 	add.w	r2, r0, #16
 8000afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e003      	b.n	8000b20 <delay+0x16>
  {
    __NOP();
 8000b18:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <delay+0xe>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000b38:	b598      	push	{r3, r4, r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <SystemInit+0x20>)
 8000b3e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b42:	4614      	mov	r4, r2
 8000b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8000b4a:	f000 f807 	bl	8000b5c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000b4e:	f000 f841 	bl	8000bd4 <SystemCoreClockSetup>
}
 8000b52:	bf00      	nop
 8000b54:	bd98      	pop	{r3, r4, r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000ffc4 	.word	0x2000ffc4

08000b5c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b62:	b672      	cpsid	i
}
 8000b64:	bf00      	nop
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <SystemCoreSetup+0x6c>)
 8000b68:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <SystemCoreSetup+0x70>)
 8000b6a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6c:	f3bf 8f4f 	dsb	sy
}
 8000b70:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000b72:	b662      	cpsie	i
}
 8000b74:	bf00      	nop
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <SystemCoreSetup+0x6c>)
 8000b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <SystemCoreSetup+0x6c>)
 8000b7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <SystemCoreSetup+0x6c>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <SystemCoreSetup+0x6c>)
 8000b8c:	f023 0308 	bic.w	r3, r3, #8
 8000b90:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <SystemCoreSetup+0x74>)
 8000b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b98:	3314      	adds	r3, #20
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f023 030f 	bic.w	r3, r3, #15
 8000ba4:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f043 0303 	orr.w	r3, r3, #3
 8000bac:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <SystemCoreSetup+0x74>)
 8000bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bb4:	3314      	adds	r3, #20
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	08000000 	.word	0x08000000
 8000bd0:	58001000 	.word	0x58001000

08000bd4 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000bd8:	4b75      	ldr	r3, [pc, #468]	; (8000db0 <SystemCoreClockSetup+0x1dc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d10c      	bne.n	8000bfe <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000be4:	4b72      	ldr	r3, [pc, #456]	; (8000db0 <SystemCoreClockSetup+0x1dc>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	4a71      	ldr	r2, [pc, #452]	; (8000db0 <SystemCoreClockSetup+0x1dc>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000bf0:	bf00      	nop
 8000bf2:	4b6f      	ldr	r3, [pc, #444]	; (8000db0 <SystemCoreClockSetup+0x1dc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f9      	beq.n	8000bf2 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000bfe:	4b6d      	ldr	r3, [pc, #436]	; (8000db4 <SystemCoreClockSetup+0x1e0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d009      	beq.n	8000c1e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8000c0a:	4b6a      	ldr	r3, [pc, #424]	; (8000db4 <SystemCoreClockSetup+0x1e0>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	4a69      	ldr	r2, [pc, #420]	; (8000db4 <SystemCoreClockSetup+0x1e0>)
 8000c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c14:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000c16:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8000c1a:	f7ff ff76 	bl	8000b0a <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8000c1e:	4b66      	ldr	r3, [pc, #408]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	4a65      	ldr	r2, [pc, #404]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c28:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8000c2a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000c2e:	f7ff ff6c 	bl	8000b0a <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c32:	4b61      	ldr	r3, [pc, #388]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	4a60      	ldr	r2, [pc, #384]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c3c:	f023 0302 	bic.w	r3, r3, #2
 8000c40:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000c42:	4b5e      	ldr	r3, [pc, #376]	; (8000dbc <SystemCoreClockSetup+0x1e8>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d029      	beq.n	8000ca2 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8000c4e:	4b5b      	ldr	r3, [pc, #364]	; (8000dbc <SystemCoreClockSetup+0x1e8>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a5a      	ldr	r2, [pc, #360]	; (8000dbc <SystemCoreClockSetup+0x1e8>)
 8000c54:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000c58:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c5c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8000c5e:	f000 f927 	bl	8000eb0 <OSCHP_GetFrequency>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4a56      	ldr	r2, [pc, #344]	; (8000dc0 <SystemCoreClockSetup+0x1ec>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	0d1b      	lsrs	r3, r3, #20
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	041a      	lsls	r2, r3, #16
 8000c70:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <SystemCoreClockSetup+0x1e8>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4951      	ldr	r1, [pc, #324]	; (8000dbc <SystemCoreClockSetup+0x1e8>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8000c7a:	4b4f      	ldr	r3, [pc, #316]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	4a4e      	ldr	r2, [pc, #312]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c86:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4a4b      	ldr	r2, [pc, #300]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000c8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c90:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000c92:	bf00      	nop
 8000c94:	4b48      	ldr	r3, [pc, #288]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c9c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000ca0:	d1f8      	bne.n	8000c94 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ca2:	4b45      	ldr	r3, [pc, #276]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a44      	ldr	r2, [pc, #272]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cae:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	4a41      	ldr	r2, [pc, #260]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000cba:	4b3f      	ldr	r3, [pc, #252]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000cbc:	4a41      	ldr	r2, [pc, #260]	; (8000dc4 <SystemCoreClockSetup+0x1f0>)
 8000cbe:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000cc0:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4a3c      	ldr	r2, [pc, #240]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cca:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000ccc:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a39      	ldr	r2, [pc, #228]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000cd2:	f023 0310 	bic.w	r3, r3, #16
 8000cd6:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000cd8:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a36      	ldr	r2, [pc, #216]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce2:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000ce4:	bf00      	nop
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f9      	beq.n	8000ce6 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4a30      	ldr	r2, [pc, #192]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000cf8:	f023 0301 	bic.w	r3, r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000cfe:	bf00      	nop
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f9      	bne.n	8000d00 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <SystemCoreClockSetup+0x1f4>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	4a2d      	ldr	r2, [pc, #180]	; (8000dc8 <SystemCoreClockSetup+0x1f4>)
 8000d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d16:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <SystemCoreClockSetup+0x1f4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <SystemCoreClockSetup+0x1f4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <SystemCoreClockSetup+0x1f4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <SystemCoreClockSetup+0x1f4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <SystemCoreClockSetup+0x1f4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <SystemCoreClockSetup+0x1f4>)
 8000d38:	2203      	movs	r2, #3
 8000d3a:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d46:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000d4a:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <SystemCoreClockSetup+0x1f8>)
 8000d4c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8000d4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d52:	f7ff feda 	bl	8000b0a <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d56:	bf00      	nop
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f9      	beq.n	8000d58 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000d66:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <SystemCoreClockSetup+0x1fc>)
 8000d68:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8000d6a:	f241 1094 	movw	r0, #4500	; 0x1194
 8000d6e:	f7ff fecc 	bl	8000b0a <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d72:	bf00      	nop
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f9      	beq.n	8000d74 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <SystemCoreClockSetup+0x200>)
 8000d84:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8000d86:	f241 7070 	movw	r0, #6000	; 0x1770
 8000d8a:	f7ff febe 	bl	8000b0a <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d8e:	bf00      	nop
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <SystemCoreClockSetup+0x1e4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f9      	beq.n	8000d90 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <SystemCoreClockSetup+0x204>)
 8000d9e:	2205      	movs	r2, #5
 8000da0:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <SystemCoreClockSetup+0x1f4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000da8:	f000 f818 	bl	8000ddc <SystemCoreClockUpdate>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	50004200 	.word	0x50004200
 8000db4:	50004400 	.word	0x50004400
 8000db8:	50004710 	.word	0x50004710
 8000dbc:	50004700 	.word	0x50004700
 8000dc0:	6b5fca6b 	.word	0x6b5fca6b
 8000dc4:	01134f00 	.word	0x01134f00
 8000dc8:	50004600 	.word	0x50004600
 8000dcc:	01074f00 	.word	0x01074f00
 8000dd0:	01044f00 	.word	0x01044f00
 8000dd4:	01034f00 	.word	0x01034f00
 8000dd8:	50004160 	.word	0x50004160

08000ddc <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <SystemCoreClockUpdate+0xc4>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d03e      	beq.n	8000e6c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000dee:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <SystemCoreClockUpdate+0xc8>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <SystemCoreClockUpdate+0xcc>)
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	e002      	b.n	8000e06 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000e00:	f000 f856 	bl	8000eb0 <OSCHP_GetFrequency>
 8000e04:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <SystemCoreClockUpdate+0xc8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d020      	beq.n	8000e54 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <SystemCoreClockUpdate+0xc8>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	0e1b      	lsrs	r3, r3, #24
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <SystemCoreClockUpdate+0xc8>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <SystemCoreClockUpdate+0xc8>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	fb02 f303 	mul.w	r3, r2, r3
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	fb02 f303 	mul.w	r3, r2, r3
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	e00d      	b.n	8000e70 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <SystemCoreClockUpdate+0xc8>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	e001      	b.n	8000e70 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <SystemCoreClockUpdate+0xcc>)
 8000e6e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <SystemCoreClockUpdate+0xc4>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	3301      	adds	r3, #1
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <SystemCoreClockUpdate+0xc4>)
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	3301      	adds	r3, #1
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e90:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000e92:	4a06      	ldr	r2, [pc, #24]	; (8000eac <SystemCoreClockUpdate+0xd0>)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	50004600 	.word	0x50004600
 8000ea4:	50004710 	.word	0x50004710
 8000ea8:	016e3600 	.word	0x016e3600
 8000eac:	2000ffc0 	.word	0x2000ffc0

08000eb0 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8000eb4:	4b02      	ldr	r3, [pc, #8]	; (8000ec0 <OSCHP_GetFrequency+0x10>)
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	00b71b00 	.word	0x00b71b00

08000ec4 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <_sbrk+0x5c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <_sbrk+0x5c>)
 8000ed6:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <_sbrk+0x60>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x5c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3303      	adds	r3, #3
 8000ee4:	f023 0303 	bic.w	r3, r3, #3
 8000ee8:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <_sbrk+0x5c>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <_sbrk+0x64>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <_sbrk+0x5c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <_sbrk+0x5c>)
 8000f02:	6013      	str	r3, [r2, #0]
    return (base);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	e006      	b.n	8000f16 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8000f08:	f000 fc36 	bl	8001778 <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20003edc 	.word	0x20003edc
 8000f24:	200040d8 	.word	0x200040d8
 8000f28:	2000ffc0 	.word	0x2000ffc0

08000f2c <_init>:

/* Init */
void _init(void)
{}
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <__aeabi_drsub>:
 8000f3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000f40:	e002      	b.n	8000f48 <__adddf3>
 8000f42:	bf00      	nop

08000f44 <__aeabi_dsub>:
 8000f44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000f48 <__adddf3>:
 8000f48:	b530      	push	{r4, r5, lr}
 8000f4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000f4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000f52:	ea94 0f05 	teq	r4, r5
 8000f56:	bf08      	it	eq
 8000f58:	ea90 0f02 	teqeq	r0, r2
 8000f5c:	bf1f      	itttt	ne
 8000f5e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000f62:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000f66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000f6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000f6e:	f000 80e2 	beq.w	8001136 <__adddf3+0x1ee>
 8000f72:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000f76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000f7a:	bfb8      	it	lt
 8000f7c:	426d      	neglt	r5, r5
 8000f7e:	dd0c      	ble.n	8000f9a <__adddf3+0x52>
 8000f80:	442c      	add	r4, r5
 8000f82:	ea80 0202 	eor.w	r2, r0, r2
 8000f86:	ea81 0303 	eor.w	r3, r1, r3
 8000f8a:	ea82 0000 	eor.w	r0, r2, r0
 8000f8e:	ea83 0101 	eor.w	r1, r3, r1
 8000f92:	ea80 0202 	eor.w	r2, r0, r2
 8000f96:	ea81 0303 	eor.w	r3, r1, r3
 8000f9a:	2d36      	cmp	r5, #54	; 0x36
 8000f9c:	bf88      	it	hi
 8000f9e:	bd30      	pophi	{r4, r5, pc}
 8000fa0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000fa4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000fa8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000fac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000fb0:	d002      	beq.n	8000fb8 <__adddf3+0x70>
 8000fb2:	4240      	negs	r0, r0
 8000fb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000fbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000fc0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000fc4:	d002      	beq.n	8000fcc <__adddf3+0x84>
 8000fc6:	4252      	negs	r2, r2
 8000fc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fcc:	ea94 0f05 	teq	r4, r5
 8000fd0:	f000 80a7 	beq.w	8001122 <__adddf3+0x1da>
 8000fd4:	f1a4 0401 	sub.w	r4, r4, #1
 8000fd8:	f1d5 0e20 	rsbs	lr, r5, #32
 8000fdc:	db0d      	blt.n	8000ffa <__adddf3+0xb2>
 8000fde:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000fe2:	fa22 f205 	lsr.w	r2, r2, r5
 8000fe6:	1880      	adds	r0, r0, r2
 8000fe8:	f141 0100 	adc.w	r1, r1, #0
 8000fec:	fa03 f20e 	lsl.w	r2, r3, lr
 8000ff0:	1880      	adds	r0, r0, r2
 8000ff2:	fa43 f305 	asr.w	r3, r3, r5
 8000ff6:	4159      	adcs	r1, r3
 8000ff8:	e00e      	b.n	8001018 <__adddf3+0xd0>
 8000ffa:	f1a5 0520 	sub.w	r5, r5, #32
 8000ffe:	f10e 0e20 	add.w	lr, lr, #32
 8001002:	2a01      	cmp	r2, #1
 8001004:	fa03 fc0e 	lsl.w	ip, r3, lr
 8001008:	bf28      	it	cs
 800100a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800100e:	fa43 f305 	asr.w	r3, r3, r5
 8001012:	18c0      	adds	r0, r0, r3
 8001014:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8001018:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800101c:	d507      	bpl.n	800102e <__adddf3+0xe6>
 800101e:	f04f 0e00 	mov.w	lr, #0
 8001022:	f1dc 0c00 	rsbs	ip, ip, #0
 8001026:	eb7e 0000 	sbcs.w	r0, lr, r0
 800102a:	eb6e 0101 	sbc.w	r1, lr, r1
 800102e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001032:	d31b      	bcc.n	800106c <__adddf3+0x124>
 8001034:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8001038:	d30c      	bcc.n	8001054 <__adddf3+0x10c>
 800103a:	0849      	lsrs	r1, r1, #1
 800103c:	ea5f 0030 	movs.w	r0, r0, rrx
 8001040:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8001044:	f104 0401 	add.w	r4, r4, #1
 8001048:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800104c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8001050:	f080 809a 	bcs.w	8001188 <__adddf3+0x240>
 8001054:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8001058:	bf08      	it	eq
 800105a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800105e:	f150 0000 	adcs.w	r0, r0, #0
 8001062:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001066:	ea41 0105 	orr.w	r1, r1, r5
 800106a:	bd30      	pop	{r4, r5, pc}
 800106c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001070:	4140      	adcs	r0, r0
 8001072:	eb41 0101 	adc.w	r1, r1, r1
 8001076:	3c01      	subs	r4, #1
 8001078:	bf28      	it	cs
 800107a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800107e:	d2e9      	bcs.n	8001054 <__adddf3+0x10c>
 8001080:	f091 0f00 	teq	r1, #0
 8001084:	bf04      	itt	eq
 8001086:	4601      	moveq	r1, r0
 8001088:	2000      	moveq	r0, #0
 800108a:	fab1 f381 	clz	r3, r1
 800108e:	bf08      	it	eq
 8001090:	3320      	addeq	r3, #32
 8001092:	f1a3 030b 	sub.w	r3, r3, #11
 8001096:	f1b3 0220 	subs.w	r2, r3, #32
 800109a:	da0c      	bge.n	80010b6 <__adddf3+0x16e>
 800109c:	320c      	adds	r2, #12
 800109e:	dd08      	ble.n	80010b2 <__adddf3+0x16a>
 80010a0:	f102 0c14 	add.w	ip, r2, #20
 80010a4:	f1c2 020c 	rsb	r2, r2, #12
 80010a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80010ac:	fa21 f102 	lsr.w	r1, r1, r2
 80010b0:	e00c      	b.n	80010cc <__adddf3+0x184>
 80010b2:	f102 0214 	add.w	r2, r2, #20
 80010b6:	bfd8      	it	le
 80010b8:	f1c2 0c20 	rsble	ip, r2, #32
 80010bc:	fa01 f102 	lsl.w	r1, r1, r2
 80010c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80010c4:	bfdc      	itt	le
 80010c6:	ea41 010c 	orrle.w	r1, r1, ip
 80010ca:	4090      	lslle	r0, r2
 80010cc:	1ae4      	subs	r4, r4, r3
 80010ce:	bfa2      	ittt	ge
 80010d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80010d4:	4329      	orrge	r1, r5
 80010d6:	bd30      	popge	{r4, r5, pc}
 80010d8:	ea6f 0404 	mvn.w	r4, r4
 80010dc:	3c1f      	subs	r4, #31
 80010de:	da1c      	bge.n	800111a <__adddf3+0x1d2>
 80010e0:	340c      	adds	r4, #12
 80010e2:	dc0e      	bgt.n	8001102 <__adddf3+0x1ba>
 80010e4:	f104 0414 	add.w	r4, r4, #20
 80010e8:	f1c4 0220 	rsb	r2, r4, #32
 80010ec:	fa20 f004 	lsr.w	r0, r0, r4
 80010f0:	fa01 f302 	lsl.w	r3, r1, r2
 80010f4:	ea40 0003 	orr.w	r0, r0, r3
 80010f8:	fa21 f304 	lsr.w	r3, r1, r4
 80010fc:	ea45 0103 	orr.w	r1, r5, r3
 8001100:	bd30      	pop	{r4, r5, pc}
 8001102:	f1c4 040c 	rsb	r4, r4, #12
 8001106:	f1c4 0220 	rsb	r2, r4, #32
 800110a:	fa20 f002 	lsr.w	r0, r0, r2
 800110e:	fa01 f304 	lsl.w	r3, r1, r4
 8001112:	ea40 0003 	orr.w	r0, r0, r3
 8001116:	4629      	mov	r1, r5
 8001118:	bd30      	pop	{r4, r5, pc}
 800111a:	fa21 f004 	lsr.w	r0, r1, r4
 800111e:	4629      	mov	r1, r5
 8001120:	bd30      	pop	{r4, r5, pc}
 8001122:	f094 0f00 	teq	r4, #0
 8001126:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800112a:	bf06      	itte	eq
 800112c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8001130:	3401      	addeq	r4, #1
 8001132:	3d01      	subne	r5, #1
 8001134:	e74e      	b.n	8000fd4 <__adddf3+0x8c>
 8001136:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800113a:	bf18      	it	ne
 800113c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001140:	d029      	beq.n	8001196 <__adddf3+0x24e>
 8001142:	ea94 0f05 	teq	r4, r5
 8001146:	bf08      	it	eq
 8001148:	ea90 0f02 	teqeq	r0, r2
 800114c:	d005      	beq.n	800115a <__adddf3+0x212>
 800114e:	ea54 0c00 	orrs.w	ip, r4, r0
 8001152:	bf04      	itt	eq
 8001154:	4619      	moveq	r1, r3
 8001156:	4610      	moveq	r0, r2
 8001158:	bd30      	pop	{r4, r5, pc}
 800115a:	ea91 0f03 	teq	r1, r3
 800115e:	bf1e      	ittt	ne
 8001160:	2100      	movne	r1, #0
 8001162:	2000      	movne	r0, #0
 8001164:	bd30      	popne	{r4, r5, pc}
 8001166:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800116a:	d105      	bne.n	8001178 <__adddf3+0x230>
 800116c:	0040      	lsls	r0, r0, #1
 800116e:	4149      	adcs	r1, r1
 8001170:	bf28      	it	cs
 8001172:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8001176:	bd30      	pop	{r4, r5, pc}
 8001178:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800117c:	bf3c      	itt	cc
 800117e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8001182:	bd30      	popcc	{r4, r5, pc}
 8001184:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001188:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800118c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001190:	f04f 0000 	mov.w	r0, #0
 8001194:	bd30      	pop	{r4, r5, pc}
 8001196:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800119a:	bf1a      	itte	ne
 800119c:	4619      	movne	r1, r3
 800119e:	4610      	movne	r0, r2
 80011a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80011a4:	bf1c      	itt	ne
 80011a6:	460b      	movne	r3, r1
 80011a8:	4602      	movne	r2, r0
 80011aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80011ae:	bf06      	itte	eq
 80011b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80011b4:	ea91 0f03 	teqeq	r1, r3
 80011b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80011bc:	bd30      	pop	{r4, r5, pc}
 80011be:	bf00      	nop

080011c0 <__aeabi_ui2d>:
 80011c0:	f090 0f00 	teq	r0, #0
 80011c4:	bf04      	itt	eq
 80011c6:	2100      	moveq	r1, #0
 80011c8:	4770      	bxeq	lr
 80011ca:	b530      	push	{r4, r5, lr}
 80011cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80011d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80011d4:	f04f 0500 	mov.w	r5, #0
 80011d8:	f04f 0100 	mov.w	r1, #0
 80011dc:	e750      	b.n	8001080 <__adddf3+0x138>
 80011de:	bf00      	nop

080011e0 <__aeabi_i2d>:
 80011e0:	f090 0f00 	teq	r0, #0
 80011e4:	bf04      	itt	eq
 80011e6:	2100      	moveq	r1, #0
 80011e8:	4770      	bxeq	lr
 80011ea:	b530      	push	{r4, r5, lr}
 80011ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80011f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80011f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80011f8:	bf48      	it	mi
 80011fa:	4240      	negmi	r0, r0
 80011fc:	f04f 0100 	mov.w	r1, #0
 8001200:	e73e      	b.n	8001080 <__adddf3+0x138>
 8001202:	bf00      	nop

08001204 <__aeabi_f2d>:
 8001204:	0042      	lsls	r2, r0, #1
 8001206:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800120a:	ea4f 0131 	mov.w	r1, r1, rrx
 800120e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8001212:	bf1f      	itttt	ne
 8001214:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8001218:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800121c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8001220:	4770      	bxne	lr
 8001222:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8001226:	bf08      	it	eq
 8001228:	4770      	bxeq	lr
 800122a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800122e:	bf04      	itt	eq
 8001230:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8001234:	4770      	bxeq	lr
 8001236:	b530      	push	{r4, r5, lr}
 8001238:	f44f 7460 	mov.w	r4, #896	; 0x380
 800123c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001240:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001244:	e71c      	b.n	8001080 <__adddf3+0x138>
 8001246:	bf00      	nop

08001248 <__aeabi_ul2d>:
 8001248:	ea50 0201 	orrs.w	r2, r0, r1
 800124c:	bf08      	it	eq
 800124e:	4770      	bxeq	lr
 8001250:	b530      	push	{r4, r5, lr}
 8001252:	f04f 0500 	mov.w	r5, #0
 8001256:	e00a      	b.n	800126e <__aeabi_l2d+0x16>

08001258 <__aeabi_l2d>:
 8001258:	ea50 0201 	orrs.w	r2, r0, r1
 800125c:	bf08      	it	eq
 800125e:	4770      	bxeq	lr
 8001260:	b530      	push	{r4, r5, lr}
 8001262:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8001266:	d502      	bpl.n	800126e <__aeabi_l2d+0x16>
 8001268:	4240      	negs	r0, r0
 800126a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800126e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001272:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001276:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800127a:	f43f aed8 	beq.w	800102e <__adddf3+0xe6>
 800127e:	f04f 0203 	mov.w	r2, #3
 8001282:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001286:	bf18      	it	ne
 8001288:	3203      	addne	r2, #3
 800128a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800128e:	bf18      	it	ne
 8001290:	3203      	addne	r2, #3
 8001292:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8001296:	f1c2 0320 	rsb	r3, r2, #32
 800129a:	fa00 fc03 	lsl.w	ip, r0, r3
 800129e:	fa20 f002 	lsr.w	r0, r0, r2
 80012a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80012a6:	ea40 000e 	orr.w	r0, r0, lr
 80012aa:	fa21 f102 	lsr.w	r1, r1, r2
 80012ae:	4414      	add	r4, r2
 80012b0:	e6bd      	b.n	800102e <__adddf3+0xe6>
 80012b2:	bf00      	nop

080012b4 <__aeabi_dmul>:
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80012ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80012be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80012c2:	bf1d      	ittte	ne
 80012c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80012c8:	ea94 0f0c 	teqne	r4, ip
 80012cc:	ea95 0f0c 	teqne	r5, ip
 80012d0:	f000 f8de 	bleq	8001490 <__aeabi_dmul+0x1dc>
 80012d4:	442c      	add	r4, r5
 80012d6:	ea81 0603 	eor.w	r6, r1, r3
 80012da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80012de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80012e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80012e6:	bf18      	it	ne
 80012e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80012ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80012f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012f4:	d038      	beq.n	8001368 <__aeabi_dmul+0xb4>
 80012f6:	fba0 ce02 	umull	ip, lr, r0, r2
 80012fa:	f04f 0500 	mov.w	r5, #0
 80012fe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001302:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8001306:	fbe0 e503 	umlal	lr, r5, r0, r3
 800130a:	f04f 0600 	mov.w	r6, #0
 800130e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8001312:	f09c 0f00 	teq	ip, #0
 8001316:	bf18      	it	ne
 8001318:	f04e 0e01 	orrne.w	lr, lr, #1
 800131c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8001320:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001324:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8001328:	d204      	bcs.n	8001334 <__aeabi_dmul+0x80>
 800132a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800132e:	416d      	adcs	r5, r5
 8001330:	eb46 0606 	adc.w	r6, r6, r6
 8001334:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8001338:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800133c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001340:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001344:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8001348:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800134c:	bf88      	it	hi
 800134e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001352:	d81e      	bhi.n	8001392 <__aeabi_dmul+0xde>
 8001354:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8001358:	bf08      	it	eq
 800135a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800135e:	f150 0000 	adcs.w	r0, r0, #0
 8001362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001366:	bd70      	pop	{r4, r5, r6, pc}
 8001368:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800136c:	ea46 0101 	orr.w	r1, r6, r1
 8001370:	ea40 0002 	orr.w	r0, r0, r2
 8001374:	ea81 0103 	eor.w	r1, r1, r3
 8001378:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800137c:	bfc2      	ittt	gt
 800137e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001382:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001386:	bd70      	popgt	{r4, r5, r6, pc}
 8001388:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800138c:	f04f 0e00 	mov.w	lr, #0
 8001390:	3c01      	subs	r4, #1
 8001392:	f300 80ab 	bgt.w	80014ec <__aeabi_dmul+0x238>
 8001396:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800139a:	bfde      	ittt	le
 800139c:	2000      	movle	r0, #0
 800139e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80013a2:	bd70      	pople	{r4, r5, r6, pc}
 80013a4:	f1c4 0400 	rsb	r4, r4, #0
 80013a8:	3c20      	subs	r4, #32
 80013aa:	da35      	bge.n	8001418 <__aeabi_dmul+0x164>
 80013ac:	340c      	adds	r4, #12
 80013ae:	dc1b      	bgt.n	80013e8 <__aeabi_dmul+0x134>
 80013b0:	f104 0414 	add.w	r4, r4, #20
 80013b4:	f1c4 0520 	rsb	r5, r4, #32
 80013b8:	fa00 f305 	lsl.w	r3, r0, r5
 80013bc:	fa20 f004 	lsr.w	r0, r0, r4
 80013c0:	fa01 f205 	lsl.w	r2, r1, r5
 80013c4:	ea40 0002 	orr.w	r0, r0, r2
 80013c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80013cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80013d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80013d4:	fa21 f604 	lsr.w	r6, r1, r4
 80013d8:	eb42 0106 	adc.w	r1, r2, r6
 80013dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80013e0:	bf08      	it	eq
 80013e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
 80013e8:	f1c4 040c 	rsb	r4, r4, #12
 80013ec:	f1c4 0520 	rsb	r5, r4, #32
 80013f0:	fa00 f304 	lsl.w	r3, r0, r4
 80013f4:	fa20 f005 	lsr.w	r0, r0, r5
 80013f8:	fa01 f204 	lsl.w	r2, r1, r4
 80013fc:	ea40 0002 	orr.w	r0, r0, r2
 8001400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001404:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001408:	f141 0100 	adc.w	r1, r1, #0
 800140c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001410:	bf08      	it	eq
 8001412:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	f1c4 0520 	rsb	r5, r4, #32
 800141c:	fa00 f205 	lsl.w	r2, r0, r5
 8001420:	ea4e 0e02 	orr.w	lr, lr, r2
 8001424:	fa20 f304 	lsr.w	r3, r0, r4
 8001428:	fa01 f205 	lsl.w	r2, r1, r5
 800142c:	ea43 0302 	orr.w	r3, r3, r2
 8001430:	fa21 f004 	lsr.w	r0, r1, r4
 8001434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001438:	fa21 f204 	lsr.w	r2, r1, r4
 800143c:	ea20 0002 	bic.w	r0, r0, r2
 8001440:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8001444:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001448:	bf08      	it	eq
 800144a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800144e:	bd70      	pop	{r4, r5, r6, pc}
 8001450:	f094 0f00 	teq	r4, #0
 8001454:	d10f      	bne.n	8001476 <__aeabi_dmul+0x1c2>
 8001456:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800145a:	0040      	lsls	r0, r0, #1
 800145c:	eb41 0101 	adc.w	r1, r1, r1
 8001460:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001464:	bf08      	it	eq
 8001466:	3c01      	subeq	r4, #1
 8001468:	d0f7      	beq.n	800145a <__aeabi_dmul+0x1a6>
 800146a:	ea41 0106 	orr.w	r1, r1, r6
 800146e:	f095 0f00 	teq	r5, #0
 8001472:	bf18      	it	ne
 8001474:	4770      	bxne	lr
 8001476:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800147a:	0052      	lsls	r2, r2, #1
 800147c:	eb43 0303 	adc.w	r3, r3, r3
 8001480:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001484:	bf08      	it	eq
 8001486:	3d01      	subeq	r5, #1
 8001488:	d0f7      	beq.n	800147a <__aeabi_dmul+0x1c6>
 800148a:	ea43 0306 	orr.w	r3, r3, r6
 800148e:	4770      	bx	lr
 8001490:	ea94 0f0c 	teq	r4, ip
 8001494:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001498:	bf18      	it	ne
 800149a:	ea95 0f0c 	teqne	r5, ip
 800149e:	d00c      	beq.n	80014ba <__aeabi_dmul+0x206>
 80014a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80014a4:	bf18      	it	ne
 80014a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80014aa:	d1d1      	bne.n	8001450 <__aeabi_dmul+0x19c>
 80014ac:	ea81 0103 	eor.w	r1, r1, r3
 80014b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80014b4:	f04f 0000 	mov.w	r0, #0
 80014b8:	bd70      	pop	{r4, r5, r6, pc}
 80014ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80014be:	bf06      	itte	eq
 80014c0:	4610      	moveq	r0, r2
 80014c2:	4619      	moveq	r1, r3
 80014c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80014c8:	d019      	beq.n	80014fe <__aeabi_dmul+0x24a>
 80014ca:	ea94 0f0c 	teq	r4, ip
 80014ce:	d102      	bne.n	80014d6 <__aeabi_dmul+0x222>
 80014d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80014d4:	d113      	bne.n	80014fe <__aeabi_dmul+0x24a>
 80014d6:	ea95 0f0c 	teq	r5, ip
 80014da:	d105      	bne.n	80014e8 <__aeabi_dmul+0x234>
 80014dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80014e0:	bf1c      	itt	ne
 80014e2:	4610      	movne	r0, r2
 80014e4:	4619      	movne	r1, r3
 80014e6:	d10a      	bne.n	80014fe <__aeabi_dmul+0x24a>
 80014e8:	ea81 0103 	eor.w	r1, r1, r3
 80014ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80014f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80014f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80014f8:	f04f 0000 	mov.w	r0, #0
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
 80014fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001502:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8001506:	bd70      	pop	{r4, r5, r6, pc}

08001508 <__aeabi_ddiv>:
 8001508:	b570      	push	{r4, r5, r6, lr}
 800150a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800150e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001516:	bf1d      	ittte	ne
 8001518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800151c:	ea94 0f0c 	teqne	r4, ip
 8001520:	ea95 0f0c 	teqne	r5, ip
 8001524:	f000 f8a7 	bleq	8001676 <__aeabi_ddiv+0x16e>
 8001528:	eba4 0405 	sub.w	r4, r4, r5
 800152c:	ea81 0e03 	eor.w	lr, r1, r3
 8001530:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001534:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001538:	f000 8088 	beq.w	800164c <__aeabi_ddiv+0x144>
 800153c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001540:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8001544:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8001548:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800154c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001550:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001554:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8001558:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800155c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8001560:	429d      	cmp	r5, r3
 8001562:	bf08      	it	eq
 8001564:	4296      	cmpeq	r6, r2
 8001566:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800156a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800156e:	d202      	bcs.n	8001576 <__aeabi_ddiv+0x6e>
 8001570:	085b      	lsrs	r3, r3, #1
 8001572:	ea4f 0232 	mov.w	r2, r2, rrx
 8001576:	1ab6      	subs	r6, r6, r2
 8001578:	eb65 0503 	sbc.w	r5, r5, r3
 800157c:	085b      	lsrs	r3, r3, #1
 800157e:	ea4f 0232 	mov.w	r2, r2, rrx
 8001582:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001586:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800158a:	ebb6 0e02 	subs.w	lr, r6, r2
 800158e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001592:	bf22      	ittt	cs
 8001594:	1ab6      	subcs	r6, r6, r2
 8001596:	4675      	movcs	r5, lr
 8001598:	ea40 000c 	orrcs.w	r0, r0, ip
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	ea4f 0232 	mov.w	r2, r2, rrx
 80015a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80015a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80015aa:	bf22      	ittt	cs
 80015ac:	1ab6      	subcs	r6, r6, r2
 80015ae:	4675      	movcs	r5, lr
 80015b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80015b4:	085b      	lsrs	r3, r3, #1
 80015b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80015ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80015be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80015c2:	bf22      	ittt	cs
 80015c4:	1ab6      	subcs	r6, r6, r2
 80015c6:	4675      	movcs	r5, lr
 80015c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80015d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80015d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80015da:	bf22      	ittt	cs
 80015dc:	1ab6      	subcs	r6, r6, r2
 80015de:	4675      	movcs	r5, lr
 80015e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80015e4:	ea55 0e06 	orrs.w	lr, r5, r6
 80015e8:	d018      	beq.n	800161c <__aeabi_ddiv+0x114>
 80015ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80015ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80015f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80015f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80015fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80015fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001602:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8001606:	d1c0      	bne.n	800158a <__aeabi_ddiv+0x82>
 8001608:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800160c:	d10b      	bne.n	8001626 <__aeabi_ddiv+0x11e>
 800160e:	ea41 0100 	orr.w	r1, r1, r0
 8001612:	f04f 0000 	mov.w	r0, #0
 8001616:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800161a:	e7b6      	b.n	800158a <__aeabi_ddiv+0x82>
 800161c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001620:	bf04      	itt	eq
 8001622:	4301      	orreq	r1, r0
 8001624:	2000      	moveq	r0, #0
 8001626:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800162a:	bf88      	it	hi
 800162c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001630:	f63f aeaf 	bhi.w	8001392 <__aeabi_dmul+0xde>
 8001634:	ebb5 0c03 	subs.w	ip, r5, r3
 8001638:	bf04      	itt	eq
 800163a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800163e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001642:	f150 0000 	adcs.w	r0, r0, #0
 8001646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800164a:	bd70      	pop	{r4, r5, r6, pc}
 800164c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8001650:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001654:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001658:	bfc2      	ittt	gt
 800165a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800165e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001662:	bd70      	popgt	{r4, r5, r6, pc}
 8001664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001668:	f04f 0e00 	mov.w	lr, #0
 800166c:	3c01      	subs	r4, #1
 800166e:	e690      	b.n	8001392 <__aeabi_dmul+0xde>
 8001670:	ea45 0e06 	orr.w	lr, r5, r6
 8001674:	e68d      	b.n	8001392 <__aeabi_dmul+0xde>
 8001676:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800167a:	ea94 0f0c 	teq	r4, ip
 800167e:	bf08      	it	eq
 8001680:	ea95 0f0c 	teqeq	r5, ip
 8001684:	f43f af3b 	beq.w	80014fe <__aeabi_dmul+0x24a>
 8001688:	ea94 0f0c 	teq	r4, ip
 800168c:	d10a      	bne.n	80016a4 <__aeabi_ddiv+0x19c>
 800168e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001692:	f47f af34 	bne.w	80014fe <__aeabi_dmul+0x24a>
 8001696:	ea95 0f0c 	teq	r5, ip
 800169a:	f47f af25 	bne.w	80014e8 <__aeabi_dmul+0x234>
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	e72c      	b.n	80014fe <__aeabi_dmul+0x24a>
 80016a4:	ea95 0f0c 	teq	r5, ip
 80016a8:	d106      	bne.n	80016b8 <__aeabi_ddiv+0x1b0>
 80016aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80016ae:	f43f aefd 	beq.w	80014ac <__aeabi_dmul+0x1f8>
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	e722      	b.n	80014fe <__aeabi_dmul+0x24a>
 80016b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80016bc:	bf18      	it	ne
 80016be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80016c2:	f47f aec5 	bne.w	8001450 <__aeabi_dmul+0x19c>
 80016c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80016ca:	f47f af0d 	bne.w	80014e8 <__aeabi_dmul+0x234>
 80016ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80016d2:	f47f aeeb 	bne.w	80014ac <__aeabi_dmul+0x1f8>
 80016d6:	e712      	b.n	80014fe <__aeabi_dmul+0x24a>

080016d8 <__aeabi_d2f>:
 80016d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80016dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80016e0:	bf24      	itt	cs
 80016e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80016e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80016ea:	d90d      	bls.n	8001708 <__aeabi_d2f+0x30>
 80016ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80016f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80016f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80016f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80016fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8001700:	bf08      	it	eq
 8001702:	f020 0001 	biceq.w	r0, r0, #1
 8001706:	4770      	bx	lr
 8001708:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800170c:	d121      	bne.n	8001752 <__aeabi_d2f+0x7a>
 800170e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8001712:	bfbc      	itt	lt
 8001714:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8001718:	4770      	bxlt	lr
 800171a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800171e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8001722:	f1c2 0218 	rsb	r2, r2, #24
 8001726:	f1c2 0c20 	rsb	ip, r2, #32
 800172a:	fa10 f30c 	lsls.w	r3, r0, ip
 800172e:	fa20 f002 	lsr.w	r0, r0, r2
 8001732:	bf18      	it	ne
 8001734:	f040 0001 	orrne.w	r0, r0, #1
 8001738:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800173c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001740:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001744:	ea40 000c 	orr.w	r0, r0, ip
 8001748:	fa23 f302 	lsr.w	r3, r3, r2
 800174c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001750:	e7cc      	b.n	80016ec <__aeabi_d2f+0x14>
 8001752:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8001756:	d107      	bne.n	8001768 <__aeabi_d2f+0x90>
 8001758:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800175c:	bf1e      	ittt	ne
 800175e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8001762:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8001766:	4770      	bxne	lr
 8001768:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800176c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001770:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <__errno>:
 8001778:	4b01      	ldr	r3, [pc, #4]	; (8001780 <__errno+0x8>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20003aa0 	.word	0x20003aa0

08001784 <__libc_init_array>:
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	4e0d      	ldr	r6, [pc, #52]	; (80017bc <__libc_init_array+0x38>)
 8001788:	4d0d      	ldr	r5, [pc, #52]	; (80017c0 <__libc_init_array+0x3c>)
 800178a:	1b76      	subs	r6, r6, r5
 800178c:	10b6      	asrs	r6, r6, #2
 800178e:	d006      	beq.n	800179e <__libc_init_array+0x1a>
 8001790:	2400      	movs	r4, #0
 8001792:	3401      	adds	r4, #1
 8001794:	f855 3b04 	ldr.w	r3, [r5], #4
 8001798:	4798      	blx	r3
 800179a:	42a6      	cmp	r6, r4
 800179c:	d1f9      	bne.n	8001792 <__libc_init_array+0xe>
 800179e:	4e09      	ldr	r6, [pc, #36]	; (80017c4 <__libc_init_array+0x40>)
 80017a0:	4d09      	ldr	r5, [pc, #36]	; (80017c8 <__libc_init_array+0x44>)
 80017a2:	1b76      	subs	r6, r6, r5
 80017a4:	f7ff fbc2 	bl	8000f2c <_init>
 80017a8:	10b6      	asrs	r6, r6, #2
 80017aa:	d006      	beq.n	80017ba <__libc_init_array+0x36>
 80017ac:	2400      	movs	r4, #0
 80017ae:	3401      	adds	r4, #1
 80017b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b4:	4798      	blx	r3
 80017b6:	42a6      	cmp	r6, r4
 80017b8:	d1f9      	bne.n	80017ae <__libc_init_array+0x2a>
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
 80017bc:	20003ed0 	.word	0x20003ed0
 80017c0:	20003ed0 	.word	0x20003ed0
 80017c4:	20003ed0 	.word	0x20003ed0
 80017c8:	20003ed0 	.word	0x20003ed0

080017cc <__itoa>:
 80017cc:	1e93      	subs	r3, r2, #2
 80017ce:	2b22      	cmp	r3, #34	; 0x22
 80017d0:	d815      	bhi.n	80017fe <__itoa+0x32>
 80017d2:	2a0a      	cmp	r2, #10
 80017d4:	b510      	push	{r4, lr}
 80017d6:	460b      	mov	r3, r1
 80017d8:	d005      	beq.n	80017e6 <__itoa+0x1a>
 80017da:	460c      	mov	r4, r1
 80017dc:	4619      	mov	r1, r3
 80017de:	f000 f89d 	bl	800191c <__utoa>
 80017e2:	4620      	mov	r0, r4
 80017e4:	bd10      	pop	{r4, pc}
 80017e6:	2800      	cmp	r0, #0
 80017e8:	daf7      	bge.n	80017da <__itoa+0xe>
 80017ea:	242d      	movs	r4, #45	; 0x2d
 80017ec:	f803 4b01 	strb.w	r4, [r3], #1
 80017f0:	4240      	negs	r0, r0
 80017f2:	460c      	mov	r4, r1
 80017f4:	4619      	mov	r1, r3
 80017f6:	f000 f891 	bl	800191c <__utoa>
 80017fa:	4620      	mov	r0, r4
 80017fc:	bd10      	pop	{r4, pc}
 80017fe:	2000      	movs	r0, #0
 8001800:	7008      	strb	r0, [r1, #0]
 8001802:	4770      	bx	lr

08001804 <itoa>:
 8001804:	f7ff bfe2 	b.w	80017cc <__itoa>
	...

08001840 <strlen>:
 8001840:	f890 f000 	pld	[r0]
 8001844:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001848:	f020 0107 	bic.w	r1, r0, #7
 800184c:	f06f 0c00 	mvn.w	ip, #0
 8001850:	f010 0407 	ands.w	r4, r0, #7
 8001854:	f891 f020 	pld	[r1, #32]
 8001858:	f040 8049 	bne.w	80018ee <strlen+0xae>
 800185c:	f04f 0400 	mov.w	r4, #0
 8001860:	f06f 0007 	mvn.w	r0, #7
 8001864:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001868:	f891 f040 	pld	[r1, #64]	; 0x40
 800186c:	f100 0008 	add.w	r0, r0, #8
 8001870:	fa82 f24c 	uadd8	r2, r2, ip
 8001874:	faa4 f28c 	sel	r2, r4, ip
 8001878:	fa83 f34c 	uadd8	r3, r3, ip
 800187c:	faa2 f38c 	sel	r3, r2, ip
 8001880:	bb4b      	cbnz	r3, 80018d6 <strlen+0x96>
 8001882:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001886:	fa82 f24c 	uadd8	r2, r2, ip
 800188a:	f100 0008 	add.w	r0, r0, #8
 800188e:	faa4 f28c 	sel	r2, r4, ip
 8001892:	fa83 f34c 	uadd8	r3, r3, ip
 8001896:	faa2 f38c 	sel	r3, r2, ip
 800189a:	b9e3      	cbnz	r3, 80018d6 <strlen+0x96>
 800189c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80018a0:	fa82 f24c 	uadd8	r2, r2, ip
 80018a4:	f100 0008 	add.w	r0, r0, #8
 80018a8:	faa4 f28c 	sel	r2, r4, ip
 80018ac:	fa83 f34c 	uadd8	r3, r3, ip
 80018b0:	faa2 f38c 	sel	r3, r2, ip
 80018b4:	b97b      	cbnz	r3, 80018d6 <strlen+0x96>
 80018b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80018ba:	f101 0120 	add.w	r1, r1, #32
 80018be:	fa82 f24c 	uadd8	r2, r2, ip
 80018c2:	f100 0008 	add.w	r0, r0, #8
 80018c6:	faa4 f28c 	sel	r2, r4, ip
 80018ca:	fa83 f34c 	uadd8	r3, r3, ip
 80018ce:	faa2 f38c 	sel	r3, r2, ip
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0c6      	beq.n	8001864 <strlen+0x24>
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	bf04      	itt	eq
 80018da:	3004      	addeq	r0, #4
 80018dc:	461a      	moveq	r2, r3
 80018de:	ba12      	rev	r2, r2
 80018e0:	fab2 f282 	clz	r2, r2
 80018e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80018e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80018ec:	4770      	bx	lr
 80018ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80018f2:	f004 0503 	and.w	r5, r4, #3
 80018f6:	f1c4 0000 	rsb	r0, r4, #0
 80018fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80018fe:	f014 0f04 	tst.w	r4, #4
 8001902:	f891 f040 	pld	[r1, #64]	; 0x40
 8001906:	fa0c f505 	lsl.w	r5, ip, r5
 800190a:	ea62 0205 	orn	r2, r2, r5
 800190e:	bf1c      	itt	ne
 8001910:	ea63 0305 	ornne	r3, r3, r5
 8001914:	4662      	movne	r2, ip
 8001916:	f04f 0400 	mov.w	r4, #0
 800191a:	e7a9      	b.n	8001870 <strlen+0x30>

0800191c <__utoa>:
 800191c:	b4f0      	push	{r4, r5, r6, r7}
 800191e:	f8df c084 	ldr.w	ip, [pc, #132]	; 80019a4 <__utoa+0x88>
 8001922:	4616      	mov	r6, r2
 8001924:	4604      	mov	r4, r0
 8001926:	460d      	mov	r5, r1
 8001928:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800192c:	b08a      	sub	sp, #40	; 0x28
 800192e:	466f      	mov	r7, sp
 8001930:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001932:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001936:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001938:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800193c:	1eb3      	subs	r3, r6, #2
 800193e:	f847 0b04 	str.w	r0, [r7], #4
 8001942:	2b22      	cmp	r3, #34	; 0x22
 8001944:	7039      	strb	r1, [r7, #0]
 8001946:	d828      	bhi.n	800199a <__utoa+0x7e>
 8001948:	1e6b      	subs	r3, r5, #1
 800194a:	469c      	mov	ip, r3
 800194c:	2700      	movs	r7, #0
 800194e:	e001      	b.n	8001954 <__utoa+0x38>
 8001950:	460f      	mov	r7, r1
 8001952:	4604      	mov	r4, r0
 8001954:	a90a      	add	r1, sp, #40	; 0x28
 8001956:	fbb4 f0f6 	udiv	r0, r4, r6
 800195a:	fb06 4210 	mls	r2, r6, r0, r4
 800195e:	440a      	add	r2, r1
 8001960:	42a6      	cmp	r6, r4
 8001962:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8001966:	f80c 2f01 	strb.w	r2, [ip, #1]!
 800196a:	f107 0101 	add.w	r1, r7, #1
 800196e:	d9ef      	bls.n	8001950 <__utoa+0x34>
 8001970:	2200      	movs	r2, #0
 8001972:	546a      	strb	r2, [r5, r1]
 8001974:	4429      	add	r1, r5
 8001976:	b167      	cbz	r7, 8001992 <__utoa+0x76>
 8001978:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 800197c:	785c      	ldrb	r4, [r3, #1]
 800197e:	705a      	strb	r2, [r3, #1]
 8001980:	1c98      	adds	r0, r3, #2
 8001982:	3301      	adds	r3, #1
 8001984:	43da      	mvns	r2, r3
 8001986:	442a      	add	r2, r5
 8001988:	1b40      	subs	r0, r0, r5
 800198a:	443a      	add	r2, r7
 800198c:	4290      	cmp	r0, r2
 800198e:	700c      	strb	r4, [r1, #0]
 8001990:	dbf2      	blt.n	8001978 <__utoa+0x5c>
 8001992:	4628      	mov	r0, r5
 8001994:	b00a      	add	sp, #40	; 0x28
 8001996:	bcf0      	pop	{r4, r5, r6, r7}
 8001998:	4770      	bx	lr
 800199a:	2000      	movs	r0, #0
 800199c:	7028      	strb	r0, [r5, #0]
 800199e:	b00a      	add	sp, #40	; 0x28
 80019a0:	bcf0      	pop	{r4, r5, r6, r7}
 80019a2:	4770      	bx	lr
 80019a4:	080019e0 	.word	0x080019e0

080019a8 <utoa>:
 80019a8:	f7ff bfb8 	b.w	800191c <__utoa>

080019ac <out_config>:
 80019ac:	0080 0000 0000 0001 0000 0000               ............

080019b8 <in_config>:
 80019b8:	0000 0000 0000 0001 0000 0000               ............

080019c4 <LED_config>:
 80019c4:	0080 0000 0000 0001 0000 0000 2049 4143     ............I CA
 80019d4:	204e 4f4d 5352 0045                         N MORSE.

080019dc <_global_impure_ptr>:
 80019dc:	3aa8 2000 3130 3332 3534 3736 3938 6261     .:. 0123456789ab
 80019ec:	6463 6665 6867 6a69 6c6b 6e6d 706f 7271     cdefghijklmnopqr
 80019fc:	7473 7675 7877 7a79 0000 0000               stuvwxyz....
